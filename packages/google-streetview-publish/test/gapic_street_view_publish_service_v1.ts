// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as streetviewpublishserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.StreetViewPublishServiceClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'streetviewpublish.googleapis.com');
    });

    it('has universeDomain', () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          streetviewpublishserviceModule.v1.StreetViewPublishServiceClient
            .servicePath;
        assert.strictEqual(servicePath, 'streetviewpublish.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          streetviewpublishserviceModule.v1.StreetViewPublishServiceClient
            .apiEndpoint;
        assert.strictEqual(apiEndpoint, 'streetviewpublish.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          universeDomain: 'example.com',
        });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'streetviewpublish.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          universe_domain: 'example.com',
        });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'streetviewpublish.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'streetviewpublish.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient(
              {universeDomain: 'configured.example.com'}
            );
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'streetviewpublish.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port =
        streetviewpublishserviceModule.v1.StreetViewPublishServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.streetViewPublishServiceStub, undefined);
      await client.initialize();
      assert(client.streetViewPublishServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.streetViewPublishServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.streetViewPublishServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('startUpload', () => {
    it('invokes startUpload without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(new protos.google.protobuf.Empty());
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.UploadRef()
      );
      client.innerApiCalls.startUpload = stubSimpleCall(expectedResponse);
      const [response] = await client.startUpload(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes startUpload without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(new protos.google.protobuf.Empty());
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.UploadRef()
      );
      client.innerApiCalls.startUpload =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.startUpload(
          request,
          (
            err?: Error | null,
            result?: protos.google.streetview.publish.v1.IUploadRef | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes startUpload with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(new protos.google.protobuf.Empty());
      const expectedError = new Error('expected');
      client.innerApiCalls.startUpload = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.startUpload(request), expectedError);
    });

    it('invokes startUpload with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(new protos.google.protobuf.Empty());
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.startUpload(request), expectedError);
    });
  });

  describe('createPhoto', () => {
    it('invokes createPhoto without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.CreatePhotoRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.Photo()
      );
      client.innerApiCalls.createPhoto = stubSimpleCall(expectedResponse);
      const [response] = await client.createPhoto(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes createPhoto without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.CreatePhotoRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.Photo()
      );
      client.innerApiCalls.createPhoto =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createPhoto(
          request,
          (
            err?: Error | null,
            result?: protos.google.streetview.publish.v1.IPhoto | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes createPhoto with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.CreatePhotoRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.createPhoto = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createPhoto(request), expectedError);
    });

    it('invokes createPhoto with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.CreatePhotoRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createPhoto(request), expectedError);
    });
  });

  describe('getPhoto', () => {
    it('invokes getPhoto without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.GetPhotoRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.GetPhotoRequest',
        ['photoId']
      );
      request.photoId = defaultValue1;
      const expectedHeaderRequestParams = `photo_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.Photo()
      );
      client.innerApiCalls.getPhoto = stubSimpleCall(expectedResponse);
      const [response] = await client.getPhoto(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPhoto as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhoto as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPhoto without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.GetPhotoRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.GetPhotoRequest',
        ['photoId']
      );
      request.photoId = defaultValue1;
      const expectedHeaderRequestParams = `photo_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.Photo()
      );
      client.innerApiCalls.getPhoto =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPhoto(
          request,
          (
            err?: Error | null,
            result?: protos.google.streetview.publish.v1.IPhoto | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPhoto as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhoto as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPhoto with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.GetPhotoRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.GetPhotoRequest',
        ['photoId']
      );
      request.photoId = defaultValue1;
      const expectedHeaderRequestParams = `photo_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPhoto = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getPhoto(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPhoto as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhoto as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPhoto with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.GetPhotoRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.GetPhotoRequest',
        ['photoId']
      );
      request.photoId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPhoto(request), expectedError);
    });
  });

  describe('batchGetPhotos', () => {
    it('invokes batchGetPhotos without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchGetPhotosRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchGetPhotosResponse()
      );
      client.innerApiCalls.batchGetPhotos = stubSimpleCall(expectedResponse);
      const [response] = await client.batchGetPhotos(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes batchGetPhotos without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchGetPhotosRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchGetPhotosResponse()
      );
      client.innerApiCalls.batchGetPhotos =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchGetPhotos(
          request,
          (
            err?: Error | null,
            result?: protos.google.streetview.publish.v1.IBatchGetPhotosResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes batchGetPhotos with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchGetPhotosRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.batchGetPhotos = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchGetPhotos(request), expectedError);
    });

    it('invokes batchGetPhotos with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchGetPhotosRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchGetPhotos(request), expectedError);
    });
  });

  describe('updatePhoto', () => {
    it('invokes updatePhoto without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.UpdatePhotoRequest()
      );
      request.photo ??= {};
      request.photo.photoId ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.UpdatePhotoRequest',
        ['photo', 'photoId', 'id']
      );
      request.photo.photoId.id = defaultValue1;
      const expectedHeaderRequestParams = `photo.photo_id.id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.Photo()
      );
      client.innerApiCalls.updatePhoto = stubSimpleCall(expectedResponse);
      const [response] = await client.updatePhoto(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePhoto as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePhoto as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePhoto without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.UpdatePhotoRequest()
      );
      request.photo ??= {};
      request.photo.photoId ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.UpdatePhotoRequest',
        ['photo', 'photoId', 'id']
      );
      request.photo.photoId.id = defaultValue1;
      const expectedHeaderRequestParams = `photo.photo_id.id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.Photo()
      );
      client.innerApiCalls.updatePhoto =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updatePhoto(
          request,
          (
            err?: Error | null,
            result?: protos.google.streetview.publish.v1.IPhoto | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePhoto as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePhoto as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePhoto with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.UpdatePhotoRequest()
      );
      request.photo ??= {};
      request.photo.photoId ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.UpdatePhotoRequest',
        ['photo', 'photoId', 'id']
      );
      request.photo.photoId.id = defaultValue1;
      const expectedHeaderRequestParams = `photo.photo_id.id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePhoto = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updatePhoto(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updatePhoto as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePhoto as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePhoto with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.UpdatePhotoRequest()
      );
      request.photo ??= {};
      request.photo.photoId ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.UpdatePhotoRequest',
        ['photo', 'photoId', 'id']
      );
      request.photo.photoId.id = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updatePhoto(request), expectedError);
    });
  });

  describe('batchUpdatePhotos', () => {
    it('invokes batchUpdatePhotos without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchUpdatePhotosRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchUpdatePhotosResponse()
      );
      client.innerApiCalls.batchUpdatePhotos = stubSimpleCall(expectedResponse);
      const [response] = await client.batchUpdatePhotos(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes batchUpdatePhotos without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchUpdatePhotosRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchUpdatePhotosResponse()
      );
      client.innerApiCalls.batchUpdatePhotos =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchUpdatePhotos(
          request,
          (
            err?: Error | null,
            result?: protos.google.streetview.publish.v1.IBatchUpdatePhotosResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes batchUpdatePhotos with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchUpdatePhotosRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.batchUpdatePhotos = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchUpdatePhotos(request), expectedError);
    });

    it('invokes batchUpdatePhotos with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchUpdatePhotosRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchUpdatePhotos(request), expectedError);
    });
  });

  describe('deletePhoto', () => {
    it('invokes deletePhoto without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.DeletePhotoRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.DeletePhotoRequest',
        ['photoId']
      );
      request.photoId = defaultValue1;
      const expectedHeaderRequestParams = `photo_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deletePhoto = stubSimpleCall(expectedResponse);
      const [response] = await client.deletePhoto(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePhoto as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePhoto as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePhoto without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.DeletePhotoRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.DeletePhotoRequest',
        ['photoId']
      );
      request.photoId = defaultValue1;
      const expectedHeaderRequestParams = `photo_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deletePhoto =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deletePhoto(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePhoto as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePhoto as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePhoto with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.DeletePhotoRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.DeletePhotoRequest',
        ['photoId']
      );
      request.photoId = defaultValue1;
      const expectedHeaderRequestParams = `photo_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePhoto = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deletePhoto(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePhoto as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePhoto as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePhoto with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.DeletePhotoRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.DeletePhotoRequest',
        ['photoId']
      );
      request.photoId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deletePhoto(request), expectedError);
    });
  });

  describe('batchDeletePhotos', () => {
    it('invokes batchDeletePhotos without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchDeletePhotosRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchDeletePhotosResponse()
      );
      client.innerApiCalls.batchDeletePhotos = stubSimpleCall(expectedResponse);
      const [response] = await client.batchDeletePhotos(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes batchDeletePhotos without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchDeletePhotosRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchDeletePhotosResponse()
      );
      client.innerApiCalls.batchDeletePhotos =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchDeletePhotos(
          request,
          (
            err?: Error | null,
            result?: protos.google.streetview.publish.v1.IBatchDeletePhotosResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes batchDeletePhotos with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchDeletePhotosRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.batchDeletePhotos = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchDeletePhotos(request), expectedError);
    });

    it('invokes batchDeletePhotos with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.BatchDeletePhotosRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchDeletePhotos(request), expectedError);
    });
  });

  describe('startPhotoSequenceUpload', () => {
    it('invokes startPhotoSequenceUpload without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(new protos.google.protobuf.Empty());
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.UploadRef()
      );
      client.innerApiCalls.startPhotoSequenceUpload =
        stubSimpleCall(expectedResponse);
      const [response] = await client.startPhotoSequenceUpload(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes startPhotoSequenceUpload without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(new protos.google.protobuf.Empty());
      const expectedResponse = generateSampleMessage(
        new protos.google.streetview.publish.v1.UploadRef()
      );
      client.innerApiCalls.startPhotoSequenceUpload =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.startPhotoSequenceUpload(
          request,
          (
            err?: Error | null,
            result?: protos.google.streetview.publish.v1.IUploadRef | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes startPhotoSequenceUpload with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(new protos.google.protobuf.Empty());
      const expectedError = new Error('expected');
      client.innerApiCalls.startPhotoSequenceUpload = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.startPhotoSequenceUpload(request),
        expectedError
      );
    });

    it('invokes startPhotoSequenceUpload with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(new protos.google.protobuf.Empty());
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.startPhotoSequenceUpload(request),
        expectedError
      );
    });
  });

  describe('deletePhotoSequence', () => {
    it('invokes deletePhotoSequence without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.DeletePhotoSequenceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.DeletePhotoSequenceRequest',
        ['sequenceId']
      );
      request.sequenceId = defaultValue1;
      const expectedHeaderRequestParams = `sequence_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deletePhotoSequence =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deletePhotoSequence(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePhotoSequence as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePhotoSequence as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePhotoSequence without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.DeletePhotoSequenceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.DeletePhotoSequenceRequest',
        ['sequenceId']
      );
      request.sequenceId = defaultValue1;
      const expectedHeaderRequestParams = `sequence_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deletePhotoSequence =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deletePhotoSequence(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePhotoSequence as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePhotoSequence as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePhotoSequence with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.DeletePhotoSequenceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.DeletePhotoSequenceRequest',
        ['sequenceId']
      );
      request.sequenceId = defaultValue1;
      const expectedHeaderRequestParams = `sequence_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePhotoSequence = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deletePhotoSequence(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePhotoSequence as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePhotoSequence as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePhotoSequence with closed client', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.DeletePhotoSequenceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.DeletePhotoSequenceRequest',
        ['sequenceId']
      );
      request.sequenceId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deletePhotoSequence(request), expectedError);
    });
  });

  describe('createPhotoSequence', () => {
    it('invokes createPhotoSequence without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.CreatePhotoSequenceRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPhotoSequence =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createPhotoSequence(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes createPhotoSequence without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.CreatePhotoSequenceRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createPhotoSequence =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createPhotoSequence(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.streetview.publish.v1.IPhotoSequence,
              protos.google.protobuf.IEmpty
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.streetview.publish.v1.IPhotoSequence,
        protos.google.protobuf.IEmpty
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes createPhotoSequence with call error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.CreatePhotoSequenceRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.createPhotoSequence = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createPhotoSequence(request), expectedError);
    });

    it('invokes createPhotoSequence with LRO error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.CreatePhotoSequenceRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.createPhotoSequence = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createPhotoSequence(request);
      await assert.rejects(operation.promise(), expectedError);
    });

    it('invokes checkCreatePhotoSequenceProgress without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreatePhotoSequenceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreatePhotoSequenceProgress with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreatePhotoSequenceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('getPhotoSequence', () => {
    it('invokes getPhotoSequence without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.GetPhotoSequenceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.GetPhotoSequenceRequest',
        ['sequenceId']
      );
      request.sequenceId = defaultValue1;
      const expectedHeaderRequestParams = `sequence_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.getPhotoSequence =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.getPhotoSequence(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPhotoSequence as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhotoSequence as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPhotoSequence without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.GetPhotoSequenceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.GetPhotoSequenceRequest',
        ['sequenceId']
      );
      request.sequenceId = defaultValue1;
      const expectedHeaderRequestParams = `sequence_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.getPhotoSequence =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPhotoSequence(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.streetview.publish.v1.IPhotoSequence,
              protos.google.protobuf.IEmpty
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.streetview.publish.v1.IPhotoSequence,
        protos.google.protobuf.IEmpty
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPhotoSequence as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhotoSequence as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPhotoSequence with call error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.GetPhotoSequenceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.GetPhotoSequenceRequest',
        ['sequenceId']
      );
      request.sequenceId = defaultValue1;
      const expectedHeaderRequestParams = `sequence_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPhotoSequence = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPhotoSequence(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPhotoSequence as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhotoSequence as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPhotoSequence with LRO error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.GetPhotoSequenceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.streetview.publish.v1.GetPhotoSequenceRequest',
        ['sequenceId']
      );
      request.sequenceId = defaultValue1;
      const expectedHeaderRequestParams = `sequence_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPhotoSequence = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.getPhotoSequence(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPhotoSequence as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPhotoSequence as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkGetPhotoSequenceProgress without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkGetPhotoSequenceProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkGetPhotoSequenceProgress with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkGetPhotoSequenceProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listPhotos', () => {
    it('invokes listPhotos without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotosRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
      ];
      client.innerApiCalls.listPhotos = stubSimpleCall(expectedResponse);
      const [response] = await client.listPhotos(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listPhotos without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotosRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
      ];
      client.innerApiCalls.listPhotos =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPhotos(
          request,
          (
            err?: Error | null,
            result?: protos.google.streetview.publish.v1.IPhoto[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listPhotos with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotosRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listPhotos = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPhotos(request), expectedError);
    });

    it('invokes listPhotosStream without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotosRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
      ];
      client.descriptors.page.listPhotos.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPhotosStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.streetview.publish.v1.Photo[] = [];
        stream.on(
          'data',
          (response: protos.google.streetview.publish.v1.Photo) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPhotos.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPhotos, request)
      );
    });

    it('invokes listPhotosStream with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotosRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listPhotos.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listPhotosStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.streetview.publish.v1.Photo[] = [];
        stream.on(
          'data',
          (response: protos.google.streetview.publish.v1.Photo) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPhotos.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPhotos, request)
      );
    });

    it('uses async iteration with listPhotos without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotosRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
        generateSampleMessage(new protos.google.streetview.publish.v1.Photo()),
      ];
      client.descriptors.page.listPhotos.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.streetview.publish.v1.IPhoto[] = [];
      const iterable = client.listPhotosAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listPhotos.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
    });

    it('uses async iteration with listPhotos with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotosRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listPhotos.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listPhotosAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.streetview.publish.v1.IPhoto[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listPhotos.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
    });
  });

  describe('listPhotoSequences', () => {
    it('invokes listPhotoSequences without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotoSequencesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.longrunning.Operation()),
        generateSampleMessage(new protos.google.longrunning.Operation()),
        generateSampleMessage(new protos.google.longrunning.Operation()),
      ];
      client.innerApiCalls.listPhotoSequences =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listPhotoSequences(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listPhotoSequences without error using callback', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotoSequencesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.longrunning.Operation()),
        generateSampleMessage(new protos.google.longrunning.Operation()),
        generateSampleMessage(new protos.google.longrunning.Operation()),
      ];
      client.innerApiCalls.listPhotoSequences =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPhotoSequences(
          request,
          (
            err?: Error | null,
            result?: protos.google.longrunning.IOperation[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listPhotoSequences with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotoSequencesRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listPhotoSequences = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPhotoSequences(request), expectedError);
    });

    it('invokes listPhotoSequencesStream without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotoSequencesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.longrunning.Operation()),
        generateSampleMessage(new protos.google.longrunning.Operation()),
        generateSampleMessage(new protos.google.longrunning.Operation()),
      ];
      client.descriptors.page.listPhotoSequences.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPhotoSequencesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.longrunning.Operation[] = [];
        stream.on('data', (response: protos.google.longrunning.Operation) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPhotoSequences.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPhotoSequences, request)
      );
    });

    it('invokes listPhotoSequencesStream with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotoSequencesRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listPhotoSequences.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPhotoSequencesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.longrunning.Operation[] = [];
        stream.on('data', (response: protos.google.longrunning.Operation) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPhotoSequences.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPhotoSequences, request)
      );
    });

    it('uses async iteration with listPhotoSequences without error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotoSequencesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(new protos.google.longrunning.Operation()),
        generateSampleMessage(new protos.google.longrunning.Operation()),
        generateSampleMessage(new protos.google.longrunning.Operation()),
      ];
      client.descriptors.page.listPhotoSequences.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.longrunning.IOperation[] = [];
      const iterable = client.listPhotoSequencesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPhotoSequences.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });

    it('uses async iteration with listPhotoSequences with error', async () => {
      const client =
        new streetviewpublishserviceModule.v1.StreetViewPublishServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.streetview.publish.v1.ListPhotoSequencesRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listPhotoSequences.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPhotoSequencesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.longrunning.IOperation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPhotoSequences.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });
});
