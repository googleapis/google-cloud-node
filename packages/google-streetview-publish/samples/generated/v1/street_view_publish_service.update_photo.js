// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(photo, updateMask) {
  // [START streetviewpublish_v1_generated_StreetViewPublishService_UpdatePhoto_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. Photo google.streetview.publish.v1.Photo  object containing the
   *  new metadata.
   */
  // const photo = {}
  /**
   *  Required. Mask that identifies fields on the photo metadata to update.
   *  If not present, the old Photo google.streetview.publish.v1.Photo 
   *  metadata is entirely replaced with the
   *  new Photo google.streetview.publish.v1.Photo  metadata in this request.
   *  The update fails if invalid fields are specified. Multiple fields can be
   *  specified in a comma-delimited list.
   *  The following fields are valid:
   *  * `pose.heading`
   *  * `pose.lat_lng_pair`
   *  * `pose.pitch`
   *  * `pose.roll`
   *  * `pose.level`
   *  * `pose.altitude`
   *  * `connections`
   *  * `places`
   *  > Note: When
   *  updateMask google.streetview.publish.v1.UpdatePhotoRequest.update_mask 
   *  contains repeated fields, the entire set of repeated values get replaced
   *  with the new contents. For example, if
   *  updateMask google.streetview.publish.v1.UpdatePhotoRequest.update_mask 
   *  contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
   *  all connections are removed.
   */
  // const updateMask = {}

  // Imports the Publish library
  const {StreetViewPublishServiceClient} = require('@googlemaps/streetview-publishw-publishw-publishw-publish').v1;

  // Instantiates a client
  const publishClient = new StreetViewPublishServiceClient();

  async function callUpdatePhoto() {
    // Construct request
    const request = {
      photo,
      updateMask,
    };

    // Run request
    const response = await publishClient.updatePhoto(request);
    console.log(response);
  }

  callUpdatePhoto();
  // [END streetviewpublish_v1_generated_StreetViewPublishService_UpdatePhoto_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
