// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha/g_d_c_hardware_management_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './g_d_c_hardware_management_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The GDC Hardware Management service.
 * @class
 * @memberof v1alpha
 */
export class GDCHardwareManagementClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  gDCHardwareManagementStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of GDCHardwareManagementClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new GDCHardwareManagementClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof GDCHardwareManagementClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'gdchardwaremanagement.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      changeLogEntryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/orders/{order}/changeLogEntries/{change_log_entry}'
      ),
      commentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/orders/{order}/comments/{comment}'
      ),
      hardwarePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/hardware/{hardware}'
      ),
      hardwareGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/orders/{order}/hardwareGroups/{hardware_group}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      orderPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/orders/{order}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      sitePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/sites/{site}'
      ),
      skuPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/skus/{sku}'
      ),
      zonePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/zones/{zone}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listOrders: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'orders'
      ),
      listSites: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'sites'
      ),
      listHardwareGroups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'hardwareGroups'
      ),
      listHardware: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'hardware'
      ),
      listComments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'comments'
      ),
      listChangeLogEntries: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'changeLogEntries'
      ),
      listSkus: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'skus'
      ),
      listZones: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'zones'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1alpha/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1alpha/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1alpha/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1alpha/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1alpha/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1alpha/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createOrderResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Order'
    ) as gax.protobuf.Type;
    const createOrderMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateOrderResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Order'
    ) as gax.protobuf.Type;
    const updateOrderMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteOrderResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteOrderMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const submitOrderResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Order'
    ) as gax.protobuf.Type;
    const submitOrderMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const createSiteResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Site'
    ) as gax.protobuf.Type;
    const createSiteMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateSiteResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Site'
    ) as gax.protobuf.Type;
    const updateSiteMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const createHardwareGroupResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup'
    ) as gax.protobuf.Type;
    const createHardwareGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateHardwareGroupResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup'
    ) as gax.protobuf.Type;
    const updateHardwareGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteHardwareGroupResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteHardwareGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const createHardwareResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Hardware'
    ) as gax.protobuf.Type;
    const createHardwareMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateHardwareResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Hardware'
    ) as gax.protobuf.Type;
    const updateHardwareMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteHardwareResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteHardwareMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const createCommentResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Comment'
    ) as gax.protobuf.Type;
    const createCommentMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const createZoneResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Zone'
    ) as gax.protobuf.Type;
    const createZoneMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateZoneResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Zone'
    ) as gax.protobuf.Type;
    const updateZoneMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteZoneResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteZoneMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;
    const signalZoneStateResponse = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.Zone'
    ) as gax.protobuf.Type;
    const signalZoneStateMetadata = protoFilesRoot.lookup(
      '.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createOrder: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createOrderResponse.decode.bind(createOrderResponse),
        createOrderMetadata.decode.bind(createOrderMetadata)
      ),
      updateOrder: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateOrderResponse.decode.bind(updateOrderResponse),
        updateOrderMetadata.decode.bind(updateOrderMetadata)
      ),
      deleteOrder: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteOrderResponse.decode.bind(deleteOrderResponse),
        deleteOrderMetadata.decode.bind(deleteOrderMetadata)
      ),
      submitOrder: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        submitOrderResponse.decode.bind(submitOrderResponse),
        submitOrderMetadata.decode.bind(submitOrderMetadata)
      ),
      createSite: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createSiteResponse.decode.bind(createSiteResponse),
        createSiteMetadata.decode.bind(createSiteMetadata)
      ),
      updateSite: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateSiteResponse.decode.bind(updateSiteResponse),
        updateSiteMetadata.decode.bind(updateSiteMetadata)
      ),
      createHardwareGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createHardwareGroupResponse.decode.bind(createHardwareGroupResponse),
        createHardwareGroupMetadata.decode.bind(createHardwareGroupMetadata)
      ),
      updateHardwareGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateHardwareGroupResponse.decode.bind(updateHardwareGroupResponse),
        updateHardwareGroupMetadata.decode.bind(updateHardwareGroupMetadata)
      ),
      deleteHardwareGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteHardwareGroupResponse.decode.bind(deleteHardwareGroupResponse),
        deleteHardwareGroupMetadata.decode.bind(deleteHardwareGroupMetadata)
      ),
      createHardware: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createHardwareResponse.decode.bind(createHardwareResponse),
        createHardwareMetadata.decode.bind(createHardwareMetadata)
      ),
      updateHardware: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateHardwareResponse.decode.bind(updateHardwareResponse),
        updateHardwareMetadata.decode.bind(updateHardwareMetadata)
      ),
      deleteHardware: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteHardwareResponse.decode.bind(deleteHardwareResponse),
        deleteHardwareMetadata.decode.bind(deleteHardwareMetadata)
      ),
      createComment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCommentResponse.decode.bind(createCommentResponse),
        createCommentMetadata.decode.bind(createCommentMetadata)
      ),
      createZone: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createZoneResponse.decode.bind(createZoneResponse),
        createZoneMetadata.decode.bind(createZoneMetadata)
      ),
      updateZone: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateZoneResponse.decode.bind(updateZoneResponse),
        updateZoneMetadata.decode.bind(updateZoneMetadata)
      ),
      deleteZone: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteZoneResponse.decode.bind(deleteZoneResponse),
        deleteZoneMetadata.decode.bind(deleteZoneMetadata)
      ),
      signalZoneState: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        signalZoneStateResponse.decode.bind(signalZoneStateResponse),
        signalZoneStateMetadata.decode.bind(signalZoneStateMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.gdchardwaremanagement.v1alpha.GDCHardwareManagement',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.gDCHardwareManagementStub) {
      return this.gDCHardwareManagementStub;
    }

    // Put together the "service stub" for
    // google.cloud.gdchardwaremanagement.v1alpha.GDCHardwareManagement.
    this.gDCHardwareManagementStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.gdchardwaremanagement.v1alpha.GDCHardwareManagement'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.gdchardwaremanagement.v1alpha
            .GDCHardwareManagement,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const gDCHardwareManagementStubMethods = [
      'listOrders',
      'getOrder',
      'createOrder',
      'updateOrder',
      'deleteOrder',
      'submitOrder',
      'listSites',
      'getSite',
      'createSite',
      'updateSite',
      'listHardwareGroups',
      'getHardwareGroup',
      'createHardwareGroup',
      'updateHardwareGroup',
      'deleteHardwareGroup',
      'listHardware',
      'getHardware',
      'createHardware',
      'updateHardware',
      'deleteHardware',
      'listComments',
      'getComment',
      'createComment',
      'listChangeLogEntries',
      'getChangeLogEntry',
      'listSkus',
      'getSku',
      'listZones',
      'getZone',
      'createZone',
      'updateZone',
      'deleteZone',
      'signalZoneState',
    ];
    for (const methodName of gDCHardwareManagementStubMethods) {
      const callPromise = this.gDCHardwareManagementStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.gDCHardwareManagementStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'gdchardwaremanagement.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'gdchardwaremanagement.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of an order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Order|Order}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.get_order.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_GetOrder_async
   */
  getOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetOrderRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getOrder(request, options, callback);
  }
  /**
   * Gets details of a site.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the site.
   *   Format: `projects/{project}/locations/{location}/sites/{site}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Site|Site}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.get_site.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_GetSite_async
   */
  getSite(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getSite(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSite(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSite(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSiteRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSite(request, options, callback);
  }
  /**
   * Gets details of a hardware group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the hardware group.
   *   Format:
   *   `projects/{project}/locations/{location}/orders/{order}/hardwareGroups/{hardware_group}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup|HardwareGroup}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.get_hardware_group.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_GetHardwareGroup_async
   */
  getHardwareGroup(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getHardwareGroup(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getHardwareGroup(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getHardwareGroup(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareGroupRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getHardwareGroup(request, options, callback);
  }
  /**
   * Gets hardware details.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the hardware.
   *   Format: `projects/{project}/locations/{location}/hardware/{hardware}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Hardware|Hardware}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.get_hardware.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_GetHardware_async
   */
  getHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetHardwareRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getHardware(request, options, callback);
  }
  /**
   * Gets the content of a comment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the comment.
   *   Format:
   *   `projects/{project}/locations/{location}/orders/{order}/comments/{comment}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Comment|Comment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.get_comment.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_GetComment_async
   */
  getComment(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getComment(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getComment(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getComment(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetCommentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getComment(request, options, callback);
  }
  /**
   * Gets details of a change to an order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the change log entry.
   *   Format:
   *   `projects/{project}/locations/{location}/orders/{order}/changeLogEntries/{change_log_entry}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.ChangeLogEntry|ChangeLogEntry}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.get_change_log_entry.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_GetChangeLogEntry_async
   */
  getChangeLogEntry(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getChangeLogEntry(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getChangeLogEntry(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getChangeLogEntry(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetChangeLogEntryRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getChangeLogEntry(request, options, callback);
  }
  /**
   * Gets details of an SKU.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the SKU.
   *   Format: `projects/{project}/locations/{location}/skus/{sku}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Sku|Sku}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.get_sku.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_GetSku_async
   */
  getSku(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getSku(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSku(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getSku(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.ISku,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetSkuRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSku(request, options, callback);
  }
  /**
   * Gets details of a zone.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the zone.
   *   Format: `projects/{project}/locations/{location}/zones/{zone}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Zone|Zone}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.get_zone.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_GetZone_async
   */
  getZone(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getZone(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getZone(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest,
    callback: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getZone(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
      (
        | protos.google.cloud.gdchardwaremanagement.v1alpha.IGetZoneRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getZone(request, options, callback);
  }

  /**
   * Creates a new order in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to create the order in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {string} [request.orderId]
   *   Optional. ID used to uniquely identify the Order within its parent scope.
   *   This field should contain at most 63 characters and must start with
   *   lowercase characters.
   *   Only lowercase characters, numbers and `-` are accepted.
   *   The `-` character cannot be the first or the last one.
   *   A system generated ID will be used if the field is not set.
   *
   *   The order.name field in the request will be ignored.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.Order} request.order
   *   Required. The order to create.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_order.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateOrder_async
   */
  createOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateOrderRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateOrderRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateOrderRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateOrderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createOrder(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createOrder()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_order.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateOrder_async
   */
  async checkCreateOrderProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Order,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createOrder,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Order,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of an order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A mask to specify the fields in the Order to overwrite with this
   *   update. The fields specified in the update_mask are relative to the order,
   *   not the full request. A field will be overwritten if it is in the mask. If
   *   you don't provide a mask then all fields will be overwritten.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.Order} request.order
   *   Required. The order to update.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_order.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateOrder_async
   */
  updateOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateOrderRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateOrderRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateOrderRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateOrderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'order.name': request.order!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateOrder(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateOrder()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_order.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateOrder_async
   */
  async checkUpdateOrderProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Order,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateOrder,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Order,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Deletes an order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the order.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {boolean} [request.force]
   *   Optional. An option to delete any nested resources in the Order, such as a
   *   HardwareGroup. If true, any nested resources for this Order will also be
   *   deleted. Otherwise, the request will only succeed if the Order has no
   *   nested resources.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.delete_order.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_DeleteOrder_async
   */
  deleteOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteOrderRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteOrderRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteOrderRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteOrderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteOrder(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteOrder()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.delete_order.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_DeleteOrder_async
   */
  async checkDeleteOrderProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteOrder,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Submits an order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the order.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.submit_order.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_SubmitOrder_async
   */
  submitOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ISubmitOrderRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  submitOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ISubmitOrderRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitOrder(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ISubmitOrderRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  submitOrder(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ISubmitOrderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.submitOrder(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `submitOrder()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.submit_order.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_SubmitOrder_async
   */
  async checkSubmitOrderProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Order,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.submitOrder,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Order,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Creates a new site in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to create the site in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {string} [request.siteId]
   *   Optional. ID used to uniquely identify the Site within its parent scope.
   *   This field should contain at most 63 characters and must start with
   *   lowercase characters.
   *   Only lowercase characters, numbers and `-` are accepted.
   *   The `-` character cannot be the first or the last one.
   *   A system generated ID will be used if the field is not set.
   *
   *   The site.name field in the request will be ignored.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.Site} request.site
   *   Required. The site to create.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_site.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateSite_async
   */
  createSite(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateSiteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createSite(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateSiteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSite(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateSiteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createSite(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateSiteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSite(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createSite()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_site.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateSite_async
   */
  async checkCreateSiteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Site,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createSite,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Site,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a site.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A mask to specify the fields in the Site to overwrite with this
   *   update. The fields specified in the update_mask are relative to the site,
   *   not the full request. A field will be overwritten if it is in the mask. If
   *   you don't provide a mask then all fields will be overwritten.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.Site} request.site
   *   Required. The site to update.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_site.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateSite_async
   */
  updateSite(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateSiteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateSite(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateSiteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSite(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateSiteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateSite(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateSiteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.ISite,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'site.name': request.site!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSite(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateSite()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_site.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateSite_async
   */
  async checkUpdateSiteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Site,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateSite,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Site,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Creates a new hardware group in a given order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to create the hardware group in.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {string} [request.hardwareGroupId]
   *   Optional. ID used to uniquely identify the HardwareGroup within its parent
   *   scope. This field should contain at most 63 characters and must start with
   *   lowercase characters.
   *   Only lowercase characters, numbers and `-` are accepted.
   *   The `-` character cannot be the first or the last one.
   *   A system generated ID will be used if the field is not set.
   *
   *   The hardware_group.name field in the request will be ignored.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup} request.hardwareGroup
   *   Required. The hardware group to create.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_hardware_group.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateHardwareGroup_async
   */
  createHardwareGroup(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateHardwareGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createHardwareGroup(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateHardwareGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createHardwareGroup(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateHardwareGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createHardwareGroup(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateHardwareGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createHardwareGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createHardwareGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_hardware_group.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateHardwareGroup_async
   */
  async checkCreateHardwareGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createHardwareGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a hardware group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A mask to specify the fields in the HardwareGroup to overwrite
   *   with this update. The fields specified in the update_mask are relative to
   *   the hardware group, not the full request. A field will be overwritten if it
   *   is in the mask. If you don't provide a mask then all fields will be
   *   overwritten.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup} request.hardwareGroup
   *   Required. The hardware group to update.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_hardware_group.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateHardwareGroup_async
   */
  updateHardwareGroup(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateHardwareGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateHardwareGroup(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateHardwareGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateHardwareGroup(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateHardwareGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateHardwareGroup(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateHardwareGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'hardware_group.name': request.hardwareGroup!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateHardwareGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateHardwareGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_hardware_group.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateHardwareGroup_async
   */
  async checkUpdateHardwareGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateHardwareGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Deletes a hardware group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the hardware group.
   *   Format:
   *   `projects/{project}/locations/{location}/orders/{order}/hardwareGroups/{hardware_group}`
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.delete_hardware_group.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_DeleteHardwareGroup_async
   */
  deleteHardwareGroup(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteHardwareGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteHardwareGroup(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteHardwareGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteHardwareGroup(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteHardwareGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteHardwareGroup(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteHardwareGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteHardwareGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteHardwareGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.delete_hardware_group.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_DeleteHardwareGroup_async
   */
  async checkDeleteHardwareGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteHardwareGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Creates new hardware in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to create hardware in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {string} [request.hardwareId]
   *   Optional. ID used to uniquely identify the Hardware within its parent
   *   scope. This field should contain at most 63 characters and must start with
   *   lowercase characters.
   *   Only lowercase characters, numbers and `-` are accepted.
   *   The `-` character cannot be the first or the last one.
   *   A system generated ID will be used if the field is not set.
   *
   *   The hardware.name field in the request will be ignored.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.Hardware} request.hardware
   *   Required. The resource to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_hardware.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateHardware_async
   */
  createHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateHardwareRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateHardwareRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateHardwareRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateHardwareRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createHardware(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createHardware()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_hardware.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateHardware_async
   */
  async checkCreateHardwareProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Hardware,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createHardware,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Hardware,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Updates hardware parameters.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A mask to specify the fields in the Hardware to overwrite with
   *   this update. The fields specified in the update_mask are relative to the
   *   hardware, not the full request. A field will be overwritten if it is in the
   *   mask. If you don't provide a mask then all fields will be overwritten.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.Hardware} request.hardware
   *   Required. The hardware to update.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_hardware.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateHardware_async
   */
  updateHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateHardwareRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateHardwareRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateHardwareRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateHardwareRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'hardware.name': request.hardware!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateHardware(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateHardware()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_hardware.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateHardware_async
   */
  async checkUpdateHardwareProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Hardware,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateHardware,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Hardware,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Deletes hardware.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the hardware.
   *   Format: `projects/{project}/locations/{location}/hardware/{hardware}`
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.delete_hardware.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_DeleteHardware_async
   */
  deleteHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteHardwareRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteHardwareRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteHardwareRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteHardwareRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteHardware(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteHardware()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.delete_hardware.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_DeleteHardware_async
   */
  async checkDeleteHardwareProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteHardware,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Creates a new comment on an order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to create the comment on.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {string} [request.commentId]
   *   Optional. ID used to uniquely identify the Comment within its parent scope.
   *   This field should contain at most 63 characters and must start with
   *   lowercase characters.
   *   Only lowercase characters, numbers and `-` are accepted.
   *   The `-` character cannot be the first or the last one.
   *   A system generated ID will be used if the field is not set.
   *
   *   The comment.name field in the request will be ignored.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.Comment} request.comment
   *   Required. The comment to create.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_comment.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateComment_async
   */
  createComment(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateCommentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createComment(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateCommentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createComment(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateCommentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createComment(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateCommentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IComment,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createComment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createComment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_comment.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateComment_async
   */
  async checkCreateCommentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Comment,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createComment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Comment,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Creates a new zone in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to create the zone in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {string} [request.zoneId]
   *   Optional. ID used to uniquely identify the Zone within its parent scope.
   *   This field should contain at most 63 characters and must start with
   *   lowercase characters.
   *   Only lowercase characters, numbers and `-` are accepted.
   *   The `-` character cannot be the first or the last one.
   *   A system generated ID will be used if the field is not set.
   *
   *   The zone.name field in the request will be ignored.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.Zone} request.zone
   *   Required. The zone to create.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_zone.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateZone_async
   */
  createZone(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateZoneRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createZone(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateZoneRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createZone(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateZoneRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createZone(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ICreateZoneRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createZone(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createZone()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.create_zone.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_CreateZone_async
   */
  async checkCreateZoneProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Zone,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createZone,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Zone,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a zone.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. A mask to specify the fields in the Zone to overwrite with this
   *   update. The fields specified in the update_mask are relative to the zone,
   *   not the full request. A field will be overwritten if it is in the mask. If
   *   you don't provide a mask then all fields will be overwritten.
   * @param {google.cloud.gdchardwaremanagement.v1alpha.Zone} request.zone
   *   Required. The zone to update.
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_zone.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateZone_async
   */
  updateZone(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateZoneRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateZone(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateZoneRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateZone(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateZoneRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateZone(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IUpdateZoneRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'zone.name': request.zone!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateZone(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateZone()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.update_zone.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_UpdateZone_async
   */
  async checkUpdateZoneProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Zone,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateZone,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Zone,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Deletes a zone.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the zone.
   *   Format: `projects/{project}/locations/{location}/zones/{zone}`
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.delete_zone.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_DeleteZone_async
   */
  deleteZone(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteZoneRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteZone(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteZoneRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteZone(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteZoneRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteZone(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IDeleteZoneRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteZone(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteZone()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.delete_zone.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_DeleteZone_async
   */
  async checkDeleteZoneProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteZone,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Signals the state of a zone.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the zone.
   *   Format: `projects/{project}/locations/{location}/zones/{zone}`
   * @param {string} [request.requestId]
   *   Optional. An optional unique identifier for this request. See
   *   [AIP-155](https://google.aip.dev/155).
   * @param {google.cloud.gdchardwaremanagement.v1alpha.SignalZoneStateRequest.StateSignal} request.stateSignal
   *   Required. The state signal to send for this zone.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.signal_zone_state.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_SignalZoneState_async
   */
  signalZoneState(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ISignalZoneStateRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  signalZoneState(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ISignalZoneStateRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  signalZoneState(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.ISignalZoneStateRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  signalZoneState(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.ISignalZoneStateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
            protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gdchardwaremanagement.v1alpha.IZone,
        protos.google.cloud.gdchardwaremanagement.v1alpha.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.signalZoneState(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `signalZoneState()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.signal_zone_state.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_SignalZoneState_async
   */
  async checkSignalZoneStateProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Zone,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.signalZoneState,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gdchardwaremanagement.v1alpha.Zone,
      protos.google.cloud.gdchardwaremanagement.v1alpha.OperationMetadata
    >;
  }
  /**
   * Lists orders in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list orders in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Order|Order}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listOrdersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOrders(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersResponse,
    ]
  >;
  listOrders(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder
    >
  ): void;
  listOrders(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder
    >
  ): void;
  listOrders(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersResponse
          | null
          | undefined,
          protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listOrders(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list orders in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Order|Order} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listOrdersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOrdersStream(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOrders'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOrders.createStream(
      this.innerApiCalls.listOrders as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listOrders`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list orders in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Order|Order}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.list_orders.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_ListOrders_async
   */
  listOrdersAsync(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListOrdersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOrders'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOrders.asyncIterate(
      this.innerApiCalls['listOrders'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IOrder>;
  }
  /**
   * Lists sites in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list sites in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Site|Site}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSitesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSites(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesResponse,
    ]
  >;
  listSites(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite
    >
  ): void;
  listSites(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite
    >
  ): void;
  listSites(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesResponse
          | null
          | undefined,
          protos.google.cloud.gdchardwaremanagement.v1alpha.ISite
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISite[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSites(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list sites in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Site|Site} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSitesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSitesStream(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSites'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSites.createStream(
      this.innerApiCalls.listSites as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSites`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list sites in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Site|Site}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.list_sites.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_ListSites_async
   */
  listSitesAsync(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSitesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.ISite> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSites'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSites.asyncIterate(
      this.innerApiCalls['listSites'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.ISite>;
  }
  /**
   * Lists hardware groups in a given order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to list hardware groups in.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup|HardwareGroup}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listHardwareGroupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listHardwareGroups(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsResponse,
    ]
  >;
  listHardwareGroups(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup
    >
  ): void;
  listHardwareGroups(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup
    >
  ): void;
  listHardwareGroups(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsResponse
          | null
          | undefined,
          protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listHardwareGroups(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to list hardware groups in.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup|HardwareGroup} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listHardwareGroupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listHardwareGroupsStream(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listHardwareGroups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHardwareGroups.createStream(
      this.innerApiCalls.listHardwareGroups as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listHardwareGroups`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to list hardware groups in.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup|HardwareGroup}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.list_hardware_groups.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_ListHardwareGroups_async
   */
  listHardwareGroupsAsync(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareGroupsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listHardwareGroups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHardwareGroups.asyncIterate(
      this.innerApiCalls['listHardwareGroups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IHardwareGroup>;
  }
  /**
   * Lists hardware in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list hardware in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Hardware|Hardware}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listHardwareAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareResponse,
    ]
  >;
  listHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware
    >
  ): void;
  listHardware(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware
    >
  ): void;
  listHardware(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareResponse
          | null
          | undefined,
          protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listHardware(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list hardware in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Hardware|Hardware} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listHardwareAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listHardwareStream(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listHardware'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHardware.createStream(
      this.innerApiCalls.listHardware as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listHardware`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list hardware in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Hardware|Hardware}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.list_hardware.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_ListHardware_async
   */
  listHardwareAsync(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListHardwareRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listHardware'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHardware.asyncIterate(
      this.innerApiCalls['listHardware'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IHardware>;
  }
  /**
   * Lists the comments on an order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to list comments on.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Comment|Comment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listCommentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listComments(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsResponse,
    ]
  >;
  listComments(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment
    >
  ): void;
  listComments(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment
    >
  ): void;
  listComments(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsResponse
          | null
          | undefined,
          protos.google.cloud.gdchardwaremanagement.v1alpha.IComment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IComment[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listComments(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to list comments on.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Comment|Comment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listCommentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listCommentsStream(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listComments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listComments.createStream(
      this.innerApiCalls.listComments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listComments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to list comments on.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Comment|Comment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.list_comments.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_ListComments_async
   */
  listCommentsAsync(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListCommentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IComment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listComments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listComments.asyncIterate(
      this.innerApiCalls['listComments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IComment>;
  }
  /**
   * Lists the changes made to an order.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to list change log entries for.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.gdchardwaremanagement.v1alpha.ChangeLogEntry|ChangeLogEntry}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listChangeLogEntriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listChangeLogEntries(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesResponse,
    ]
  >;
  listChangeLogEntries(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry
    >
  ): void;
  listChangeLogEntries(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry
    >
  ): void;
  listChangeLogEntries(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesResponse
          | null
          | undefined,
          protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listChangeLogEntries(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to list change log entries for.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.ChangeLogEntry|ChangeLogEntry} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listChangeLogEntriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listChangeLogEntriesStream(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listChangeLogEntries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listChangeLogEntries.createStream(
      this.innerApiCalls.listChangeLogEntries as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listChangeLogEntries`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The order to list change log entries for.
   *   Format: `projects/{project}/locations/{location}/orders/{order}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.gdchardwaremanagement.v1alpha.ChangeLogEntry|ChangeLogEntry}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.list_change_log_entries.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_ListChangeLogEntries_async
   */
  listChangeLogEntriesAsync(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListChangeLogEntriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listChangeLogEntries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listChangeLogEntries.asyncIterate(
      this.innerApiCalls['listChangeLogEntries'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IChangeLogEntry>;
  }
  /**
   * Lists SKUs for a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list SKUs in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Sku|Sku}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSkusAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSkus(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusResponse,
    ]
  >;
  listSkus(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku
    >
  ): void;
  listSkus(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku
    >
  ): void;
  listSkus(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusResponse
          | null
          | undefined,
          protos.google.cloud.gdchardwaremanagement.v1alpha.ISku
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.ISku[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSkus(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list SKUs in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Sku|Sku} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSkusAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listSkusStream(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSkus'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSkus.createStream(
      this.innerApiCalls.listSkus as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSkus`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list SKUs in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Sku|Sku}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.list_skus.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_ListSkus_async
   */
  listSkusAsync(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListSkusRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.ISku> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSkus'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSkus.asyncIterate(
      this.innerApiCalls['listSkus'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.ISku>;
  }
  /**
   * Lists zones in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list zones in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Zone|Zone}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listZonesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listZones(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesResponse,
    ]
  >;
  listZones(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone
    >
  ): void;
  listZones(
    request: protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
    callback: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone
    >
  ): void;
  listZones(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
          | protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesResponse
          | null
          | undefined,
          protos.google.cloud.gdchardwaremanagement.v1alpha.IZone
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
      | protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesResponse
      | null
      | undefined,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone
    >
  ): Promise<
    [
      protos.google.cloud.gdchardwaremanagement.v1alpha.IZone[],
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest | null,
      protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listZones(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list zones in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Zone|Zone} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listZonesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listZonesStream(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listZones'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listZones.createStream(
      this.innerApiCalls.listZones as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listZones`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location to list zones in.
   *   Format: `projects/{project}/locations/{location}`
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering condition. See [AIP-160](https://google.aip.dev/160).
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.gdchardwaremanagement.v1alpha.Zone|Zone}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/g_d_c_hardware_management.list_zones.js</caption>
   * region_tag:gdchardwaremanagement_v1alpha_generated_GDCHardwareManagement_ListZones_async
   */
  listZonesAsync(
    request?: protos.google.cloud.gdchardwaremanagement.v1alpha.IListZonesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IZone> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listZones'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listZones.asyncIterate(
      this.innerApiCalls['listZones'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gdchardwaremanagement.v1alpha.IZone>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified changeLogEntry resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} order
   * @param {string} change_log_entry
   * @returns {string} Resource name string.
   */
  changeLogEntryPath(
    project: string,
    location: string,
    order: string,
    changeLogEntry: string
  ) {
    return this.pathTemplates.changeLogEntryPathTemplate.render({
      project: project,
      location: location,
      order: order,
      change_log_entry: changeLogEntry,
    });
  }

  /**
   * Parse the project from ChangeLogEntry resource.
   *
   * @param {string} changeLogEntryName
   *   A fully-qualified path representing ChangeLogEntry resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromChangeLogEntryName(changeLogEntryName: string) {
    return this.pathTemplates.changeLogEntryPathTemplate.match(
      changeLogEntryName
    ).project;
  }

  /**
   * Parse the location from ChangeLogEntry resource.
   *
   * @param {string} changeLogEntryName
   *   A fully-qualified path representing ChangeLogEntry resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromChangeLogEntryName(changeLogEntryName: string) {
    return this.pathTemplates.changeLogEntryPathTemplate.match(
      changeLogEntryName
    ).location;
  }

  /**
   * Parse the order from ChangeLogEntry resource.
   *
   * @param {string} changeLogEntryName
   *   A fully-qualified path representing ChangeLogEntry resource.
   * @returns {string} A string representing the order.
   */
  matchOrderFromChangeLogEntryName(changeLogEntryName: string) {
    return this.pathTemplates.changeLogEntryPathTemplate.match(
      changeLogEntryName
    ).order;
  }

  /**
   * Parse the change_log_entry from ChangeLogEntry resource.
   *
   * @param {string} changeLogEntryName
   *   A fully-qualified path representing ChangeLogEntry resource.
   * @returns {string} A string representing the change_log_entry.
   */
  matchChangeLogEntryFromChangeLogEntryName(changeLogEntryName: string) {
    return this.pathTemplates.changeLogEntryPathTemplate.match(
      changeLogEntryName
    ).change_log_entry;
  }

  /**
   * Return a fully-qualified comment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} order
   * @param {string} comment
   * @returns {string} Resource name string.
   */
  commentPath(
    project: string,
    location: string,
    order: string,
    comment: string
  ) {
    return this.pathTemplates.commentPathTemplate.render({
      project: project,
      location: location,
      order: order,
      comment: comment,
    });
  }

  /**
   * Parse the project from Comment resource.
   *
   * @param {string} commentName
   *   A fully-qualified path representing Comment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCommentName(commentName: string) {
    return this.pathTemplates.commentPathTemplate.match(commentName).project;
  }

  /**
   * Parse the location from Comment resource.
   *
   * @param {string} commentName
   *   A fully-qualified path representing Comment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCommentName(commentName: string) {
    return this.pathTemplates.commentPathTemplate.match(commentName).location;
  }

  /**
   * Parse the order from Comment resource.
   *
   * @param {string} commentName
   *   A fully-qualified path representing Comment resource.
   * @returns {string} A string representing the order.
   */
  matchOrderFromCommentName(commentName: string) {
    return this.pathTemplates.commentPathTemplate.match(commentName).order;
  }

  /**
   * Parse the comment from Comment resource.
   *
   * @param {string} commentName
   *   A fully-qualified path representing Comment resource.
   * @returns {string} A string representing the comment.
   */
  matchCommentFromCommentName(commentName: string) {
    return this.pathTemplates.commentPathTemplate.match(commentName).comment;
  }

  /**
   * Return a fully-qualified hardware resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} hardware
   * @returns {string} Resource name string.
   */
  hardwarePath(project: string, location: string, hardware: string) {
    return this.pathTemplates.hardwarePathTemplate.render({
      project: project,
      location: location,
      hardware: hardware,
    });
  }

  /**
   * Parse the project from Hardware resource.
   *
   * @param {string} hardwareName
   *   A fully-qualified path representing Hardware resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHardwareName(hardwareName: string) {
    return this.pathTemplates.hardwarePathTemplate.match(hardwareName).project;
  }

  /**
   * Parse the location from Hardware resource.
   *
   * @param {string} hardwareName
   *   A fully-qualified path representing Hardware resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHardwareName(hardwareName: string) {
    return this.pathTemplates.hardwarePathTemplate.match(hardwareName).location;
  }

  /**
   * Parse the hardware from Hardware resource.
   *
   * @param {string} hardwareName
   *   A fully-qualified path representing Hardware resource.
   * @returns {string} A string representing the hardware.
   */
  matchHardwareFromHardwareName(hardwareName: string) {
    return this.pathTemplates.hardwarePathTemplate.match(hardwareName).hardware;
  }

  /**
   * Return a fully-qualified hardwareGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} order
   * @param {string} hardware_group
   * @returns {string} Resource name string.
   */
  hardwareGroupPath(
    project: string,
    location: string,
    order: string,
    hardwareGroup: string
  ) {
    return this.pathTemplates.hardwareGroupPathTemplate.render({
      project: project,
      location: location,
      order: order,
      hardware_group: hardwareGroup,
    });
  }

  /**
   * Parse the project from HardwareGroup resource.
   *
   * @param {string} hardwareGroupName
   *   A fully-qualified path representing HardwareGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHardwareGroupName(hardwareGroupName: string) {
    return this.pathTemplates.hardwareGroupPathTemplate.match(hardwareGroupName)
      .project;
  }

  /**
   * Parse the location from HardwareGroup resource.
   *
   * @param {string} hardwareGroupName
   *   A fully-qualified path representing HardwareGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHardwareGroupName(hardwareGroupName: string) {
    return this.pathTemplates.hardwareGroupPathTemplate.match(hardwareGroupName)
      .location;
  }

  /**
   * Parse the order from HardwareGroup resource.
   *
   * @param {string} hardwareGroupName
   *   A fully-qualified path representing HardwareGroup resource.
   * @returns {string} A string representing the order.
   */
  matchOrderFromHardwareGroupName(hardwareGroupName: string) {
    return this.pathTemplates.hardwareGroupPathTemplate.match(hardwareGroupName)
      .order;
  }

  /**
   * Parse the hardware_group from HardwareGroup resource.
   *
   * @param {string} hardwareGroupName
   *   A fully-qualified path representing HardwareGroup resource.
   * @returns {string} A string representing the hardware_group.
   */
  matchHardwareGroupFromHardwareGroupName(hardwareGroupName: string) {
    return this.pathTemplates.hardwareGroupPathTemplate.match(hardwareGroupName)
      .hardware_group;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified order resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} order
   * @returns {string} Resource name string.
   */
  orderPath(project: string, location: string, order: string) {
    return this.pathTemplates.orderPathTemplate.render({
      project: project,
      location: location,
      order: order,
    });
  }

  /**
   * Parse the project from Order resource.
   *
   * @param {string} orderName
   *   A fully-qualified path representing Order resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromOrderName(orderName: string) {
    return this.pathTemplates.orderPathTemplate.match(orderName).project;
  }

  /**
   * Parse the location from Order resource.
   *
   * @param {string} orderName
   *   A fully-qualified path representing Order resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrderName(orderName: string) {
    return this.pathTemplates.orderPathTemplate.match(orderName).location;
  }

  /**
   * Parse the order from Order resource.
   *
   * @param {string} orderName
   *   A fully-qualified path representing Order resource.
   * @returns {string} A string representing the order.
   */
  matchOrderFromOrderName(orderName: string) {
    return this.pathTemplates.orderPathTemplate.match(orderName).order;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified site resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} site
   * @returns {string} Resource name string.
   */
  sitePath(project: string, location: string, site: string) {
    return this.pathTemplates.sitePathTemplate.render({
      project: project,
      location: location,
      site: site,
    });
  }

  /**
   * Parse the project from Site resource.
   *
   * @param {string} siteName
   *   A fully-qualified path representing Site resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSiteName(siteName: string) {
    return this.pathTemplates.sitePathTemplate.match(siteName).project;
  }

  /**
   * Parse the location from Site resource.
   *
   * @param {string} siteName
   *   A fully-qualified path representing Site resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSiteName(siteName: string) {
    return this.pathTemplates.sitePathTemplate.match(siteName).location;
  }

  /**
   * Parse the site from Site resource.
   *
   * @param {string} siteName
   *   A fully-qualified path representing Site resource.
   * @returns {string} A string representing the site.
   */
  matchSiteFromSiteName(siteName: string) {
    return this.pathTemplates.sitePathTemplate.match(siteName).site;
  }

  /**
   * Return a fully-qualified sku resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} sku
   * @returns {string} Resource name string.
   */
  skuPath(project: string, location: string, sku: string) {
    return this.pathTemplates.skuPathTemplate.render({
      project: project,
      location: location,
      sku: sku,
    });
  }

  /**
   * Parse the project from Sku resource.
   *
   * @param {string} skuName
   *   A fully-qualified path representing Sku resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSkuName(skuName: string) {
    return this.pathTemplates.skuPathTemplate.match(skuName).project;
  }

  /**
   * Parse the location from Sku resource.
   *
   * @param {string} skuName
   *   A fully-qualified path representing Sku resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSkuName(skuName: string) {
    return this.pathTemplates.skuPathTemplate.match(skuName).location;
  }

  /**
   * Parse the sku from Sku resource.
   *
   * @param {string} skuName
   *   A fully-qualified path representing Sku resource.
   * @returns {string} A string representing the sku.
   */
  matchSkuFromSkuName(skuName: string) {
    return this.pathTemplates.skuPathTemplate.match(skuName).sku;
  }

  /**
   * Return a fully-qualified zone resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} zone
   * @returns {string} Resource name string.
   */
  zonePath(project: string, location: string, zone: string) {
    return this.pathTemplates.zonePathTemplate.render({
      project: project,
      location: location,
      zone: zone,
    });
  }

  /**
   * Parse the project from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).project;
  }

  /**
   * Parse the location from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).location;
  }

  /**
   * Parse the zone from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).zone;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.gDCHardwareManagementStub && !this._terminated) {
      return this.gDCHardwareManagementStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
