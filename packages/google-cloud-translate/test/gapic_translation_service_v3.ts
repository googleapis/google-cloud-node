// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as translationserviceModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v3.TranslationServiceClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'translate.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          translationserviceModule.v3.TranslationServiceClient.servicePath;
        assert.strictEqual(servicePath, 'translate.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          translationserviceModule.v3.TranslationServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'translate.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'translate.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'translate.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new translationserviceModule.v3.TranslationServiceClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'translate.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new translationserviceModule.v3.TranslationServiceClient({
              universeDomain: 'configured.example.com',
            });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'translate.configured.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new translationserviceModule.v3.TranslationServiceClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = translationserviceModule.v3.TranslationServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.translationServiceStub, undefined);
      await client.initialize();
      assert(client.translationServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.translationServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.translationServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('translateText', () => {
    it('invokes translateText without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextResponse()
      );
      client.innerApiCalls.translateText = stubSimpleCall(expectedResponse);
      const [response] = await client.translateText(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateText without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextResponse()
      );
      client.innerApiCalls.translateText =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.translateText(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.ITranslateTextResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateText with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.translateText = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.translateText(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateText with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.translateText(request), expectedError);
    });
  });

  describe('romanizeText', () => {
    it('invokes romanizeText without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.RomanizeTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.RomanizeTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.RomanizeTextResponse()
      );
      client.innerApiCalls.romanizeText = stubSimpleCall(expectedResponse);
      const [response] = await client.romanizeText(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.romanizeText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.romanizeText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes romanizeText without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.RomanizeTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.RomanizeTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.RomanizeTextResponse()
      );
      client.innerApiCalls.romanizeText =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.romanizeText(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IRomanizeTextResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.romanizeText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.romanizeText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes romanizeText with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.RomanizeTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.RomanizeTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.romanizeText = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.romanizeText(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.romanizeText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.romanizeText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes romanizeText with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.RomanizeTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.RomanizeTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.romanizeText(request), expectedError);
    });
  });

  describe('detectLanguage', () => {
    it('invokes detectLanguage without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DetectLanguageRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageResponse()
      );
      client.innerApiCalls.detectLanguage = stubSimpleCall(expectedResponse);
      const [response] = await client.detectLanguage(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detectLanguage without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DetectLanguageRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageResponse()
      );
      client.innerApiCalls.detectLanguage =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.detectLanguage(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IDetectLanguageResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detectLanguage with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DetectLanguageRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.detectLanguage = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.detectLanguage(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detectLanguage with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DetectLanguageRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.detectLanguage(request), expectedError);
    });
  });

  describe('getSupportedLanguages', () => {
    it('invokes getSupportedLanguages without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetSupportedLanguagesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetSupportedLanguagesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.SupportedLanguages()
      );
      client.innerApiCalls.getSupportedLanguages =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getSupportedLanguages(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSupportedLanguages without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetSupportedLanguagesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetSupportedLanguagesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.SupportedLanguages()
      );
      client.innerApiCalls.getSupportedLanguages =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSupportedLanguages(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.ISupportedLanguages | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSupportedLanguages with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetSupportedLanguagesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetSupportedLanguagesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getSupportedLanguages = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getSupportedLanguages(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSupportedLanguages with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetSupportedLanguagesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetSupportedLanguagesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getSupportedLanguages(request),
        expectedError
      );
    });
  });

  describe('translateDocument', () => {
    it('invokes translateDocument without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentResponse()
      );
      client.innerApiCalls.translateDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.translateDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateDocument without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentResponse()
      );
      client.innerApiCalls.translateDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.translateDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.ITranslateDocumentResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateDocument with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.translateDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.translateDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateDocument with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.translateDocument(request), expectedError);
    });
  });

  describe('getGlossary', () => {
    it('invokes getGlossary without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.Glossary()
      );
      client.innerApiCalls.getGlossary = stubSimpleCall(expectedResponse);
      const [response] = await client.getGlossary(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlossary without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.Glossary()
      );
      client.innerApiCalls.getGlossary =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGlossary(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IGlossary | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlossary with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGlossary = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getGlossary(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlossary with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getGlossary(request), expectedError);
    });
  });

  describe('getGlossaryEntry', () => {
    it('invokes getGlossaryEntry without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.GlossaryEntry()
      );
      client.innerApiCalls.getGlossaryEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.getGlossaryEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlossaryEntry without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.GlossaryEntry()
      );
      client.innerApiCalls.getGlossaryEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGlossaryEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IGlossaryEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlossaryEntry with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGlossaryEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getGlossaryEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlossaryEntry with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getGlossaryEntry(request), expectedError);
    });
  });

  describe('createGlossaryEntry', () => {
    it('invokes createGlossaryEntry without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.GlossaryEntry()
      );
      client.innerApiCalls.createGlossaryEntry =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createGlossaryEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGlossaryEntry without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.GlossaryEntry()
      );
      client.innerApiCalls.createGlossaryEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createGlossaryEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IGlossaryEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGlossaryEntry with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGlossaryEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createGlossaryEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGlossaryEntry with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createGlossaryEntry(request), expectedError);
    });
  });

  describe('updateGlossaryEntry', () => {
    it('invokes updateGlossaryEntry without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.UpdateGlossaryEntryRequest()
      );
      request.glossaryEntry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.UpdateGlossaryEntryRequest',
        ['glossaryEntry', 'name']
      );
      request.glossaryEntry.name = defaultValue1;
      const expectedHeaderRequestParams = `glossary_entry.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.GlossaryEntry()
      );
      client.innerApiCalls.updateGlossaryEntry =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateGlossaryEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGlossaryEntry without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.UpdateGlossaryEntryRequest()
      );
      request.glossaryEntry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.UpdateGlossaryEntryRequest',
        ['glossaryEntry', 'name']
      );
      request.glossaryEntry.name = defaultValue1;
      const expectedHeaderRequestParams = `glossary_entry.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.GlossaryEntry()
      );
      client.innerApiCalls.updateGlossaryEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateGlossaryEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IGlossaryEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGlossaryEntry with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.UpdateGlossaryEntryRequest()
      );
      request.glossaryEntry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.UpdateGlossaryEntryRequest',
        ['glossaryEntry', 'name']
      );
      request.glossaryEntry.name = defaultValue1;
      const expectedHeaderRequestParams = `glossary_entry.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGlossaryEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateGlossaryEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGlossaryEntry with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.UpdateGlossaryEntryRequest()
      );
      request.glossaryEntry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.UpdateGlossaryEntryRequest',
        ['glossaryEntry', 'name']
      );
      request.glossaryEntry.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateGlossaryEntry(request), expectedError);
    });
  });

  describe('deleteGlossaryEntry', () => {
    it('invokes deleteGlossaryEntry without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteGlossaryEntry =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteGlossaryEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGlossaryEntry without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteGlossaryEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteGlossaryEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGlossaryEntry with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGlossaryEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteGlossaryEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGlossaryEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossaryEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGlossaryEntry with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteGlossaryEntry(request), expectedError);
    });
  });

  describe('getDataset', () => {
    it('invokes getDataset without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.Dataset()
      );
      client.innerApiCalls.getDataset = stubSimpleCall(expectedResponse);
      const [response] = await client.getDataset(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataset without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.Dataset()
      );
      client.innerApiCalls.getDataset =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDataset(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IDataset | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataset with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDataset = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getDataset(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataset with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getDataset(request), expectedError);
    });
  });

  describe('createAdaptiveMtDataset', () => {
    it('invokes createAdaptiveMtDataset without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtDataset()
      );
      client.innerApiCalls.createAdaptiveMtDataset =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createAdaptiveMtDataset(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAdaptiveMtDataset without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtDataset()
      );
      client.innerApiCalls.createAdaptiveMtDataset =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAdaptiveMtDataset(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtDataset | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAdaptiveMtDataset with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAdaptiveMtDataset = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createAdaptiveMtDataset(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAdaptiveMtDataset with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createAdaptiveMtDataset(request),
        expectedError
      );
    });
  });

  describe('deleteAdaptiveMtDataset', () => {
    it('invokes deleteAdaptiveMtDataset without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAdaptiveMtDataset =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteAdaptiveMtDataset(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtDataset without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAdaptiveMtDataset =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAdaptiveMtDataset(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtDataset with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAdaptiveMtDataset = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteAdaptiveMtDataset(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtDataset with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteAdaptiveMtDataset(request),
        expectedError
      );
    });
  });

  describe('getAdaptiveMtDataset', () => {
    it('invokes getAdaptiveMtDataset without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtDataset()
      );
      client.innerApiCalls.getAdaptiveMtDataset =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getAdaptiveMtDataset(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtDataset without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtDataset()
      );
      client.innerApiCalls.getAdaptiveMtDataset =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAdaptiveMtDataset(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtDataset | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtDataset with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAdaptiveMtDataset = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAdaptiveMtDataset(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtDataset with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAdaptiveMtDataset(request), expectedError);
    });
  });

  describe('adaptiveMtTranslate', () => {
    it('invokes adaptiveMtTranslate without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.AdaptiveMtTranslateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateResponse()
      );
      client.innerApiCalls.adaptiveMtTranslate =
        stubSimpleCall(expectedResponse);
      const [response] = await client.adaptiveMtTranslate(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes adaptiveMtTranslate without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.AdaptiveMtTranslateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateResponse()
      );
      client.innerApiCalls.adaptiveMtTranslate =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.adaptiveMtTranslate(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtTranslateResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes adaptiveMtTranslate with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.AdaptiveMtTranslateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.adaptiveMtTranslate = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.adaptiveMtTranslate(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes adaptiveMtTranslate with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.AdaptiveMtTranslateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.adaptiveMtTranslate(request), expectedError);
    });
  });

  describe('getAdaptiveMtFile', () => {
    it('invokes getAdaptiveMtFile without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtFile()
      );
      client.innerApiCalls.getAdaptiveMtFile = stubSimpleCall(expectedResponse);
      const [response] = await client.getAdaptiveMtFile(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtFile without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtFile()
      );
      client.innerApiCalls.getAdaptiveMtFile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAdaptiveMtFile(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtFile | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtFile with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAdaptiveMtFile = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAdaptiveMtFile(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtFile with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAdaptiveMtFile(request), expectedError);
    });
  });

  describe('deleteAdaptiveMtFile', () => {
    it('invokes deleteAdaptiveMtFile without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAdaptiveMtFile =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteAdaptiveMtFile(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtFile without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAdaptiveMtFile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAdaptiveMtFile(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtFile with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAdaptiveMtFile = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAdaptiveMtFile(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtFile with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteAdaptiveMtFile(request), expectedError);
    });
  });

  describe('importAdaptiveMtFile', () => {
    it('invokes importAdaptiveMtFile without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportAdaptiveMtFileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileResponse()
      );
      client.innerApiCalls.importAdaptiveMtFile =
        stubSimpleCall(expectedResponse);
      const [response] = await client.importAdaptiveMtFile(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importAdaptiveMtFile without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportAdaptiveMtFileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileResponse()
      );
      client.innerApiCalls.importAdaptiveMtFile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.importAdaptiveMtFile(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IImportAdaptiveMtFileResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importAdaptiveMtFile with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportAdaptiveMtFileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importAdaptiveMtFile = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.importAdaptiveMtFile(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importAdaptiveMtFile with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportAdaptiveMtFileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.importAdaptiveMtFile(request), expectedError);
    });
  });

  describe('getModel', () => {
    it('invokes getModel without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.Model()
      );
      client.innerApiCalls.getModel = stubSimpleCall(expectedResponse);
      const [response] = await client.getModel(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getModel without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.Model()
      );
      client.innerApiCalls.getModel =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getModel(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IModel | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getModel with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getModel = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getModel with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getModel(request), expectedError);
    });
  });

  describe('batchTranslateText', () => {
    it('invokes batchTranslateText without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.batchTranslateText =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.batchTranslateText(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateText without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.batchTranslateText =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchTranslateText(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IBatchTranslateResponse,
              protos.google.cloud.translation.v3.IBatchTranslateMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IBatchTranslateResponse,
        protos.google.cloud.translation.v3.IBatchTranslateMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateText with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchTranslateText = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchTranslateText(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateText with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchTranslateText = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.batchTranslateText(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkBatchTranslateTextProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkBatchTranslateTextProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkBatchTranslateTextProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkBatchTranslateTextProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('batchTranslateDocument', () => {
    it('invokes batchTranslateDocument without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.batchTranslateDocument =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.batchTranslateDocument(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateDocument without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.batchTranslateDocument =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchTranslateDocument(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IBatchTranslateDocumentResponse,
              protos.google.cloud.translation.v3.IBatchTranslateDocumentMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IBatchTranslateDocumentResponse,
        protos.google.cloud.translation.v3.IBatchTranslateDocumentMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateDocument with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchTranslateDocument = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.batchTranslateDocument(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateDocument with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchTranslateDocument = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.batchTranslateDocument(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkBatchTranslateDocumentProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkBatchTranslateDocumentProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkBatchTranslateDocumentProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkBatchTranslateDocumentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createGlossary', () => {
    it('invokes createGlossary without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGlossary =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createGlossary(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGlossary without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGlossary =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createGlossary(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IGlossary,
              protos.google.cloud.translation.v3.ICreateGlossaryMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IGlossary,
        protos.google.cloud.translation.v3.ICreateGlossaryMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGlossary with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGlossary = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createGlossary(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGlossary with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGlossary = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createGlossary(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateGlossaryProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateGlossaryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateGlossaryProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateGlossaryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateGlossary', () => {
    it('invokes updateGlossary without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.UpdateGlossaryRequest()
      );
      request.glossary ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.UpdateGlossaryRequest',
        ['glossary', 'name']
      );
      request.glossary.name = defaultValue1;
      const expectedHeaderRequestParams = `glossary.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateGlossary =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateGlossary(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGlossary without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.UpdateGlossaryRequest()
      );
      request.glossary ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.UpdateGlossaryRequest',
        ['glossary', 'name']
      );
      request.glossary.name = defaultValue1;
      const expectedHeaderRequestParams = `glossary.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateGlossary =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateGlossary(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IGlossary,
              protos.google.cloud.translation.v3.IUpdateGlossaryMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IGlossary,
        protos.google.cloud.translation.v3.IUpdateGlossaryMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGlossary with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.UpdateGlossaryRequest()
      );
      request.glossary ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.UpdateGlossaryRequest',
        ['glossary', 'name']
      );
      request.glossary.name = defaultValue1;
      const expectedHeaderRequestParams = `glossary.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGlossary = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateGlossary(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGlossary with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.UpdateGlossaryRequest()
      );
      request.glossary ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.UpdateGlossaryRequest',
        ['glossary', 'name']
      );
      request.glossary.name = defaultValue1;
      const expectedHeaderRequestParams = `glossary.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGlossary = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateGlossary(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateGlossaryProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateGlossaryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateGlossaryProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateGlossaryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteGlossary', () => {
    it('invokes deleteGlossary without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGlossary =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteGlossary(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGlossary without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGlossary =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteGlossary(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IDeleteGlossaryResponse,
              protos.google.cloud.translation.v3.IDeleteGlossaryMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IDeleteGlossaryResponse,
        protos.google.cloud.translation.v3.IDeleteGlossaryMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGlossary with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGlossary = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteGlossary(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGlossary with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGlossary = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteGlossary(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteGlossaryProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteGlossaryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteGlossaryProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteGlossaryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createDataset', () => {
    it('invokes createDataset without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createDataset =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createDataset(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDataset without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createDataset =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createDataset(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IDataset,
              protos.google.cloud.translation.v3.ICreateDatasetMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IDataset,
        protos.google.cloud.translation.v3.ICreateDatasetMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDataset with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDataset = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createDataset(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDataset with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDataset = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createDataset(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateDatasetProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateDatasetProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateDatasetProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateDatasetProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteDataset', () => {
    it('invokes deleteDataset without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteDataset =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteDataset(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDataset without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteDataset =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteDataset(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.translation.v3.IDeleteDatasetMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.translation.v3.IDeleteDatasetMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDataset with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDataset = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteDataset(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDataset with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDataset = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteDataset(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteDatasetProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteDatasetProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteDatasetProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteDatasetProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('importData', () => {
    it('invokes importData without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportDataRequest',
        ['dataset']
      );
      request.dataset = defaultValue1;
      const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.importData = stubLongRunningCall(expectedResponse);
      const [operation] = await client.importData(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importData without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportDataRequest',
        ['dataset']
      );
      request.dataset = defaultValue1;
      const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.importData =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.importData(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.translation.v3.IImportDataMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.translation.v3.IImportDataMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importData with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportDataRequest',
        ['dataset']
      );
      request.dataset = defaultValue1;
      const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importData = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.importData(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.importData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importData with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportDataRequest',
        ['dataset']
      );
      request.dataset = defaultValue1;
      const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importData = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.importData(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.importData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkImportDataProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkImportDataProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkImportDataProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkImportDataProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('exportData', () => {
    it('invokes exportData without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ExportDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ExportDataRequest',
        ['dataset']
      );
      request.dataset = defaultValue1;
      const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.exportData = stubLongRunningCall(expectedResponse);
      const [operation] = await client.exportData(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.exportData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportData without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ExportDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ExportDataRequest',
        ['dataset']
      );
      request.dataset = defaultValue1;
      const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.exportData =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.exportData(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.translation.v3.IExportDataMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.translation.v3.IExportDataMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.exportData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportData with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ExportDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ExportDataRequest',
        ['dataset']
      );
      request.dataset = defaultValue1;
      const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.exportData = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.exportData(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.exportData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes exportData with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ExportDataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ExportDataRequest',
        ['dataset']
      );
      request.dataset = defaultValue1;
      const expectedHeaderRequestParams = `dataset=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.exportData = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.exportData(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.exportData as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.exportData as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkExportDataProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkExportDataProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkExportDataProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkExportDataProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createModel', () => {
    it('invokes createModel without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createModel = stubLongRunningCall(expectedResponse);
      const [operation] = await client.createModel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createModel without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createModel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createModel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IModel,
              protos.google.cloud.translation.v3.ICreateModelMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IModel,
        protos.google.cloud.translation.v3.ICreateModelMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createModel with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createModel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createModel with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateModelRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createModel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createModel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateModelProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateModelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateModelProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkCreateModelProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteModel', () => {
    it('invokes deleteModel without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteModel = stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteModel(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteModel without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteModel =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteModel(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.translation.v3.IDeleteModelMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.translation.v3.IDeleteModelMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteModel with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteModel = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteModel(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteModel with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteModelRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteModelRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteModel = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteModel(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteModel as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteModel as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteModelProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteModelProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteModelProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkDeleteModelProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listGlossaries', () => {
    it('invokes listGlossaries without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
      ];
      client.innerApiCalls.listGlossaries = stubSimpleCall(expectedResponse);
      const [response] = await client.listGlossaries(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGlossaries without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
      ];
      client.innerApiCalls.listGlossaries =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listGlossaries(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IGlossary[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGlossaries with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listGlossaries = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listGlossaries(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGlossariesStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
      ];
      client.descriptors.page.listGlossaries.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listGlossariesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Glossary[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Glossary) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listGlossaries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGlossaries, request)
      );
      assert(
        (client.descriptors.page.listGlossaries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listGlossariesStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGlossaries.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listGlossariesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Glossary[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Glossary) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listGlossaries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGlossaries, request)
      );
      assert(
        (client.descriptors.page.listGlossaries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listGlossaries without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
      ];
      client.descriptors.page.listGlossaries.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IGlossary[] = [];
      const iterable = client.listGlossariesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGlossaries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGlossaries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listGlossaries with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGlossaries.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listGlossariesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IGlossary[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGlossaries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGlossaries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listGlossaryEntries', () => {
    it('invokes listGlossaryEntries without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossaryEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossaryEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
      ];
      client.innerApiCalls.listGlossaryEntries =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listGlossaryEntries(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGlossaryEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGlossaryEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGlossaryEntries without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossaryEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossaryEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
      ];
      client.innerApiCalls.listGlossaryEntries =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listGlossaryEntries(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IGlossaryEntry[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGlossaryEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGlossaryEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGlossaryEntries with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossaryEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossaryEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listGlossaryEntries = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listGlossaryEntries(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listGlossaryEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGlossaryEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGlossaryEntriesStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossaryEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossaryEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
      ];
      client.descriptors.page.listGlossaryEntries.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listGlossaryEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.GlossaryEntry[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.GlossaryEntry) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listGlossaryEntries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGlossaryEntries, request)
      );
      assert(
        (client.descriptors.page.listGlossaryEntries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listGlossaryEntriesStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossaryEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossaryEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGlossaryEntries.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listGlossaryEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.GlossaryEntry[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.GlossaryEntry) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listGlossaryEntries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGlossaryEntries, request)
      );
      assert(
        (client.descriptors.page.listGlossaryEntries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listGlossaryEntries without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossaryEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossaryEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.GlossaryEntry()
        ),
      ];
      client.descriptors.page.listGlossaryEntries.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IGlossaryEntry[] = [];
      const iterable = client.listGlossaryEntriesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGlossaryEntries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGlossaryEntries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listGlossaryEntries with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossaryEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossaryEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGlossaryEntries.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listGlossaryEntriesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IGlossaryEntry[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGlossaryEntries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGlossaryEntries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listDatasets', () => {
    it('invokes listDatasets without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
      ];
      client.innerApiCalls.listDatasets = stubSimpleCall(expectedResponse);
      const [response] = await client.listDatasets(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDatasets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDatasets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDatasets without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
      ];
      client.innerApiCalls.listDatasets =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDatasets(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IDataset[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDatasets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDatasets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDatasets with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDatasets = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listDatasets(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listDatasets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDatasets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDatasetsStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
      ];
      client.descriptors.page.listDatasets.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDatasetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Dataset[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Dataset) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listDatasets.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDatasets, request)
      );
      assert(
        (client.descriptors.page.listDatasets.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listDatasetsStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDatasets.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listDatasetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Dataset[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Dataset) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listDatasets.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDatasets, request)
      );
      assert(
        (client.descriptors.page.listDatasets.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listDatasets without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Dataset()),
      ];
      client.descriptors.page.listDatasets.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IDataset[] = [];
      const iterable = client.listDatasetsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDatasets.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDatasets.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listDatasets with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDatasets.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDatasetsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IDataset[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDatasets.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDatasets.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listAdaptiveMtDatasets', () => {
    it('invokes listAdaptiveMtDatasets without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtDatasets =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAdaptiveMtDatasets(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtDatasets without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtDatasets =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAdaptiveMtDatasets(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.translation.v3.IAdaptiveMtDataset[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtDatasets with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAdaptiveMtDatasets = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAdaptiveMtDatasets(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtDatasetsStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
      ];
      client.descriptors.page.listAdaptiveMtDatasets.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAdaptiveMtDatasetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtDataset[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtDataset) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtDatasets, request)
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAdaptiveMtDatasetsStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtDatasets.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAdaptiveMtDatasetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtDataset[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtDataset) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtDatasets, request)
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtDatasets without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
      ];
      client.descriptors.page.listAdaptiveMtDatasets.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IAdaptiveMtDataset[] =
        [];
      const iterable = client.listAdaptiveMtDatasetsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtDatasets with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtDatasets.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAdaptiveMtDatasetsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IAdaptiveMtDataset[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAdaptiveMtFiles', () => {
    it('invokes listAdaptiveMtFiles without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtFiles =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAdaptiveMtFiles(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtFiles without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtFiles =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAdaptiveMtFiles(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtFile[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtFiles with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAdaptiveMtFiles = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAdaptiveMtFiles(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtFilesStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
      ];
      client.descriptors.page.listAdaptiveMtFiles.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAdaptiveMtFilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtFile[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtFile) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtFiles, request)
      );
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listAdaptiveMtFilesStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtFiles.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAdaptiveMtFilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtFile[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtFile) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtFiles, request)
      );
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listAdaptiveMtFiles without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
      ];
      client.descriptors.page.listAdaptiveMtFiles.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IAdaptiveMtFile[] =
        [];
      const iterable = client.listAdaptiveMtFilesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtFiles.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listAdaptiveMtFiles with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtFiles.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAdaptiveMtFilesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IAdaptiveMtFile[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtFiles.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listAdaptiveMtSentences', () => {
    it('invokes listAdaptiveMtSentences without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtSentences =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAdaptiveMtSentences(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtSentences without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtSentences =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAdaptiveMtSentences(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.translation.v3.IAdaptiveMtSentence[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtSentences with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAdaptiveMtSentences = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAdaptiveMtSentences(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtSentencesStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
      ];
      client.descriptors.page.listAdaptiveMtSentences.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAdaptiveMtSentencesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtSentence[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtSentence) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtSentences, request)
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAdaptiveMtSentencesStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtSentences.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAdaptiveMtSentencesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtSentence[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtSentence) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtSentences, request)
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtSentences without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
      ];
      client.descriptors.page.listAdaptiveMtSentences.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IAdaptiveMtSentence[] =
        [];
      const iterable = client.listAdaptiveMtSentencesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtSentences with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtSentences.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAdaptiveMtSentencesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IAdaptiveMtSentence[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listExamples', () => {
    it('invokes listExamples without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListExamplesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListExamplesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
      ];
      client.innerApiCalls.listExamples = stubSimpleCall(expectedResponse);
      const [response] = await client.listExamples(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listExamples as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listExamples as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listExamples without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListExamplesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListExamplesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
      ];
      client.innerApiCalls.listExamples =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listExamples(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IExample[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listExamples as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listExamples as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listExamples with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListExamplesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListExamplesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listExamples = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listExamples(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listExamples as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listExamples as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listExamplesStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListExamplesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListExamplesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
      ];
      client.descriptors.page.listExamples.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listExamplesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Example[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Example) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listExamples.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listExamples, request)
      );
      assert(
        (client.descriptors.page.listExamples.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listExamplesStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListExamplesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListExamplesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listExamples.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listExamplesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Example[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Example) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listExamples.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listExamples, request)
      );
      assert(
        (client.descriptors.page.listExamples.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listExamples without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListExamplesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListExamplesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Example()),
      ];
      client.descriptors.page.listExamples.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IExample[] = [];
      const iterable = client.listExamplesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listExamples.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listExamples.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listExamples with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListExamplesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListExamplesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listExamples.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listExamplesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IExample[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listExamples.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listExamples.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listModels', () => {
    it('invokes listModels without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
      ];
      client.innerApiCalls.listModels = stubSimpleCall(expectedResponse);
      const [response] = await client.listModels(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listModels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listModels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listModels without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
      ];
      client.innerApiCalls.listModels =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listModels(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IModel[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listModels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listModels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listModels with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listModels = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listModels(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listModels as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listModels as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listModelsStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
      ];
      client.descriptors.page.listModels.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listModelsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Model[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Model) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listModels.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listModels, request)
      );
      assert(
        (client.descriptors.page.listModels.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listModelsStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listModels.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listModelsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Model[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Model) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listModels.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listModels, request)
      );
      assert(
        (client.descriptors.page.listModels.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listModels without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
        generateSampleMessage(new protos.google.cloud.translation.v3.Model()),
      ];
      client.descriptors.page.listModels.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IModel[] = [];
      const iterable = client.listModelsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listModels.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listModels.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listModels with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListModelsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListModelsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listModels.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listModelsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IModel[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listModels.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listModels.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('adaptiveMtDataset', () => {
      const fakePath = '/rendered/path/adaptiveMtDataset';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.adaptiveMtDatasetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.adaptiveMtDatasetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('adaptiveMtDatasetPath', () => {
        const result = client.adaptiveMtDatasetPath(
          'projectValue',
          'locationValue',
          'datasetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.adaptiveMtDatasetPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAdaptiveMtDatasetName', () => {
        const result = client.matchProjectFromAdaptiveMtDatasetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.adaptiveMtDatasetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAdaptiveMtDatasetName', () => {
        const result = client.matchLocationFromAdaptiveMtDatasetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.adaptiveMtDatasetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAdaptiveMtDatasetName', () => {
        const result = client.matchDatasetFromAdaptiveMtDatasetName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (
            client.pathTemplates.adaptiveMtDatasetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('adaptiveMtFile', () => {
      const fakePath = '/rendered/path/adaptiveMtFile';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        file: 'fileValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.adaptiveMtFilePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.adaptiveMtFilePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('adaptiveMtFilePath', () => {
        const result = client.adaptiveMtFilePath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'fileValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAdaptiveMtFileName', () => {
        const result = client.matchProjectFromAdaptiveMtFileName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAdaptiveMtFileName', () => {
        const result = client.matchLocationFromAdaptiveMtFileName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAdaptiveMtFileName', () => {
        const result = client.matchDatasetFromAdaptiveMtFileName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFileFromAdaptiveMtFileName', () => {
        const result = client.matchFileFromAdaptiveMtFileName(fakePath);
        assert.strictEqual(result, 'fileValue');
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('adaptiveMtSentence', () => {
      const fakePath = '/rendered/path/adaptiveMtSentence';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        file: 'fileValue',
        sentence: 'sentenceValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.adaptiveMtSentencePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.adaptiveMtSentencePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('adaptiveMtSentencePath', () => {
        const result = client.adaptiveMtSentencePath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'fileValue',
          'sentenceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAdaptiveMtSentenceName', () => {
        const result = client.matchProjectFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAdaptiveMtSentenceName', () => {
        const result = client.matchLocationFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAdaptiveMtSentenceName', () => {
        const result = client.matchDatasetFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFileFromAdaptiveMtSentenceName', () => {
        const result = client.matchFileFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'fileValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSentenceFromAdaptiveMtSentenceName', () => {
        const result = client.matchSentenceFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'sentenceValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataset', () => {
      const fakePath = '/rendered/path/dataset';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.datasetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.datasetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('datasetPath', () => {
        const result = client.datasetPath(
          'projectValue',
          'locationValue',
          'datasetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.datasetPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDatasetName', () => {
        const result = client.matchProjectFromDatasetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDatasetName', () => {
        const result = client.matchLocationFromDatasetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromDatasetName', () => {
        const result = client.matchDatasetFromDatasetName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('example', () => {
      const fakePath = '/rendered/path/example';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        example: 'exampleValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.examplePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.examplePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('examplePath', () => {
        const result = client.examplePath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'exampleValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.examplePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromExampleName', () => {
        const result = client.matchProjectFromExampleName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.examplePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromExampleName', () => {
        const result = client.matchLocationFromExampleName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.examplePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromExampleName', () => {
        const result = client.matchDatasetFromExampleName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.examplePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchExampleFromExampleName', () => {
        const result = client.matchExampleFromExampleName(fakePath);
        assert.strictEqual(result, 'exampleValue');
        assert(
          (client.pathTemplates.examplePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('glossary', () => {
      const fakePath = '/rendered/path/glossary';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        glossary: 'glossaryValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.glossaryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.glossaryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('glossaryPath', () => {
        const result = client.glossaryPath(
          'projectValue',
          'locationValue',
          'glossaryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.glossaryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGlossaryName', () => {
        const result = client.matchProjectFromGlossaryName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.glossaryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGlossaryName', () => {
        const result = client.matchLocationFromGlossaryName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.glossaryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchGlossaryFromGlossaryName', () => {
        const result = client.matchGlossaryFromGlossaryName(fakePath);
        assert.strictEqual(result, 'glossaryValue');
        assert(
          (client.pathTemplates.glossaryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('glossaryEntry', () => {
      const fakePath = '/rendered/path/glossaryEntry';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        glossary: 'glossaryValue',
        glossary_entry: 'glossaryEntryValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.glossaryEntryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.glossaryEntryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('glossaryEntryPath', () => {
        const result = client.glossaryEntryPath(
          'projectValue',
          'locationValue',
          'glossaryValue',
          'glossaryEntryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.glossaryEntryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGlossaryEntryName', () => {
        const result = client.matchProjectFromGlossaryEntryName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.glossaryEntryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGlossaryEntryName', () => {
        const result = client.matchLocationFromGlossaryEntryName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.glossaryEntryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchGlossaryFromGlossaryEntryName', () => {
        const result = client.matchGlossaryFromGlossaryEntryName(fakePath);
        assert.strictEqual(result, 'glossaryValue');
        assert(
          (client.pathTemplates.glossaryEntryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchGlossaryEntryFromGlossaryEntryName', () => {
        const result = client.matchGlossaryEntryFromGlossaryEntryName(fakePath);
        assert.strictEqual(result, 'glossaryEntryValue');
        assert(
          (client.pathTemplates.glossaryEntryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('model', () => {
      const fakePath = '/rendered/path/model';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        model: 'modelValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.modelPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.modelPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('modelPath', () => {
        const result = client.modelPath(
          'projectValue',
          'locationValue',
          'modelValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.modelPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromModelName', () => {
        const result = client.matchProjectFromModelName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromModelName', () => {
        const result = client.matchLocationFromModelName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchModelFromModelName', () => {
        const result = client.matchModelFromModelName(fakePath);
        assert.strictEqual(result, 'modelValue');
        assert(
          (client.pathTemplates.modelPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
