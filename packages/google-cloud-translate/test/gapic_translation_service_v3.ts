// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as translationserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v3.TranslationServiceClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'translate.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process !== 'undefined' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          translationserviceModule.v3.TranslationServiceClient.servicePath;
        assert.strictEqual(servicePath, 'translate.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          translationserviceModule.v3.TranslationServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'translate.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'translate.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'translate.example.com');
    });
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new translationserviceModule.v3.TranslationServiceClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = translationserviceModule.v3.TranslationServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.translationServiceStub, undefined);
      await client.initialize();
      assert(client.translationServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.translationServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.translationServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('translateText', () => {
    it('invokes translateText without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextResponse()
      );
      client.innerApiCalls.translateText = stubSimpleCall(expectedResponse);
      const [response] = await client.translateText(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateText without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextResponse()
      );
      client.innerApiCalls.translateText =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.translateText(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.ITranslateTextResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateText with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.translateText = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.translateText(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateText with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.translateText(request), expectedError);
    });
  });

  describe('detectLanguage', () => {
    it('invokes detectLanguage without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DetectLanguageRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageResponse()
      );
      client.innerApiCalls.detectLanguage = stubSimpleCall(expectedResponse);
      const [response] = await client.detectLanguage(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detectLanguage without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DetectLanguageRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageResponse()
      );
      client.innerApiCalls.detectLanguage =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.detectLanguage(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IDetectLanguageResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detectLanguage with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DetectLanguageRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.detectLanguage = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.detectLanguage(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.detectLanguage as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes detectLanguage with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DetectLanguageRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DetectLanguageRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.detectLanguage(request), expectedError);
    });
  });

  describe('getSupportedLanguages', () => {
    it('invokes getSupportedLanguages without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetSupportedLanguagesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetSupportedLanguagesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.SupportedLanguages()
      );
      client.innerApiCalls.getSupportedLanguages =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getSupportedLanguages(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSupportedLanguages without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetSupportedLanguagesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetSupportedLanguagesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.SupportedLanguages()
      );
      client.innerApiCalls.getSupportedLanguages =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getSupportedLanguages(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.ISupportedLanguages | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSupportedLanguages with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetSupportedLanguagesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetSupportedLanguagesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getSupportedLanguages = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getSupportedLanguages(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getSupportedLanguages as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getSupportedLanguages with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetSupportedLanguagesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetSupportedLanguagesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getSupportedLanguages(request),
        expectedError
      );
    });
  });

  describe('translateDocument', () => {
    it('invokes translateDocument without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentResponse()
      );
      client.innerApiCalls.translateDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.translateDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateDocument without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentResponse()
      );
      client.innerApiCalls.translateDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.translateDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.ITranslateDocumentResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateDocument with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.translateDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.translateDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.translateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes translateDocument with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.TranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.TranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.translateDocument(request), expectedError);
    });
  });

  describe('getGlossary', () => {
    it('invokes getGlossary without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.Glossary()
      );
      client.innerApiCalls.getGlossary = stubSimpleCall(expectedResponse);
      const [response] = await client.getGlossary(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlossary without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.Glossary()
      );
      client.innerApiCalls.getGlossary =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGlossary(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IGlossary | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlossary with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGlossary = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getGlossary(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlossary with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getGlossary(request), expectedError);
    });
  });

  describe('createAdaptiveMtDataset', () => {
    it('invokes createAdaptiveMtDataset without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtDataset()
      );
      client.innerApiCalls.createAdaptiveMtDataset =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createAdaptiveMtDataset(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAdaptiveMtDataset without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtDataset()
      );
      client.innerApiCalls.createAdaptiveMtDataset =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAdaptiveMtDataset(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtDataset | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAdaptiveMtDataset with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAdaptiveMtDataset = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createAdaptiveMtDataset(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAdaptiveMtDataset with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateAdaptiveMtDatasetRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createAdaptiveMtDataset(request),
        expectedError
      );
    });
  });

  describe('deleteAdaptiveMtDataset', () => {
    it('invokes deleteAdaptiveMtDataset without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAdaptiveMtDataset =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteAdaptiveMtDataset(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtDataset without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAdaptiveMtDataset =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAdaptiveMtDataset(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtDataset with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAdaptiveMtDataset = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteAdaptiveMtDataset(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtDataset with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteAdaptiveMtDataset(request),
        expectedError
      );
    });
  });

  describe('getAdaptiveMtDataset', () => {
    it('invokes getAdaptiveMtDataset without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtDataset()
      );
      client.innerApiCalls.getAdaptiveMtDataset =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getAdaptiveMtDataset(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtDataset without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtDataset()
      );
      client.innerApiCalls.getAdaptiveMtDataset =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAdaptiveMtDataset(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtDataset | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtDataset with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAdaptiveMtDataset = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAdaptiveMtDataset(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtDataset with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtDatasetRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAdaptiveMtDataset(request), expectedError);
    });
  });

  describe('adaptiveMtTranslate', () => {
    it('invokes adaptiveMtTranslate without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.AdaptiveMtTranslateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateResponse()
      );
      client.innerApiCalls.adaptiveMtTranslate =
        stubSimpleCall(expectedResponse);
      const [response] = await client.adaptiveMtTranslate(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes adaptiveMtTranslate without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.AdaptiveMtTranslateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateResponse()
      );
      client.innerApiCalls.adaptiveMtTranslate =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.adaptiveMtTranslate(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtTranslateResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes adaptiveMtTranslate with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.AdaptiveMtTranslateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.adaptiveMtTranslate = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.adaptiveMtTranslate(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.adaptiveMtTranslate as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes adaptiveMtTranslate with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtTranslateRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.AdaptiveMtTranslateRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.adaptiveMtTranslate(request), expectedError);
    });
  });

  describe('getAdaptiveMtFile', () => {
    it('invokes getAdaptiveMtFile without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtFile()
      );
      client.innerApiCalls.getAdaptiveMtFile = stubSimpleCall(expectedResponse);
      const [response] = await client.getAdaptiveMtFile(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtFile without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.AdaptiveMtFile()
      );
      client.innerApiCalls.getAdaptiveMtFile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAdaptiveMtFile(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtFile | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtFile with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAdaptiveMtFile = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAdaptiveMtFile(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAdaptiveMtFile with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.GetAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.GetAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAdaptiveMtFile(request), expectedError);
    });
  });

  describe('deleteAdaptiveMtFile', () => {
    it('invokes deleteAdaptiveMtFile without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAdaptiveMtFile =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteAdaptiveMtFile(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtFile without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAdaptiveMtFile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAdaptiveMtFile(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtFile with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAdaptiveMtFile = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAdaptiveMtFile(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAdaptiveMtFile with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteAdaptiveMtFileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteAdaptiveMtFile(request), expectedError);
    });
  });

  describe('importAdaptiveMtFile', () => {
    it('invokes importAdaptiveMtFile without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportAdaptiveMtFileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileResponse()
      );
      client.innerApiCalls.importAdaptiveMtFile =
        stubSimpleCall(expectedResponse);
      const [response] = await client.importAdaptiveMtFile(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importAdaptiveMtFile without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportAdaptiveMtFileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileResponse()
      );
      client.innerApiCalls.importAdaptiveMtFile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.importAdaptiveMtFile(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IImportAdaptiveMtFileResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importAdaptiveMtFile with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportAdaptiveMtFileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importAdaptiveMtFile = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.importAdaptiveMtFile(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importAdaptiveMtFile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importAdaptiveMtFile with closed client', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ImportAdaptiveMtFileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ImportAdaptiveMtFileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.importAdaptiveMtFile(request), expectedError);
    });
  });

  describe('batchTranslateText', () => {
    it('invokes batchTranslateText without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.batchTranslateText =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.batchTranslateText(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateText without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.batchTranslateText =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchTranslateText(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IBatchTranslateResponse,
              protos.google.cloud.translation.v3.IBatchTranslateMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IBatchTranslateResponse,
        protos.google.cloud.translation.v3.IBatchTranslateMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateText with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchTranslateText = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchTranslateText(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateText with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateTextRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateTextRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchTranslateText = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.batchTranslateText(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateText as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkBatchTranslateTextProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkBatchTranslateTextProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkBatchTranslateTextProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkBatchTranslateTextProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('batchTranslateDocument', () => {
    it('invokes batchTranslateDocument without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.batchTranslateDocument =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.batchTranslateDocument(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateDocument without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.batchTranslateDocument =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchTranslateDocument(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IBatchTranslateDocumentResponse,
              protos.google.cloud.translation.v3.IBatchTranslateDocumentMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IBatchTranslateDocumentResponse,
        protos.google.cloud.translation.v3.IBatchTranslateDocumentMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateDocument with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchTranslateDocument = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.batchTranslateDocument(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchTranslateDocument with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.BatchTranslateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.BatchTranslateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchTranslateDocument = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.batchTranslateDocument(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchTranslateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkBatchTranslateDocumentProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkBatchTranslateDocumentProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkBatchTranslateDocumentProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkBatchTranslateDocumentProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createGlossary', () => {
    it('invokes createGlossary without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGlossary =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createGlossary(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGlossary without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createGlossary =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createGlossary(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IGlossary,
              protos.google.cloud.translation.v3.ICreateGlossaryMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IGlossary,
        protos.google.cloud.translation.v3.ICreateGlossaryMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGlossary with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGlossary = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createGlossary(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGlossary with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.CreateGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.CreateGlossaryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGlossary = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createGlossary(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateGlossaryProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateGlossaryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateGlossaryProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateGlossaryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteGlossary', () => {
    it('invokes deleteGlossary without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGlossary =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteGlossary(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGlossary without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteGlossary =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteGlossary(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.translation.v3.IDeleteGlossaryResponse,
              protos.google.cloud.translation.v3.IDeleteGlossaryMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.translation.v3.IDeleteGlossaryResponse,
        protos.google.cloud.translation.v3.IDeleteGlossaryMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGlossary with call error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGlossary = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteGlossary(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGlossary with LRO error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.DeleteGlossaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.DeleteGlossaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGlossary = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteGlossary(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGlossary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteGlossaryProgress without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteGlossaryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteGlossaryProgress with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteGlossaryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listGlossaries', () => {
    it('invokes listGlossaries without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
      ];
      client.innerApiCalls.listGlossaries = stubSimpleCall(expectedResponse);
      const [response] = await client.listGlossaries(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGlossaries without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
      ];
      client.innerApiCalls.listGlossaries =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listGlossaries(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IGlossary[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGlossaries with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listGlossaries = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listGlossaries(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGlossaries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGlossariesStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
      ];
      client.descriptors.page.listGlossaries.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listGlossariesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Glossary[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Glossary) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listGlossaries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGlossaries, request)
      );
      assert(
        (client.descriptors.page.listGlossaries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listGlossariesStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGlossaries.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listGlossariesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.Glossary[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.Glossary) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listGlossaries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGlossaries, request)
      );
      assert(
        (client.descriptors.page.listGlossaries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGlossaries without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.Glossary()
        ),
      ];
      client.descriptors.page.listGlossaries.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IGlossary[] = [];
      const iterable = client.listGlossariesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGlossaries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGlossaries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGlossaries with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListGlossariesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListGlossariesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGlossaries.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listGlossariesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IGlossary[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGlossaries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGlossaries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAdaptiveMtDatasets', () => {
    it('invokes listAdaptiveMtDatasets without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtDatasets =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAdaptiveMtDatasets(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtDatasets without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtDatasets =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAdaptiveMtDatasets(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.translation.v3.IAdaptiveMtDataset[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtDatasets with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAdaptiveMtDatasets = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAdaptiveMtDatasets(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtDatasets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtDatasetsStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
      ];
      client.descriptors.page.listAdaptiveMtDatasets.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAdaptiveMtDatasetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtDataset[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtDataset) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtDatasets, request)
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAdaptiveMtDatasetsStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtDatasets.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAdaptiveMtDatasetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtDataset[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtDataset) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtDatasets, request)
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtDatasets without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtDataset()
        ),
      ];
      client.descriptors.page.listAdaptiveMtDatasets.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IAdaptiveMtDataset[] =
        [];
      const iterable = client.listAdaptiveMtDatasetsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtDatasets with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtDatasetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtDatasets.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAdaptiveMtDatasetsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IAdaptiveMtDataset[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtDatasets
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAdaptiveMtFiles', () => {
    it('invokes listAdaptiveMtFiles without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtFiles =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAdaptiveMtFiles(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtFiles without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtFiles =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAdaptiveMtFiles(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.translation.v3.IAdaptiveMtFile[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtFiles with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAdaptiveMtFiles = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAdaptiveMtFiles(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtFiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtFilesStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
      ];
      client.descriptors.page.listAdaptiveMtFiles.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAdaptiveMtFilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtFile[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtFile) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtFiles, request)
      );
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAdaptiveMtFilesStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtFiles.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAdaptiveMtFilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtFile[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtFile) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtFiles, request)
      );
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtFiles without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtFile()
        ),
      ];
      client.descriptors.page.listAdaptiveMtFiles.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IAdaptiveMtFile[] =
        [];
      const iterable = client.listAdaptiveMtFilesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtFiles.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtFiles with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtFilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtFilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtFiles.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAdaptiveMtFilesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IAdaptiveMtFile[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtFiles.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAdaptiveMtFiles.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAdaptiveMtSentences', () => {
    it('invokes listAdaptiveMtSentences without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtSentences =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAdaptiveMtSentences(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtSentences without error using callback', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
      ];
      client.innerApiCalls.listAdaptiveMtSentences =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAdaptiveMtSentences(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.translation.v3.IAdaptiveMtSentence[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtSentences with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAdaptiveMtSentences = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAdaptiveMtSentences(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAdaptiveMtSentences as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAdaptiveMtSentencesStream without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
      ];
      client.descriptors.page.listAdaptiveMtSentences.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAdaptiveMtSentencesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtSentence[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtSentence) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtSentences, request)
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAdaptiveMtSentencesStream with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtSentences.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAdaptiveMtSentencesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.translation.v3.AdaptiveMtSentence[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.translation.v3.AdaptiveMtSentence) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAdaptiveMtSentences, request)
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtSentences without error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
        generateSampleMessage(
          new protos.google.cloud.translation.v3.AdaptiveMtSentence()
        ),
      ];
      client.descriptors.page.listAdaptiveMtSentences.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.translation.v3.IAdaptiveMtSentence[] =
        [];
      const iterable = client.listAdaptiveMtSentencesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAdaptiveMtSentences with error', async () => {
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.translation.v3.ListAdaptiveMtSentencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAdaptiveMtSentences.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAdaptiveMtSentencesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.translation.v3.IAdaptiveMtSentence[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAdaptiveMtSentences
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('adaptiveMtDataset', () => {
      const fakePath = '/rendered/path/adaptiveMtDataset';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.adaptiveMtDatasetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.adaptiveMtDatasetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('adaptiveMtDatasetPath', () => {
        const result = client.adaptiveMtDatasetPath(
          'projectValue',
          'locationValue',
          'datasetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.adaptiveMtDatasetPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAdaptiveMtDatasetName', () => {
        const result = client.matchProjectFromAdaptiveMtDatasetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.adaptiveMtDatasetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAdaptiveMtDatasetName', () => {
        const result = client.matchLocationFromAdaptiveMtDatasetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.adaptiveMtDatasetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAdaptiveMtDatasetName', () => {
        const result = client.matchDatasetFromAdaptiveMtDatasetName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (
            client.pathTemplates.adaptiveMtDatasetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('adaptiveMtFile', () => {
      const fakePath = '/rendered/path/adaptiveMtFile';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        file: 'fileValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.adaptiveMtFilePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.adaptiveMtFilePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('adaptiveMtFilePath', () => {
        const result = client.adaptiveMtFilePath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'fileValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAdaptiveMtFileName', () => {
        const result = client.matchProjectFromAdaptiveMtFileName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAdaptiveMtFileName', () => {
        const result = client.matchLocationFromAdaptiveMtFileName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAdaptiveMtFileName', () => {
        const result = client.matchDatasetFromAdaptiveMtFileName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFileFromAdaptiveMtFileName', () => {
        const result = client.matchFileFromAdaptiveMtFileName(fakePath);
        assert.strictEqual(result, 'fileValue');
        assert(
          (client.pathTemplates.adaptiveMtFilePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('adaptiveMtSentence', () => {
      const fakePath = '/rendered/path/adaptiveMtSentence';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataset: 'datasetValue',
        file: 'fileValue',
        sentence: 'sentenceValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.adaptiveMtSentencePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.adaptiveMtSentencePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('adaptiveMtSentencePath', () => {
        const result = client.adaptiveMtSentencePath(
          'projectValue',
          'locationValue',
          'datasetValue',
          'fileValue',
          'sentenceValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAdaptiveMtSentenceName', () => {
        const result = client.matchProjectFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAdaptiveMtSentenceName', () => {
        const result = client.matchLocationFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDatasetFromAdaptiveMtSentenceName', () => {
        const result = client.matchDatasetFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'datasetValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFileFromAdaptiveMtSentenceName', () => {
        const result = client.matchFileFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'fileValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSentenceFromAdaptiveMtSentenceName', () => {
        const result = client.matchSentenceFromAdaptiveMtSentenceName(fakePath);
        assert.strictEqual(result, 'sentenceValue');
        assert(
          (
            client.pathTemplates.adaptiveMtSentencePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('glossary', () => {
      const fakePath = '/rendered/path/glossary';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        glossary: 'glossaryValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.glossaryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.glossaryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('glossaryPath', () => {
        const result = client.glossaryPath(
          'projectValue',
          'locationValue',
          'glossaryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.glossaryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGlossaryName', () => {
        const result = client.matchProjectFromGlossaryName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.glossaryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGlossaryName', () => {
        const result = client.matchLocationFromGlossaryName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.glossaryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchGlossaryFromGlossaryName', () => {
        const result = client.matchGlossaryFromGlossaryName(fakePath);
        assert.strictEqual(result, 'glossaryValue');
        assert(
          (client.pathTemplates.glossaryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new translationserviceModule.v3.TranslationServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
