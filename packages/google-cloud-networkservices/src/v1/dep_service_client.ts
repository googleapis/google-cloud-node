// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/dep_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './dep_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service describing handlers for resources.
 * @class
 * @memberof v1
 */
export class DepServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  depServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DepServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DepServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DepServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'networkservices.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      endpointPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/endpointPolicies/{endpoint_policy}'
      ),
      gatewayPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/gateways/{gateway}'
      ),
      grpcRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/grpcRoutes/{grpc_route}'
      ),
      httpRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/httpRoutes/{http_route}'
      ),
      lbRouteExtensionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}'
      ),
      lbTrafficExtensionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      meshPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/meshes/{mesh}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      serviceBindingPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/serviceBindings/{service_binding}'
      ),
      tcpRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tcpRoutes/{tcp_route}'
      ),
      tlsRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tlsRoutes/{tls_route}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listLbTrafficExtensions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'lbTrafficExtensions'
      ),
      listLbRouteExtensions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'lbRouteExtensions'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/edgeCacheKeysets/*}:getIamPolicy',
          additional_bindings: [
            {
              get: '/v1/{resource=projects/*/locations/*/edgeCacheOrigins/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/edgeCacheServices/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/endpointPolicies/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/serviceBindings/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/meshes/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/gateways/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/edgeCacheKeysets/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/edgeCacheOrigins/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/edgeCacheServices/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/endpointPolicies/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/serviceBindings/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/meshes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/gateways/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/edgeCacheKeysets/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/edgeCacheOrigins/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/edgeCacheServices/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/endpointPolicies/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/serviceBindings/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/meshes/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/gateways/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createLbTrafficExtensionResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.LbTrafficExtension'
    ) as gax.protobuf.Type;
    const createLbTrafficExtensionMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateLbTrafficExtensionResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.LbTrafficExtension'
    ) as gax.protobuf.Type;
    const updateLbTrafficExtensionMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteLbTrafficExtensionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteLbTrafficExtensionMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createLbRouteExtensionResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.LbRouteExtension'
    ) as gax.protobuf.Type;
    const createLbRouteExtensionMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateLbRouteExtensionResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.LbRouteExtension'
    ) as gax.protobuf.Type;
    const updateLbRouteExtensionMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteLbRouteExtensionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteLbRouteExtensionMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createLbTrafficExtension: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createLbTrafficExtensionResponse.decode.bind(
          createLbTrafficExtensionResponse
        ),
        createLbTrafficExtensionMetadata.decode.bind(
          createLbTrafficExtensionMetadata
        )
      ),
      updateLbTrafficExtension: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateLbTrafficExtensionResponse.decode.bind(
          updateLbTrafficExtensionResponse
        ),
        updateLbTrafficExtensionMetadata.decode.bind(
          updateLbTrafficExtensionMetadata
        )
      ),
      deleteLbTrafficExtension: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteLbTrafficExtensionResponse.decode.bind(
          deleteLbTrafficExtensionResponse
        ),
        deleteLbTrafficExtensionMetadata.decode.bind(
          deleteLbTrafficExtensionMetadata
        )
      ),
      createLbRouteExtension: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createLbRouteExtensionResponse.decode.bind(
          createLbRouteExtensionResponse
        ),
        createLbRouteExtensionMetadata.decode.bind(
          createLbRouteExtensionMetadata
        )
      ),
      updateLbRouteExtension: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateLbRouteExtensionResponse.decode.bind(
          updateLbRouteExtensionResponse
        ),
        updateLbRouteExtensionMetadata.decode.bind(
          updateLbRouteExtensionMetadata
        )
      ),
      deleteLbRouteExtension: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteLbRouteExtensionResponse.decode.bind(
          deleteLbRouteExtensionResponse
        ),
        deleteLbRouteExtensionMetadata.decode.bind(
          deleteLbRouteExtensionMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.networkservices.v1.DepService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.depServiceStub) {
      return this.depServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.networkservices.v1.DepService.
    this.depServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.networkservices.v1.DepService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.networkservices.v1.DepService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const depServiceStubMethods = [
      'listLbTrafficExtensions',
      'getLbTrafficExtension',
      'createLbTrafficExtension',
      'updateLbTrafficExtension',
      'deleteLbTrafficExtension',
      'listLbRouteExtensions',
      'getLbRouteExtension',
      'createLbRouteExtension',
      'updateLbRouteExtension',
      'deleteLbRouteExtension',
    ];
    for (const methodName of depServiceStubMethods) {
      const callPromise = this.depServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.depServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'networkservices.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'networkservices.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of the specified `LbTrafficExtension` resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the `LbTrafficExtension` resource to get. Must be in
   *   the format
   *   `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.LbTrafficExtension|LbTrafficExtension}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.get_lb_traffic_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_GetLbTrafficExtension_async
   */
  getLbTrafficExtension(
    request?: protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ILbTrafficExtension,
      (
        | protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getLbTrafficExtension(
    request: protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.ILbTrafficExtension,
      | protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLbTrafficExtension(
    request: protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.ILbTrafficExtension,
      | protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLbTrafficExtension(
    request?: protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.ILbTrafficExtension,
          | protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.ILbTrafficExtension,
      | protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ILbTrafficExtension,
      (
        | protos.google.cloud.networkservices.v1.IGetLbTrafficExtensionRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getLbTrafficExtension(request, options, callback);
  }
  /**
   * Gets details of the specified `LbRouteExtension` resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the `LbRouteExtension` resource to get. Must be in the
   *   format
   *   `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.LbRouteExtension|LbRouteExtension}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.get_lb_route_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_GetLbRouteExtension_async
   */
  getLbRouteExtension(
    request?: protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ILbRouteExtension,
      (
        | protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getLbRouteExtension(
    request: protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.ILbRouteExtension,
      | protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLbRouteExtension(
    request: protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.ILbRouteExtension,
      | protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLbRouteExtension(
    request?: protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.ILbRouteExtension,
          | protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.ILbRouteExtension,
      | protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ILbRouteExtension,
      (
        | protos.google.cloud.networkservices.v1.IGetLbRouteExtensionRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getLbRouteExtension(request, options, callback);
  }

  /**
   * Creates a new `LbTrafficExtension` resource in a given project and
   * location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the `LbTrafficExtension` resource. Must be
   *   in the format `projects/{project}/locations/{location}`.
   * @param {string} request.lbTrafficExtensionId
   *   Required. User-provided ID of the `LbTrafficExtension` resource to be
   *   created.
   * @param {google.cloud.networkservices.v1.LbTrafficExtension} request.lbTrafficExtension
   *   Required. `LbTrafficExtension` resource to be created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server can ignore
   *   the request if it has already been completed. The server guarantees
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, ignores the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.create_lb_traffic_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_CreateLbTrafficExtension_async
   */
  createLbTrafficExtension(
    request?: protos.google.cloud.networkservices.v1.ICreateLbTrafficExtensionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createLbTrafficExtension(
    request: protos.google.cloud.networkservices.v1.ICreateLbTrafficExtensionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createLbTrafficExtension(
    request: protos.google.cloud.networkservices.v1.ICreateLbTrafficExtensionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createLbTrafficExtension(
    request?: protos.google.cloud.networkservices.v1.ICreateLbTrafficExtensionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.ILbTrafficExtension,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createLbTrafficExtension(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createLbTrafficExtension()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.create_lb_traffic_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_CreateLbTrafficExtension_async
   */
  async checkCreateLbTrafficExtensionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.LbTrafficExtension,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createLbTrafficExtension,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.LbTrafficExtension,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of the specified `LbTrafficExtension` resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Used to specify the fields to be overwritten in the
   *   `LbTrafficExtension` resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it is in the mask. If the
   *   user does not specify a mask, then all fields are overwritten.
   * @param {google.cloud.networkservices.v1.LbTrafficExtension} request.lbTrafficExtension
   *   Required. `LbTrafficExtension` resource being updated.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server can ignore
   *   the request if it has already been completed. The server guarantees
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, ignores the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.update_lb_traffic_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_UpdateLbTrafficExtension_async
   */
  updateLbTrafficExtension(
    request?: protos.google.cloud.networkservices.v1.IUpdateLbTrafficExtensionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateLbTrafficExtension(
    request: protos.google.cloud.networkservices.v1.IUpdateLbTrafficExtensionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateLbTrafficExtension(
    request: protos.google.cloud.networkservices.v1.IUpdateLbTrafficExtensionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateLbTrafficExtension(
    request?: protos.google.cloud.networkservices.v1.IUpdateLbTrafficExtensionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.ILbTrafficExtension,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ILbTrafficExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'lb_traffic_extension.name': request.lbTrafficExtension!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateLbTrafficExtension(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateLbTrafficExtension()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.update_lb_traffic_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_UpdateLbTrafficExtension_async
   */
  async checkUpdateLbTrafficExtensionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.LbTrafficExtension,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateLbTrafficExtension,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.LbTrafficExtension,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes the specified `LbTrafficExtension` resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the `LbTrafficExtension` resource to delete. Must be
   *   in the format
   *   `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server can ignore
   *   the request if it has already been completed. The server guarantees
   *   that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, ignores the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.delete_lb_traffic_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_DeleteLbTrafficExtension_async
   */
  deleteLbTrafficExtension(
    request?: protos.google.cloud.networkservices.v1.IDeleteLbTrafficExtensionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteLbTrafficExtension(
    request: protos.google.cloud.networkservices.v1.IDeleteLbTrafficExtensionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteLbTrafficExtension(
    request: protos.google.cloud.networkservices.v1.IDeleteLbTrafficExtensionRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteLbTrafficExtension(
    request?: protos.google.cloud.networkservices.v1.IDeleteLbTrafficExtensionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteLbTrafficExtension(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteLbTrafficExtension()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.delete_lb_traffic_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_DeleteLbTrafficExtension_async
   */
  async checkDeleteLbTrafficExtensionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteLbTrafficExtension,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new `LbRouteExtension` resource in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the `LbRouteExtension` resource. Must be
   *   in the format `projects/{project}/locations/{location}`.
   * @param {string} request.lbRouteExtensionId
   *   Required. User-provided ID of the `LbRouteExtension` resource to be
   *   created.
   * @param {google.cloud.networkservices.v1.LbRouteExtension} request.lbRouteExtension
   *   Required. `LbRouteExtension` resource to be created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server can ignore
   *   the request if it has already been completed. The server guarantees
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, ignores the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.create_lb_route_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_CreateLbRouteExtension_async
   */
  createLbRouteExtension(
    request?: protos.google.cloud.networkservices.v1.ICreateLbRouteExtensionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createLbRouteExtension(
    request: protos.google.cloud.networkservices.v1.ICreateLbRouteExtensionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createLbRouteExtension(
    request: protos.google.cloud.networkservices.v1.ICreateLbRouteExtensionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createLbRouteExtension(
    request?: protos.google.cloud.networkservices.v1.ICreateLbRouteExtensionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.ILbRouteExtension,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createLbRouteExtension(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createLbRouteExtension()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.create_lb_route_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_CreateLbRouteExtension_async
   */
  async checkCreateLbRouteExtensionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.LbRouteExtension,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createLbRouteExtension,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.LbRouteExtension,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of the specified `LbRouteExtension` resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Used to specify the fields to be overwritten in the
   *   `LbRouteExtension` resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field is overwritten if it is in the mask. If the
   *   user does not specify a mask, then all fields are overwritten.
   * @param {google.cloud.networkservices.v1.LbRouteExtension} request.lbRouteExtension
   *   Required. `LbRouteExtension` resource being updated.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server can ignore
   *   the request if it has already been completed. The server guarantees
   *   that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, ignores the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.update_lb_route_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_UpdateLbRouteExtension_async
   */
  updateLbRouteExtension(
    request?: protos.google.cloud.networkservices.v1.IUpdateLbRouteExtensionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateLbRouteExtension(
    request: protos.google.cloud.networkservices.v1.IUpdateLbRouteExtensionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateLbRouteExtension(
    request: protos.google.cloud.networkservices.v1.IUpdateLbRouteExtensionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateLbRouteExtension(
    request?: protos.google.cloud.networkservices.v1.IUpdateLbRouteExtensionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.ILbRouteExtension,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ILbRouteExtension,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'lb_route_extension.name': request.lbRouteExtension!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateLbRouteExtension(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateLbRouteExtension()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.update_lb_route_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_UpdateLbRouteExtension_async
   */
  async checkUpdateLbRouteExtensionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.LbRouteExtension,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateLbRouteExtension,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.LbRouteExtension,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes the specified `LbRouteExtension` resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the `LbRouteExtension` resource to delete. Must be in
   *   the format
   *   `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server can ignore
   *   the request if it has already been completed. The server guarantees
   *   that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, ignores the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.delete_lb_route_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_DeleteLbRouteExtension_async
   */
  deleteLbRouteExtension(
    request?: protos.google.cloud.networkservices.v1.IDeleteLbRouteExtensionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteLbRouteExtension(
    request: protos.google.cloud.networkservices.v1.IDeleteLbRouteExtensionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteLbRouteExtension(
    request: protos.google.cloud.networkservices.v1.IDeleteLbRouteExtensionRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteLbRouteExtension(
    request?: protos.google.cloud.networkservices.v1.IDeleteLbRouteExtensionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteLbRouteExtension(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteLbRouteExtension()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.delete_lb_route_extension.js</caption>
   * region_tag:networkservices_v1_generated_DepService_DeleteLbRouteExtension_async
   */
  async checkDeleteLbRouteExtensionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteLbRouteExtension,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Lists `LbTrafficExtension` resources in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the `LbTrafficExtension`
   *   resources are listed, specified in the following format:
   *   `projects/{project}/locations/{location}`.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server might return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results that the server returns.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.LbTrafficExtension|LbTrafficExtension}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listLbTrafficExtensionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listLbTrafficExtensions(
    request?: protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ILbTrafficExtension[],
      protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest | null,
      protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsResponse,
    ]
  >;
  listLbTrafficExtensions(
    request: protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
      | protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ILbTrafficExtension
    >
  ): void;
  listLbTrafficExtensions(
    request: protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
      | protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ILbTrafficExtension
    >
  ): void;
  listLbTrafficExtensions(
    request?: protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
          | protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.ILbTrafficExtension
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
      | protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ILbTrafficExtension
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ILbTrafficExtension[],
      protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest | null,
      protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listLbTrafficExtensions(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the `LbTrafficExtension`
   *   resources are listed, specified in the following format:
   *   `projects/{project}/locations/{location}`.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server might return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results that the server returns.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.LbTrafficExtension|LbTrafficExtension} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listLbTrafficExtensionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listLbTrafficExtensionsStream(
    request?: protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLbTrafficExtensions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLbTrafficExtensions.createStream(
      this.innerApiCalls.listLbTrafficExtensions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listLbTrafficExtensions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the `LbTrafficExtension`
   *   resources are listed, specified in the following format:
   *   `projects/{project}/locations/{location}`.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server might return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results that the server returns.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.LbTrafficExtension|LbTrafficExtension}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.list_lb_traffic_extensions.js</caption>
   * region_tag:networkservices_v1_generated_DepService_ListLbTrafficExtensions_async
   */
  listLbTrafficExtensionsAsync(
    request?: protos.google.cloud.networkservices.v1.IListLbTrafficExtensionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.ILbTrafficExtension> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLbTrafficExtensions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLbTrafficExtensions.asyncIterate(
      this.innerApiCalls['listLbTrafficExtensions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.ILbTrafficExtension>;
  }
  /**
   * Lists `LbRouteExtension` resources in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the `LbRouteExtension`
   *   resources are listed, specified in the following format:
   *   `projects/{project}/locations/{location}`.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server might return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results that the server returns.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.LbRouteExtension|LbRouteExtension}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listLbRouteExtensionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listLbRouteExtensions(
    request?: protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ILbRouteExtension[],
      protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest | null,
      protos.google.cloud.networkservices.v1.IListLbRouteExtensionsResponse,
    ]
  >;
  listLbRouteExtensions(
    request: protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
      | protos.google.cloud.networkservices.v1.IListLbRouteExtensionsResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ILbRouteExtension
    >
  ): void;
  listLbRouteExtensions(
    request: protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
      | protos.google.cloud.networkservices.v1.IListLbRouteExtensionsResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ILbRouteExtension
    >
  ): void;
  listLbRouteExtensions(
    request?: protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
          | protos.google.cloud.networkservices.v1.IListLbRouteExtensionsResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.ILbRouteExtension
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
      | protos.google.cloud.networkservices.v1.IListLbRouteExtensionsResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ILbRouteExtension
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ILbRouteExtension[],
      protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest | null,
      protos.google.cloud.networkservices.v1.IListLbRouteExtensionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listLbRouteExtensions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the `LbRouteExtension`
   *   resources are listed, specified in the following format:
   *   `projects/{project}/locations/{location}`.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server might return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results that the server returns.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.LbRouteExtension|LbRouteExtension} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listLbRouteExtensionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listLbRouteExtensionsStream(
    request?: protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLbRouteExtensions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLbRouteExtensions.createStream(
      this.innerApiCalls.listLbRouteExtensions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listLbRouteExtensions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the `LbRouteExtension`
   *   resources are listed, specified in the following format:
   *   `projects/{project}/locations/{location}`.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server might return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results that the server returns.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.LbRouteExtension|LbRouteExtension}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/dep_service.list_lb_route_extensions.js</caption>
   * region_tag:networkservices_v1_generated_DepService_ListLbRouteExtensions_async
   */
  listLbRouteExtensionsAsync(
    request?: protos.google.cloud.networkservices.v1.IListLbRouteExtensionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.ILbRouteExtension> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLbRouteExtensions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLbRouteExtensions.asyncIterate(
      this.innerApiCalls['listLbRouteExtensions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.ILbRouteExtension>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified endpointPolicy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} endpoint_policy
   * @returns {string} Resource name string.
   */
  endpointPolicyPath(
    project: string,
    location: string,
    endpointPolicy: string
  ) {
    return this.pathTemplates.endpointPolicyPathTemplate.render({
      project: project,
      location: location,
      endpoint_policy: endpointPolicy,
    });
  }

  /**
   * Parse the project from EndpointPolicy resource.
   *
   * @param {string} endpointPolicyName
   *   A fully-qualified path representing EndpointPolicy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEndpointPolicyName(endpointPolicyName: string) {
    return this.pathTemplates.endpointPolicyPathTemplate.match(
      endpointPolicyName
    ).project;
  }

  /**
   * Parse the location from EndpointPolicy resource.
   *
   * @param {string} endpointPolicyName
   *   A fully-qualified path representing EndpointPolicy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEndpointPolicyName(endpointPolicyName: string) {
    return this.pathTemplates.endpointPolicyPathTemplate.match(
      endpointPolicyName
    ).location;
  }

  /**
   * Parse the endpoint_policy from EndpointPolicy resource.
   *
   * @param {string} endpointPolicyName
   *   A fully-qualified path representing EndpointPolicy resource.
   * @returns {string} A string representing the endpoint_policy.
   */
  matchEndpointPolicyFromEndpointPolicyName(endpointPolicyName: string) {
    return this.pathTemplates.endpointPolicyPathTemplate.match(
      endpointPolicyName
    ).endpoint_policy;
  }

  /**
   * Return a fully-qualified gateway resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} gateway
   * @returns {string} Resource name string.
   */
  gatewayPath(project: string, location: string, gateway: string) {
    return this.pathTemplates.gatewayPathTemplate.render({
      project: project,
      location: location,
      gateway: gateway,
    });
  }

  /**
   * Parse the project from Gateway resource.
   *
   * @param {string} gatewayName
   *   A fully-qualified path representing Gateway resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGatewayName(gatewayName: string) {
    return this.pathTemplates.gatewayPathTemplate.match(gatewayName).project;
  }

  /**
   * Parse the location from Gateway resource.
   *
   * @param {string} gatewayName
   *   A fully-qualified path representing Gateway resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGatewayName(gatewayName: string) {
    return this.pathTemplates.gatewayPathTemplate.match(gatewayName).location;
  }

  /**
   * Parse the gateway from Gateway resource.
   *
   * @param {string} gatewayName
   *   A fully-qualified path representing Gateway resource.
   * @returns {string} A string representing the gateway.
   */
  matchGatewayFromGatewayName(gatewayName: string) {
    return this.pathTemplates.gatewayPathTemplate.match(gatewayName).gateway;
  }

  /**
   * Return a fully-qualified grpcRoute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} grpc_route
   * @returns {string} Resource name string.
   */
  grpcRoutePath(project: string, location: string, grpcRoute: string) {
    return this.pathTemplates.grpcRoutePathTemplate.render({
      project: project,
      location: location,
      grpc_route: grpcRoute,
    });
  }

  /**
   * Parse the project from GrpcRoute resource.
   *
   * @param {string} grpcRouteName
   *   A fully-qualified path representing GrpcRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGrpcRouteName(grpcRouteName: string) {
    return this.pathTemplates.grpcRoutePathTemplate.match(grpcRouteName)
      .project;
  }

  /**
   * Parse the location from GrpcRoute resource.
   *
   * @param {string} grpcRouteName
   *   A fully-qualified path representing GrpcRoute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGrpcRouteName(grpcRouteName: string) {
    return this.pathTemplates.grpcRoutePathTemplate.match(grpcRouteName)
      .location;
  }

  /**
   * Parse the grpc_route from GrpcRoute resource.
   *
   * @param {string} grpcRouteName
   *   A fully-qualified path representing GrpcRoute resource.
   * @returns {string} A string representing the grpc_route.
   */
  matchGrpcRouteFromGrpcRouteName(grpcRouteName: string) {
    return this.pathTemplates.grpcRoutePathTemplate.match(grpcRouteName)
      .grpc_route;
  }

  /**
   * Return a fully-qualified httpRoute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} http_route
   * @returns {string} Resource name string.
   */
  httpRoutePath(project: string, location: string, httpRoute: string) {
    return this.pathTemplates.httpRoutePathTemplate.render({
      project: project,
      location: location,
      http_route: httpRoute,
    });
  }

  /**
   * Parse the project from HttpRoute resource.
   *
   * @param {string} httpRouteName
   *   A fully-qualified path representing HttpRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHttpRouteName(httpRouteName: string) {
    return this.pathTemplates.httpRoutePathTemplate.match(httpRouteName)
      .project;
  }

  /**
   * Parse the location from HttpRoute resource.
   *
   * @param {string} httpRouteName
   *   A fully-qualified path representing HttpRoute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHttpRouteName(httpRouteName: string) {
    return this.pathTemplates.httpRoutePathTemplate.match(httpRouteName)
      .location;
  }

  /**
   * Parse the http_route from HttpRoute resource.
   *
   * @param {string} httpRouteName
   *   A fully-qualified path representing HttpRoute resource.
   * @returns {string} A string representing the http_route.
   */
  matchHttpRouteFromHttpRouteName(httpRouteName: string) {
    return this.pathTemplates.httpRoutePathTemplate.match(httpRouteName)
      .http_route;
  }

  /**
   * Return a fully-qualified lbRouteExtension resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lb_route_extension
   * @returns {string} Resource name string.
   */
  lbRouteExtensionPath(
    project: string,
    location: string,
    lbRouteExtension: string
  ) {
    return this.pathTemplates.lbRouteExtensionPathTemplate.render({
      project: project,
      location: location,
      lb_route_extension: lbRouteExtension,
    });
  }

  /**
   * Parse the project from LbRouteExtension resource.
   *
   * @param {string} lbRouteExtensionName
   *   A fully-qualified path representing LbRouteExtension resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLbRouteExtensionName(lbRouteExtensionName: string) {
    return this.pathTemplates.lbRouteExtensionPathTemplate.match(
      lbRouteExtensionName
    ).project;
  }

  /**
   * Parse the location from LbRouteExtension resource.
   *
   * @param {string} lbRouteExtensionName
   *   A fully-qualified path representing LbRouteExtension resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLbRouteExtensionName(lbRouteExtensionName: string) {
    return this.pathTemplates.lbRouteExtensionPathTemplate.match(
      lbRouteExtensionName
    ).location;
  }

  /**
   * Parse the lb_route_extension from LbRouteExtension resource.
   *
   * @param {string} lbRouteExtensionName
   *   A fully-qualified path representing LbRouteExtension resource.
   * @returns {string} A string representing the lb_route_extension.
   */
  matchLbRouteExtensionFromLbRouteExtensionName(lbRouteExtensionName: string) {
    return this.pathTemplates.lbRouteExtensionPathTemplate.match(
      lbRouteExtensionName
    ).lb_route_extension;
  }

  /**
   * Return a fully-qualified lbTrafficExtension resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lb_traffic_extension
   * @returns {string} Resource name string.
   */
  lbTrafficExtensionPath(
    project: string,
    location: string,
    lbTrafficExtension: string
  ) {
    return this.pathTemplates.lbTrafficExtensionPathTemplate.render({
      project: project,
      location: location,
      lb_traffic_extension: lbTrafficExtension,
    });
  }

  /**
   * Parse the project from LbTrafficExtension resource.
   *
   * @param {string} lbTrafficExtensionName
   *   A fully-qualified path representing LbTrafficExtension resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLbTrafficExtensionName(lbTrafficExtensionName: string) {
    return this.pathTemplates.lbTrafficExtensionPathTemplate.match(
      lbTrafficExtensionName
    ).project;
  }

  /**
   * Parse the location from LbTrafficExtension resource.
   *
   * @param {string} lbTrafficExtensionName
   *   A fully-qualified path representing LbTrafficExtension resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLbTrafficExtensionName(lbTrafficExtensionName: string) {
    return this.pathTemplates.lbTrafficExtensionPathTemplate.match(
      lbTrafficExtensionName
    ).location;
  }

  /**
   * Parse the lb_traffic_extension from LbTrafficExtension resource.
   *
   * @param {string} lbTrafficExtensionName
   *   A fully-qualified path representing LbTrafficExtension resource.
   * @returns {string} A string representing the lb_traffic_extension.
   */
  matchLbTrafficExtensionFromLbTrafficExtensionName(
    lbTrafficExtensionName: string
  ) {
    return this.pathTemplates.lbTrafficExtensionPathTemplate.match(
      lbTrafficExtensionName
    ).lb_traffic_extension;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified mesh resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} mesh
   * @returns {string} Resource name string.
   */
  meshPath(project: string, location: string, mesh: string) {
    return this.pathTemplates.meshPathTemplate.render({
      project: project,
      location: location,
      mesh: mesh,
    });
  }

  /**
   * Parse the project from Mesh resource.
   *
   * @param {string} meshName
   *   A fully-qualified path representing Mesh resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMeshName(meshName: string) {
    return this.pathTemplates.meshPathTemplate.match(meshName).project;
  }

  /**
   * Parse the location from Mesh resource.
   *
   * @param {string} meshName
   *   A fully-qualified path representing Mesh resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMeshName(meshName: string) {
    return this.pathTemplates.meshPathTemplate.match(meshName).location;
  }

  /**
   * Parse the mesh from Mesh resource.
   *
   * @param {string} meshName
   *   A fully-qualified path representing Mesh resource.
   * @returns {string} A string representing the mesh.
   */
  matchMeshFromMeshName(meshName: string) {
    return this.pathTemplates.meshPathTemplate.match(meshName).mesh;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified serviceBinding resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service_binding
   * @returns {string} Resource name string.
   */
  serviceBindingPath(
    project: string,
    location: string,
    serviceBinding: string
  ) {
    return this.pathTemplates.serviceBindingPathTemplate.render({
      project: project,
      location: location,
      service_binding: serviceBinding,
    });
  }

  /**
   * Parse the project from ServiceBinding resource.
   *
   * @param {string} serviceBindingName
   *   A fully-qualified path representing ServiceBinding resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceBindingName(serviceBindingName: string) {
    return this.pathTemplates.serviceBindingPathTemplate.match(
      serviceBindingName
    ).project;
  }

  /**
   * Parse the location from ServiceBinding resource.
   *
   * @param {string} serviceBindingName
   *   A fully-qualified path representing ServiceBinding resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceBindingName(serviceBindingName: string) {
    return this.pathTemplates.serviceBindingPathTemplate.match(
      serviceBindingName
    ).location;
  }

  /**
   * Parse the service_binding from ServiceBinding resource.
   *
   * @param {string} serviceBindingName
   *   A fully-qualified path representing ServiceBinding resource.
   * @returns {string} A string representing the service_binding.
   */
  matchServiceBindingFromServiceBindingName(serviceBindingName: string) {
    return this.pathTemplates.serviceBindingPathTemplate.match(
      serviceBindingName
    ).service_binding;
  }

  /**
   * Return a fully-qualified tcpRoute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tcp_route
   * @returns {string} Resource name string.
   */
  tcpRoutePath(project: string, location: string, tcpRoute: string) {
    return this.pathTemplates.tcpRoutePathTemplate.render({
      project: project,
      location: location,
      tcp_route: tcpRoute,
    });
  }

  /**
   * Parse the project from TcpRoute resource.
   *
   * @param {string} tcpRouteName
   *   A fully-qualified path representing TcpRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTcpRouteName(tcpRouteName: string) {
    return this.pathTemplates.tcpRoutePathTemplate.match(tcpRouteName).project;
  }

  /**
   * Parse the location from TcpRoute resource.
   *
   * @param {string} tcpRouteName
   *   A fully-qualified path representing TcpRoute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTcpRouteName(tcpRouteName: string) {
    return this.pathTemplates.tcpRoutePathTemplate.match(tcpRouteName).location;
  }

  /**
   * Parse the tcp_route from TcpRoute resource.
   *
   * @param {string} tcpRouteName
   *   A fully-qualified path representing TcpRoute resource.
   * @returns {string} A string representing the tcp_route.
   */
  matchTcpRouteFromTcpRouteName(tcpRouteName: string) {
    return this.pathTemplates.tcpRoutePathTemplate.match(tcpRouteName)
      .tcp_route;
  }

  /**
   * Return a fully-qualified tlsRoute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tls_route
   * @returns {string} Resource name string.
   */
  tlsRoutePath(project: string, location: string, tlsRoute: string) {
    return this.pathTemplates.tlsRoutePathTemplate.render({
      project: project,
      location: location,
      tls_route: tlsRoute,
    });
  }

  /**
   * Parse the project from TlsRoute resource.
   *
   * @param {string} tlsRouteName
   *   A fully-qualified path representing TlsRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTlsRouteName(tlsRouteName: string) {
    return this.pathTemplates.tlsRoutePathTemplate.match(tlsRouteName).project;
  }

  /**
   * Parse the location from TlsRoute resource.
   *
   * @param {string} tlsRouteName
   *   A fully-qualified path representing TlsRoute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTlsRouteName(tlsRouteName: string) {
    return this.pathTemplates.tlsRoutePathTemplate.match(tlsRouteName).location;
  }

  /**
   * Parse the tls_route from TlsRoute resource.
   *
   * @param {string} tlsRouteName
   *   A fully-qualified path representing TlsRoute resource.
   * @returns {string} A string representing the tls_route.
   */
  matchTlsRouteFromTlsRouteName(tlsRouteName: string) {
    return this.pathTemplates.tlsRoutePathTemplate.match(tlsRouteName)
      .tls_route;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.depServiceStub && !this._terminated) {
      return this.depServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
