// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/network_services_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './network_services_client_config.json';
const version = require('../../../package.json').version;

/**
 * @class
 * @memberof v1
 */
export class NetworkServicesClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  networkServicesStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of NetworkServicesClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new NetworkServicesClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof NetworkServicesClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      endpointPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/endpointPolicies/{endpoint_policy}'
      ),
      gatewayPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/gateways/{gateway}'
      ),
      grpcRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/grpcRoutes/{grpc_route}'
      ),
      httpRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/httpRoutes/{http_route}'
      ),
      meshPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/meshes/{mesh}'
      ),
      serviceBindingPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/serviceBindings/{service_binding}'
      ),
      tcpRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tcpRoutes/{tcp_route}'
      ),
      tlsRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/tlsRoutes/{tls_route}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listEndpointPolicies: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'endpointPolicies'
      ),
      listGateways: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'gateways'
      ),
      listGrpcRoutes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'grpcRoutes'
      ),
      listHttpRoutes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'httpRoutes'
      ),
      listTcpRoutes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tcpRoutes'
      ),
      listTlsRoutes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tlsRoutes'
      ),
      listServiceBindings: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'serviceBindings'
      ),
      listMeshes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'meshes'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/edgeCacheKeysets/*}:getIamPolicy',
          additional_bindings: [
            {
              get: '/v1/{resource=projects/*/locations/*/edgeCacheOrigins/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/edgeCacheServices/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/endpointPolicies/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/serviceBindings/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/meshes/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/gateways/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/edgeCacheKeysets/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/edgeCacheOrigins/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/edgeCacheServices/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/endpointPolicies/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/serviceBindings/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/meshes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/gateways/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/edgeCacheKeysets/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/edgeCacheOrigins/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/edgeCacheServices/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/endpointPolicies/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/serviceBindings/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/meshes/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/gateways/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createEndpointPolicyResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.EndpointPolicy'
    ) as gax.protobuf.Type;
    const createEndpointPolicyMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateEndpointPolicyResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.EndpointPolicy'
    ) as gax.protobuf.Type;
    const updateEndpointPolicyMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteEndpointPolicyResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteEndpointPolicyMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createGatewayResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.Gateway'
    ) as gax.protobuf.Type;
    const createGatewayMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateGatewayResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.Gateway'
    ) as gax.protobuf.Type;
    const updateGatewayMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteGatewayResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteGatewayMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createGrpcRouteResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.GrpcRoute'
    ) as gax.protobuf.Type;
    const createGrpcRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateGrpcRouteResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.GrpcRoute'
    ) as gax.protobuf.Type;
    const updateGrpcRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteGrpcRouteResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteGrpcRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createHttpRouteResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.HttpRoute'
    ) as gax.protobuf.Type;
    const createHttpRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateHttpRouteResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.HttpRoute'
    ) as gax.protobuf.Type;
    const updateHttpRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteHttpRouteResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteHttpRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createTcpRouteResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.TcpRoute'
    ) as gax.protobuf.Type;
    const createTcpRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateTcpRouteResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.TcpRoute'
    ) as gax.protobuf.Type;
    const updateTcpRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTcpRouteResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTcpRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createTlsRouteResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.TlsRoute'
    ) as gax.protobuf.Type;
    const createTlsRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateTlsRouteResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.TlsRoute'
    ) as gax.protobuf.Type;
    const updateTlsRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteTlsRouteResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteTlsRouteMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createServiceBindingResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.ServiceBinding'
    ) as gax.protobuf.Type;
    const createServiceBindingMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteServiceBindingResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteServiceBindingMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createMeshResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.Mesh'
    ) as gax.protobuf.Type;
    const createMeshMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateMeshResponse = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.Mesh'
    ) as gax.protobuf.Type;
    const updateMeshMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteMeshResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteMeshMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkservices.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createEndpointPolicy: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createEndpointPolicyResponse.decode.bind(createEndpointPolicyResponse),
        createEndpointPolicyMetadata.decode.bind(createEndpointPolicyMetadata)
      ),
      updateEndpointPolicy: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateEndpointPolicyResponse.decode.bind(updateEndpointPolicyResponse),
        updateEndpointPolicyMetadata.decode.bind(updateEndpointPolicyMetadata)
      ),
      deleteEndpointPolicy: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteEndpointPolicyResponse.decode.bind(deleteEndpointPolicyResponse),
        deleteEndpointPolicyMetadata.decode.bind(deleteEndpointPolicyMetadata)
      ),
      createGateway: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createGatewayResponse.decode.bind(createGatewayResponse),
        createGatewayMetadata.decode.bind(createGatewayMetadata)
      ),
      updateGateway: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateGatewayResponse.decode.bind(updateGatewayResponse),
        updateGatewayMetadata.decode.bind(updateGatewayMetadata)
      ),
      deleteGateway: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteGatewayResponse.decode.bind(deleteGatewayResponse),
        deleteGatewayMetadata.decode.bind(deleteGatewayMetadata)
      ),
      createGrpcRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createGrpcRouteResponse.decode.bind(createGrpcRouteResponse),
        createGrpcRouteMetadata.decode.bind(createGrpcRouteMetadata)
      ),
      updateGrpcRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateGrpcRouteResponse.decode.bind(updateGrpcRouteResponse),
        updateGrpcRouteMetadata.decode.bind(updateGrpcRouteMetadata)
      ),
      deleteGrpcRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteGrpcRouteResponse.decode.bind(deleteGrpcRouteResponse),
        deleteGrpcRouteMetadata.decode.bind(deleteGrpcRouteMetadata)
      ),
      createHttpRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createHttpRouteResponse.decode.bind(createHttpRouteResponse),
        createHttpRouteMetadata.decode.bind(createHttpRouteMetadata)
      ),
      updateHttpRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateHttpRouteResponse.decode.bind(updateHttpRouteResponse),
        updateHttpRouteMetadata.decode.bind(updateHttpRouteMetadata)
      ),
      deleteHttpRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteHttpRouteResponse.decode.bind(deleteHttpRouteResponse),
        deleteHttpRouteMetadata.decode.bind(deleteHttpRouteMetadata)
      ),
      createTcpRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createTcpRouteResponse.decode.bind(createTcpRouteResponse),
        createTcpRouteMetadata.decode.bind(createTcpRouteMetadata)
      ),
      updateTcpRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateTcpRouteResponse.decode.bind(updateTcpRouteResponse),
        updateTcpRouteMetadata.decode.bind(updateTcpRouteMetadata)
      ),
      deleteTcpRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTcpRouteResponse.decode.bind(deleteTcpRouteResponse),
        deleteTcpRouteMetadata.decode.bind(deleteTcpRouteMetadata)
      ),
      createTlsRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createTlsRouteResponse.decode.bind(createTlsRouteResponse),
        createTlsRouteMetadata.decode.bind(createTlsRouteMetadata)
      ),
      updateTlsRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateTlsRouteResponse.decode.bind(updateTlsRouteResponse),
        updateTlsRouteMetadata.decode.bind(updateTlsRouteMetadata)
      ),
      deleteTlsRoute: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTlsRouteResponse.decode.bind(deleteTlsRouteResponse),
        deleteTlsRouteMetadata.decode.bind(deleteTlsRouteMetadata)
      ),
      createServiceBinding: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createServiceBindingResponse.decode.bind(createServiceBindingResponse),
        createServiceBindingMetadata.decode.bind(createServiceBindingMetadata)
      ),
      deleteServiceBinding: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteServiceBindingResponse.decode.bind(deleteServiceBindingResponse),
        deleteServiceBindingMetadata.decode.bind(deleteServiceBindingMetadata)
      ),
      createMesh: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createMeshResponse.decode.bind(createMeshResponse),
        createMeshMetadata.decode.bind(createMeshMetadata)
      ),
      updateMesh: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateMeshResponse.decode.bind(updateMeshResponse),
        updateMeshMetadata.decode.bind(updateMeshMetadata)
      ),
      deleteMesh: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteMeshResponse.decode.bind(deleteMeshResponse),
        deleteMeshMetadata.decode.bind(deleteMeshMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.networkservices.v1.NetworkServices',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.networkServicesStub) {
      return this.networkServicesStub;
    }

    // Put together the "service stub" for
    // google.cloud.networkservices.v1.NetworkServices.
    this.networkServicesStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.networkservices.v1.NetworkServices'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.networkservices.v1.NetworkServices,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const networkServicesStubMethods = [
      'listEndpointPolicies',
      'getEndpointPolicy',
      'createEndpointPolicy',
      'updateEndpointPolicy',
      'deleteEndpointPolicy',
      'listGateways',
      'getGateway',
      'createGateway',
      'updateGateway',
      'deleteGateway',
      'listGrpcRoutes',
      'getGrpcRoute',
      'createGrpcRoute',
      'updateGrpcRoute',
      'deleteGrpcRoute',
      'listHttpRoutes',
      'getHttpRoute',
      'createHttpRoute',
      'updateHttpRoute',
      'deleteHttpRoute',
      'listTcpRoutes',
      'getTcpRoute',
      'createTcpRoute',
      'updateTcpRoute',
      'deleteTcpRoute',
      'listTlsRoutes',
      'getTlsRoute',
      'createTlsRoute',
      'updateTlsRoute',
      'deleteTlsRoute',
      'listServiceBindings',
      'getServiceBinding',
      'createServiceBinding',
      'deleteServiceBinding',
      'listMeshes',
      'getMesh',
      'createMesh',
      'updateMesh',
      'deleteMesh',
    ];
    for (const methodName of networkServicesStubMethods) {
      const callPromise = this.networkServicesStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.networkServicesStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'networkservices.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'networkservices.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of a single EndpointPolicy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the EndpointPolicy to get. Must be in the format
   *   `projects/* /locations/global/endpointPolicies/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.EndpointPolicy|EndpointPolicy}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.get_endpoint_policy.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_GetEndpointPolicy_async
   */
  getEndpointPolicy(
    request?: protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IEndpointPolicy,
      (
        | protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getEndpointPolicy(
    request: protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IEndpointPolicy,
      | protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEndpointPolicy(
    request: protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IEndpointPolicy,
      | protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEndpointPolicy(
    request?: protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.IEndpointPolicy,
          | protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.IEndpointPolicy,
      | protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IEndpointPolicy,
      (
        | protos.google.cloud.networkservices.v1.IGetEndpointPolicyRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getEndpointPolicy(request, options, callback);
  }
  /**
   * Gets details of a single Gateway.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the Gateway to get. Must be in the format
   *   `projects/* /locations/* /gateways/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.Gateway|Gateway}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.get_gateway.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_GetGateway_async
   */
  getGateway(
    request?: protos.google.cloud.networkservices.v1.IGetGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IGateway,
      protos.google.cloud.networkservices.v1.IGetGatewayRequest | undefined,
      {} | undefined,
    ]
  >;
  getGateway(
    request: protos.google.cloud.networkservices.v1.IGetGatewayRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IGateway,
      | protos.google.cloud.networkservices.v1.IGetGatewayRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGateway(
    request: protos.google.cloud.networkservices.v1.IGetGatewayRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IGateway,
      | protos.google.cloud.networkservices.v1.IGetGatewayRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGateway(
    request?: protos.google.cloud.networkservices.v1.IGetGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.IGateway,
          | protos.google.cloud.networkservices.v1.IGetGatewayRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.IGateway,
      | protos.google.cloud.networkservices.v1.IGetGatewayRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IGateway,
      protos.google.cloud.networkservices.v1.IGetGatewayRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGateway(request, options, callback);
  }
  /**
   * Gets details of a single GrpcRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the GrpcRoute to get. Must be in the format
   *   `projects/* /locations/global/grpcRoutes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.GrpcRoute|GrpcRoute}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.get_grpc_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_GetGrpcRoute_async
   */
  getGrpcRoute(
    request?: protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IGrpcRoute,
      protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest | undefined,
      {} | undefined,
    ]
  >;
  getGrpcRoute(
    request: protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IGrpcRoute,
      | protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGrpcRoute(
    request: protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IGrpcRoute,
      | protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGrpcRoute(
    request?: protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.IGrpcRoute,
          | protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.IGrpcRoute,
      | protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IGrpcRoute,
      protos.google.cloud.networkservices.v1.IGetGrpcRouteRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGrpcRoute(request, options, callback);
  }
  /**
   * Gets details of a single HttpRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the HttpRoute to get. Must be in the format
   *   `projects/* /locations/global/httpRoutes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.HttpRoute|HttpRoute}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.get_http_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_GetHttpRoute_async
   */
  getHttpRoute(
    request?: protos.google.cloud.networkservices.v1.IGetHttpRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IHttpRoute,
      protos.google.cloud.networkservices.v1.IGetHttpRouteRequest | undefined,
      {} | undefined,
    ]
  >;
  getHttpRoute(
    request: protos.google.cloud.networkservices.v1.IGetHttpRouteRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IHttpRoute,
      | protos.google.cloud.networkservices.v1.IGetHttpRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getHttpRoute(
    request: protos.google.cloud.networkservices.v1.IGetHttpRouteRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IHttpRoute,
      | protos.google.cloud.networkservices.v1.IGetHttpRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getHttpRoute(
    request?: protos.google.cloud.networkservices.v1.IGetHttpRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.IHttpRoute,
          | protos.google.cloud.networkservices.v1.IGetHttpRouteRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.IHttpRoute,
      | protos.google.cloud.networkservices.v1.IGetHttpRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IHttpRoute,
      protos.google.cloud.networkservices.v1.IGetHttpRouteRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getHttpRoute(request, options, callback);
  }
  /**
   * Gets details of a single TcpRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the TcpRoute to get. Must be in the format
   *   `projects/* /locations/global/tcpRoutes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.TcpRoute|TcpRoute}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.get_tcp_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_GetTcpRoute_async
   */
  getTcpRoute(
    request?: protos.google.cloud.networkservices.v1.IGetTcpRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ITcpRoute,
      protos.google.cloud.networkservices.v1.IGetTcpRouteRequest | undefined,
      {} | undefined,
    ]
  >;
  getTcpRoute(
    request: protos.google.cloud.networkservices.v1.IGetTcpRouteRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.ITcpRoute,
      | protos.google.cloud.networkservices.v1.IGetTcpRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTcpRoute(
    request: protos.google.cloud.networkservices.v1.IGetTcpRouteRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.ITcpRoute,
      | protos.google.cloud.networkservices.v1.IGetTcpRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTcpRoute(
    request?: protos.google.cloud.networkservices.v1.IGetTcpRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.ITcpRoute,
          | protos.google.cloud.networkservices.v1.IGetTcpRouteRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.ITcpRoute,
      | protos.google.cloud.networkservices.v1.IGetTcpRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ITcpRoute,
      protos.google.cloud.networkservices.v1.IGetTcpRouteRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTcpRoute(request, options, callback);
  }
  /**
   * Gets details of a single TlsRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the TlsRoute to get. Must be in the format
   *   `projects/* /locations/global/tlsRoutes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.TlsRoute|TlsRoute}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.get_tls_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_GetTlsRoute_async
   */
  getTlsRoute(
    request?: protos.google.cloud.networkservices.v1.IGetTlsRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ITlsRoute,
      protos.google.cloud.networkservices.v1.IGetTlsRouteRequest | undefined,
      {} | undefined,
    ]
  >;
  getTlsRoute(
    request: protos.google.cloud.networkservices.v1.IGetTlsRouteRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.ITlsRoute,
      | protos.google.cloud.networkservices.v1.IGetTlsRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTlsRoute(
    request: protos.google.cloud.networkservices.v1.IGetTlsRouteRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.ITlsRoute,
      | protos.google.cloud.networkservices.v1.IGetTlsRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTlsRoute(
    request?: protos.google.cloud.networkservices.v1.IGetTlsRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.ITlsRoute,
          | protos.google.cloud.networkservices.v1.IGetTlsRouteRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.ITlsRoute,
      | protos.google.cloud.networkservices.v1.IGetTlsRouteRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ITlsRoute,
      protos.google.cloud.networkservices.v1.IGetTlsRouteRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTlsRoute(request, options, callback);
  }
  /**
   * Gets details of a single ServiceBinding.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the ServiceBinding to get. Must be in the format
   *   `projects/* /locations/global/serviceBindings/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.ServiceBinding|ServiceBinding}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.get_service_binding.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_GetServiceBinding_async
   */
  getServiceBinding(
    request?: protos.google.cloud.networkservices.v1.IGetServiceBindingRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IServiceBinding,
      (
        | protos.google.cloud.networkservices.v1.IGetServiceBindingRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getServiceBinding(
    request: protos.google.cloud.networkservices.v1.IGetServiceBindingRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IServiceBinding,
      | protos.google.cloud.networkservices.v1.IGetServiceBindingRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getServiceBinding(
    request: protos.google.cloud.networkservices.v1.IGetServiceBindingRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IServiceBinding,
      | protos.google.cloud.networkservices.v1.IGetServiceBindingRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getServiceBinding(
    request?: protos.google.cloud.networkservices.v1.IGetServiceBindingRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.IServiceBinding,
          | protos.google.cloud.networkservices.v1.IGetServiceBindingRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.IServiceBinding,
      | protos.google.cloud.networkservices.v1.IGetServiceBindingRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IServiceBinding,
      (
        | protos.google.cloud.networkservices.v1.IGetServiceBindingRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getServiceBinding(request, options, callback);
  }
  /**
   * Gets details of a single Mesh.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the Mesh to get. Must be in the format
   *   `projects/* /locations/global/meshes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.networkservices.v1.Mesh|Mesh}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.get_mesh.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_GetMesh_async
   */
  getMesh(
    request?: protos.google.cloud.networkservices.v1.IGetMeshRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IMesh,
      protos.google.cloud.networkservices.v1.IGetMeshRequest | undefined,
      {} | undefined,
    ]
  >;
  getMesh(
    request: protos.google.cloud.networkservices.v1.IGetMeshRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IMesh,
      protos.google.cloud.networkservices.v1.IGetMeshRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getMesh(
    request: protos.google.cloud.networkservices.v1.IGetMeshRequest,
    callback: Callback<
      protos.google.cloud.networkservices.v1.IMesh,
      protos.google.cloud.networkservices.v1.IGetMeshRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getMesh(
    request?: protos.google.cloud.networkservices.v1.IGetMeshRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.networkservices.v1.IMesh,
          | protos.google.cloud.networkservices.v1.IGetMeshRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.networkservices.v1.IMesh,
      protos.google.cloud.networkservices.v1.IGetMeshRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IMesh,
      protos.google.cloud.networkservices.v1.IGetMeshRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMesh(request, options, callback);
  }

  /**
   * Creates a new EndpointPolicy in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the EndpointPolicy. Must be in the
   *   format `projects/* /locations/global`.
   * @param {string} request.endpointPolicyId
   *   Required. Short name of the EndpointPolicy resource to be created.
   *   E.g. "CustomECS".
   * @param {google.cloud.networkservices.v1.EndpointPolicy} request.endpointPolicy
   *   Required. EndpointPolicy resource to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_endpoint_policy.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateEndpointPolicy_async
   */
  createEndpointPolicy(
    request?: protos.google.cloud.networkservices.v1.ICreateEndpointPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createEndpointPolicy(
    request: protos.google.cloud.networkservices.v1.ICreateEndpointPolicyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEndpointPolicy(
    request: protos.google.cloud.networkservices.v1.ICreateEndpointPolicyRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEndpointPolicy(
    request?: protos.google.cloud.networkservices.v1.ICreateEndpointPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IEndpointPolicy,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createEndpointPolicy(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createEndpointPolicy()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_endpoint_policy.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateEndpointPolicy_async
   */
  async checkCreateEndpointPolicyProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.EndpointPolicy,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createEndpointPolicy,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.EndpointPolicy,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single EndpointPolicy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   EndpointPolicy resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.networkservices.v1.EndpointPolicy} request.endpointPolicy
   *   Required. Updated EndpointPolicy resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_endpoint_policy.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateEndpointPolicy_async
   */
  updateEndpointPolicy(
    request?: protos.google.cloud.networkservices.v1.IUpdateEndpointPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateEndpointPolicy(
    request: protos.google.cloud.networkservices.v1.IUpdateEndpointPolicyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEndpointPolicy(
    request: protos.google.cloud.networkservices.v1.IUpdateEndpointPolicyRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEndpointPolicy(
    request?: protos.google.cloud.networkservices.v1.IUpdateEndpointPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IEndpointPolicy,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IEndpointPolicy,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'endpoint_policy.name': request.endpointPolicy!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateEndpointPolicy(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateEndpointPolicy()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_endpoint_policy.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateEndpointPolicy_async
   */
  async checkUpdateEndpointPolicyProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.EndpointPolicy,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateEndpointPolicy,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.EndpointPolicy,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single EndpointPolicy.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the EndpointPolicy to delete. Must be in the format
   *   `projects/* /locations/global/endpointPolicies/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_endpoint_policy.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteEndpointPolicy_async
   */
  deleteEndpointPolicy(
    request?: protos.google.cloud.networkservices.v1.IDeleteEndpointPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteEndpointPolicy(
    request: protos.google.cloud.networkservices.v1.IDeleteEndpointPolicyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEndpointPolicy(
    request: protos.google.cloud.networkservices.v1.IDeleteEndpointPolicyRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEndpointPolicy(
    request?: protos.google.cloud.networkservices.v1.IDeleteEndpointPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteEndpointPolicy(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteEndpointPolicy()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_endpoint_policy.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteEndpointPolicy_async
   */
  async checkDeleteEndpointPolicyProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteEndpointPolicy,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Gateway in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the Gateway. Must be in the
   *   format `projects/* /locations/*`.
   * @param {string} request.gatewayId
   *   Required. Short name of the Gateway resource to be created.
   * @param {google.cloud.networkservices.v1.Gateway} request.gateway
   *   Required. Gateway resource to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_gateway.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateGateway_async
   */
  createGateway(
    request?: protos.google.cloud.networkservices.v1.ICreateGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createGateway(
    request: protos.google.cloud.networkservices.v1.ICreateGatewayRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGateway(
    request: protos.google.cloud.networkservices.v1.ICreateGatewayRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGateway(
    request?: protos.google.cloud.networkservices.v1.ICreateGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IGateway,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createGateway(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createGateway()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_gateway.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateGateway_async
   */
  async checkCreateGatewayProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.Gateway,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createGateway,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.Gateway,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Gateway.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   Gateway resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.networkservices.v1.Gateway} request.gateway
   *   Required. Updated Gateway resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_gateway.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateGateway_async
   */
  updateGateway(
    request?: protos.google.cloud.networkservices.v1.IUpdateGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateGateway(
    request: protos.google.cloud.networkservices.v1.IUpdateGatewayRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGateway(
    request: protos.google.cloud.networkservices.v1.IUpdateGatewayRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGateway(
    request?: protos.google.cloud.networkservices.v1.IUpdateGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IGateway,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IGateway,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'gateway.name': request.gateway!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateGateway(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateGateway()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_gateway.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateGateway_async
   */
  async checkUpdateGatewayProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.Gateway,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateGateway,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.Gateway,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Gateway.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the Gateway to delete. Must be in the format
   *   `projects/* /locations/* /gateways/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_gateway.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteGateway_async
   */
  deleteGateway(
    request?: protos.google.cloud.networkservices.v1.IDeleteGatewayRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteGateway(
    request: protos.google.cloud.networkservices.v1.IDeleteGatewayRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGateway(
    request: protos.google.cloud.networkservices.v1.IDeleteGatewayRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGateway(
    request?: protos.google.cloud.networkservices.v1.IDeleteGatewayRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteGateway(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteGateway()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_gateway.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteGateway_async
   */
  async checkDeleteGatewayProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteGateway,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new GrpcRoute in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the GrpcRoute. Must be in the
   *   format `projects/* /locations/global`.
   * @param {string} request.grpcRouteId
   *   Required. Short name of the GrpcRoute resource to be created.
   * @param {google.cloud.networkservices.v1.GrpcRoute} request.grpcRoute
   *   Required. GrpcRoute resource to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_grpc_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateGrpcRoute_async
   */
  createGrpcRoute(
    request?: protos.google.cloud.networkservices.v1.ICreateGrpcRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createGrpcRoute(
    request: protos.google.cloud.networkservices.v1.ICreateGrpcRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGrpcRoute(
    request: protos.google.cloud.networkservices.v1.ICreateGrpcRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGrpcRoute(
    request?: protos.google.cloud.networkservices.v1.ICreateGrpcRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IGrpcRoute,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createGrpcRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createGrpcRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_grpc_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateGrpcRoute_async
   */
  async checkCreateGrpcRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.GrpcRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createGrpcRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.GrpcRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single GrpcRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   GrpcRoute resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.networkservices.v1.GrpcRoute} request.grpcRoute
   *   Required. Updated GrpcRoute resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_grpc_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateGrpcRoute_async
   */
  updateGrpcRoute(
    request?: protos.google.cloud.networkservices.v1.IUpdateGrpcRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateGrpcRoute(
    request: protos.google.cloud.networkservices.v1.IUpdateGrpcRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGrpcRoute(
    request: protos.google.cloud.networkservices.v1.IUpdateGrpcRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateGrpcRoute(
    request?: protos.google.cloud.networkservices.v1.IUpdateGrpcRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IGrpcRoute,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IGrpcRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'grpc_route.name': request.grpcRoute!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateGrpcRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateGrpcRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_grpc_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateGrpcRoute_async
   */
  async checkUpdateGrpcRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.GrpcRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateGrpcRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.GrpcRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single GrpcRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the GrpcRoute to delete. Must be in the format
   *   `projects/* /locations/global/grpcRoutes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_grpc_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteGrpcRoute_async
   */
  deleteGrpcRoute(
    request?: protos.google.cloud.networkservices.v1.IDeleteGrpcRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteGrpcRoute(
    request: protos.google.cloud.networkservices.v1.IDeleteGrpcRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGrpcRoute(
    request: protos.google.cloud.networkservices.v1.IDeleteGrpcRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGrpcRoute(
    request?: protos.google.cloud.networkservices.v1.IDeleteGrpcRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteGrpcRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteGrpcRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_grpc_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteGrpcRoute_async
   */
  async checkDeleteGrpcRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteGrpcRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new HttpRoute in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the HttpRoute. Must be in the
   *   format `projects/* /locations/global`.
   * @param {string} request.httpRouteId
   *   Required. Short name of the HttpRoute resource to be created.
   * @param {google.cloud.networkservices.v1.HttpRoute} request.httpRoute
   *   Required. HttpRoute resource to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_http_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateHttpRoute_async
   */
  createHttpRoute(
    request?: protos.google.cloud.networkservices.v1.ICreateHttpRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createHttpRoute(
    request: protos.google.cloud.networkservices.v1.ICreateHttpRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createHttpRoute(
    request: protos.google.cloud.networkservices.v1.ICreateHttpRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createHttpRoute(
    request?: protos.google.cloud.networkservices.v1.ICreateHttpRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IHttpRoute,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createHttpRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createHttpRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_http_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateHttpRoute_async
   */
  async checkCreateHttpRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.HttpRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createHttpRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.HttpRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single HttpRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   HttpRoute resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.networkservices.v1.HttpRoute} request.httpRoute
   *   Required. Updated HttpRoute resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_http_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateHttpRoute_async
   */
  updateHttpRoute(
    request?: protos.google.cloud.networkservices.v1.IUpdateHttpRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateHttpRoute(
    request: protos.google.cloud.networkservices.v1.IUpdateHttpRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateHttpRoute(
    request: protos.google.cloud.networkservices.v1.IUpdateHttpRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateHttpRoute(
    request?: protos.google.cloud.networkservices.v1.IUpdateHttpRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IHttpRoute,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IHttpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'http_route.name': request.httpRoute!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateHttpRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateHttpRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_http_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateHttpRoute_async
   */
  async checkUpdateHttpRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.HttpRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateHttpRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.HttpRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single HttpRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the HttpRoute to delete. Must be in the format
   *   `projects/* /locations/global/httpRoutes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_http_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteHttpRoute_async
   */
  deleteHttpRoute(
    request?: protos.google.cloud.networkservices.v1.IDeleteHttpRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteHttpRoute(
    request: protos.google.cloud.networkservices.v1.IDeleteHttpRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteHttpRoute(
    request: protos.google.cloud.networkservices.v1.IDeleteHttpRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteHttpRoute(
    request?: protos.google.cloud.networkservices.v1.IDeleteHttpRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteHttpRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteHttpRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_http_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteHttpRoute_async
   */
  async checkDeleteHttpRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteHttpRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new TcpRoute in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the TcpRoute. Must be in the
   *   format `projects/* /locations/global`.
   * @param {string} request.tcpRouteId
   *   Required. Short name of the TcpRoute resource to be created.
   * @param {google.cloud.networkservices.v1.TcpRoute} request.tcpRoute
   *   Required. TcpRoute resource to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_tcp_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateTcpRoute_async
   */
  createTcpRoute(
    request?: protos.google.cloud.networkservices.v1.ICreateTcpRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createTcpRoute(
    request: protos.google.cloud.networkservices.v1.ICreateTcpRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTcpRoute(
    request: protos.google.cloud.networkservices.v1.ICreateTcpRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTcpRoute(
    request?: protos.google.cloud.networkservices.v1.ICreateTcpRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.ITcpRoute,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTcpRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createTcpRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_tcp_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateTcpRoute_async
   */
  async checkCreateTcpRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.TcpRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createTcpRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.TcpRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single TcpRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   TcpRoute resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.networkservices.v1.TcpRoute} request.tcpRoute
   *   Required. Updated TcpRoute resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_tcp_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateTcpRoute_async
   */
  updateTcpRoute(
    request?: protos.google.cloud.networkservices.v1.IUpdateTcpRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateTcpRoute(
    request: protos.google.cloud.networkservices.v1.IUpdateTcpRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTcpRoute(
    request: protos.google.cloud.networkservices.v1.IUpdateTcpRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTcpRoute(
    request?: protos.google.cloud.networkservices.v1.IUpdateTcpRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.ITcpRoute,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ITcpRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tcp_route.name': request.tcpRoute!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTcpRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateTcpRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_tcp_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateTcpRoute_async
   */
  async checkUpdateTcpRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.TcpRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateTcpRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.TcpRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single TcpRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the TcpRoute to delete. Must be in the format
   *   `projects/* /locations/global/tcpRoutes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_tcp_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteTcpRoute_async
   */
  deleteTcpRoute(
    request?: protos.google.cloud.networkservices.v1.IDeleteTcpRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteTcpRoute(
    request: protos.google.cloud.networkservices.v1.IDeleteTcpRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTcpRoute(
    request: protos.google.cloud.networkservices.v1.IDeleteTcpRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTcpRoute(
    request?: protos.google.cloud.networkservices.v1.IDeleteTcpRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTcpRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteTcpRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_tcp_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteTcpRoute_async
   */
  async checkDeleteTcpRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTcpRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new TlsRoute in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the TlsRoute. Must be in the
   *   format `projects/* /locations/global`.
   * @param {string} request.tlsRouteId
   *   Required. Short name of the TlsRoute resource to be created.
   * @param {google.cloud.networkservices.v1.TlsRoute} request.tlsRoute
   *   Required. TlsRoute resource to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_tls_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateTlsRoute_async
   */
  createTlsRoute(
    request?: protos.google.cloud.networkservices.v1.ICreateTlsRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createTlsRoute(
    request: protos.google.cloud.networkservices.v1.ICreateTlsRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTlsRoute(
    request: protos.google.cloud.networkservices.v1.ICreateTlsRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTlsRoute(
    request?: protos.google.cloud.networkservices.v1.ICreateTlsRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.ITlsRoute,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTlsRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createTlsRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_tls_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateTlsRoute_async
   */
  async checkCreateTlsRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.TlsRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createTlsRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.TlsRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single TlsRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   TlsRoute resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.networkservices.v1.TlsRoute} request.tlsRoute
   *   Required. Updated TlsRoute resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_tls_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateTlsRoute_async
   */
  updateTlsRoute(
    request?: protos.google.cloud.networkservices.v1.IUpdateTlsRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateTlsRoute(
    request: protos.google.cloud.networkservices.v1.IUpdateTlsRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTlsRoute(
    request: protos.google.cloud.networkservices.v1.IUpdateTlsRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTlsRoute(
    request?: protos.google.cloud.networkservices.v1.IUpdateTlsRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.ITlsRoute,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.ITlsRoute,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tls_route.name': request.tlsRoute!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTlsRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateTlsRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_tls_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateTlsRoute_async
   */
  async checkUpdateTlsRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.TlsRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateTlsRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.TlsRoute,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single TlsRoute.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the TlsRoute to delete. Must be in the format
   *   `projects/* /locations/global/tlsRoutes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_tls_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteTlsRoute_async
   */
  deleteTlsRoute(
    request?: protos.google.cloud.networkservices.v1.IDeleteTlsRouteRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteTlsRoute(
    request: protos.google.cloud.networkservices.v1.IDeleteTlsRouteRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTlsRoute(
    request: protos.google.cloud.networkservices.v1.IDeleteTlsRouteRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTlsRoute(
    request?: protos.google.cloud.networkservices.v1.IDeleteTlsRouteRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTlsRoute(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteTlsRoute()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_tls_route.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteTlsRoute_async
   */
  async checkDeleteTlsRouteProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTlsRoute,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new ServiceBinding in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the ServiceBinding. Must be in the
   *   format `projects/* /locations/global`.
   * @param {string} request.serviceBindingId
   *   Required. Short name of the ServiceBinding resource to be created.
   * @param {google.cloud.networkservices.v1.ServiceBinding} request.serviceBinding
   *   Required. ServiceBinding resource to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_service_binding.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateServiceBinding_async
   */
  createServiceBinding(
    request?: protos.google.cloud.networkservices.v1.ICreateServiceBindingRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IServiceBinding,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createServiceBinding(
    request: protos.google.cloud.networkservices.v1.ICreateServiceBindingRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IServiceBinding,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createServiceBinding(
    request: protos.google.cloud.networkservices.v1.ICreateServiceBindingRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IServiceBinding,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createServiceBinding(
    request?: protos.google.cloud.networkservices.v1.ICreateServiceBindingRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IServiceBinding,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IServiceBinding,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IServiceBinding,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createServiceBinding(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createServiceBinding()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_service_binding.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateServiceBinding_async
   */
  async checkCreateServiceBindingProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.ServiceBinding,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createServiceBinding,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.ServiceBinding,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single ServiceBinding.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the ServiceBinding to delete. Must be in the format
   *   `projects/* /locations/global/serviceBindings/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_service_binding.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteServiceBinding_async
   */
  deleteServiceBinding(
    request?: protos.google.cloud.networkservices.v1.IDeleteServiceBindingRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteServiceBinding(
    request: protos.google.cloud.networkservices.v1.IDeleteServiceBindingRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteServiceBinding(
    request: protos.google.cloud.networkservices.v1.IDeleteServiceBindingRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteServiceBinding(
    request?: protos.google.cloud.networkservices.v1.IDeleteServiceBindingRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteServiceBinding(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteServiceBinding()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_service_binding.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteServiceBinding_async
   */
  async checkDeleteServiceBindingProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteServiceBinding,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Mesh in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the Mesh. Must be in the
   *   format `projects/* /locations/global`.
   * @param {string} request.meshId
   *   Required. Short name of the Mesh resource to be created.
   * @param {google.cloud.networkservices.v1.Mesh} request.mesh
   *   Required. Mesh resource to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_mesh.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateMesh_async
   */
  createMesh(
    request?: protos.google.cloud.networkservices.v1.ICreateMeshRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createMesh(
    request: protos.google.cloud.networkservices.v1.ICreateMeshRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMesh(
    request: protos.google.cloud.networkservices.v1.ICreateMeshRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createMesh(
    request?: protos.google.cloud.networkservices.v1.ICreateMeshRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IMesh,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createMesh(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createMesh()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.create_mesh.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_CreateMesh_async
   */
  async checkCreateMeshProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.Mesh,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createMesh,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.Mesh,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Mesh.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask is used to specify the fields to be overwritten in the
   *   Mesh resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.networkservices.v1.Mesh} request.mesh
   *   Required. Updated Mesh resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_mesh.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateMesh_async
   */
  updateMesh(
    request?: protos.google.cloud.networkservices.v1.IUpdateMeshRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateMesh(
    request: protos.google.cloud.networkservices.v1.IUpdateMeshRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateMesh(
    request: protos.google.cloud.networkservices.v1.IUpdateMeshRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateMesh(
    request?: protos.google.cloud.networkservices.v1.IUpdateMeshRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.networkservices.v1.IMesh,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.networkservices.v1.IMesh,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'mesh.name': request.mesh!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateMesh(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateMesh()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.update_mesh.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_UpdateMesh_async
   */
  async checkUpdateMeshProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.networkservices.v1.Mesh,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateMesh,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.networkservices.v1.Mesh,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Mesh.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the Mesh to delete. Must be in the format
   *   `projects/* /locations/global/meshes/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_mesh.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteMesh_async
   */
  deleteMesh(
    request?: protos.google.cloud.networkservices.v1.IDeleteMeshRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteMesh(
    request: protos.google.cloud.networkservices.v1.IDeleteMeshRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMesh(
    request: protos.google.cloud.networkservices.v1.IDeleteMeshRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMesh(
    request?: protos.google.cloud.networkservices.v1.IDeleteMeshRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.networkservices.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networkservices.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteMesh(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteMesh()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.delete_mesh.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_DeleteMesh_async
   */
  async checkDeleteMeshProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteMesh,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.networkservices.v1.OperationMetadata
    >;
  }
  /**
   * Lists EndpointPolicies in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the EndpointPolicies should
   *   be listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of EndpointPolicies to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListEndpointPoliciesResponse`
   *   Indicates that this is a continuation of a prior
   *   `ListEndpointPolicies` call, and that the system should return the
   *   next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.EndpointPolicy|EndpointPolicy}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listEndpointPoliciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEndpointPolicies(
    request?: protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IEndpointPolicy[],
      protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest | null,
      protos.google.cloud.networkservices.v1.IListEndpointPoliciesResponse,
    ]
  >;
  listEndpointPolicies(
    request: protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
      | protos.google.cloud.networkservices.v1.IListEndpointPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IEndpointPolicy
    >
  ): void;
  listEndpointPolicies(
    request: protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
      | protos.google.cloud.networkservices.v1.IListEndpointPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IEndpointPolicy
    >
  ): void;
  listEndpointPolicies(
    request?: protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
          | protos.google.cloud.networkservices.v1.IListEndpointPoliciesResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.IEndpointPolicy
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
      | protos.google.cloud.networkservices.v1.IListEndpointPoliciesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IEndpointPolicy
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IEndpointPolicy[],
      protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest | null,
      protos.google.cloud.networkservices.v1.IListEndpointPoliciesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listEndpointPolicies(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the EndpointPolicies should
   *   be listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of EndpointPolicies to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListEndpointPoliciesResponse`
   *   Indicates that this is a continuation of a prior
   *   `ListEndpointPolicies` call, and that the system should return the
   *   next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.EndpointPolicy|EndpointPolicy} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listEndpointPoliciesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEndpointPoliciesStream(
    request?: protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEndpointPolicies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEndpointPolicies.createStream(
      this.innerApiCalls.listEndpointPolicies as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listEndpointPolicies`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the EndpointPolicies should
   *   be listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of EndpointPolicies to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListEndpointPoliciesResponse`
   *   Indicates that this is a continuation of a prior
   *   `ListEndpointPolicies` call, and that the system should return the
   *   next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.EndpointPolicy|EndpointPolicy}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.list_endpoint_policies.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_ListEndpointPolicies_async
   */
  listEndpointPoliciesAsync(
    request?: protos.google.cloud.networkservices.v1.IListEndpointPoliciesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.IEndpointPolicy> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEndpointPolicies'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEndpointPolicies.asyncIterate(
      this.innerApiCalls['listEndpointPolicies'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.IEndpointPolicy>;
  }
  /**
   * Lists Gateways in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the Gateways should be
   *   listed, specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of Gateways to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListGatewaysResponse`
   *   Indicates that this is a continuation of a prior `ListGateways` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.Gateway|Gateway}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listGatewaysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGateways(
    request?: protos.google.cloud.networkservices.v1.IListGatewaysRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IGateway[],
      protos.google.cloud.networkservices.v1.IListGatewaysRequest | null,
      protos.google.cloud.networkservices.v1.IListGatewaysResponse,
    ]
  >;
  listGateways(
    request: protos.google.cloud.networkservices.v1.IListGatewaysRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListGatewaysRequest,
      | protos.google.cloud.networkservices.v1.IListGatewaysResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IGateway
    >
  ): void;
  listGateways(
    request: protos.google.cloud.networkservices.v1.IListGatewaysRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListGatewaysRequest,
      | protos.google.cloud.networkservices.v1.IListGatewaysResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IGateway
    >
  ): void;
  listGateways(
    request?: protos.google.cloud.networkservices.v1.IListGatewaysRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListGatewaysRequest,
          | protos.google.cloud.networkservices.v1.IListGatewaysResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.IGateway
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListGatewaysRequest,
      | protos.google.cloud.networkservices.v1.IListGatewaysResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IGateway
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IGateway[],
      protos.google.cloud.networkservices.v1.IListGatewaysRequest | null,
      protos.google.cloud.networkservices.v1.IListGatewaysResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listGateways(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the Gateways should be
   *   listed, specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of Gateways to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListGatewaysResponse`
   *   Indicates that this is a continuation of a prior `ListGateways` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.Gateway|Gateway} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listGatewaysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGatewaysStream(
    request?: protos.google.cloud.networkservices.v1.IListGatewaysRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGateways'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGateways.createStream(
      this.innerApiCalls.listGateways as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listGateways`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the Gateways should be
   *   listed, specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of Gateways to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListGatewaysResponse`
   *   Indicates that this is a continuation of a prior `ListGateways` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.Gateway|Gateway}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.list_gateways.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_ListGateways_async
   */
  listGatewaysAsync(
    request?: protos.google.cloud.networkservices.v1.IListGatewaysRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.IGateway> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGateways'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGateways.asyncIterate(
      this.innerApiCalls['listGateways'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.IGateway>;
  }
  /**
   * Lists GrpcRoutes in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the GrpcRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of GrpcRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListGrpcRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListGrpcRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.GrpcRoute|GrpcRoute}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listGrpcRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGrpcRoutes(
    request?: protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IGrpcRoute[],
      protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest | null,
      protos.google.cloud.networkservices.v1.IListGrpcRoutesResponse,
    ]
  >;
  listGrpcRoutes(
    request: protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListGrpcRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IGrpcRoute
    >
  ): void;
  listGrpcRoutes(
    request: protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListGrpcRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IGrpcRoute
    >
  ): void;
  listGrpcRoutes(
    request?: protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
          | protos.google.cloud.networkservices.v1.IListGrpcRoutesResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.IGrpcRoute
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListGrpcRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IGrpcRoute
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IGrpcRoute[],
      protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest | null,
      protos.google.cloud.networkservices.v1.IListGrpcRoutesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listGrpcRoutes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the GrpcRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of GrpcRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListGrpcRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListGrpcRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.GrpcRoute|GrpcRoute} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listGrpcRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGrpcRoutesStream(
    request?: protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGrpcRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGrpcRoutes.createStream(
      this.innerApiCalls.listGrpcRoutes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listGrpcRoutes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the GrpcRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of GrpcRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListGrpcRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListGrpcRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.GrpcRoute|GrpcRoute}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.list_grpc_routes.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_ListGrpcRoutes_async
   */
  listGrpcRoutesAsync(
    request?: protos.google.cloud.networkservices.v1.IListGrpcRoutesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.IGrpcRoute> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGrpcRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGrpcRoutes.asyncIterate(
      this.innerApiCalls['listGrpcRoutes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.IGrpcRoute>;
  }
  /**
   * Lists HttpRoute in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the HttpRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of HttpRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListHttpRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListHttpRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.HttpRoute|HttpRoute}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listHttpRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listHttpRoutes(
    request?: protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IHttpRoute[],
      protos.google.cloud.networkservices.v1.IListHttpRoutesRequest | null,
      protos.google.cloud.networkservices.v1.IListHttpRoutesResponse,
    ]
  >;
  listHttpRoutes(
    request: protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListHttpRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IHttpRoute
    >
  ): void;
  listHttpRoutes(
    request: protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListHttpRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IHttpRoute
    >
  ): void;
  listHttpRoutes(
    request?: protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
          | protos.google.cloud.networkservices.v1.IListHttpRoutesResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.IHttpRoute
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListHttpRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IHttpRoute
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IHttpRoute[],
      protos.google.cloud.networkservices.v1.IListHttpRoutesRequest | null,
      protos.google.cloud.networkservices.v1.IListHttpRoutesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listHttpRoutes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the HttpRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of HttpRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListHttpRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListHttpRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.HttpRoute|HttpRoute} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listHttpRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listHttpRoutesStream(
    request?: protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listHttpRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHttpRoutes.createStream(
      this.innerApiCalls.listHttpRoutes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listHttpRoutes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the HttpRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of HttpRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListHttpRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListHttpRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.HttpRoute|HttpRoute}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.list_http_routes.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_ListHttpRoutes_async
   */
  listHttpRoutesAsync(
    request?: protos.google.cloud.networkservices.v1.IListHttpRoutesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.IHttpRoute> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listHttpRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listHttpRoutes.asyncIterate(
      this.innerApiCalls['listHttpRoutes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.IHttpRoute>;
  }
  /**
   * Lists TcpRoute in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the TcpRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of TcpRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTcpRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListTcpRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.TcpRoute|TcpRoute}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTcpRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTcpRoutes(
    request?: protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ITcpRoute[],
      protos.google.cloud.networkservices.v1.IListTcpRoutesRequest | null,
      protos.google.cloud.networkservices.v1.IListTcpRoutesResponse,
    ]
  >;
  listTcpRoutes(
    request: protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListTcpRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ITcpRoute
    >
  ): void;
  listTcpRoutes(
    request: protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListTcpRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ITcpRoute
    >
  ): void;
  listTcpRoutes(
    request?: protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
          | protos.google.cloud.networkservices.v1.IListTcpRoutesResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.ITcpRoute
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListTcpRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ITcpRoute
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ITcpRoute[],
      protos.google.cloud.networkservices.v1.IListTcpRoutesRequest | null,
      protos.google.cloud.networkservices.v1.IListTcpRoutesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTcpRoutes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the TcpRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of TcpRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTcpRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListTcpRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.TcpRoute|TcpRoute} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTcpRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTcpRoutesStream(
    request?: protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTcpRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTcpRoutes.createStream(
      this.innerApiCalls.listTcpRoutes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTcpRoutes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the TcpRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of TcpRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTcpRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListTcpRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.TcpRoute|TcpRoute}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.list_tcp_routes.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_ListTcpRoutes_async
   */
  listTcpRoutesAsync(
    request?: protos.google.cloud.networkservices.v1.IListTcpRoutesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.ITcpRoute> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTcpRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTcpRoutes.asyncIterate(
      this.innerApiCalls['listTcpRoutes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.ITcpRoute>;
  }
  /**
   * Lists TlsRoute in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the TlsRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of TlsRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTlsRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListTlsRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.TlsRoute|TlsRoute}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTlsRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTlsRoutes(
    request?: protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ITlsRoute[],
      protos.google.cloud.networkservices.v1.IListTlsRoutesRequest | null,
      protos.google.cloud.networkservices.v1.IListTlsRoutesResponse,
    ]
  >;
  listTlsRoutes(
    request: protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListTlsRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ITlsRoute
    >
  ): void;
  listTlsRoutes(
    request: protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListTlsRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ITlsRoute
    >
  ): void;
  listTlsRoutes(
    request?: protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
          | protos.google.cloud.networkservices.v1.IListTlsRoutesResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.ITlsRoute
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
      | protos.google.cloud.networkservices.v1.IListTlsRoutesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.ITlsRoute
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.ITlsRoute[],
      protos.google.cloud.networkservices.v1.IListTlsRoutesRequest | null,
      protos.google.cloud.networkservices.v1.IListTlsRoutesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTlsRoutes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the TlsRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of TlsRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTlsRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListTlsRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.TlsRoute|TlsRoute} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTlsRoutesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTlsRoutesStream(
    request?: protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTlsRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTlsRoutes.createStream(
      this.innerApiCalls.listTlsRoutes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTlsRoutes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the TlsRoutes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of TlsRoutes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListTlsRoutesResponse`
   *   Indicates that this is a continuation of a prior `ListTlsRoutes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.TlsRoute|TlsRoute}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.list_tls_routes.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_ListTlsRoutes_async
   */
  listTlsRoutesAsync(
    request?: protos.google.cloud.networkservices.v1.IListTlsRoutesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.ITlsRoute> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTlsRoutes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTlsRoutes.asyncIterate(
      this.innerApiCalls['listTlsRoutes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.ITlsRoute>;
  }
  /**
   * Lists ServiceBinding in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the ServiceBindings should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of ServiceBindings to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListServiceBindingsResponse`
   *   Indicates that this is a continuation of a prior `ListRouters` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.ServiceBinding|ServiceBinding}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listServiceBindingsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listServiceBindings(
    request?: protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IServiceBinding[],
      protos.google.cloud.networkservices.v1.IListServiceBindingsRequest | null,
      protos.google.cloud.networkservices.v1.IListServiceBindingsResponse,
    ]
  >;
  listServiceBindings(
    request: protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
      | protos.google.cloud.networkservices.v1.IListServiceBindingsResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IServiceBinding
    >
  ): void;
  listServiceBindings(
    request: protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
      | protos.google.cloud.networkservices.v1.IListServiceBindingsResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IServiceBinding
    >
  ): void;
  listServiceBindings(
    request?: protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
          | protos.google.cloud.networkservices.v1.IListServiceBindingsResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.IServiceBinding
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
      | protos.google.cloud.networkservices.v1.IListServiceBindingsResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IServiceBinding
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IServiceBinding[],
      protos.google.cloud.networkservices.v1.IListServiceBindingsRequest | null,
      protos.google.cloud.networkservices.v1.IListServiceBindingsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listServiceBindings(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the ServiceBindings should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of ServiceBindings to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListServiceBindingsResponse`
   *   Indicates that this is a continuation of a prior `ListRouters` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.ServiceBinding|ServiceBinding} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listServiceBindingsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listServiceBindingsStream(
    request?: protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listServiceBindings'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServiceBindings.createStream(
      this.innerApiCalls.listServiceBindings as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listServiceBindings`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the ServiceBindings should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of ServiceBindings to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListServiceBindingsResponse`
   *   Indicates that this is a continuation of a prior `ListRouters` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.ServiceBinding|ServiceBinding}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.list_service_bindings.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_ListServiceBindings_async
   */
  listServiceBindingsAsync(
    request?: protos.google.cloud.networkservices.v1.IListServiceBindingsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.IServiceBinding> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listServiceBindings'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServiceBindings.asyncIterate(
      this.innerApiCalls['listServiceBindings'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.IServiceBinding>;
  }
  /**
   * Lists Meshes in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the Meshes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of Meshes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListMeshesResponse`
   *   Indicates that this is a continuation of a prior `ListMeshes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.networkservices.v1.Mesh|Mesh}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMeshesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMeshes(
    request?: protos.google.cloud.networkservices.v1.IListMeshesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IMesh[],
      protos.google.cloud.networkservices.v1.IListMeshesRequest | null,
      protos.google.cloud.networkservices.v1.IListMeshesResponse,
    ]
  >;
  listMeshes(
    request: protos.google.cloud.networkservices.v1.IListMeshesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListMeshesRequest,
      | protos.google.cloud.networkservices.v1.IListMeshesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IMesh
    >
  ): void;
  listMeshes(
    request: protos.google.cloud.networkservices.v1.IListMeshesRequest,
    callback: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListMeshesRequest,
      | protos.google.cloud.networkservices.v1.IListMeshesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IMesh
    >
  ): void;
  listMeshes(
    request?: protos.google.cloud.networkservices.v1.IListMeshesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.networkservices.v1.IListMeshesRequest,
          | protos.google.cloud.networkservices.v1.IListMeshesResponse
          | null
          | undefined,
          protos.google.cloud.networkservices.v1.IMesh
        >,
    callback?: PaginationCallback<
      protos.google.cloud.networkservices.v1.IListMeshesRequest,
      | protos.google.cloud.networkservices.v1.IListMeshesResponse
      | null
      | undefined,
      protos.google.cloud.networkservices.v1.IMesh
    >
  ): Promise<
    [
      protos.google.cloud.networkservices.v1.IMesh[],
      protos.google.cloud.networkservices.v1.IListMeshesRequest | null,
      protos.google.cloud.networkservices.v1.IListMeshesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMeshes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the Meshes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of Meshes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListMeshesResponse`
   *   Indicates that this is a continuation of a prior `ListMeshes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.networkservices.v1.Mesh|Mesh} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMeshesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMeshesStream(
    request?: protos.google.cloud.networkservices.v1.IListMeshesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMeshes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMeshes.createStream(
      this.innerApiCalls.listMeshes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMeshes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the Meshes should be
   *   listed, specified in the format `projects/* /locations/global`.
   * @param {number} request.pageSize
   *   Maximum number of Meshes to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListMeshesResponse`
   *   Indicates that this is a continuation of a prior `ListMeshes` call,
   *   and that the system should return the next page of data.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.networkservices.v1.Mesh|Mesh}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/network_services.list_meshes.js</caption>
   * region_tag:networkservices_v1_generated_NetworkServices_ListMeshes_async
   */
  listMeshesAsync(
    request?: protos.google.cloud.networkservices.v1.IListMeshesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.networkservices.v1.IMesh> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMeshes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMeshes.asyncIterate(
      this.innerApiCalls['listMeshes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkservices.v1.IMesh>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified endpointPolicy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} endpoint_policy
   * @returns {string} Resource name string.
   */
  endpointPolicyPath(
    project: string,
    location: string,
    endpointPolicy: string
  ) {
    return this.pathTemplates.endpointPolicyPathTemplate.render({
      project: project,
      location: location,
      endpoint_policy: endpointPolicy,
    });
  }

  /**
   * Parse the project from EndpointPolicy resource.
   *
   * @param {string} endpointPolicyName
   *   A fully-qualified path representing EndpointPolicy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEndpointPolicyName(endpointPolicyName: string) {
    return this.pathTemplates.endpointPolicyPathTemplate.match(
      endpointPolicyName
    ).project;
  }

  /**
   * Parse the location from EndpointPolicy resource.
   *
   * @param {string} endpointPolicyName
   *   A fully-qualified path representing EndpointPolicy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEndpointPolicyName(endpointPolicyName: string) {
    return this.pathTemplates.endpointPolicyPathTemplate.match(
      endpointPolicyName
    ).location;
  }

  /**
   * Parse the endpoint_policy from EndpointPolicy resource.
   *
   * @param {string} endpointPolicyName
   *   A fully-qualified path representing EndpointPolicy resource.
   * @returns {string} A string representing the endpoint_policy.
   */
  matchEndpointPolicyFromEndpointPolicyName(endpointPolicyName: string) {
    return this.pathTemplates.endpointPolicyPathTemplate.match(
      endpointPolicyName
    ).endpoint_policy;
  }

  /**
   * Return a fully-qualified gateway resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} gateway
   * @returns {string} Resource name string.
   */
  gatewayPath(project: string, location: string, gateway: string) {
    return this.pathTemplates.gatewayPathTemplate.render({
      project: project,
      location: location,
      gateway: gateway,
    });
  }

  /**
   * Parse the project from Gateway resource.
   *
   * @param {string} gatewayName
   *   A fully-qualified path representing Gateway resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGatewayName(gatewayName: string) {
    return this.pathTemplates.gatewayPathTemplate.match(gatewayName).project;
  }

  /**
   * Parse the location from Gateway resource.
   *
   * @param {string} gatewayName
   *   A fully-qualified path representing Gateway resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGatewayName(gatewayName: string) {
    return this.pathTemplates.gatewayPathTemplate.match(gatewayName).location;
  }

  /**
   * Parse the gateway from Gateway resource.
   *
   * @param {string} gatewayName
   *   A fully-qualified path representing Gateway resource.
   * @returns {string} A string representing the gateway.
   */
  matchGatewayFromGatewayName(gatewayName: string) {
    return this.pathTemplates.gatewayPathTemplate.match(gatewayName).gateway;
  }

  /**
   * Return a fully-qualified grpcRoute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} grpc_route
   * @returns {string} Resource name string.
   */
  grpcRoutePath(project: string, location: string, grpcRoute: string) {
    return this.pathTemplates.grpcRoutePathTemplate.render({
      project: project,
      location: location,
      grpc_route: grpcRoute,
    });
  }

  /**
   * Parse the project from GrpcRoute resource.
   *
   * @param {string} grpcRouteName
   *   A fully-qualified path representing GrpcRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGrpcRouteName(grpcRouteName: string) {
    return this.pathTemplates.grpcRoutePathTemplate.match(grpcRouteName)
      .project;
  }

  /**
   * Parse the location from GrpcRoute resource.
   *
   * @param {string} grpcRouteName
   *   A fully-qualified path representing GrpcRoute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGrpcRouteName(grpcRouteName: string) {
    return this.pathTemplates.grpcRoutePathTemplate.match(grpcRouteName)
      .location;
  }

  /**
   * Parse the grpc_route from GrpcRoute resource.
   *
   * @param {string} grpcRouteName
   *   A fully-qualified path representing GrpcRoute resource.
   * @returns {string} A string representing the grpc_route.
   */
  matchGrpcRouteFromGrpcRouteName(grpcRouteName: string) {
    return this.pathTemplates.grpcRoutePathTemplate.match(grpcRouteName)
      .grpc_route;
  }

  /**
   * Return a fully-qualified httpRoute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} http_route
   * @returns {string} Resource name string.
   */
  httpRoutePath(project: string, location: string, httpRoute: string) {
    return this.pathTemplates.httpRoutePathTemplate.render({
      project: project,
      location: location,
      http_route: httpRoute,
    });
  }

  /**
   * Parse the project from HttpRoute resource.
   *
   * @param {string} httpRouteName
   *   A fully-qualified path representing HttpRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHttpRouteName(httpRouteName: string) {
    return this.pathTemplates.httpRoutePathTemplate.match(httpRouteName)
      .project;
  }

  /**
   * Parse the location from HttpRoute resource.
   *
   * @param {string} httpRouteName
   *   A fully-qualified path representing HttpRoute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromHttpRouteName(httpRouteName: string) {
    return this.pathTemplates.httpRoutePathTemplate.match(httpRouteName)
      .location;
  }

  /**
   * Parse the http_route from HttpRoute resource.
   *
   * @param {string} httpRouteName
   *   A fully-qualified path representing HttpRoute resource.
   * @returns {string} A string representing the http_route.
   */
  matchHttpRouteFromHttpRouteName(httpRouteName: string) {
    return this.pathTemplates.httpRoutePathTemplate.match(httpRouteName)
      .http_route;
  }

  /**
   * Return a fully-qualified mesh resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} mesh
   * @returns {string} Resource name string.
   */
  meshPath(project: string, location: string, mesh: string) {
    return this.pathTemplates.meshPathTemplate.render({
      project: project,
      location: location,
      mesh: mesh,
    });
  }

  /**
   * Parse the project from Mesh resource.
   *
   * @param {string} meshName
   *   A fully-qualified path representing Mesh resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMeshName(meshName: string) {
    return this.pathTemplates.meshPathTemplate.match(meshName).project;
  }

  /**
   * Parse the location from Mesh resource.
   *
   * @param {string} meshName
   *   A fully-qualified path representing Mesh resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMeshName(meshName: string) {
    return this.pathTemplates.meshPathTemplate.match(meshName).location;
  }

  /**
   * Parse the mesh from Mesh resource.
   *
   * @param {string} meshName
   *   A fully-qualified path representing Mesh resource.
   * @returns {string} A string representing the mesh.
   */
  matchMeshFromMeshName(meshName: string) {
    return this.pathTemplates.meshPathTemplate.match(meshName).mesh;
  }

  /**
   * Return a fully-qualified serviceBinding resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service_binding
   * @returns {string} Resource name string.
   */
  serviceBindingPath(
    project: string,
    location: string,
    serviceBinding: string
  ) {
    return this.pathTemplates.serviceBindingPathTemplate.render({
      project: project,
      location: location,
      service_binding: serviceBinding,
    });
  }

  /**
   * Parse the project from ServiceBinding resource.
   *
   * @param {string} serviceBindingName
   *   A fully-qualified path representing ServiceBinding resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceBindingName(serviceBindingName: string) {
    return this.pathTemplates.serviceBindingPathTemplate.match(
      serviceBindingName
    ).project;
  }

  /**
   * Parse the location from ServiceBinding resource.
   *
   * @param {string} serviceBindingName
   *   A fully-qualified path representing ServiceBinding resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceBindingName(serviceBindingName: string) {
    return this.pathTemplates.serviceBindingPathTemplate.match(
      serviceBindingName
    ).location;
  }

  /**
   * Parse the service_binding from ServiceBinding resource.
   *
   * @param {string} serviceBindingName
   *   A fully-qualified path representing ServiceBinding resource.
   * @returns {string} A string representing the service_binding.
   */
  matchServiceBindingFromServiceBindingName(serviceBindingName: string) {
    return this.pathTemplates.serviceBindingPathTemplate.match(
      serviceBindingName
    ).service_binding;
  }

  /**
   * Return a fully-qualified tcpRoute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tcp_route
   * @returns {string} Resource name string.
   */
  tcpRoutePath(project: string, location: string, tcpRoute: string) {
    return this.pathTemplates.tcpRoutePathTemplate.render({
      project: project,
      location: location,
      tcp_route: tcpRoute,
    });
  }

  /**
   * Parse the project from TcpRoute resource.
   *
   * @param {string} tcpRouteName
   *   A fully-qualified path representing TcpRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTcpRouteName(tcpRouteName: string) {
    return this.pathTemplates.tcpRoutePathTemplate.match(tcpRouteName).project;
  }

  /**
   * Parse the location from TcpRoute resource.
   *
   * @param {string} tcpRouteName
   *   A fully-qualified path representing TcpRoute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTcpRouteName(tcpRouteName: string) {
    return this.pathTemplates.tcpRoutePathTemplate.match(tcpRouteName).location;
  }

  /**
   * Parse the tcp_route from TcpRoute resource.
   *
   * @param {string} tcpRouteName
   *   A fully-qualified path representing TcpRoute resource.
   * @returns {string} A string representing the tcp_route.
   */
  matchTcpRouteFromTcpRouteName(tcpRouteName: string) {
    return this.pathTemplates.tcpRoutePathTemplate.match(tcpRouteName)
      .tcp_route;
  }

  /**
   * Return a fully-qualified tlsRoute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} tls_route
   * @returns {string} Resource name string.
   */
  tlsRoutePath(project: string, location: string, tlsRoute: string) {
    return this.pathTemplates.tlsRoutePathTemplate.render({
      project: project,
      location: location,
      tls_route: tlsRoute,
    });
  }

  /**
   * Parse the project from TlsRoute resource.
   *
   * @param {string} tlsRouteName
   *   A fully-qualified path representing TlsRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTlsRouteName(tlsRouteName: string) {
    return this.pathTemplates.tlsRoutePathTemplate.match(tlsRouteName).project;
  }

  /**
   * Parse the location from TlsRoute resource.
   *
   * @param {string} tlsRouteName
   *   A fully-qualified path representing TlsRoute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTlsRouteName(tlsRouteName: string) {
    return this.pathTemplates.tlsRoutePathTemplate.match(tlsRouteName).location;
  }

  /**
   * Parse the tls_route from TlsRoute resource.
   *
   * @param {string} tlsRouteName
   *   A fully-qualified path representing TlsRoute resource.
   * @returns {string} A string representing the tls_route.
   */
  matchTlsRouteFromTlsRouteName(tlsRouteName: string) {
    return this.pathTemplates.tlsRoutePathTemplate.match(tlsRouteName)
      .tls_route;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.networkServicesStub && !this._terminated) {
      return this.networkServicesStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
