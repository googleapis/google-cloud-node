// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_service_control_protos || ($protobuf.roots._google_cloud_service_control_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type_url = reader.string();
                                break;
                            }
                        case 2: {
                                message.value = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length >= 0)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Any
                 * @function getTypeUrl
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Any";
                };
    
                return Any;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Timestamp
                 * @function getTypeUrl
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Timestamp";
                };
    
                return Timestamp;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Duration
                 * @function getTypeUrl
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Duration";
                };
    
                return Duration;
            })();
    
            protobuf.Struct = (function() {
    
                /**
                 * Properties of a Struct.
                 * @memberof google.protobuf
                 * @interface IStruct
                 * @property {Object.<string,google.protobuf.IValue>|null} [fields] Struct fields
                 */
    
                /**
                 * Constructs a new Struct.
                 * @memberof google.protobuf
                 * @classdesc Represents a Struct.
                 * @implements IStruct
                 * @constructor
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 */
                function Struct(properties) {
                    this.fields = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Struct fields.
                 * @member {Object.<string,google.protobuf.IValue>} fields
                 * @memberof google.protobuf.Struct
                 * @instance
                 */
                Struct.prototype.fields = $util.emptyObject;
    
                /**
                 * Creates a new Struct instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct=} [properties] Properties to set
                 * @returns {google.protobuf.Struct} Struct instance
                 */
                Struct.create = function create(properties) {
                    return new Struct(properties);
                };
    
                /**
                 * Encodes the specified Struct message. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fields != null && Object.hasOwnProperty.call(message, "fields"))
                        for (var keys = Object.keys(message.fields), i = 0; i < keys.length; ++i) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                            $root.google.protobuf.Value.encode(message.fields[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                        }
                    return writer;
                };
    
                /**
                 * Encodes the specified Struct message, length delimited. Does not implicitly {@link google.protobuf.Struct.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.IStruct} message Struct message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Struct.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Struct(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (message.fields === $util.emptyObject)
                                    message.fields = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = null;
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = $root.google.protobuf.Value.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.fields[key] = value;
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Struct message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Struct} Struct
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Struct.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Struct message.
                 * @function verify
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Struct.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fields != null && message.hasOwnProperty("fields")) {
                        if (!$util.isObject(message.fields))
                            return "fields: object expected";
                        var key = Object.keys(message.fields);
                        for (var i = 0; i < key.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.fields[key[i]]);
                            if (error)
                                return "fields." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Struct message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Struct} Struct
                 */
                Struct.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Struct)
                        return object;
                    var message = new $root.google.protobuf.Struct();
                    if (object.fields) {
                        if (typeof object.fields !== "object")
                            throw TypeError(".google.protobuf.Struct.fields: object expected");
                        message.fields = {};
                        for (var keys = Object.keys(object.fields), i = 0; i < keys.length; ++i) {
                            if (typeof object.fields[keys[i]] !== "object")
                                throw TypeError(".google.protobuf.Struct.fields: object expected");
                            message.fields[keys[i]] = $root.google.protobuf.Value.fromObject(object.fields[keys[i]]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Struct message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {google.protobuf.Struct} message Struct
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Struct.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.fields = {};
                    var keys2;
                    if (message.fields && (keys2 = Object.keys(message.fields)).length) {
                        object.fields = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.fields[keys2[j]] = $root.google.protobuf.Value.toObject(message.fields[keys2[j]], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Struct to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Struct
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Struct.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Struct
                 * @function getTypeUrl
                 * @memberof google.protobuf.Struct
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Struct.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Struct";
                };
    
                return Struct;
            })();
    
            protobuf.Value = (function() {
    
                /**
                 * Properties of a Value.
                 * @memberof google.protobuf
                 * @interface IValue
                 * @property {google.protobuf.NullValue|null} [nullValue] Value nullValue
                 * @property {number|null} [numberValue] Value numberValue
                 * @property {string|null} [stringValue] Value stringValue
                 * @property {boolean|null} [boolValue] Value boolValue
                 * @property {google.protobuf.IStruct|null} [structValue] Value structValue
                 * @property {google.protobuf.IListValue|null} [listValue] Value listValue
                 */
    
                /**
                 * Constructs a new Value.
                 * @memberof google.protobuf
                 * @classdesc Represents a Value.
                 * @implements IValue
                 * @constructor
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 */
                function Value(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Value nullValue.
                 * @member {google.protobuf.NullValue|null|undefined} nullValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.nullValue = null;
    
                /**
                 * Value numberValue.
                 * @member {number|null|undefined} numberValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.numberValue = null;
    
                /**
                 * Value stringValue.
                 * @member {string|null|undefined} stringValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.stringValue = null;
    
                /**
                 * Value boolValue.
                 * @member {boolean|null|undefined} boolValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.boolValue = null;
    
                /**
                 * Value structValue.
                 * @member {google.protobuf.IStruct|null|undefined} structValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.structValue = null;
    
                /**
                 * Value listValue.
                 * @member {google.protobuf.IListValue|null|undefined} listValue
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Value.prototype.listValue = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Value kind.
                 * @member {"nullValue"|"numberValue"|"stringValue"|"boolValue"|"structValue"|"listValue"|undefined} kind
                 * @memberof google.protobuf.Value
                 * @instance
                 */
                Object.defineProperty(Value.prototype, "kind", {
                    get: $util.oneOfGetter($oneOfFields = ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Value instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue=} [properties] Properties to set
                 * @returns {google.protobuf.Value} Value instance
                 */
                Value.create = function create(properties) {
                    return new Value(properties);
                };
    
                /**
                 * Encodes the specified Value message. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.nullValue != null && Object.hasOwnProperty.call(message, "nullValue"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nullValue);
                    if (message.numberValue != null && Object.hasOwnProperty.call(message, "numberValue"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.numberValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.stringValue);
                    if (message.boolValue != null && Object.hasOwnProperty.call(message, "boolValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.boolValue);
                    if (message.structValue != null && Object.hasOwnProperty.call(message, "structValue"))
                        $root.google.protobuf.Struct.encode(message.structValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.listValue != null && Object.hasOwnProperty.call(message, "listValue"))
                        $root.google.protobuf.ListValue.encode(message.listValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Value message, length delimited. Does not implicitly {@link google.protobuf.Value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.IValue} message Value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.nullValue = reader.int32();
                                break;
                            }
                        case 2: {
                                message.numberValue = reader.double();
                                break;
                            }
                        case 3: {
                                message.stringValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.boolValue = reader.bool();
                                break;
                            }
                        case 5: {
                                message.structValue = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.listValue = $root.google.protobuf.ListValue.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Value} Value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Value message.
                 * @function verify
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        properties.kind = 1;
                        switch (message.nullValue) {
                        default:
                            return "nullValue: enum value expected";
                        case 0:
                            break;
                        }
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.numberValue !== "number")
                            return "numberValue: number expected";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (!$util.isString(message.stringValue))
                            return "stringValue: string expected";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        if (typeof message.boolValue !== "boolean")
                            return "boolValue: boolean expected";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.Struct.verify(message.structValue);
                            if (error)
                                return "structValue." + error;
                        }
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        if (properties.kind === 1)
                            return "kind: multiple values";
                        properties.kind = 1;
                        {
                            var error = $root.google.protobuf.ListValue.verify(message.listValue);
                            if (error)
                                return "listValue." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Value} Value
                 */
                Value.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Value)
                        return object;
                    var message = new $root.google.protobuf.Value();
                    switch (object.nullValue) {
                    default:
                        if (typeof object.nullValue === "number") {
                            message.nullValue = object.nullValue;
                            break;
                        }
                        break;
                    case "NULL_VALUE":
                    case 0:
                        message.nullValue = 0;
                        break;
                    }
                    if (object.numberValue != null)
                        message.numberValue = Number(object.numberValue);
                    if (object.stringValue != null)
                        message.stringValue = String(object.stringValue);
                    if (object.boolValue != null)
                        message.boolValue = Boolean(object.boolValue);
                    if (object.structValue != null) {
                        if (typeof object.structValue !== "object")
                            throw TypeError(".google.protobuf.Value.structValue: object expected");
                        message.structValue = $root.google.protobuf.Struct.fromObject(object.structValue);
                    }
                    if (object.listValue != null) {
                        if (typeof object.listValue !== "object")
                            throw TypeError(".google.protobuf.Value.listValue: object expected");
                        message.listValue = $root.google.protobuf.ListValue.fromObject(object.listValue);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {google.protobuf.Value} message Value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                        object.nullValue = options.enums === String ? $root.google.protobuf.NullValue[message.nullValue] === undefined ? message.nullValue : $root.google.protobuf.NullValue[message.nullValue] : message.nullValue;
                        if (options.oneofs)
                            object.kind = "nullValue";
                    }
                    if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                        object.numberValue = options.json && !isFinite(message.numberValue) ? String(message.numberValue) : message.numberValue;
                        if (options.oneofs)
                            object.kind = "numberValue";
                    }
                    if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                        object.stringValue = message.stringValue;
                        if (options.oneofs)
                            object.kind = "stringValue";
                    }
                    if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                        object.boolValue = message.boolValue;
                        if (options.oneofs)
                            object.kind = "boolValue";
                    }
                    if (message.structValue != null && message.hasOwnProperty("structValue")) {
                        object.structValue = $root.google.protobuf.Struct.toObject(message.structValue, options);
                        if (options.oneofs)
                            object.kind = "structValue";
                    }
                    if (message.listValue != null && message.hasOwnProperty("listValue")) {
                        object.listValue = $root.google.protobuf.ListValue.toObject(message.listValue, options);
                        if (options.oneofs)
                            object.kind = "listValue";
                    }
                    return object;
                };
    
                /**
                 * Converts this Value to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Value
                 * @function getTypeUrl
                 * @memberof google.protobuf.Value
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Value";
                };
    
                return Value;
            })();
    
            /**
             * NullValue enum.
             * @name google.protobuf.NullValue
             * @enum {number}
             * @property {number} NULL_VALUE=0 NULL_VALUE value
             */
            protobuf.NullValue = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NULL_VALUE"] = 0;
                return values;
            })();
    
            protobuf.ListValue = (function() {
    
                /**
                 * Properties of a ListValue.
                 * @memberof google.protobuf
                 * @interface IListValue
                 * @property {Array.<google.protobuf.IValue>|null} [values] ListValue values
                 */
    
                /**
                 * Constructs a new ListValue.
                 * @memberof google.protobuf
                 * @classdesc Represents a ListValue.
                 * @implements IListValue
                 * @constructor
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 */
                function ListValue(properties) {
                    this.values = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListValue values.
                 * @member {Array.<google.protobuf.IValue>} values
                 * @memberof google.protobuf.ListValue
                 * @instance
                 */
                ListValue.prototype.values = $util.emptyArray;
    
                /**
                 * Creates a new ListValue instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue=} [properties] Properties to set
                 * @returns {google.protobuf.ListValue} ListValue instance
                 */
                ListValue.create = function create(properties) {
                    return new ListValue(properties);
                };
    
                /**
                 * Encodes the specified ListValue message. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.values != null && message.values.length)
                        for (var i = 0; i < message.values.length; ++i)
                            $root.google.protobuf.Value.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ListValue message, length delimited. Does not implicitly {@link google.protobuf.ListValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.IListValue} message ListValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ListValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.values && message.values.length))
                                    message.values = [];
                                message.values.push($root.google.protobuf.Value.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ListValue} ListValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListValue message.
                 * @function verify
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.values != null && message.hasOwnProperty("values")) {
                        if (!Array.isArray(message.values))
                            return "values: array expected";
                        for (var i = 0; i < message.values.length; ++i) {
                            var error = $root.google.protobuf.Value.verify(message.values[i]);
                            if (error)
                                return "values." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ListValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ListValue} ListValue
                 */
                ListValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ListValue)
                        return object;
                    var message = new $root.google.protobuf.ListValue();
                    if (object.values) {
                        if (!Array.isArray(object.values))
                            throw TypeError(".google.protobuf.ListValue.values: array expected");
                        message.values = [];
                        for (var i = 0; i < object.values.length; ++i) {
                            if (typeof object.values[i] !== "object")
                                throw TypeError(".google.protobuf.ListValue.values: object expected");
                            message.values[i] = $root.google.protobuf.Value.fromObject(object.values[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {google.protobuf.ListValue} message ListValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.values = [];
                    if (message.values && message.values.length) {
                        object.values = [];
                        for (var j = 0; j < message.values.length; ++j)
                            object.values[j] = $root.google.protobuf.Value.toObject(message.values[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ListValue to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ListValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListValue
                 * @function getTypeUrl
                 * @memberof google.protobuf.ListValue
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ListValue";
                };
    
                return ListValue;
            })();
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {string|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {string} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 13: {
                                message.edition = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        if (!$util.isString(message.edition))
                            return "edition: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    if (object.edition != null)
                        message.edition = String(object.edition);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 42: {
                                message.phpGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1049: {
                                message[".google.api.defaultHost"] = reader.string();
                                break;
                            }
                        case 1050: {
                                message[".google.api.oauthScopes"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 72295728: {
                                message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                                break;
                            }
                        case 1051: {
                                if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                    message[".google.api.methodSignature"] = [];
                                message[".google.api.methodSignature"].push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            return protobuf;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.servicecontrol = (function() {
    
                /**
                 * Namespace servicecontrol.
                 * @memberof google.api
                 * @namespace
                 */
                var servicecontrol = {};
    
                servicecontrol.v1 = (function() {
    
                    /**
                     * Namespace v1.
                     * @memberof google.api.servicecontrol
                     * @namespace
                     */
                    var v1 = {};
    
                    v1.CheckError = (function() {
    
                        /**
                         * Properties of a CheckError.
                         * @memberof google.api.servicecontrol.v1
                         * @interface ICheckError
                         * @property {google.api.servicecontrol.v1.CheckError.Code|null} [code] CheckError code
                         * @property {string|null} [subject] CheckError subject
                         * @property {string|null} [detail] CheckError detail
                         * @property {google.rpc.IStatus|null} [status] CheckError status
                         */
    
                        /**
                         * Constructs a new CheckError.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a CheckError.
                         * @implements ICheckError
                         * @constructor
                         * @param {google.api.servicecontrol.v1.ICheckError=} [properties] Properties to set
                         */
                        function CheckError(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CheckError code.
                         * @member {google.api.servicecontrol.v1.CheckError.Code} code
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @instance
                         */
                        CheckError.prototype.code = 0;
    
                        /**
                         * CheckError subject.
                         * @member {string} subject
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @instance
                         */
                        CheckError.prototype.subject = "";
    
                        /**
                         * CheckError detail.
                         * @member {string} detail
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @instance
                         */
                        CheckError.prototype.detail = "";
    
                        /**
                         * CheckError status.
                         * @member {google.rpc.IStatus|null|undefined} status
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @instance
                         */
                        CheckError.prototype.status = null;
    
                        /**
                         * Creates a new CheckError instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @static
                         * @param {google.api.servicecontrol.v1.ICheckError=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.CheckError} CheckError instance
                         */
                        CheckError.create = function create(properties) {
                            return new CheckError(properties);
                        };
    
                        /**
                         * Encodes the specified CheckError message. Does not implicitly {@link google.api.servicecontrol.v1.CheckError.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @static
                         * @param {google.api.servicecontrol.v1.ICheckError} message CheckError message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckError.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.detail != null && Object.hasOwnProperty.call(message, "detail"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.detail);
                            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                $root.google.rpc.Status.encode(message.status, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.subject != null && Object.hasOwnProperty.call(message, "subject"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.subject);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CheckError message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.CheckError.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @static
                         * @param {google.api.servicecontrol.v1.ICheckError} message CheckError message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckError.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CheckError message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.CheckError} CheckError
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckError.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.CheckError();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.code = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.subject = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.detail = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.status = $root.google.rpc.Status.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CheckError message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.CheckError} CheckError
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckError.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CheckError message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CheckError.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                switch (message.code) {
                                default:
                                    return "code: enum value expected";
                                case 0:
                                case 5:
                                case 7:
                                case 8:
                                case 104:
                                case 107:
                                case 108:
                                case 114:
                                case 125:
                                case 109:
                                case 110:
                                case 111:
                                case 122:
                                case 105:
                                case 112:
                                case 113:
                                case 123:
                                case 300:
                                case 301:
                                case 302:
                                case 305:
                                    break;
                                }
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                if (!$util.isString(message.subject))
                                    return "subject: string expected";
                            if (message.detail != null && message.hasOwnProperty("detail"))
                                if (!$util.isString(message.detail))
                                    return "detail: string expected";
                            if (message.status != null && message.hasOwnProperty("status")) {
                                var error = $root.google.rpc.Status.verify(message.status);
                                if (error)
                                    return "status." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CheckError message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.CheckError} CheckError
                         */
                        CheckError.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.CheckError)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.CheckError();
                            switch (object.code) {
                            default:
                                if (typeof object.code === "number") {
                                    message.code = object.code;
                                    break;
                                }
                                break;
                            case "ERROR_CODE_UNSPECIFIED":
                            case 0:
                                message.code = 0;
                                break;
                            case "NOT_FOUND":
                            case 5:
                                message.code = 5;
                                break;
                            case "PERMISSION_DENIED":
                            case 7:
                                message.code = 7;
                                break;
                            case "RESOURCE_EXHAUSTED":
                            case 8:
                                message.code = 8;
                                break;
                            case "SERVICE_NOT_ACTIVATED":
                            case 104:
                                message.code = 104;
                                break;
                            case "BILLING_DISABLED":
                            case 107:
                                message.code = 107;
                                break;
                            case "PROJECT_DELETED":
                            case 108:
                                message.code = 108;
                                break;
                            case "PROJECT_INVALID":
                            case 114:
                                message.code = 114;
                                break;
                            case "CONSUMER_INVALID":
                            case 125:
                                message.code = 125;
                                break;
                            case "IP_ADDRESS_BLOCKED":
                            case 109:
                                message.code = 109;
                                break;
                            case "REFERER_BLOCKED":
                            case 110:
                                message.code = 110;
                                break;
                            case "CLIENT_APP_BLOCKED":
                            case 111:
                                message.code = 111;
                                break;
                            case "API_TARGET_BLOCKED":
                            case 122:
                                message.code = 122;
                                break;
                            case "API_KEY_INVALID":
                            case 105:
                                message.code = 105;
                                break;
                            case "API_KEY_EXPIRED":
                            case 112:
                                message.code = 112;
                                break;
                            case "API_KEY_NOT_FOUND":
                            case 113:
                                message.code = 113;
                                break;
                            case "INVALID_CREDENTIAL":
                            case 123:
                                message.code = 123;
                                break;
                            case "NAMESPACE_LOOKUP_UNAVAILABLE":
                            case 300:
                                message.code = 300;
                                break;
                            case "SERVICE_STATUS_UNAVAILABLE":
                            case 301:
                                message.code = 301;
                                break;
                            case "BILLING_STATUS_UNAVAILABLE":
                            case 302:
                                message.code = 302;
                                break;
                            case "CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE":
                            case 305:
                                message.code = 305;
                                break;
                            }
                            if (object.subject != null)
                                message.subject = String(object.subject);
                            if (object.detail != null)
                                message.detail = String(object.detail);
                            if (object.status != null) {
                                if (typeof object.status !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.CheckError.status: object expected");
                                message.status = $root.google.rpc.Status.fromObject(object.status);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CheckError message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @static
                         * @param {google.api.servicecontrol.v1.CheckError} message CheckError
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CheckError.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.code = options.enums === String ? "ERROR_CODE_UNSPECIFIED" : 0;
                                object.detail = "";
                                object.status = null;
                                object.subject = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = options.enums === String ? $root.google.api.servicecontrol.v1.CheckError.Code[message.code] === undefined ? message.code : $root.google.api.servicecontrol.v1.CheckError.Code[message.code] : message.code;
                            if (message.detail != null && message.hasOwnProperty("detail"))
                                object.detail = message.detail;
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = $root.google.rpc.Status.toObject(message.status, options);
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                object.subject = message.subject;
                            return object;
                        };
    
                        /**
                         * Converts this CheckError to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CheckError.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CheckError
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.CheckError
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CheckError.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.CheckError";
                        };
    
                        /**
                         * Code enum.
                         * @name google.api.servicecontrol.v1.CheckError.Code
                         * @enum {number}
                         * @property {number} ERROR_CODE_UNSPECIFIED=0 ERROR_CODE_UNSPECIFIED value
                         * @property {number} NOT_FOUND=5 NOT_FOUND value
                         * @property {number} PERMISSION_DENIED=7 PERMISSION_DENIED value
                         * @property {number} RESOURCE_EXHAUSTED=8 RESOURCE_EXHAUSTED value
                         * @property {number} SERVICE_NOT_ACTIVATED=104 SERVICE_NOT_ACTIVATED value
                         * @property {number} BILLING_DISABLED=107 BILLING_DISABLED value
                         * @property {number} PROJECT_DELETED=108 PROJECT_DELETED value
                         * @property {number} PROJECT_INVALID=114 PROJECT_INVALID value
                         * @property {number} CONSUMER_INVALID=125 CONSUMER_INVALID value
                         * @property {number} IP_ADDRESS_BLOCKED=109 IP_ADDRESS_BLOCKED value
                         * @property {number} REFERER_BLOCKED=110 REFERER_BLOCKED value
                         * @property {number} CLIENT_APP_BLOCKED=111 CLIENT_APP_BLOCKED value
                         * @property {number} API_TARGET_BLOCKED=122 API_TARGET_BLOCKED value
                         * @property {number} API_KEY_INVALID=105 API_KEY_INVALID value
                         * @property {number} API_KEY_EXPIRED=112 API_KEY_EXPIRED value
                         * @property {number} API_KEY_NOT_FOUND=113 API_KEY_NOT_FOUND value
                         * @property {number} INVALID_CREDENTIAL=123 INVALID_CREDENTIAL value
                         * @property {number} NAMESPACE_LOOKUP_UNAVAILABLE=300 NAMESPACE_LOOKUP_UNAVAILABLE value
                         * @property {number} SERVICE_STATUS_UNAVAILABLE=301 SERVICE_STATUS_UNAVAILABLE value
                         * @property {number} BILLING_STATUS_UNAVAILABLE=302 BILLING_STATUS_UNAVAILABLE value
                         * @property {number} CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE=305 CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE value
                         */
                        CheckError.Code = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ERROR_CODE_UNSPECIFIED"] = 0;
                            values[valuesById[5] = "NOT_FOUND"] = 5;
                            values[valuesById[7] = "PERMISSION_DENIED"] = 7;
                            values[valuesById[8] = "RESOURCE_EXHAUSTED"] = 8;
                            values[valuesById[104] = "SERVICE_NOT_ACTIVATED"] = 104;
                            values[valuesById[107] = "BILLING_DISABLED"] = 107;
                            values[valuesById[108] = "PROJECT_DELETED"] = 108;
                            values[valuesById[114] = "PROJECT_INVALID"] = 114;
                            values[valuesById[125] = "CONSUMER_INVALID"] = 125;
                            values[valuesById[109] = "IP_ADDRESS_BLOCKED"] = 109;
                            values[valuesById[110] = "REFERER_BLOCKED"] = 110;
                            values[valuesById[111] = "CLIENT_APP_BLOCKED"] = 111;
                            values[valuesById[122] = "API_TARGET_BLOCKED"] = 122;
                            values[valuesById[105] = "API_KEY_INVALID"] = 105;
                            values[valuesById[112] = "API_KEY_EXPIRED"] = 112;
                            values[valuesById[113] = "API_KEY_NOT_FOUND"] = 113;
                            values[valuesById[123] = "INVALID_CREDENTIAL"] = 123;
                            values[valuesById[300] = "NAMESPACE_LOOKUP_UNAVAILABLE"] = 300;
                            values[valuesById[301] = "SERVICE_STATUS_UNAVAILABLE"] = 301;
                            values[valuesById[302] = "BILLING_STATUS_UNAVAILABLE"] = 302;
                            values[valuesById[305] = "CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE"] = 305;
                            return values;
                        })();
    
                        return CheckError;
                    })();
    
                    v1.Distribution = (function() {
    
                        /**
                         * Properties of a Distribution.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IDistribution
                         * @property {number|Long|null} [count] Distribution count
                         * @property {number|null} [mean] Distribution mean
                         * @property {number|null} [minimum] Distribution minimum
                         * @property {number|null} [maximum] Distribution maximum
                         * @property {number|null} [sumOfSquaredDeviation] Distribution sumOfSquaredDeviation
                         * @property {Array.<number|Long>|null} [bucketCounts] Distribution bucketCounts
                         * @property {google.api.servicecontrol.v1.Distribution.ILinearBuckets|null} [linearBuckets] Distribution linearBuckets
                         * @property {google.api.servicecontrol.v1.Distribution.IExponentialBuckets|null} [exponentialBuckets] Distribution exponentialBuckets
                         * @property {google.api.servicecontrol.v1.Distribution.IExplicitBuckets|null} [explicitBuckets] Distribution explicitBuckets
                         * @property {Array.<google.api.Distribution.IExemplar>|null} [exemplars] Distribution exemplars
                         */
    
                        /**
                         * Constructs a new Distribution.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a Distribution.
                         * @implements IDistribution
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IDistribution=} [properties] Properties to set
                         */
                        function Distribution(properties) {
                            this.bucketCounts = [];
                            this.exemplars = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Distribution count.
                         * @member {number|Long} count
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Distribution mean.
                         * @member {number} mean
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.mean = 0;
    
                        /**
                         * Distribution minimum.
                         * @member {number} minimum
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.minimum = 0;
    
                        /**
                         * Distribution maximum.
                         * @member {number} maximum
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.maximum = 0;
    
                        /**
                         * Distribution sumOfSquaredDeviation.
                         * @member {number} sumOfSquaredDeviation
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.sumOfSquaredDeviation = 0;
    
                        /**
                         * Distribution bucketCounts.
                         * @member {Array.<number|Long>} bucketCounts
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.bucketCounts = $util.emptyArray;
    
                        /**
                         * Distribution linearBuckets.
                         * @member {google.api.servicecontrol.v1.Distribution.ILinearBuckets|null|undefined} linearBuckets
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.linearBuckets = null;
    
                        /**
                         * Distribution exponentialBuckets.
                         * @member {google.api.servicecontrol.v1.Distribution.IExponentialBuckets|null|undefined} exponentialBuckets
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.exponentialBuckets = null;
    
                        /**
                         * Distribution explicitBuckets.
                         * @member {google.api.servicecontrol.v1.Distribution.IExplicitBuckets|null|undefined} explicitBuckets
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.explicitBuckets = null;
    
                        /**
                         * Distribution exemplars.
                         * @member {Array.<google.api.Distribution.IExemplar>} exemplars
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Distribution.prototype.exemplars = $util.emptyArray;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Distribution bucketOption.
                         * @member {"linearBuckets"|"exponentialBuckets"|"explicitBuckets"|undefined} bucketOption
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         */
                        Object.defineProperty(Distribution.prototype, "bucketOption", {
                            get: $util.oneOfGetter($oneOfFields = ["linearBuckets", "exponentialBuckets", "explicitBuckets"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Distribution instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @static
                         * @param {google.api.servicecontrol.v1.IDistribution=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.Distribution} Distribution instance
                         */
                        Distribution.create = function create(properties) {
                            return new Distribution(properties);
                        };
    
                        /**
                         * Encodes the specified Distribution message. Does not implicitly {@link google.api.servicecontrol.v1.Distribution.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @static
                         * @param {google.api.servicecontrol.v1.IDistribution} message Distribution message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Distribution.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.count);
                            if (message.mean != null && Object.hasOwnProperty.call(message, "mean"))
                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.mean);
                            if (message.minimum != null && Object.hasOwnProperty.call(message, "minimum"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.minimum);
                            if (message.maximum != null && Object.hasOwnProperty.call(message, "maximum"))
                                writer.uint32(/* id 4, wireType 1 =*/33).double(message.maximum);
                            if (message.sumOfSquaredDeviation != null && Object.hasOwnProperty.call(message, "sumOfSquaredDeviation"))
                                writer.uint32(/* id 5, wireType 1 =*/41).double(message.sumOfSquaredDeviation);
                            if (message.bucketCounts != null && message.bucketCounts.length) {
                                writer.uint32(/* id 6, wireType 2 =*/50).fork();
                                for (var i = 0; i < message.bucketCounts.length; ++i)
                                    writer.int64(message.bucketCounts[i]);
                                writer.ldelim();
                            }
                            if (message.linearBuckets != null && Object.hasOwnProperty.call(message, "linearBuckets"))
                                $root.google.api.servicecontrol.v1.Distribution.LinearBuckets.encode(message.linearBuckets, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.exponentialBuckets != null && Object.hasOwnProperty.call(message, "exponentialBuckets"))
                                $root.google.api.servicecontrol.v1.Distribution.ExponentialBuckets.encode(message.exponentialBuckets, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.explicitBuckets != null && Object.hasOwnProperty.call(message, "explicitBuckets"))
                                $root.google.api.servicecontrol.v1.Distribution.ExplicitBuckets.encode(message.explicitBuckets, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.exemplars != null && message.exemplars.length)
                                for (var i = 0; i < message.exemplars.length; ++i)
                                    $root.google.api.Distribution.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Distribution message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.Distribution.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @static
                         * @param {google.api.servicecontrol.v1.IDistribution} message Distribution message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Distribution.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Distribution message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.Distribution} Distribution
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Distribution.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.Distribution();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.count = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.mean = reader.double();
                                        break;
                                    }
                                case 3: {
                                        message.minimum = reader.double();
                                        break;
                                    }
                                case 4: {
                                        message.maximum = reader.double();
                                        break;
                                    }
                                case 5: {
                                        message.sumOfSquaredDeviation = reader.double();
                                        break;
                                    }
                                case 6: {
                                        if (!(message.bucketCounts && message.bucketCounts.length))
                                            message.bucketCounts = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.bucketCounts.push(reader.int64());
                                        } else
                                            message.bucketCounts.push(reader.int64());
                                        break;
                                    }
                                case 7: {
                                        message.linearBuckets = $root.google.api.servicecontrol.v1.Distribution.LinearBuckets.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.exponentialBuckets = $root.google.api.servicecontrol.v1.Distribution.ExponentialBuckets.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.explicitBuckets = $root.google.api.servicecontrol.v1.Distribution.ExplicitBuckets.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        if (!(message.exemplars && message.exemplars.length))
                                            message.exemplars = [];
                                        message.exemplars.push($root.google.api.Distribution.Exemplar.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Distribution message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.Distribution} Distribution
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Distribution.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Distribution message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Distribution.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.count != null && message.hasOwnProperty("count"))
                                if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                                    return "count: integer|Long expected";
                            if (message.mean != null && message.hasOwnProperty("mean"))
                                if (typeof message.mean !== "number")
                                    return "mean: number expected";
                            if (message.minimum != null && message.hasOwnProperty("minimum"))
                                if (typeof message.minimum !== "number")
                                    return "minimum: number expected";
                            if (message.maximum != null && message.hasOwnProperty("maximum"))
                                if (typeof message.maximum !== "number")
                                    return "maximum: number expected";
                            if (message.sumOfSquaredDeviation != null && message.hasOwnProperty("sumOfSquaredDeviation"))
                                if (typeof message.sumOfSquaredDeviation !== "number")
                                    return "sumOfSquaredDeviation: number expected";
                            if (message.bucketCounts != null && message.hasOwnProperty("bucketCounts")) {
                                if (!Array.isArray(message.bucketCounts))
                                    return "bucketCounts: array expected";
                                for (var i = 0; i < message.bucketCounts.length; ++i)
                                    if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))
                                        return "bucketCounts: integer|Long[] expected";
                            }
                            if (message.linearBuckets != null && message.hasOwnProperty("linearBuckets")) {
                                properties.bucketOption = 1;
                                {
                                    var error = $root.google.api.servicecontrol.v1.Distribution.LinearBuckets.verify(message.linearBuckets);
                                    if (error)
                                        return "linearBuckets." + error;
                                }
                            }
                            if (message.exponentialBuckets != null && message.hasOwnProperty("exponentialBuckets")) {
                                if (properties.bucketOption === 1)
                                    return "bucketOption: multiple values";
                                properties.bucketOption = 1;
                                {
                                    var error = $root.google.api.servicecontrol.v1.Distribution.ExponentialBuckets.verify(message.exponentialBuckets);
                                    if (error)
                                        return "exponentialBuckets." + error;
                                }
                            }
                            if (message.explicitBuckets != null && message.hasOwnProperty("explicitBuckets")) {
                                if (properties.bucketOption === 1)
                                    return "bucketOption: multiple values";
                                properties.bucketOption = 1;
                                {
                                    var error = $root.google.api.servicecontrol.v1.Distribution.ExplicitBuckets.verify(message.explicitBuckets);
                                    if (error)
                                        return "explicitBuckets." + error;
                                }
                            }
                            if (message.exemplars != null && message.hasOwnProperty("exemplars")) {
                                if (!Array.isArray(message.exemplars))
                                    return "exemplars: array expected";
                                for (var i = 0; i < message.exemplars.length; ++i) {
                                    var error = $root.google.api.Distribution.Exemplar.verify(message.exemplars[i]);
                                    if (error)
                                        return "exemplars." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Distribution message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.Distribution} Distribution
                         */
                        Distribution.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.Distribution)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.Distribution();
                            if (object.count != null)
                                if ($util.Long)
                                    (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                                else if (typeof object.count === "string")
                                    message.count = parseInt(object.count, 10);
                                else if (typeof object.count === "number")
                                    message.count = object.count;
                                else if (typeof object.count === "object")
                                    message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                            if (object.mean != null)
                                message.mean = Number(object.mean);
                            if (object.minimum != null)
                                message.minimum = Number(object.minimum);
                            if (object.maximum != null)
                                message.maximum = Number(object.maximum);
                            if (object.sumOfSquaredDeviation != null)
                                message.sumOfSquaredDeviation = Number(object.sumOfSquaredDeviation);
                            if (object.bucketCounts) {
                                if (!Array.isArray(object.bucketCounts))
                                    throw TypeError(".google.api.servicecontrol.v1.Distribution.bucketCounts: array expected");
                                message.bucketCounts = [];
                                for (var i = 0; i < object.bucketCounts.length; ++i)
                                    if ($util.Long)
                                        (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = false;
                                    else if (typeof object.bucketCounts[i] === "string")
                                        message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);
                                    else if (typeof object.bucketCounts[i] === "number")
                                        message.bucketCounts[i] = object.bucketCounts[i];
                                    else if (typeof object.bucketCounts[i] === "object")
                                        message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber();
                            }
                            if (object.linearBuckets != null) {
                                if (typeof object.linearBuckets !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.Distribution.linearBuckets: object expected");
                                message.linearBuckets = $root.google.api.servicecontrol.v1.Distribution.LinearBuckets.fromObject(object.linearBuckets);
                            }
                            if (object.exponentialBuckets != null) {
                                if (typeof object.exponentialBuckets !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.Distribution.exponentialBuckets: object expected");
                                message.exponentialBuckets = $root.google.api.servicecontrol.v1.Distribution.ExponentialBuckets.fromObject(object.exponentialBuckets);
                            }
                            if (object.explicitBuckets != null) {
                                if (typeof object.explicitBuckets !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.Distribution.explicitBuckets: object expected");
                                message.explicitBuckets = $root.google.api.servicecontrol.v1.Distribution.ExplicitBuckets.fromObject(object.explicitBuckets);
                            }
                            if (object.exemplars) {
                                if (!Array.isArray(object.exemplars))
                                    throw TypeError(".google.api.servicecontrol.v1.Distribution.exemplars: array expected");
                                message.exemplars = [];
                                for (var i = 0; i < object.exemplars.length; ++i) {
                                    if (typeof object.exemplars[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.Distribution.exemplars: object expected");
                                    message.exemplars[i] = $root.google.api.Distribution.Exemplar.fromObject(object.exemplars[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Distribution message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @static
                         * @param {google.api.servicecontrol.v1.Distribution} message Distribution
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Distribution.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.bucketCounts = [];
                                object.exemplars = [];
                            }
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.count = options.longs === String ? "0" : 0;
                                object.mean = 0;
                                object.minimum = 0;
                                object.maximum = 0;
                                object.sumOfSquaredDeviation = 0;
                            }
                            if (message.count != null && message.hasOwnProperty("count"))
                                if (typeof message.count === "number")
                                    object.count = options.longs === String ? String(message.count) : message.count;
                                else
                                    object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                            if (message.mean != null && message.hasOwnProperty("mean"))
                                object.mean = options.json && !isFinite(message.mean) ? String(message.mean) : message.mean;
                            if (message.minimum != null && message.hasOwnProperty("minimum"))
                                object.minimum = options.json && !isFinite(message.minimum) ? String(message.minimum) : message.minimum;
                            if (message.maximum != null && message.hasOwnProperty("maximum"))
                                object.maximum = options.json && !isFinite(message.maximum) ? String(message.maximum) : message.maximum;
                            if (message.sumOfSquaredDeviation != null && message.hasOwnProperty("sumOfSquaredDeviation"))
                                object.sumOfSquaredDeviation = options.json && !isFinite(message.sumOfSquaredDeviation) ? String(message.sumOfSquaredDeviation) : message.sumOfSquaredDeviation;
                            if (message.bucketCounts && message.bucketCounts.length) {
                                object.bucketCounts = [];
                                for (var j = 0; j < message.bucketCounts.length; ++j)
                                    if (typeof message.bucketCounts[j] === "number")
                                        object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];
                                    else
                                        object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber() : message.bucketCounts[j];
                            }
                            if (message.linearBuckets != null && message.hasOwnProperty("linearBuckets")) {
                                object.linearBuckets = $root.google.api.servicecontrol.v1.Distribution.LinearBuckets.toObject(message.linearBuckets, options);
                                if (options.oneofs)
                                    object.bucketOption = "linearBuckets";
                            }
                            if (message.exponentialBuckets != null && message.hasOwnProperty("exponentialBuckets")) {
                                object.exponentialBuckets = $root.google.api.servicecontrol.v1.Distribution.ExponentialBuckets.toObject(message.exponentialBuckets, options);
                                if (options.oneofs)
                                    object.bucketOption = "exponentialBuckets";
                            }
                            if (message.explicitBuckets != null && message.hasOwnProperty("explicitBuckets")) {
                                object.explicitBuckets = $root.google.api.servicecontrol.v1.Distribution.ExplicitBuckets.toObject(message.explicitBuckets, options);
                                if (options.oneofs)
                                    object.bucketOption = "explicitBuckets";
                            }
                            if (message.exemplars && message.exemplars.length) {
                                object.exemplars = [];
                                for (var j = 0; j < message.exemplars.length; ++j)
                                    object.exemplars[j] = $root.google.api.Distribution.Exemplar.toObject(message.exemplars[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Distribution to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Distribution.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Distribution
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.Distribution
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Distribution.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.Distribution";
                        };
    
                        Distribution.LinearBuckets = (function() {
    
                            /**
                             * Properties of a LinearBuckets.
                             * @memberof google.api.servicecontrol.v1.Distribution
                             * @interface ILinearBuckets
                             * @property {number|null} [numFiniteBuckets] LinearBuckets numFiniteBuckets
                             * @property {number|null} [width] LinearBuckets width
                             * @property {number|null} [offset] LinearBuckets offset
                             */
    
                            /**
                             * Constructs a new LinearBuckets.
                             * @memberof google.api.servicecontrol.v1.Distribution
                             * @classdesc Represents a LinearBuckets.
                             * @implements ILinearBuckets
                             * @constructor
                             * @param {google.api.servicecontrol.v1.Distribution.ILinearBuckets=} [properties] Properties to set
                             */
                            function LinearBuckets(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * LinearBuckets numFiniteBuckets.
                             * @member {number} numFiniteBuckets
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @instance
                             */
                            LinearBuckets.prototype.numFiniteBuckets = 0;
    
                            /**
                             * LinearBuckets width.
                             * @member {number} width
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @instance
                             */
                            LinearBuckets.prototype.width = 0;
    
                            /**
                             * LinearBuckets offset.
                             * @member {number} offset
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @instance
                             */
                            LinearBuckets.prototype.offset = 0;
    
                            /**
                             * Creates a new LinearBuckets instance using the specified properties.
                             * @function create
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.ILinearBuckets=} [properties] Properties to set
                             * @returns {google.api.servicecontrol.v1.Distribution.LinearBuckets} LinearBuckets instance
                             */
                            LinearBuckets.create = function create(properties) {
                                return new LinearBuckets(properties);
                            };
    
                            /**
                             * Encodes the specified LinearBuckets message. Does not implicitly {@link google.api.servicecontrol.v1.Distribution.LinearBuckets.verify|verify} messages.
                             * @function encode
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.ILinearBuckets} message LinearBuckets message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LinearBuckets.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.numFiniteBuckets != null && Object.hasOwnProperty.call(message, "numFiniteBuckets"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.numFiniteBuckets);
                                if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.width);
                                if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.offset);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified LinearBuckets message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.Distribution.LinearBuckets.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.ILinearBuckets} message LinearBuckets message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LinearBuckets.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a LinearBuckets message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.api.servicecontrol.v1.Distribution.LinearBuckets} LinearBuckets
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LinearBuckets.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.Distribution.LinearBuckets();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.numFiniteBuckets = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.width = reader.double();
                                            break;
                                        }
                                    case 3: {
                                            message.offset = reader.double();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a LinearBuckets message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.api.servicecontrol.v1.Distribution.LinearBuckets} LinearBuckets
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LinearBuckets.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a LinearBuckets message.
                             * @function verify
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            LinearBuckets.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.numFiniteBuckets != null && message.hasOwnProperty("numFiniteBuckets"))
                                    if (!$util.isInteger(message.numFiniteBuckets))
                                        return "numFiniteBuckets: integer expected";
                                if (message.width != null && message.hasOwnProperty("width"))
                                    if (typeof message.width !== "number")
                                        return "width: number expected";
                                if (message.offset != null && message.hasOwnProperty("offset"))
                                    if (typeof message.offset !== "number")
                                        return "offset: number expected";
                                return null;
                            };
    
                            /**
                             * Creates a LinearBuckets message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.api.servicecontrol.v1.Distribution.LinearBuckets} LinearBuckets
                             */
                            LinearBuckets.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.api.servicecontrol.v1.Distribution.LinearBuckets)
                                    return object;
                                var message = new $root.google.api.servicecontrol.v1.Distribution.LinearBuckets();
                                if (object.numFiniteBuckets != null)
                                    message.numFiniteBuckets = object.numFiniteBuckets | 0;
                                if (object.width != null)
                                    message.width = Number(object.width);
                                if (object.offset != null)
                                    message.offset = Number(object.offset);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a LinearBuckets message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.LinearBuckets} message LinearBuckets
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            LinearBuckets.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.numFiniteBuckets = 0;
                                    object.width = 0;
                                    object.offset = 0;
                                }
                                if (message.numFiniteBuckets != null && message.hasOwnProperty("numFiniteBuckets"))
                                    object.numFiniteBuckets = message.numFiniteBuckets;
                                if (message.width != null && message.hasOwnProperty("width"))
                                    object.width = options.json && !isFinite(message.width) ? String(message.width) : message.width;
                                if (message.offset != null && message.hasOwnProperty("offset"))
                                    object.offset = options.json && !isFinite(message.offset) ? String(message.offset) : message.offset;
                                return object;
                            };
    
                            /**
                             * Converts this LinearBuckets to JSON.
                             * @function toJSON
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            LinearBuckets.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for LinearBuckets
                             * @function getTypeUrl
                             * @memberof google.api.servicecontrol.v1.Distribution.LinearBuckets
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            LinearBuckets.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.api.servicecontrol.v1.Distribution.LinearBuckets";
                            };
    
                            return LinearBuckets;
                        })();
    
                        Distribution.ExponentialBuckets = (function() {
    
                            /**
                             * Properties of an ExponentialBuckets.
                             * @memberof google.api.servicecontrol.v1.Distribution
                             * @interface IExponentialBuckets
                             * @property {number|null} [numFiniteBuckets] ExponentialBuckets numFiniteBuckets
                             * @property {number|null} [growthFactor] ExponentialBuckets growthFactor
                             * @property {number|null} [scale] ExponentialBuckets scale
                             */
    
                            /**
                             * Constructs a new ExponentialBuckets.
                             * @memberof google.api.servicecontrol.v1.Distribution
                             * @classdesc Represents an ExponentialBuckets.
                             * @implements IExponentialBuckets
                             * @constructor
                             * @param {google.api.servicecontrol.v1.Distribution.IExponentialBuckets=} [properties] Properties to set
                             */
                            function ExponentialBuckets(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ExponentialBuckets numFiniteBuckets.
                             * @member {number} numFiniteBuckets
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @instance
                             */
                            ExponentialBuckets.prototype.numFiniteBuckets = 0;
    
                            /**
                             * ExponentialBuckets growthFactor.
                             * @member {number} growthFactor
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @instance
                             */
                            ExponentialBuckets.prototype.growthFactor = 0;
    
                            /**
                             * ExponentialBuckets scale.
                             * @member {number} scale
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @instance
                             */
                            ExponentialBuckets.prototype.scale = 0;
    
                            /**
                             * Creates a new ExponentialBuckets instance using the specified properties.
                             * @function create
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.IExponentialBuckets=} [properties] Properties to set
                             * @returns {google.api.servicecontrol.v1.Distribution.ExponentialBuckets} ExponentialBuckets instance
                             */
                            ExponentialBuckets.create = function create(properties) {
                                return new ExponentialBuckets(properties);
                            };
    
                            /**
                             * Encodes the specified ExponentialBuckets message. Does not implicitly {@link google.api.servicecontrol.v1.Distribution.ExponentialBuckets.verify|verify} messages.
                             * @function encode
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.IExponentialBuckets} message ExponentialBuckets message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExponentialBuckets.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.numFiniteBuckets != null && Object.hasOwnProperty.call(message, "numFiniteBuckets"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.numFiniteBuckets);
                                if (message.growthFactor != null && Object.hasOwnProperty.call(message, "growthFactor"))
                                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.growthFactor);
                                if (message.scale != null && Object.hasOwnProperty.call(message, "scale"))
                                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.scale);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ExponentialBuckets message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.Distribution.ExponentialBuckets.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.IExponentialBuckets} message ExponentialBuckets message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExponentialBuckets.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ExponentialBuckets message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.api.servicecontrol.v1.Distribution.ExponentialBuckets} ExponentialBuckets
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExponentialBuckets.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.Distribution.ExponentialBuckets();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.numFiniteBuckets = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.growthFactor = reader.double();
                                            break;
                                        }
                                    case 3: {
                                            message.scale = reader.double();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ExponentialBuckets message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.api.servicecontrol.v1.Distribution.ExponentialBuckets} ExponentialBuckets
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExponentialBuckets.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ExponentialBuckets message.
                             * @function verify
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ExponentialBuckets.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.numFiniteBuckets != null && message.hasOwnProperty("numFiniteBuckets"))
                                    if (!$util.isInteger(message.numFiniteBuckets))
                                        return "numFiniteBuckets: integer expected";
                                if (message.growthFactor != null && message.hasOwnProperty("growthFactor"))
                                    if (typeof message.growthFactor !== "number")
                                        return "growthFactor: number expected";
                                if (message.scale != null && message.hasOwnProperty("scale"))
                                    if (typeof message.scale !== "number")
                                        return "scale: number expected";
                                return null;
                            };
    
                            /**
                             * Creates an ExponentialBuckets message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.api.servicecontrol.v1.Distribution.ExponentialBuckets} ExponentialBuckets
                             */
                            ExponentialBuckets.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
                                    return object;
                                var message = new $root.google.api.servicecontrol.v1.Distribution.ExponentialBuckets();
                                if (object.numFiniteBuckets != null)
                                    message.numFiniteBuckets = object.numFiniteBuckets | 0;
                                if (object.growthFactor != null)
                                    message.growthFactor = Number(object.growthFactor);
                                if (object.scale != null)
                                    message.scale = Number(object.scale);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ExponentialBuckets message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.ExponentialBuckets} message ExponentialBuckets
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ExponentialBuckets.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.numFiniteBuckets = 0;
                                    object.growthFactor = 0;
                                    object.scale = 0;
                                }
                                if (message.numFiniteBuckets != null && message.hasOwnProperty("numFiniteBuckets"))
                                    object.numFiniteBuckets = message.numFiniteBuckets;
                                if (message.growthFactor != null && message.hasOwnProperty("growthFactor"))
                                    object.growthFactor = options.json && !isFinite(message.growthFactor) ? String(message.growthFactor) : message.growthFactor;
                                if (message.scale != null && message.hasOwnProperty("scale"))
                                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                                return object;
                            };
    
                            /**
                             * Converts this ExponentialBuckets to JSON.
                             * @function toJSON
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ExponentialBuckets.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ExponentialBuckets
                             * @function getTypeUrl
                             * @memberof google.api.servicecontrol.v1.Distribution.ExponentialBuckets
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ExponentialBuckets.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.api.servicecontrol.v1.Distribution.ExponentialBuckets";
                            };
    
                            return ExponentialBuckets;
                        })();
    
                        Distribution.ExplicitBuckets = (function() {
    
                            /**
                             * Properties of an ExplicitBuckets.
                             * @memberof google.api.servicecontrol.v1.Distribution
                             * @interface IExplicitBuckets
                             * @property {Array.<number>|null} [bounds] ExplicitBuckets bounds
                             */
    
                            /**
                             * Constructs a new ExplicitBuckets.
                             * @memberof google.api.servicecontrol.v1.Distribution
                             * @classdesc Represents an ExplicitBuckets.
                             * @implements IExplicitBuckets
                             * @constructor
                             * @param {google.api.servicecontrol.v1.Distribution.IExplicitBuckets=} [properties] Properties to set
                             */
                            function ExplicitBuckets(properties) {
                                this.bounds = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ExplicitBuckets bounds.
                             * @member {Array.<number>} bounds
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @instance
                             */
                            ExplicitBuckets.prototype.bounds = $util.emptyArray;
    
                            /**
                             * Creates a new ExplicitBuckets instance using the specified properties.
                             * @function create
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.IExplicitBuckets=} [properties] Properties to set
                             * @returns {google.api.servicecontrol.v1.Distribution.ExplicitBuckets} ExplicitBuckets instance
                             */
                            ExplicitBuckets.create = function create(properties) {
                                return new ExplicitBuckets(properties);
                            };
    
                            /**
                             * Encodes the specified ExplicitBuckets message. Does not implicitly {@link google.api.servicecontrol.v1.Distribution.ExplicitBuckets.verify|verify} messages.
                             * @function encode
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.IExplicitBuckets} message ExplicitBuckets message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplicitBuckets.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.bounds != null && message.bounds.length) {
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                    for (var i = 0; i < message.bounds.length; ++i)
                                        writer.double(message.bounds[i]);
                                    writer.ldelim();
                                }
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ExplicitBuckets message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.Distribution.ExplicitBuckets.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.IExplicitBuckets} message ExplicitBuckets message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ExplicitBuckets.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ExplicitBuckets message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.api.servicecontrol.v1.Distribution.ExplicitBuckets} ExplicitBuckets
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplicitBuckets.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.Distribution.ExplicitBuckets();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (!(message.bounds && message.bounds.length))
                                                message.bounds = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.bounds.push(reader.double());
                                            } else
                                                message.bounds.push(reader.double());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ExplicitBuckets message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.api.servicecontrol.v1.Distribution.ExplicitBuckets} ExplicitBuckets
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ExplicitBuckets.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ExplicitBuckets message.
                             * @function verify
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ExplicitBuckets.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.bounds != null && message.hasOwnProperty("bounds")) {
                                    if (!Array.isArray(message.bounds))
                                        return "bounds: array expected";
                                    for (var i = 0; i < message.bounds.length; ++i)
                                        if (typeof message.bounds[i] !== "number")
                                            return "bounds: number[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates an ExplicitBuckets message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.api.servicecontrol.v1.Distribution.ExplicitBuckets} ExplicitBuckets
                             */
                            ExplicitBuckets.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
                                    return object;
                                var message = new $root.google.api.servicecontrol.v1.Distribution.ExplicitBuckets();
                                if (object.bounds) {
                                    if (!Array.isArray(object.bounds))
                                        throw TypeError(".google.api.servicecontrol.v1.Distribution.ExplicitBuckets.bounds: array expected");
                                    message.bounds = [];
                                    for (var i = 0; i < object.bounds.length; ++i)
                                        message.bounds[i] = Number(object.bounds[i]);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ExplicitBuckets message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @static
                             * @param {google.api.servicecontrol.v1.Distribution.ExplicitBuckets} message ExplicitBuckets
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ExplicitBuckets.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.bounds = [];
                                if (message.bounds && message.bounds.length) {
                                    object.bounds = [];
                                    for (var j = 0; j < message.bounds.length; ++j)
                                        object.bounds[j] = options.json && !isFinite(message.bounds[j]) ? String(message.bounds[j]) : message.bounds[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this ExplicitBuckets to JSON.
                             * @function toJSON
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ExplicitBuckets.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ExplicitBuckets
                             * @function getTypeUrl
                             * @memberof google.api.servicecontrol.v1.Distribution.ExplicitBuckets
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ExplicitBuckets.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.api.servicecontrol.v1.Distribution.ExplicitBuckets";
                            };
    
                            return ExplicitBuckets;
                        })();
    
                        return Distribution;
                    })();
    
                    v1.HttpRequest = (function() {
    
                        /**
                         * Properties of a HttpRequest.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IHttpRequest
                         * @property {string|null} [requestMethod] HttpRequest requestMethod
                         * @property {string|null} [requestUrl] HttpRequest requestUrl
                         * @property {number|Long|null} [requestSize] HttpRequest requestSize
                         * @property {number|null} [status] HttpRequest status
                         * @property {number|Long|null} [responseSize] HttpRequest responseSize
                         * @property {string|null} [userAgent] HttpRequest userAgent
                         * @property {string|null} [remoteIp] HttpRequest remoteIp
                         * @property {string|null} [serverIp] HttpRequest serverIp
                         * @property {string|null} [referer] HttpRequest referer
                         * @property {google.protobuf.IDuration|null} [latency] HttpRequest latency
                         * @property {boolean|null} [cacheLookup] HttpRequest cacheLookup
                         * @property {boolean|null} [cacheHit] HttpRequest cacheHit
                         * @property {boolean|null} [cacheValidatedWithOriginServer] HttpRequest cacheValidatedWithOriginServer
                         * @property {number|Long|null} [cacheFillBytes] HttpRequest cacheFillBytes
                         * @property {string|null} [protocol] HttpRequest protocol
                         */
    
                        /**
                         * Constructs a new HttpRequest.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a HttpRequest.
                         * @implements IHttpRequest
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IHttpRequest=} [properties] Properties to set
                         */
                        function HttpRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * HttpRequest requestMethod.
                         * @member {string} requestMethod
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.requestMethod = "";
    
                        /**
                         * HttpRequest requestUrl.
                         * @member {string} requestUrl
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.requestUrl = "";
    
                        /**
                         * HttpRequest requestSize.
                         * @member {number|Long} requestSize
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.requestSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * HttpRequest status.
                         * @member {number} status
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.status = 0;
    
                        /**
                         * HttpRequest responseSize.
                         * @member {number|Long} responseSize
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.responseSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * HttpRequest userAgent.
                         * @member {string} userAgent
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.userAgent = "";
    
                        /**
                         * HttpRequest remoteIp.
                         * @member {string} remoteIp
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.remoteIp = "";
    
                        /**
                         * HttpRequest serverIp.
                         * @member {string} serverIp
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.serverIp = "";
    
                        /**
                         * HttpRequest referer.
                         * @member {string} referer
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.referer = "";
    
                        /**
                         * HttpRequest latency.
                         * @member {google.protobuf.IDuration|null|undefined} latency
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.latency = null;
    
                        /**
                         * HttpRequest cacheLookup.
                         * @member {boolean} cacheLookup
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.cacheLookup = false;
    
                        /**
                         * HttpRequest cacheHit.
                         * @member {boolean} cacheHit
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.cacheHit = false;
    
                        /**
                         * HttpRequest cacheValidatedWithOriginServer.
                         * @member {boolean} cacheValidatedWithOriginServer
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.cacheValidatedWithOriginServer = false;
    
                        /**
                         * HttpRequest cacheFillBytes.
                         * @member {number|Long} cacheFillBytes
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.cacheFillBytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * HttpRequest protocol.
                         * @member {string} protocol
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         */
                        HttpRequest.prototype.protocol = "";
    
                        /**
                         * Creates a new HttpRequest instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.IHttpRequest=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.HttpRequest} HttpRequest instance
                         */
                        HttpRequest.create = function create(properties) {
                            return new HttpRequest(properties);
                        };
    
                        /**
                         * Encodes the specified HttpRequest message. Does not implicitly {@link google.api.servicecontrol.v1.HttpRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.IHttpRequest} message HttpRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HttpRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.requestMethod != null && Object.hasOwnProperty.call(message, "requestMethod"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.requestMethod);
                            if (message.requestUrl != null && Object.hasOwnProperty.call(message, "requestUrl"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.requestUrl);
                            if (message.requestSize != null && Object.hasOwnProperty.call(message, "requestSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.requestSize);
                            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.status);
                            if (message.responseSize != null && Object.hasOwnProperty.call(message, "responseSize"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.responseSize);
                            if (message.userAgent != null && Object.hasOwnProperty.call(message, "userAgent"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.userAgent);
                            if (message.remoteIp != null && Object.hasOwnProperty.call(message, "remoteIp"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.remoteIp);
                            if (message.referer != null && Object.hasOwnProperty.call(message, "referer"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.referer);
                            if (message.cacheHit != null && Object.hasOwnProperty.call(message, "cacheHit"))
                                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.cacheHit);
                            if (message.cacheValidatedWithOriginServer != null && Object.hasOwnProperty.call(message, "cacheValidatedWithOriginServer"))
                                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.cacheValidatedWithOriginServer);
                            if (message.cacheLookup != null && Object.hasOwnProperty.call(message, "cacheLookup"))
                                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.cacheLookup);
                            if (message.cacheFillBytes != null && Object.hasOwnProperty.call(message, "cacheFillBytes"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int64(message.cacheFillBytes);
                            if (message.serverIp != null && Object.hasOwnProperty.call(message, "serverIp"))
                                writer.uint32(/* id 13, wireType 2 =*/106).string(message.serverIp);
                            if (message.latency != null && Object.hasOwnProperty.call(message, "latency"))
                                $root.google.protobuf.Duration.encode(message.latency, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                                writer.uint32(/* id 15, wireType 2 =*/122).string(message.protocol);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified HttpRequest message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.HttpRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.IHttpRequest} message HttpRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HttpRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a HttpRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.HttpRequest} HttpRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HttpRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.HttpRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.requestMethod = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.requestUrl = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.requestSize = reader.int64();
                                        break;
                                    }
                                case 4: {
                                        message.status = reader.int32();
                                        break;
                                    }
                                case 5: {
                                        message.responseSize = reader.int64();
                                        break;
                                    }
                                case 6: {
                                        message.userAgent = reader.string();
                                        break;
                                    }
                                case 7: {
                                        message.remoteIp = reader.string();
                                        break;
                                    }
                                case 13: {
                                        message.serverIp = reader.string();
                                        break;
                                    }
                                case 8: {
                                        message.referer = reader.string();
                                        break;
                                    }
                                case 14: {
                                        message.latency = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.cacheLookup = reader.bool();
                                        break;
                                    }
                                case 9: {
                                        message.cacheHit = reader.bool();
                                        break;
                                    }
                                case 10: {
                                        message.cacheValidatedWithOriginServer = reader.bool();
                                        break;
                                    }
                                case 12: {
                                        message.cacheFillBytes = reader.int64();
                                        break;
                                    }
                                case 15: {
                                        message.protocol = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a HttpRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.HttpRequest} HttpRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HttpRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a HttpRequest message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HttpRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.requestMethod != null && message.hasOwnProperty("requestMethod"))
                                if (!$util.isString(message.requestMethod))
                                    return "requestMethod: string expected";
                            if (message.requestUrl != null && message.hasOwnProperty("requestUrl"))
                                if (!$util.isString(message.requestUrl))
                                    return "requestUrl: string expected";
                            if (message.requestSize != null && message.hasOwnProperty("requestSize"))
                                if (!$util.isInteger(message.requestSize) && !(message.requestSize && $util.isInteger(message.requestSize.low) && $util.isInteger(message.requestSize.high)))
                                    return "requestSize: integer|Long expected";
                            if (message.status != null && message.hasOwnProperty("status"))
                                if (!$util.isInteger(message.status))
                                    return "status: integer expected";
                            if (message.responseSize != null && message.hasOwnProperty("responseSize"))
                                if (!$util.isInteger(message.responseSize) && !(message.responseSize && $util.isInteger(message.responseSize.low) && $util.isInteger(message.responseSize.high)))
                                    return "responseSize: integer|Long expected";
                            if (message.userAgent != null && message.hasOwnProperty("userAgent"))
                                if (!$util.isString(message.userAgent))
                                    return "userAgent: string expected";
                            if (message.remoteIp != null && message.hasOwnProperty("remoteIp"))
                                if (!$util.isString(message.remoteIp))
                                    return "remoteIp: string expected";
                            if (message.serverIp != null && message.hasOwnProperty("serverIp"))
                                if (!$util.isString(message.serverIp))
                                    return "serverIp: string expected";
                            if (message.referer != null && message.hasOwnProperty("referer"))
                                if (!$util.isString(message.referer))
                                    return "referer: string expected";
                            if (message.latency != null && message.hasOwnProperty("latency")) {
                                var error = $root.google.protobuf.Duration.verify(message.latency);
                                if (error)
                                    return "latency." + error;
                            }
                            if (message.cacheLookup != null && message.hasOwnProperty("cacheLookup"))
                                if (typeof message.cacheLookup !== "boolean")
                                    return "cacheLookup: boolean expected";
                            if (message.cacheHit != null && message.hasOwnProperty("cacheHit"))
                                if (typeof message.cacheHit !== "boolean")
                                    return "cacheHit: boolean expected";
                            if (message.cacheValidatedWithOriginServer != null && message.hasOwnProperty("cacheValidatedWithOriginServer"))
                                if (typeof message.cacheValidatedWithOriginServer !== "boolean")
                                    return "cacheValidatedWithOriginServer: boolean expected";
                            if (message.cacheFillBytes != null && message.hasOwnProperty("cacheFillBytes"))
                                if (!$util.isInteger(message.cacheFillBytes) && !(message.cacheFillBytes && $util.isInteger(message.cacheFillBytes.low) && $util.isInteger(message.cacheFillBytes.high)))
                                    return "cacheFillBytes: integer|Long expected";
                            if (message.protocol != null && message.hasOwnProperty("protocol"))
                                if (!$util.isString(message.protocol))
                                    return "protocol: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a HttpRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.HttpRequest} HttpRequest
                         */
                        HttpRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.HttpRequest)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.HttpRequest();
                            if (object.requestMethod != null)
                                message.requestMethod = String(object.requestMethod);
                            if (object.requestUrl != null)
                                message.requestUrl = String(object.requestUrl);
                            if (object.requestSize != null)
                                if ($util.Long)
                                    (message.requestSize = $util.Long.fromValue(object.requestSize)).unsigned = false;
                                else if (typeof object.requestSize === "string")
                                    message.requestSize = parseInt(object.requestSize, 10);
                                else if (typeof object.requestSize === "number")
                                    message.requestSize = object.requestSize;
                                else if (typeof object.requestSize === "object")
                                    message.requestSize = new $util.LongBits(object.requestSize.low >>> 0, object.requestSize.high >>> 0).toNumber();
                            if (object.status != null)
                                message.status = object.status | 0;
                            if (object.responseSize != null)
                                if ($util.Long)
                                    (message.responseSize = $util.Long.fromValue(object.responseSize)).unsigned = false;
                                else if (typeof object.responseSize === "string")
                                    message.responseSize = parseInt(object.responseSize, 10);
                                else if (typeof object.responseSize === "number")
                                    message.responseSize = object.responseSize;
                                else if (typeof object.responseSize === "object")
                                    message.responseSize = new $util.LongBits(object.responseSize.low >>> 0, object.responseSize.high >>> 0).toNumber();
                            if (object.userAgent != null)
                                message.userAgent = String(object.userAgent);
                            if (object.remoteIp != null)
                                message.remoteIp = String(object.remoteIp);
                            if (object.serverIp != null)
                                message.serverIp = String(object.serverIp);
                            if (object.referer != null)
                                message.referer = String(object.referer);
                            if (object.latency != null) {
                                if (typeof object.latency !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.HttpRequest.latency: object expected");
                                message.latency = $root.google.protobuf.Duration.fromObject(object.latency);
                            }
                            if (object.cacheLookup != null)
                                message.cacheLookup = Boolean(object.cacheLookup);
                            if (object.cacheHit != null)
                                message.cacheHit = Boolean(object.cacheHit);
                            if (object.cacheValidatedWithOriginServer != null)
                                message.cacheValidatedWithOriginServer = Boolean(object.cacheValidatedWithOriginServer);
                            if (object.cacheFillBytes != null)
                                if ($util.Long)
                                    (message.cacheFillBytes = $util.Long.fromValue(object.cacheFillBytes)).unsigned = false;
                                else if (typeof object.cacheFillBytes === "string")
                                    message.cacheFillBytes = parseInt(object.cacheFillBytes, 10);
                                else if (typeof object.cacheFillBytes === "number")
                                    message.cacheFillBytes = object.cacheFillBytes;
                                else if (typeof object.cacheFillBytes === "object")
                                    message.cacheFillBytes = new $util.LongBits(object.cacheFillBytes.low >>> 0, object.cacheFillBytes.high >>> 0).toNumber();
                            if (object.protocol != null)
                                message.protocol = String(object.protocol);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a HttpRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.HttpRequest} message HttpRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HttpRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.requestMethod = "";
                                object.requestUrl = "";
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.requestSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.requestSize = options.longs === String ? "0" : 0;
                                object.status = 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.responseSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.responseSize = options.longs === String ? "0" : 0;
                                object.userAgent = "";
                                object.remoteIp = "";
                                object.referer = "";
                                object.cacheHit = false;
                                object.cacheValidatedWithOriginServer = false;
                                object.cacheLookup = false;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.cacheFillBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.cacheFillBytes = options.longs === String ? "0" : 0;
                                object.serverIp = "";
                                object.latency = null;
                                object.protocol = "";
                            }
                            if (message.requestMethod != null && message.hasOwnProperty("requestMethod"))
                                object.requestMethod = message.requestMethod;
                            if (message.requestUrl != null && message.hasOwnProperty("requestUrl"))
                                object.requestUrl = message.requestUrl;
                            if (message.requestSize != null && message.hasOwnProperty("requestSize"))
                                if (typeof message.requestSize === "number")
                                    object.requestSize = options.longs === String ? String(message.requestSize) : message.requestSize;
                                else
                                    object.requestSize = options.longs === String ? $util.Long.prototype.toString.call(message.requestSize) : options.longs === Number ? new $util.LongBits(message.requestSize.low >>> 0, message.requestSize.high >>> 0).toNumber() : message.requestSize;
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = message.status;
                            if (message.responseSize != null && message.hasOwnProperty("responseSize"))
                                if (typeof message.responseSize === "number")
                                    object.responseSize = options.longs === String ? String(message.responseSize) : message.responseSize;
                                else
                                    object.responseSize = options.longs === String ? $util.Long.prototype.toString.call(message.responseSize) : options.longs === Number ? new $util.LongBits(message.responseSize.low >>> 0, message.responseSize.high >>> 0).toNumber() : message.responseSize;
                            if (message.userAgent != null && message.hasOwnProperty("userAgent"))
                                object.userAgent = message.userAgent;
                            if (message.remoteIp != null && message.hasOwnProperty("remoteIp"))
                                object.remoteIp = message.remoteIp;
                            if (message.referer != null && message.hasOwnProperty("referer"))
                                object.referer = message.referer;
                            if (message.cacheHit != null && message.hasOwnProperty("cacheHit"))
                                object.cacheHit = message.cacheHit;
                            if (message.cacheValidatedWithOriginServer != null && message.hasOwnProperty("cacheValidatedWithOriginServer"))
                                object.cacheValidatedWithOriginServer = message.cacheValidatedWithOriginServer;
                            if (message.cacheLookup != null && message.hasOwnProperty("cacheLookup"))
                                object.cacheLookup = message.cacheLookup;
                            if (message.cacheFillBytes != null && message.hasOwnProperty("cacheFillBytes"))
                                if (typeof message.cacheFillBytes === "number")
                                    object.cacheFillBytes = options.longs === String ? String(message.cacheFillBytes) : message.cacheFillBytes;
                                else
                                    object.cacheFillBytes = options.longs === String ? $util.Long.prototype.toString.call(message.cacheFillBytes) : options.longs === Number ? new $util.LongBits(message.cacheFillBytes.low >>> 0, message.cacheFillBytes.high >>> 0).toNumber() : message.cacheFillBytes;
                            if (message.serverIp != null && message.hasOwnProperty("serverIp"))
                                object.serverIp = message.serverIp;
                            if (message.latency != null && message.hasOwnProperty("latency"))
                                object.latency = $root.google.protobuf.Duration.toObject(message.latency, options);
                            if (message.protocol != null && message.hasOwnProperty("protocol"))
                                object.protocol = message.protocol;
                            return object;
                        };
    
                        /**
                         * Converts this HttpRequest to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HttpRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for HttpRequest
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.HttpRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        HttpRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.HttpRequest";
                        };
    
                        return HttpRequest;
                    })();
    
                    v1.LogEntry = (function() {
    
                        /**
                         * Properties of a LogEntry.
                         * @memberof google.api.servicecontrol.v1
                         * @interface ILogEntry
                         * @property {string|null} [name] LogEntry name
                         * @property {google.protobuf.ITimestamp|null} [timestamp] LogEntry timestamp
                         * @property {google.logging.type.LogSeverity|null} [severity] LogEntry severity
                         * @property {google.api.servicecontrol.v1.IHttpRequest|null} [httpRequest] LogEntry httpRequest
                         * @property {string|null} [trace] LogEntry trace
                         * @property {string|null} [insertId] LogEntry insertId
                         * @property {Object.<string,string>|null} [labels] LogEntry labels
                         * @property {google.protobuf.IAny|null} [protoPayload] LogEntry protoPayload
                         * @property {string|null} [textPayload] LogEntry textPayload
                         * @property {google.protobuf.IStruct|null} [structPayload] LogEntry structPayload
                         * @property {google.api.servicecontrol.v1.ILogEntryOperation|null} [operation] LogEntry operation
                         * @property {google.api.servicecontrol.v1.ILogEntrySourceLocation|null} [sourceLocation] LogEntry sourceLocation
                         */
    
                        /**
                         * Constructs a new LogEntry.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a LogEntry.
                         * @implements ILogEntry
                         * @constructor
                         * @param {google.api.servicecontrol.v1.ILogEntry=} [properties] Properties to set
                         */
                        function LogEntry(properties) {
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LogEntry name.
                         * @member {string} name
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.name = "";
    
                        /**
                         * LogEntry timestamp.
                         * @member {google.protobuf.ITimestamp|null|undefined} timestamp
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.timestamp = null;
    
                        /**
                         * LogEntry severity.
                         * @member {google.logging.type.LogSeverity} severity
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.severity = 0;
    
                        /**
                         * LogEntry httpRequest.
                         * @member {google.api.servicecontrol.v1.IHttpRequest|null|undefined} httpRequest
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.httpRequest = null;
    
                        /**
                         * LogEntry trace.
                         * @member {string} trace
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.trace = "";
    
                        /**
                         * LogEntry insertId.
                         * @member {string} insertId
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.insertId = "";
    
                        /**
                         * LogEntry labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.labels = $util.emptyObject;
    
                        /**
                         * LogEntry protoPayload.
                         * @member {google.protobuf.IAny|null|undefined} protoPayload
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.protoPayload = null;
    
                        /**
                         * LogEntry textPayload.
                         * @member {string|null|undefined} textPayload
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.textPayload = null;
    
                        /**
                         * LogEntry structPayload.
                         * @member {google.protobuf.IStruct|null|undefined} structPayload
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.structPayload = null;
    
                        /**
                         * LogEntry operation.
                         * @member {google.api.servicecontrol.v1.ILogEntryOperation|null|undefined} operation
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.operation = null;
    
                        /**
                         * LogEntry sourceLocation.
                         * @member {google.api.servicecontrol.v1.ILogEntrySourceLocation|null|undefined} sourceLocation
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        LogEntry.prototype.sourceLocation = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * LogEntry payload.
                         * @member {"protoPayload"|"textPayload"|"structPayload"|undefined} payload
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         */
                        Object.defineProperty(LogEntry.prototype, "payload", {
                            get: $util.oneOfGetter($oneOfFields = ["protoPayload", "textPayload", "structPayload"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new LogEntry instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @static
                         * @param {google.api.servicecontrol.v1.ILogEntry=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.LogEntry} LogEntry instance
                         */
                        LogEntry.create = function create(properties) {
                            return new LogEntry(properties);
                        };
    
                        /**
                         * Encodes the specified LogEntry message. Does not implicitly {@link google.api.servicecontrol.v1.LogEntry.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @static
                         * @param {google.api.servicecontrol.v1.ILogEntry} message LogEntry message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogEntry.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.protoPayload != null && Object.hasOwnProperty.call(message, "protoPayload"))
                                $root.google.protobuf.Any.encode(message.protoPayload, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.textPayload != null && Object.hasOwnProperty.call(message, "textPayload"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.textPayload);
                            if (message.insertId != null && Object.hasOwnProperty.call(message, "insertId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.insertId);
                            if (message.structPayload != null && Object.hasOwnProperty.call(message, "structPayload"))
                                $root.google.protobuf.Struct.encode(message.structPayload, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.name);
                            if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                                $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.severity);
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 13, wireType 2 =*/106).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.httpRequest != null && Object.hasOwnProperty.call(message, "httpRequest"))
                                $root.google.api.servicecontrol.v1.HttpRequest.encode(message.httpRequest, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            if (message.trace != null && Object.hasOwnProperty.call(message, "trace"))
                                writer.uint32(/* id 15, wireType 2 =*/122).string(message.trace);
                            if (message.operation != null && Object.hasOwnProperty.call(message, "operation"))
                                $root.google.api.servicecontrol.v1.LogEntryOperation.encode(message.operation, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                            if (message.sourceLocation != null && Object.hasOwnProperty.call(message, "sourceLocation"))
                                $root.google.api.servicecontrol.v1.LogEntrySourceLocation.encode(message.sourceLocation, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LogEntry message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.LogEntry.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @static
                         * @param {google.api.servicecontrol.v1.ILogEntry} message LogEntry message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogEntry.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LogEntry message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.LogEntry} LogEntry
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogEntry.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.LogEntry(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 10: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 11: {
                                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 12: {
                                        message.severity = reader.int32();
                                        break;
                                    }
                                case 14: {
                                        message.httpRequest = $root.google.api.servicecontrol.v1.HttpRequest.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 15: {
                                        message.trace = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.insertId = reader.string();
                                        break;
                                    }
                                case 13: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 2: {
                                        message.protoPayload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.textPayload = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.structPayload = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 16: {
                                        message.operation = $root.google.api.servicecontrol.v1.LogEntryOperation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 17: {
                                        message.sourceLocation = $root.google.api.servicecontrol.v1.LogEntrySourceLocation.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LogEntry message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.LogEntry} LogEntry
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogEntry.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LogEntry message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LogEntry.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                                if (error)
                                    return "timestamp." + error;
                            }
                            if (message.severity != null && message.hasOwnProperty("severity"))
                                switch (message.severity) {
                                default:
                                    return "severity: enum value expected";
                                case 0:
                                case 100:
                                case 200:
                                case 300:
                                case 400:
                                case 500:
                                case 600:
                                case 700:
                                case 800:
                                    break;
                                }
                            if (message.httpRequest != null && message.hasOwnProperty("httpRequest")) {
                                var error = $root.google.api.servicecontrol.v1.HttpRequest.verify(message.httpRequest);
                                if (error)
                                    return "httpRequest." + error;
                            }
                            if (message.trace != null && message.hasOwnProperty("trace"))
                                if (!$util.isString(message.trace))
                                    return "trace: string expected";
                            if (message.insertId != null && message.hasOwnProperty("insertId"))
                                if (!$util.isString(message.insertId))
                                    return "insertId: string expected";
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.protoPayload != null && message.hasOwnProperty("protoPayload")) {
                                properties.payload = 1;
                                {
                                    var error = $root.google.protobuf.Any.verify(message.protoPayload);
                                    if (error)
                                        return "protoPayload." + error;
                                }
                            }
                            if (message.textPayload != null && message.hasOwnProperty("textPayload")) {
                                if (properties.payload === 1)
                                    return "payload: multiple values";
                                properties.payload = 1;
                                if (!$util.isString(message.textPayload))
                                    return "textPayload: string expected";
                            }
                            if (message.structPayload != null && message.hasOwnProperty("structPayload")) {
                                if (properties.payload === 1)
                                    return "payload: multiple values";
                                properties.payload = 1;
                                {
                                    var error = $root.google.protobuf.Struct.verify(message.structPayload);
                                    if (error)
                                        return "structPayload." + error;
                                }
                            }
                            if (message.operation != null && message.hasOwnProperty("operation")) {
                                var error = $root.google.api.servicecontrol.v1.LogEntryOperation.verify(message.operation);
                                if (error)
                                    return "operation." + error;
                            }
                            if (message.sourceLocation != null && message.hasOwnProperty("sourceLocation")) {
                                var error = $root.google.api.servicecontrol.v1.LogEntrySourceLocation.verify(message.sourceLocation);
                                if (error)
                                    return "sourceLocation." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LogEntry message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.LogEntry} LogEntry
                         */
                        LogEntry.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.LogEntry)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.LogEntry();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.timestamp != null) {
                                if (typeof object.timestamp !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.LogEntry.timestamp: object expected");
                                message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                            }
                            switch (object.severity) {
                            default:
                                if (typeof object.severity === "number") {
                                    message.severity = object.severity;
                                    break;
                                }
                                break;
                            case "DEFAULT":
                            case 0:
                                message.severity = 0;
                                break;
                            case "DEBUG":
                            case 100:
                                message.severity = 100;
                                break;
                            case "INFO":
                            case 200:
                                message.severity = 200;
                                break;
                            case "NOTICE":
                            case 300:
                                message.severity = 300;
                                break;
                            case "WARNING":
                            case 400:
                                message.severity = 400;
                                break;
                            case "ERROR":
                            case 500:
                                message.severity = 500;
                                break;
                            case "CRITICAL":
                            case 600:
                                message.severity = 600;
                                break;
                            case "ALERT":
                            case 700:
                                message.severity = 700;
                                break;
                            case "EMERGENCY":
                            case 800:
                                message.severity = 800;
                                break;
                            }
                            if (object.httpRequest != null) {
                                if (typeof object.httpRequest !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.LogEntry.httpRequest: object expected");
                                message.httpRequest = $root.google.api.servicecontrol.v1.HttpRequest.fromObject(object.httpRequest);
                            }
                            if (object.trace != null)
                                message.trace = String(object.trace);
                            if (object.insertId != null)
                                message.insertId = String(object.insertId);
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.LogEntry.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.protoPayload != null) {
                                if (typeof object.protoPayload !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.LogEntry.protoPayload: object expected");
                                message.protoPayload = $root.google.protobuf.Any.fromObject(object.protoPayload);
                            }
                            if (object.textPayload != null)
                                message.textPayload = String(object.textPayload);
                            if (object.structPayload != null) {
                                if (typeof object.structPayload !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.LogEntry.structPayload: object expected");
                                message.structPayload = $root.google.protobuf.Struct.fromObject(object.structPayload);
                            }
                            if (object.operation != null) {
                                if (typeof object.operation !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.LogEntry.operation: object expected");
                                message.operation = $root.google.api.servicecontrol.v1.LogEntryOperation.fromObject(object.operation);
                            }
                            if (object.sourceLocation != null) {
                                if (typeof object.sourceLocation !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.LogEntry.sourceLocation: object expected");
                                message.sourceLocation = $root.google.api.servicecontrol.v1.LogEntrySourceLocation.fromObject(object.sourceLocation);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LogEntry message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @static
                         * @param {google.api.servicecontrol.v1.LogEntry} message LogEntry
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LogEntry.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.insertId = "";
                                object.name = "";
                                object.timestamp = null;
                                object.severity = options.enums === String ? "DEFAULT" : 0;
                                object.httpRequest = null;
                                object.trace = "";
                                object.operation = null;
                                object.sourceLocation = null;
                            }
                            if (message.protoPayload != null && message.hasOwnProperty("protoPayload")) {
                                object.protoPayload = $root.google.protobuf.Any.toObject(message.protoPayload, options);
                                if (options.oneofs)
                                    object.payload = "protoPayload";
                            }
                            if (message.textPayload != null && message.hasOwnProperty("textPayload")) {
                                object.textPayload = message.textPayload;
                                if (options.oneofs)
                                    object.payload = "textPayload";
                            }
                            if (message.insertId != null && message.hasOwnProperty("insertId"))
                                object.insertId = message.insertId;
                            if (message.structPayload != null && message.hasOwnProperty("structPayload")) {
                                object.structPayload = $root.google.protobuf.Struct.toObject(message.structPayload, options);
                                if (options.oneofs)
                                    object.payload = "structPayload";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                                object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                            if (message.severity != null && message.hasOwnProperty("severity"))
                                object.severity = options.enums === String ? $root.google.logging.type.LogSeverity[message.severity] === undefined ? message.severity : $root.google.logging.type.LogSeverity[message.severity] : message.severity;
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.httpRequest != null && message.hasOwnProperty("httpRequest"))
                                object.httpRequest = $root.google.api.servicecontrol.v1.HttpRequest.toObject(message.httpRequest, options);
                            if (message.trace != null && message.hasOwnProperty("trace"))
                                object.trace = message.trace;
                            if (message.operation != null && message.hasOwnProperty("operation"))
                                object.operation = $root.google.api.servicecontrol.v1.LogEntryOperation.toObject(message.operation, options);
                            if (message.sourceLocation != null && message.hasOwnProperty("sourceLocation"))
                                object.sourceLocation = $root.google.api.servicecontrol.v1.LogEntrySourceLocation.toObject(message.sourceLocation, options);
                            return object;
                        };
    
                        /**
                         * Converts this LogEntry to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LogEntry.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LogEntry
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.LogEntry
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LogEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.LogEntry";
                        };
    
                        return LogEntry;
                    })();
    
                    v1.LogEntryOperation = (function() {
    
                        /**
                         * Properties of a LogEntryOperation.
                         * @memberof google.api.servicecontrol.v1
                         * @interface ILogEntryOperation
                         * @property {string|null} [id] LogEntryOperation id
                         * @property {string|null} [producer] LogEntryOperation producer
                         * @property {boolean|null} [first] LogEntryOperation first
                         * @property {boolean|null} [last] LogEntryOperation last
                         */
    
                        /**
                         * Constructs a new LogEntryOperation.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a LogEntryOperation.
                         * @implements ILogEntryOperation
                         * @constructor
                         * @param {google.api.servicecontrol.v1.ILogEntryOperation=} [properties] Properties to set
                         */
                        function LogEntryOperation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LogEntryOperation id.
                         * @member {string} id
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @instance
                         */
                        LogEntryOperation.prototype.id = "";
    
                        /**
                         * LogEntryOperation producer.
                         * @member {string} producer
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @instance
                         */
                        LogEntryOperation.prototype.producer = "";
    
                        /**
                         * LogEntryOperation first.
                         * @member {boolean} first
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @instance
                         */
                        LogEntryOperation.prototype.first = false;
    
                        /**
                         * LogEntryOperation last.
                         * @member {boolean} last
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @instance
                         */
                        LogEntryOperation.prototype.last = false;
    
                        /**
                         * Creates a new LogEntryOperation instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @static
                         * @param {google.api.servicecontrol.v1.ILogEntryOperation=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.LogEntryOperation} LogEntryOperation instance
                         */
                        LogEntryOperation.create = function create(properties) {
                            return new LogEntryOperation(properties);
                        };
    
                        /**
                         * Encodes the specified LogEntryOperation message. Does not implicitly {@link google.api.servicecontrol.v1.LogEntryOperation.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @static
                         * @param {google.api.servicecontrol.v1.ILogEntryOperation} message LogEntryOperation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogEntryOperation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.producer != null && Object.hasOwnProperty.call(message, "producer"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producer);
                            if (message.first != null && Object.hasOwnProperty.call(message, "first"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.first);
                            if (message.last != null && Object.hasOwnProperty.call(message, "last"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.last);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LogEntryOperation message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.LogEntryOperation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @static
                         * @param {google.api.servicecontrol.v1.ILogEntryOperation} message LogEntryOperation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogEntryOperation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LogEntryOperation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.LogEntryOperation} LogEntryOperation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogEntryOperation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.LogEntryOperation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.id = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.producer = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.first = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        message.last = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LogEntryOperation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.LogEntryOperation} LogEntryOperation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogEntryOperation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LogEntryOperation message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LogEntryOperation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.producer != null && message.hasOwnProperty("producer"))
                                if (!$util.isString(message.producer))
                                    return "producer: string expected";
                            if (message.first != null && message.hasOwnProperty("first"))
                                if (typeof message.first !== "boolean")
                                    return "first: boolean expected";
                            if (message.last != null && message.hasOwnProperty("last"))
                                if (typeof message.last !== "boolean")
                                    return "last: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a LogEntryOperation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.LogEntryOperation} LogEntryOperation
                         */
                        LogEntryOperation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.LogEntryOperation)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.LogEntryOperation();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.producer != null)
                                message.producer = String(object.producer);
                            if (object.first != null)
                                message.first = Boolean(object.first);
                            if (object.last != null)
                                message.last = Boolean(object.last);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LogEntryOperation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @static
                         * @param {google.api.servicecontrol.v1.LogEntryOperation} message LogEntryOperation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LogEntryOperation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.producer = "";
                                object.first = false;
                                object.last = false;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.producer != null && message.hasOwnProperty("producer"))
                                object.producer = message.producer;
                            if (message.first != null && message.hasOwnProperty("first"))
                                object.first = message.first;
                            if (message.last != null && message.hasOwnProperty("last"))
                                object.last = message.last;
                            return object;
                        };
    
                        /**
                         * Converts this LogEntryOperation to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LogEntryOperation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LogEntryOperation
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.LogEntryOperation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LogEntryOperation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.LogEntryOperation";
                        };
    
                        return LogEntryOperation;
                    })();
    
                    v1.LogEntrySourceLocation = (function() {
    
                        /**
                         * Properties of a LogEntrySourceLocation.
                         * @memberof google.api.servicecontrol.v1
                         * @interface ILogEntrySourceLocation
                         * @property {string|null} [file] LogEntrySourceLocation file
                         * @property {number|Long|null} [line] LogEntrySourceLocation line
                         * @property {string|null} ["function"] LogEntrySourceLocation function
                         */
    
                        /**
                         * Constructs a new LogEntrySourceLocation.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a LogEntrySourceLocation.
                         * @implements ILogEntrySourceLocation
                         * @constructor
                         * @param {google.api.servicecontrol.v1.ILogEntrySourceLocation=} [properties] Properties to set
                         */
                        function LogEntrySourceLocation(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LogEntrySourceLocation file.
                         * @member {string} file
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @instance
                         */
                        LogEntrySourceLocation.prototype.file = "";
    
                        /**
                         * LogEntrySourceLocation line.
                         * @member {number|Long} line
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @instance
                         */
                        LogEntrySourceLocation.prototype.line = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * LogEntrySourceLocation function.
                         * @member {string} function
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @instance
                         */
                        LogEntrySourceLocation.prototype["function"] = "";
    
                        /**
                         * Creates a new LogEntrySourceLocation instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @static
                         * @param {google.api.servicecontrol.v1.ILogEntrySourceLocation=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.LogEntrySourceLocation} LogEntrySourceLocation instance
                         */
                        LogEntrySourceLocation.create = function create(properties) {
                            return new LogEntrySourceLocation(properties);
                        };
    
                        /**
                         * Encodes the specified LogEntrySourceLocation message. Does not implicitly {@link google.api.servicecontrol.v1.LogEntrySourceLocation.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @static
                         * @param {google.api.servicecontrol.v1.ILogEntrySourceLocation} message LogEntrySourceLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogEntrySourceLocation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.file != null && Object.hasOwnProperty.call(message, "file"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.file);
                            if (message.line != null && Object.hasOwnProperty.call(message, "line"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.line);
                            if (message["function"] != null && Object.hasOwnProperty.call(message, "function"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message["function"]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LogEntrySourceLocation message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.LogEntrySourceLocation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @static
                         * @param {google.api.servicecontrol.v1.ILogEntrySourceLocation} message LogEntrySourceLocation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogEntrySourceLocation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LogEntrySourceLocation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.LogEntrySourceLocation} LogEntrySourceLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogEntrySourceLocation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.LogEntrySourceLocation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.file = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.line = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message["function"] = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LogEntrySourceLocation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.LogEntrySourceLocation} LogEntrySourceLocation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogEntrySourceLocation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LogEntrySourceLocation message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LogEntrySourceLocation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.file != null && message.hasOwnProperty("file"))
                                if (!$util.isString(message.file))
                                    return "file: string expected";
                            if (message.line != null && message.hasOwnProperty("line"))
                                if (!$util.isInteger(message.line) && !(message.line && $util.isInteger(message.line.low) && $util.isInteger(message.line.high)))
                                    return "line: integer|Long expected";
                            if (message["function"] != null && message.hasOwnProperty("function"))
                                if (!$util.isString(message["function"]))
                                    return "function: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a LogEntrySourceLocation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.LogEntrySourceLocation} LogEntrySourceLocation
                         */
                        LogEntrySourceLocation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.LogEntrySourceLocation)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.LogEntrySourceLocation();
                            if (object.file != null)
                                message.file = String(object.file);
                            if (object.line != null)
                                if ($util.Long)
                                    (message.line = $util.Long.fromValue(object.line)).unsigned = false;
                                else if (typeof object.line === "string")
                                    message.line = parseInt(object.line, 10);
                                else if (typeof object.line === "number")
                                    message.line = object.line;
                                else if (typeof object.line === "object")
                                    message.line = new $util.LongBits(object.line.low >>> 0, object.line.high >>> 0).toNumber();
                            if (object["function"] != null)
                                message["function"] = String(object["function"]);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LogEntrySourceLocation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @static
                         * @param {google.api.servicecontrol.v1.LogEntrySourceLocation} message LogEntrySourceLocation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LogEntrySourceLocation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.file = "";
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.line = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.line = options.longs === String ? "0" : 0;
                                object["function"] = "";
                            }
                            if (message.file != null && message.hasOwnProperty("file"))
                                object.file = message.file;
                            if (message.line != null && message.hasOwnProperty("line"))
                                if (typeof message.line === "number")
                                    object.line = options.longs === String ? String(message.line) : message.line;
                                else
                                    object.line = options.longs === String ? $util.Long.prototype.toString.call(message.line) : options.longs === Number ? new $util.LongBits(message.line.low >>> 0, message.line.high >>> 0).toNumber() : message.line;
                            if (message["function"] != null && message.hasOwnProperty("function"))
                                object["function"] = message["function"];
                            return object;
                        };
    
                        /**
                         * Converts this LogEntrySourceLocation to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LogEntrySourceLocation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LogEntrySourceLocation
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.LogEntrySourceLocation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LogEntrySourceLocation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.LogEntrySourceLocation";
                        };
    
                        return LogEntrySourceLocation;
                    })();
    
                    v1.MetricValue = (function() {
    
                        /**
                         * Properties of a MetricValue.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IMetricValue
                         * @property {Object.<string,string>|null} [labels] MetricValue labels
                         * @property {google.protobuf.ITimestamp|null} [startTime] MetricValue startTime
                         * @property {google.protobuf.ITimestamp|null} [endTime] MetricValue endTime
                         * @property {boolean|null} [boolValue] MetricValue boolValue
                         * @property {number|Long|null} [int64Value] MetricValue int64Value
                         * @property {number|null} [doubleValue] MetricValue doubleValue
                         * @property {string|null} [stringValue] MetricValue stringValue
                         * @property {google.api.servicecontrol.v1.IDistribution|null} [distributionValue] MetricValue distributionValue
                         */
    
                        /**
                         * Constructs a new MetricValue.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a MetricValue.
                         * @implements IMetricValue
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IMetricValue=} [properties] Properties to set
                         */
                        function MetricValue(properties) {
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * MetricValue labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         */
                        MetricValue.prototype.labels = $util.emptyObject;
    
                        /**
                         * MetricValue startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         */
                        MetricValue.prototype.startTime = null;
    
                        /**
                         * MetricValue endTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} endTime
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         */
                        MetricValue.prototype.endTime = null;
    
                        /**
                         * MetricValue boolValue.
                         * @member {boolean|null|undefined} boolValue
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         */
                        MetricValue.prototype.boolValue = null;
    
                        /**
                         * MetricValue int64Value.
                         * @member {number|Long|null|undefined} int64Value
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         */
                        MetricValue.prototype.int64Value = null;
    
                        /**
                         * MetricValue doubleValue.
                         * @member {number|null|undefined} doubleValue
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         */
                        MetricValue.prototype.doubleValue = null;
    
                        /**
                         * MetricValue stringValue.
                         * @member {string|null|undefined} stringValue
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         */
                        MetricValue.prototype.stringValue = null;
    
                        /**
                         * MetricValue distributionValue.
                         * @member {google.api.servicecontrol.v1.IDistribution|null|undefined} distributionValue
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         */
                        MetricValue.prototype.distributionValue = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * MetricValue value.
                         * @member {"boolValue"|"int64Value"|"doubleValue"|"stringValue"|"distributionValue"|undefined} value
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         */
                        Object.defineProperty(MetricValue.prototype, "value", {
                            get: $util.oneOfGetter($oneOfFields = ["boolValue", "int64Value", "doubleValue", "stringValue", "distributionValue"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new MetricValue instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @static
                         * @param {google.api.servicecontrol.v1.IMetricValue=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.MetricValue} MetricValue instance
                         */
                        MetricValue.create = function create(properties) {
                            return new MetricValue(properties);
                        };
    
                        /**
                         * Encodes the specified MetricValue message. Does not implicitly {@link google.api.servicecontrol.v1.MetricValue.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @static
                         * @param {google.api.servicecontrol.v1.IMetricValue} message MetricValue message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MetricValue.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.boolValue != null && Object.hasOwnProperty.call(message, "boolValue"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.boolValue);
                            if (message.int64Value != null && Object.hasOwnProperty.call(message, "int64Value"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.int64Value);
                            if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                                writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                            if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.stringValue);
                            if (message.distributionValue != null && Object.hasOwnProperty.call(message, "distributionValue"))
                                $root.google.api.servicecontrol.v1.Distribution.encode(message.distributionValue, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified MetricValue message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.MetricValue.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @static
                         * @param {google.api.servicecontrol.v1.IMetricValue} message MetricValue message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MetricValue.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a MetricValue message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.MetricValue} MetricValue
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MetricValue.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.MetricValue(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 2: {
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.boolValue = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.int64Value = reader.int64();
                                        break;
                                    }
                                case 6: {
                                        message.doubleValue = reader.double();
                                        break;
                                    }
                                case 7: {
                                        message.stringValue = reader.string();
                                        break;
                                    }
                                case 8: {
                                        message.distributionValue = $root.google.api.servicecontrol.v1.Distribution.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a MetricValue message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.MetricValue} MetricValue
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MetricValue.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a MetricValue message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        MetricValue.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                                properties.value = 1;
                                if (typeof message.boolValue !== "boolean")
                                    return "boolValue: boolean expected";
                            }
                            if (message.int64Value != null && message.hasOwnProperty("int64Value")) {
                                if (properties.value === 1)
                                    return "value: multiple values";
                                properties.value = 1;
                                if (!$util.isInteger(message.int64Value) && !(message.int64Value && $util.isInteger(message.int64Value.low) && $util.isInteger(message.int64Value.high)))
                                    return "int64Value: integer|Long expected";
                            }
                            if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                                if (properties.value === 1)
                                    return "value: multiple values";
                                properties.value = 1;
                                if (typeof message.doubleValue !== "number")
                                    return "doubleValue: number expected";
                            }
                            if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                                if (properties.value === 1)
                                    return "value: multiple values";
                                properties.value = 1;
                                if (!$util.isString(message.stringValue))
                                    return "stringValue: string expected";
                            }
                            if (message.distributionValue != null && message.hasOwnProperty("distributionValue")) {
                                if (properties.value === 1)
                                    return "value: multiple values";
                                properties.value = 1;
                                {
                                    var error = $root.google.api.servicecontrol.v1.Distribution.verify(message.distributionValue);
                                    if (error)
                                        return "distributionValue." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a MetricValue message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.MetricValue} MetricValue
                         */
                        MetricValue.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.MetricValue)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.MetricValue();
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.MetricValue.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.MetricValue.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.MetricValue.endTime: object expected");
                                message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                            }
                            if (object.boolValue != null)
                                message.boolValue = Boolean(object.boolValue);
                            if (object.int64Value != null)
                                if ($util.Long)
                                    (message.int64Value = $util.Long.fromValue(object.int64Value)).unsigned = false;
                                else if (typeof object.int64Value === "string")
                                    message.int64Value = parseInt(object.int64Value, 10);
                                else if (typeof object.int64Value === "number")
                                    message.int64Value = object.int64Value;
                                else if (typeof object.int64Value === "object")
                                    message.int64Value = new $util.LongBits(object.int64Value.low >>> 0, object.int64Value.high >>> 0).toNumber();
                            if (object.doubleValue != null)
                                message.doubleValue = Number(object.doubleValue);
                            if (object.stringValue != null)
                                message.stringValue = String(object.stringValue);
                            if (object.distributionValue != null) {
                                if (typeof object.distributionValue !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.MetricValue.distributionValue: object expected");
                                message.distributionValue = $root.google.api.servicecontrol.v1.Distribution.fromObject(object.distributionValue);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a MetricValue message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @static
                         * @param {google.api.servicecontrol.v1.MetricValue} message MetricValue
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        MetricValue.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.startTime = null;
                                object.endTime = null;
                            }
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                                object.boolValue = message.boolValue;
                                if (options.oneofs)
                                    object.value = "boolValue";
                            }
                            if (message.int64Value != null && message.hasOwnProperty("int64Value")) {
                                if (typeof message.int64Value === "number")
                                    object.int64Value = options.longs === String ? String(message.int64Value) : message.int64Value;
                                else
                                    object.int64Value = options.longs === String ? $util.Long.prototype.toString.call(message.int64Value) : options.longs === Number ? new $util.LongBits(message.int64Value.low >>> 0, message.int64Value.high >>> 0).toNumber() : message.int64Value;
                                if (options.oneofs)
                                    object.value = "int64Value";
                            }
                            if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                                object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                                if (options.oneofs)
                                    object.value = "doubleValue";
                            }
                            if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                                object.stringValue = message.stringValue;
                                if (options.oneofs)
                                    object.value = "stringValue";
                            }
                            if (message.distributionValue != null && message.hasOwnProperty("distributionValue")) {
                                object.distributionValue = $root.google.api.servicecontrol.v1.Distribution.toObject(message.distributionValue, options);
                                if (options.oneofs)
                                    object.value = "distributionValue";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this MetricValue to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        MetricValue.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for MetricValue
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.MetricValue
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        MetricValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.MetricValue";
                        };
    
                        return MetricValue;
                    })();
    
                    v1.MetricValueSet = (function() {
    
                        /**
                         * Properties of a MetricValueSet.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IMetricValueSet
                         * @property {string|null} [metricName] MetricValueSet metricName
                         * @property {Array.<google.api.servicecontrol.v1.IMetricValue>|null} [metricValues] MetricValueSet metricValues
                         */
    
                        /**
                         * Constructs a new MetricValueSet.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a MetricValueSet.
                         * @implements IMetricValueSet
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IMetricValueSet=} [properties] Properties to set
                         */
                        function MetricValueSet(properties) {
                            this.metricValues = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * MetricValueSet metricName.
                         * @member {string} metricName
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @instance
                         */
                        MetricValueSet.prototype.metricName = "";
    
                        /**
                         * MetricValueSet metricValues.
                         * @member {Array.<google.api.servicecontrol.v1.IMetricValue>} metricValues
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @instance
                         */
                        MetricValueSet.prototype.metricValues = $util.emptyArray;
    
                        /**
                         * Creates a new MetricValueSet instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @static
                         * @param {google.api.servicecontrol.v1.IMetricValueSet=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.MetricValueSet} MetricValueSet instance
                         */
                        MetricValueSet.create = function create(properties) {
                            return new MetricValueSet(properties);
                        };
    
                        /**
                         * Encodes the specified MetricValueSet message. Does not implicitly {@link google.api.servicecontrol.v1.MetricValueSet.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @static
                         * @param {google.api.servicecontrol.v1.IMetricValueSet} message MetricValueSet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MetricValueSet.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.metricName != null && Object.hasOwnProperty.call(message, "metricName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.metricName);
                            if (message.metricValues != null && message.metricValues.length)
                                for (var i = 0; i < message.metricValues.length; ++i)
                                    $root.google.api.servicecontrol.v1.MetricValue.encode(message.metricValues[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified MetricValueSet message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.MetricValueSet.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @static
                         * @param {google.api.servicecontrol.v1.IMetricValueSet} message MetricValueSet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        MetricValueSet.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a MetricValueSet message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.MetricValueSet} MetricValueSet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MetricValueSet.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.MetricValueSet();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.metricName = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.metricValues && message.metricValues.length))
                                            message.metricValues = [];
                                        message.metricValues.push($root.google.api.servicecontrol.v1.MetricValue.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a MetricValueSet message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.MetricValueSet} MetricValueSet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        MetricValueSet.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a MetricValueSet message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        MetricValueSet.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.metricName != null && message.hasOwnProperty("metricName"))
                                if (!$util.isString(message.metricName))
                                    return "metricName: string expected";
                            if (message.metricValues != null && message.hasOwnProperty("metricValues")) {
                                if (!Array.isArray(message.metricValues))
                                    return "metricValues: array expected";
                                for (var i = 0; i < message.metricValues.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v1.MetricValue.verify(message.metricValues[i]);
                                    if (error)
                                        return "metricValues." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a MetricValueSet message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.MetricValueSet} MetricValueSet
                         */
                        MetricValueSet.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.MetricValueSet)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.MetricValueSet();
                            if (object.metricName != null)
                                message.metricName = String(object.metricName);
                            if (object.metricValues) {
                                if (!Array.isArray(object.metricValues))
                                    throw TypeError(".google.api.servicecontrol.v1.MetricValueSet.metricValues: array expected");
                                message.metricValues = [];
                                for (var i = 0; i < object.metricValues.length; ++i) {
                                    if (typeof object.metricValues[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.MetricValueSet.metricValues: object expected");
                                    message.metricValues[i] = $root.google.api.servicecontrol.v1.MetricValue.fromObject(object.metricValues[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a MetricValueSet message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @static
                         * @param {google.api.servicecontrol.v1.MetricValueSet} message MetricValueSet
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        MetricValueSet.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.metricValues = [];
                            if (options.defaults)
                                object.metricName = "";
                            if (message.metricName != null && message.hasOwnProperty("metricName"))
                                object.metricName = message.metricName;
                            if (message.metricValues && message.metricValues.length) {
                                object.metricValues = [];
                                for (var j = 0; j < message.metricValues.length; ++j)
                                    object.metricValues[j] = $root.google.api.servicecontrol.v1.MetricValue.toObject(message.metricValues[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this MetricValueSet to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        MetricValueSet.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for MetricValueSet
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.MetricValueSet
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        MetricValueSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.MetricValueSet";
                        };
    
                        return MetricValueSet;
                    })();
    
                    v1.Operation = (function() {
    
                        /**
                         * Properties of an Operation.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IOperation
                         * @property {string|null} [operationId] Operation operationId
                         * @property {string|null} [operationName] Operation operationName
                         * @property {string|null} [consumerId] Operation consumerId
                         * @property {google.protobuf.ITimestamp|null} [startTime] Operation startTime
                         * @property {google.protobuf.ITimestamp|null} [endTime] Operation endTime
                         * @property {Object.<string,string>|null} [labels] Operation labels
                         * @property {Array.<google.api.servicecontrol.v1.IMetricValueSet>|null} [metricValueSets] Operation metricValueSets
                         * @property {Array.<google.api.servicecontrol.v1.ILogEntry>|null} [logEntries] Operation logEntries
                         * @property {google.api.servicecontrol.v1.Operation.Importance|null} [importance] Operation importance
                         * @property {Array.<google.protobuf.IAny>|null} [extensions] Operation extensions
                         */
    
                        /**
                         * Constructs a new Operation.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents an Operation.
                         * @implements IOperation
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IOperation=} [properties] Properties to set
                         */
                        function Operation(properties) {
                            this.labels = {};
                            this.metricValueSets = [];
                            this.logEntries = [];
                            this.extensions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Operation operationId.
                         * @member {string} operationId
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.operationId = "";
    
                        /**
                         * Operation operationName.
                         * @member {string} operationName
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.operationName = "";
    
                        /**
                         * Operation consumerId.
                         * @member {string} consumerId
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.consumerId = "";
    
                        /**
                         * Operation startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.startTime = null;
    
                        /**
                         * Operation endTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} endTime
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.endTime = null;
    
                        /**
                         * Operation labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.labels = $util.emptyObject;
    
                        /**
                         * Operation metricValueSets.
                         * @member {Array.<google.api.servicecontrol.v1.IMetricValueSet>} metricValueSets
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.metricValueSets = $util.emptyArray;
    
                        /**
                         * Operation logEntries.
                         * @member {Array.<google.api.servicecontrol.v1.ILogEntry>} logEntries
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.logEntries = $util.emptyArray;
    
                        /**
                         * Operation importance.
                         * @member {google.api.servicecontrol.v1.Operation.Importance} importance
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.importance = 0;
    
                        /**
                         * Operation extensions.
                         * @member {Array.<google.protobuf.IAny>} extensions
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         */
                        Operation.prototype.extensions = $util.emptyArray;
    
                        /**
                         * Creates a new Operation instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @static
                         * @param {google.api.servicecontrol.v1.IOperation=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.Operation} Operation instance
                         */
                        Operation.create = function create(properties) {
                            return new Operation(properties);
                        };
    
                        /**
                         * Encodes the specified Operation message. Does not implicitly {@link google.api.servicecontrol.v1.Operation.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @static
                         * @param {google.api.servicecontrol.v1.IOperation} message Operation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Operation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.operationId != null && Object.hasOwnProperty.call(message, "operationId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.operationId);
                            if (message.operationName != null && Object.hasOwnProperty.call(message, "operationName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.operationName);
                            if (message.consumerId != null && Object.hasOwnProperty.call(message, "consumerId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.consumerId);
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.metricValueSets != null && message.metricValueSets.length)
                                for (var i = 0; i < message.metricValueSets.length; ++i)
                                    $root.google.api.servicecontrol.v1.MetricValueSet.encode(message.metricValueSets[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.logEntries != null && message.logEntries.length)
                                for (var i = 0; i < message.logEntries.length; ++i)
                                    $root.google.api.servicecontrol.v1.LogEntry.encode(message.logEntries[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.importance != null && Object.hasOwnProperty.call(message, "importance"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.importance);
                            if (message.extensions != null && message.extensions.length)
                                for (var i = 0; i < message.extensions.length; ++i)
                                    $root.google.protobuf.Any.encode(message.extensions[i], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Operation message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.Operation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @static
                         * @param {google.api.servicecontrol.v1.IOperation} message Operation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Operation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Operation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.Operation} Operation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Operation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.Operation(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.operationId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.operationName = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.consumerId = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 7: {
                                        if (!(message.metricValueSets && message.metricValueSets.length))
                                            message.metricValueSets = [];
                                        message.metricValueSets.push($root.google.api.servicecontrol.v1.MetricValueSet.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 8: {
                                        if (!(message.logEntries && message.logEntries.length))
                                            message.logEntries = [];
                                        message.logEntries.push($root.google.api.servicecontrol.v1.LogEntry.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 11: {
                                        message.importance = reader.int32();
                                        break;
                                    }
                                case 16: {
                                        if (!(message.extensions && message.extensions.length))
                                            message.extensions = [];
                                        message.extensions.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Operation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.Operation} Operation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Operation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Operation message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Operation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.operationId != null && message.hasOwnProperty("operationId"))
                                if (!$util.isString(message.operationId))
                                    return "operationId: string expected";
                            if (message.operationName != null && message.hasOwnProperty("operationName"))
                                if (!$util.isString(message.operationName))
                                    return "operationName: string expected";
                            if (message.consumerId != null && message.hasOwnProperty("consumerId"))
                                if (!$util.isString(message.consumerId))
                                    return "consumerId: string expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.metricValueSets != null && message.hasOwnProperty("metricValueSets")) {
                                if (!Array.isArray(message.metricValueSets))
                                    return "metricValueSets: array expected";
                                for (var i = 0; i < message.metricValueSets.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v1.MetricValueSet.verify(message.metricValueSets[i]);
                                    if (error)
                                        return "metricValueSets." + error;
                                }
                            }
                            if (message.logEntries != null && message.hasOwnProperty("logEntries")) {
                                if (!Array.isArray(message.logEntries))
                                    return "logEntries: array expected";
                                for (var i = 0; i < message.logEntries.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v1.LogEntry.verify(message.logEntries[i]);
                                    if (error)
                                        return "logEntries." + error;
                                }
                            }
                            if (message.importance != null && message.hasOwnProperty("importance"))
                                switch (message.importance) {
                                default:
                                    return "importance: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.extensions != null && message.hasOwnProperty("extensions")) {
                                if (!Array.isArray(message.extensions))
                                    return "extensions: array expected";
                                for (var i = 0; i < message.extensions.length; ++i) {
                                    var error = $root.google.protobuf.Any.verify(message.extensions[i]);
                                    if (error)
                                        return "extensions." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Operation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.Operation} Operation
                         */
                        Operation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.Operation)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.Operation();
                            if (object.operationId != null)
                                message.operationId = String(object.operationId);
                            if (object.operationName != null)
                                message.operationName = String(object.operationName);
                            if (object.consumerId != null)
                                message.consumerId = String(object.consumerId);
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.Operation.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.Operation.endTime: object expected");
                                message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.Operation.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.metricValueSets) {
                                if (!Array.isArray(object.metricValueSets))
                                    throw TypeError(".google.api.servicecontrol.v1.Operation.metricValueSets: array expected");
                                message.metricValueSets = [];
                                for (var i = 0; i < object.metricValueSets.length; ++i) {
                                    if (typeof object.metricValueSets[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.Operation.metricValueSets: object expected");
                                    message.metricValueSets[i] = $root.google.api.servicecontrol.v1.MetricValueSet.fromObject(object.metricValueSets[i]);
                                }
                            }
                            if (object.logEntries) {
                                if (!Array.isArray(object.logEntries))
                                    throw TypeError(".google.api.servicecontrol.v1.Operation.logEntries: array expected");
                                message.logEntries = [];
                                for (var i = 0; i < object.logEntries.length; ++i) {
                                    if (typeof object.logEntries[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.Operation.logEntries: object expected");
                                    message.logEntries[i] = $root.google.api.servicecontrol.v1.LogEntry.fromObject(object.logEntries[i]);
                                }
                            }
                            switch (object.importance) {
                            default:
                                if (typeof object.importance === "number") {
                                    message.importance = object.importance;
                                    break;
                                }
                                break;
                            case "LOW":
                            case 0:
                                message.importance = 0;
                                break;
                            case "HIGH":
                            case 1:
                                message.importance = 1;
                                break;
                            }
                            if (object.extensions) {
                                if (!Array.isArray(object.extensions))
                                    throw TypeError(".google.api.servicecontrol.v1.Operation.extensions: array expected");
                                message.extensions = [];
                                for (var i = 0; i < object.extensions.length; ++i) {
                                    if (typeof object.extensions[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.Operation.extensions: object expected");
                                    message.extensions[i] = $root.google.protobuf.Any.fromObject(object.extensions[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Operation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @static
                         * @param {google.api.servicecontrol.v1.Operation} message Operation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Operation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.metricValueSets = [];
                                object.logEntries = [];
                                object.extensions = [];
                            }
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.operationId = "";
                                object.operationName = "";
                                object.consumerId = "";
                                object.startTime = null;
                                object.endTime = null;
                                object.importance = options.enums === String ? "LOW" : 0;
                            }
                            if (message.operationId != null && message.hasOwnProperty("operationId"))
                                object.operationId = message.operationId;
                            if (message.operationName != null && message.hasOwnProperty("operationName"))
                                object.operationName = message.operationName;
                            if (message.consumerId != null && message.hasOwnProperty("consumerId"))
                                object.consumerId = message.consumerId;
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.metricValueSets && message.metricValueSets.length) {
                                object.metricValueSets = [];
                                for (var j = 0; j < message.metricValueSets.length; ++j)
                                    object.metricValueSets[j] = $root.google.api.servicecontrol.v1.MetricValueSet.toObject(message.metricValueSets[j], options);
                            }
                            if (message.logEntries && message.logEntries.length) {
                                object.logEntries = [];
                                for (var j = 0; j < message.logEntries.length; ++j)
                                    object.logEntries[j] = $root.google.api.servicecontrol.v1.LogEntry.toObject(message.logEntries[j], options);
                            }
                            if (message.importance != null && message.hasOwnProperty("importance"))
                                object.importance = options.enums === String ? $root.google.api.servicecontrol.v1.Operation.Importance[message.importance] === undefined ? message.importance : $root.google.api.servicecontrol.v1.Operation.Importance[message.importance] : message.importance;
                            if (message.extensions && message.extensions.length) {
                                object.extensions = [];
                                for (var j = 0; j < message.extensions.length; ++j)
                                    object.extensions[j] = $root.google.protobuf.Any.toObject(message.extensions[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Operation to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Operation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Operation
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.Operation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Operation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.Operation";
                        };
    
                        /**
                         * Importance enum.
                         * @name google.api.servicecontrol.v1.Operation.Importance
                         * @enum {number}
                         * @property {number} LOW=0 LOW value
                         * @property {number} HIGH=1 HIGH value
                         */
                        Operation.Importance = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "LOW"] = 0;
                            values[valuesById[1] = "HIGH"] = 1;
                            return values;
                        })();
    
                        return Operation;
                    })();
    
                    v1.QuotaController = (function() {
    
                        /**
                         * Constructs a new QuotaController service.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a QuotaController
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function QuotaController(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (QuotaController.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = QuotaController;
    
                        /**
                         * Creates new QuotaController service using the specified rpc implementation.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.QuotaController
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {QuotaController} RPC service. Useful where requests and/or responses are streamed.
                         */
                        QuotaController.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.api.servicecontrol.v1.QuotaController|allocateQuota}.
                         * @memberof google.api.servicecontrol.v1.QuotaController
                         * @typedef AllocateQuotaCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.api.servicecontrol.v1.AllocateQuotaResponse} [response] AllocateQuotaResponse
                         */
    
                        /**
                         * Calls AllocateQuota.
                         * @function allocateQuota
                         * @memberof google.api.servicecontrol.v1.QuotaController
                         * @instance
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaRequest} request AllocateQuotaRequest message or plain object
                         * @param {google.api.servicecontrol.v1.QuotaController.AllocateQuotaCallback} callback Node-style callback called with the error, if any, and AllocateQuotaResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(QuotaController.prototype.allocateQuota = function allocateQuota(request, callback) {
                            return this.rpcCall(allocateQuota, $root.google.api.servicecontrol.v1.AllocateQuotaRequest, $root.google.api.servicecontrol.v1.AllocateQuotaResponse, request, callback);
                        }, "name", { value: "AllocateQuota" });
    
                        /**
                         * Calls AllocateQuota.
                         * @function allocateQuota
                         * @memberof google.api.servicecontrol.v1.QuotaController
                         * @instance
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaRequest} request AllocateQuotaRequest message or plain object
                         * @returns {Promise<google.api.servicecontrol.v1.AllocateQuotaResponse>} Promise
                         * @variation 2
                         */
    
                        return QuotaController;
                    })();
    
                    v1.AllocateQuotaRequest = (function() {
    
                        /**
                         * Properties of an AllocateQuotaRequest.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IAllocateQuotaRequest
                         * @property {string|null} [serviceName] AllocateQuotaRequest serviceName
                         * @property {google.api.servicecontrol.v1.IQuotaOperation|null} [allocateOperation] AllocateQuotaRequest allocateOperation
                         * @property {string|null} [serviceConfigId] AllocateQuotaRequest serviceConfigId
                         */
    
                        /**
                         * Constructs a new AllocateQuotaRequest.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents an AllocateQuotaRequest.
                         * @implements IAllocateQuotaRequest
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaRequest=} [properties] Properties to set
                         */
                        function AllocateQuotaRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AllocateQuotaRequest serviceName.
                         * @member {string} serviceName
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @instance
                         */
                        AllocateQuotaRequest.prototype.serviceName = "";
    
                        /**
                         * AllocateQuotaRequest allocateOperation.
                         * @member {google.api.servicecontrol.v1.IQuotaOperation|null|undefined} allocateOperation
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @instance
                         */
                        AllocateQuotaRequest.prototype.allocateOperation = null;
    
                        /**
                         * AllocateQuotaRequest serviceConfigId.
                         * @member {string} serviceConfigId
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @instance
                         */
                        AllocateQuotaRequest.prototype.serviceConfigId = "";
    
                        /**
                         * Creates a new AllocateQuotaRequest instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaRequest=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.AllocateQuotaRequest} AllocateQuotaRequest instance
                         */
                        AllocateQuotaRequest.create = function create(properties) {
                            return new AllocateQuotaRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AllocateQuotaRequest message. Does not implicitly {@link google.api.servicecontrol.v1.AllocateQuotaRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaRequest} message AllocateQuotaRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocateQuotaRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                            if (message.allocateOperation != null && Object.hasOwnProperty.call(message, "allocateOperation"))
                                $root.google.api.servicecontrol.v1.QuotaOperation.encode(message.allocateOperation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.serviceConfigId != null && Object.hasOwnProperty.call(message, "serviceConfigId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.serviceConfigId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AllocateQuotaRequest message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.AllocateQuotaRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaRequest} message AllocateQuotaRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocateQuotaRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AllocateQuotaRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.AllocateQuotaRequest} AllocateQuotaRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocateQuotaRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.AllocateQuotaRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.serviceName = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.allocateOperation = $root.google.api.servicecontrol.v1.QuotaOperation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.serviceConfigId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AllocateQuotaRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.AllocateQuotaRequest} AllocateQuotaRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocateQuotaRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AllocateQuotaRequest message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AllocateQuotaRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                if (!$util.isString(message.serviceName))
                                    return "serviceName: string expected";
                            if (message.allocateOperation != null && message.hasOwnProperty("allocateOperation")) {
                                var error = $root.google.api.servicecontrol.v1.QuotaOperation.verify(message.allocateOperation);
                                if (error)
                                    return "allocateOperation." + error;
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                if (!$util.isString(message.serviceConfigId))
                                    return "serviceConfigId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AllocateQuotaRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.AllocateQuotaRequest} AllocateQuotaRequest
                         */
                        AllocateQuotaRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.AllocateQuotaRequest)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.AllocateQuotaRequest();
                            if (object.serviceName != null)
                                message.serviceName = String(object.serviceName);
                            if (object.allocateOperation != null) {
                                if (typeof object.allocateOperation !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.AllocateQuotaRequest.allocateOperation: object expected");
                                message.allocateOperation = $root.google.api.servicecontrol.v1.QuotaOperation.fromObject(object.allocateOperation);
                            }
                            if (object.serviceConfigId != null)
                                message.serviceConfigId = String(object.serviceConfigId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AllocateQuotaRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.AllocateQuotaRequest} message AllocateQuotaRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AllocateQuotaRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.serviceName = "";
                                object.allocateOperation = null;
                                object.serviceConfigId = "";
                            }
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                object.serviceName = message.serviceName;
                            if (message.allocateOperation != null && message.hasOwnProperty("allocateOperation"))
                                object.allocateOperation = $root.google.api.servicecontrol.v1.QuotaOperation.toObject(message.allocateOperation, options);
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                object.serviceConfigId = message.serviceConfigId;
                            return object;
                        };
    
                        /**
                         * Converts this AllocateQuotaRequest to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AllocateQuotaRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AllocateQuotaRequest
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AllocateQuotaRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.AllocateQuotaRequest";
                        };
    
                        return AllocateQuotaRequest;
                    })();
    
                    v1.QuotaOperation = (function() {
    
                        /**
                         * Properties of a QuotaOperation.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IQuotaOperation
                         * @property {string|null} [operationId] QuotaOperation operationId
                         * @property {string|null} [methodName] QuotaOperation methodName
                         * @property {string|null} [consumerId] QuotaOperation consumerId
                         * @property {Object.<string,string>|null} [labels] QuotaOperation labels
                         * @property {Array.<google.api.servicecontrol.v1.IMetricValueSet>|null} [quotaMetrics] QuotaOperation quotaMetrics
                         * @property {google.api.servicecontrol.v1.QuotaOperation.QuotaMode|null} [quotaMode] QuotaOperation quotaMode
                         */
    
                        /**
                         * Constructs a new QuotaOperation.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a QuotaOperation.
                         * @implements IQuotaOperation
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IQuotaOperation=} [properties] Properties to set
                         */
                        function QuotaOperation(properties) {
                            this.labels = {};
                            this.quotaMetrics = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QuotaOperation operationId.
                         * @member {string} operationId
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @instance
                         */
                        QuotaOperation.prototype.operationId = "";
    
                        /**
                         * QuotaOperation methodName.
                         * @member {string} methodName
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @instance
                         */
                        QuotaOperation.prototype.methodName = "";
    
                        /**
                         * QuotaOperation consumerId.
                         * @member {string} consumerId
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @instance
                         */
                        QuotaOperation.prototype.consumerId = "";
    
                        /**
                         * QuotaOperation labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @instance
                         */
                        QuotaOperation.prototype.labels = $util.emptyObject;
    
                        /**
                         * QuotaOperation quotaMetrics.
                         * @member {Array.<google.api.servicecontrol.v1.IMetricValueSet>} quotaMetrics
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @instance
                         */
                        QuotaOperation.prototype.quotaMetrics = $util.emptyArray;
    
                        /**
                         * QuotaOperation quotaMode.
                         * @member {google.api.servicecontrol.v1.QuotaOperation.QuotaMode} quotaMode
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @instance
                         */
                        QuotaOperation.prototype.quotaMode = 0;
    
                        /**
                         * Creates a new QuotaOperation instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @static
                         * @param {google.api.servicecontrol.v1.IQuotaOperation=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.QuotaOperation} QuotaOperation instance
                         */
                        QuotaOperation.create = function create(properties) {
                            return new QuotaOperation(properties);
                        };
    
                        /**
                         * Encodes the specified QuotaOperation message. Does not implicitly {@link google.api.servicecontrol.v1.QuotaOperation.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @static
                         * @param {google.api.servicecontrol.v1.IQuotaOperation} message QuotaOperation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuotaOperation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.operationId != null && Object.hasOwnProperty.call(message, "operationId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.operationId);
                            if (message.methodName != null && Object.hasOwnProperty.call(message, "methodName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.methodName);
                            if (message.consumerId != null && Object.hasOwnProperty.call(message, "consumerId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.consumerId);
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.quotaMetrics != null && message.quotaMetrics.length)
                                for (var i = 0; i < message.quotaMetrics.length; ++i)
                                    $root.google.api.servicecontrol.v1.MetricValueSet.encode(message.quotaMetrics[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.quotaMode != null && Object.hasOwnProperty.call(message, "quotaMode"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.quotaMode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QuotaOperation message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.QuotaOperation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @static
                         * @param {google.api.servicecontrol.v1.IQuotaOperation} message QuotaOperation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuotaOperation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QuotaOperation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.QuotaOperation} QuotaOperation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuotaOperation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.QuotaOperation(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.operationId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.methodName = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.consumerId = reader.string();
                                        break;
                                    }
                                case 4: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 5: {
                                        if (!(message.quotaMetrics && message.quotaMetrics.length))
                                            message.quotaMetrics = [];
                                        message.quotaMetrics.push($root.google.api.servicecontrol.v1.MetricValueSet.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        message.quotaMode = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QuotaOperation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.QuotaOperation} QuotaOperation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuotaOperation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QuotaOperation message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QuotaOperation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.operationId != null && message.hasOwnProperty("operationId"))
                                if (!$util.isString(message.operationId))
                                    return "operationId: string expected";
                            if (message.methodName != null && message.hasOwnProperty("methodName"))
                                if (!$util.isString(message.methodName))
                                    return "methodName: string expected";
                            if (message.consumerId != null && message.hasOwnProperty("consumerId"))
                                if (!$util.isString(message.consumerId))
                                    return "consumerId: string expected";
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.quotaMetrics != null && message.hasOwnProperty("quotaMetrics")) {
                                if (!Array.isArray(message.quotaMetrics))
                                    return "quotaMetrics: array expected";
                                for (var i = 0; i < message.quotaMetrics.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v1.MetricValueSet.verify(message.quotaMetrics[i]);
                                    if (error)
                                        return "quotaMetrics." + error;
                                }
                            }
                            if (message.quotaMode != null && message.hasOwnProperty("quotaMode"))
                                switch (message.quotaMode) {
                                default:
                                    return "quotaMode: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a QuotaOperation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.QuotaOperation} QuotaOperation
                         */
                        QuotaOperation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.QuotaOperation)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.QuotaOperation();
                            if (object.operationId != null)
                                message.operationId = String(object.operationId);
                            if (object.methodName != null)
                                message.methodName = String(object.methodName);
                            if (object.consumerId != null)
                                message.consumerId = String(object.consumerId);
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.QuotaOperation.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.quotaMetrics) {
                                if (!Array.isArray(object.quotaMetrics))
                                    throw TypeError(".google.api.servicecontrol.v1.QuotaOperation.quotaMetrics: array expected");
                                message.quotaMetrics = [];
                                for (var i = 0; i < object.quotaMetrics.length; ++i) {
                                    if (typeof object.quotaMetrics[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.QuotaOperation.quotaMetrics: object expected");
                                    message.quotaMetrics[i] = $root.google.api.servicecontrol.v1.MetricValueSet.fromObject(object.quotaMetrics[i]);
                                }
                            }
                            switch (object.quotaMode) {
                            default:
                                if (typeof object.quotaMode === "number") {
                                    message.quotaMode = object.quotaMode;
                                    break;
                                }
                                break;
                            case "UNSPECIFIED":
                            case 0:
                                message.quotaMode = 0;
                                break;
                            case "NORMAL":
                            case 1:
                                message.quotaMode = 1;
                                break;
                            case "BEST_EFFORT":
                            case 2:
                                message.quotaMode = 2;
                                break;
                            case "CHECK_ONLY":
                            case 3:
                                message.quotaMode = 3;
                                break;
                            case "QUERY_ONLY":
                            case 4:
                                message.quotaMode = 4;
                                break;
                            case "ADJUST_ONLY":
                            case 5:
                                message.quotaMode = 5;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QuotaOperation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @static
                         * @param {google.api.servicecontrol.v1.QuotaOperation} message QuotaOperation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QuotaOperation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.quotaMetrics = [];
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.operationId = "";
                                object.methodName = "";
                                object.consumerId = "";
                                object.quotaMode = options.enums === String ? "UNSPECIFIED" : 0;
                            }
                            if (message.operationId != null && message.hasOwnProperty("operationId"))
                                object.operationId = message.operationId;
                            if (message.methodName != null && message.hasOwnProperty("methodName"))
                                object.methodName = message.methodName;
                            if (message.consumerId != null && message.hasOwnProperty("consumerId"))
                                object.consumerId = message.consumerId;
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.quotaMetrics && message.quotaMetrics.length) {
                                object.quotaMetrics = [];
                                for (var j = 0; j < message.quotaMetrics.length; ++j)
                                    object.quotaMetrics[j] = $root.google.api.servicecontrol.v1.MetricValueSet.toObject(message.quotaMetrics[j], options);
                            }
                            if (message.quotaMode != null && message.hasOwnProperty("quotaMode"))
                                object.quotaMode = options.enums === String ? $root.google.api.servicecontrol.v1.QuotaOperation.QuotaMode[message.quotaMode] === undefined ? message.quotaMode : $root.google.api.servicecontrol.v1.QuotaOperation.QuotaMode[message.quotaMode] : message.quotaMode;
                            return object;
                        };
    
                        /**
                         * Converts this QuotaOperation to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QuotaOperation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for QuotaOperation
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.QuotaOperation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        QuotaOperation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.QuotaOperation";
                        };
    
                        /**
                         * QuotaMode enum.
                         * @name google.api.servicecontrol.v1.QuotaOperation.QuotaMode
                         * @enum {number}
                         * @property {number} UNSPECIFIED=0 UNSPECIFIED value
                         * @property {number} NORMAL=1 NORMAL value
                         * @property {number} BEST_EFFORT=2 BEST_EFFORT value
                         * @property {number} CHECK_ONLY=3 CHECK_ONLY value
                         * @property {number} QUERY_ONLY=4 QUERY_ONLY value
                         * @property {number} ADJUST_ONLY=5 ADJUST_ONLY value
                         */
                        QuotaOperation.QuotaMode = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "UNSPECIFIED"] = 0;
                            values[valuesById[1] = "NORMAL"] = 1;
                            values[valuesById[2] = "BEST_EFFORT"] = 2;
                            values[valuesById[3] = "CHECK_ONLY"] = 3;
                            values[valuesById[4] = "QUERY_ONLY"] = 4;
                            values[valuesById[5] = "ADJUST_ONLY"] = 5;
                            return values;
                        })();
    
                        return QuotaOperation;
                    })();
    
                    v1.AllocateQuotaResponse = (function() {
    
                        /**
                         * Properties of an AllocateQuotaResponse.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IAllocateQuotaResponse
                         * @property {string|null} [operationId] AllocateQuotaResponse operationId
                         * @property {Array.<google.api.servicecontrol.v1.IQuotaError>|null} [allocateErrors] AllocateQuotaResponse allocateErrors
                         * @property {Array.<google.api.servicecontrol.v1.IMetricValueSet>|null} [quotaMetrics] AllocateQuotaResponse quotaMetrics
                         * @property {string|null} [serviceConfigId] AllocateQuotaResponse serviceConfigId
                         */
    
                        /**
                         * Constructs a new AllocateQuotaResponse.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents an AllocateQuotaResponse.
                         * @implements IAllocateQuotaResponse
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaResponse=} [properties] Properties to set
                         */
                        function AllocateQuotaResponse(properties) {
                            this.allocateErrors = [];
                            this.quotaMetrics = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AllocateQuotaResponse operationId.
                         * @member {string} operationId
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @instance
                         */
                        AllocateQuotaResponse.prototype.operationId = "";
    
                        /**
                         * AllocateQuotaResponse allocateErrors.
                         * @member {Array.<google.api.servicecontrol.v1.IQuotaError>} allocateErrors
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @instance
                         */
                        AllocateQuotaResponse.prototype.allocateErrors = $util.emptyArray;
    
                        /**
                         * AllocateQuotaResponse quotaMetrics.
                         * @member {Array.<google.api.servicecontrol.v1.IMetricValueSet>} quotaMetrics
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @instance
                         */
                        AllocateQuotaResponse.prototype.quotaMetrics = $util.emptyArray;
    
                        /**
                         * AllocateQuotaResponse serviceConfigId.
                         * @member {string} serviceConfigId
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @instance
                         */
                        AllocateQuotaResponse.prototype.serviceConfigId = "";
    
                        /**
                         * Creates a new AllocateQuotaResponse instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaResponse=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.AllocateQuotaResponse} AllocateQuotaResponse instance
                         */
                        AllocateQuotaResponse.create = function create(properties) {
                            return new AllocateQuotaResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AllocateQuotaResponse message. Does not implicitly {@link google.api.servicecontrol.v1.AllocateQuotaResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaResponse} message AllocateQuotaResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocateQuotaResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.operationId != null && Object.hasOwnProperty.call(message, "operationId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.operationId);
                            if (message.allocateErrors != null && message.allocateErrors.length)
                                for (var i = 0; i < message.allocateErrors.length; ++i)
                                    $root.google.api.servicecontrol.v1.QuotaError.encode(message.allocateErrors[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.quotaMetrics != null && message.quotaMetrics.length)
                                for (var i = 0; i < message.quotaMetrics.length; ++i)
                                    $root.google.api.servicecontrol.v1.MetricValueSet.encode(message.quotaMetrics[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.serviceConfigId != null && Object.hasOwnProperty.call(message, "serviceConfigId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.serviceConfigId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AllocateQuotaResponse message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.AllocateQuotaResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.IAllocateQuotaResponse} message AllocateQuotaResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocateQuotaResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AllocateQuotaResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.AllocateQuotaResponse} AllocateQuotaResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocateQuotaResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.AllocateQuotaResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.operationId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.allocateErrors && message.allocateErrors.length))
                                            message.allocateErrors = [];
                                        message.allocateErrors.push($root.google.api.servicecontrol.v1.QuotaError.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.quotaMetrics && message.quotaMetrics.length))
                                            message.quotaMetrics = [];
                                        message.quotaMetrics.push($root.google.api.servicecontrol.v1.MetricValueSet.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.serviceConfigId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AllocateQuotaResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.AllocateQuotaResponse} AllocateQuotaResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocateQuotaResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AllocateQuotaResponse message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AllocateQuotaResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.operationId != null && message.hasOwnProperty("operationId"))
                                if (!$util.isString(message.operationId))
                                    return "operationId: string expected";
                            if (message.allocateErrors != null && message.hasOwnProperty("allocateErrors")) {
                                if (!Array.isArray(message.allocateErrors))
                                    return "allocateErrors: array expected";
                                for (var i = 0; i < message.allocateErrors.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v1.QuotaError.verify(message.allocateErrors[i]);
                                    if (error)
                                        return "allocateErrors." + error;
                                }
                            }
                            if (message.quotaMetrics != null && message.hasOwnProperty("quotaMetrics")) {
                                if (!Array.isArray(message.quotaMetrics))
                                    return "quotaMetrics: array expected";
                                for (var i = 0; i < message.quotaMetrics.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v1.MetricValueSet.verify(message.quotaMetrics[i]);
                                    if (error)
                                        return "quotaMetrics." + error;
                                }
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                if (!$util.isString(message.serviceConfigId))
                                    return "serviceConfigId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AllocateQuotaResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.AllocateQuotaResponse} AllocateQuotaResponse
                         */
                        AllocateQuotaResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.AllocateQuotaResponse)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.AllocateQuotaResponse();
                            if (object.operationId != null)
                                message.operationId = String(object.operationId);
                            if (object.allocateErrors) {
                                if (!Array.isArray(object.allocateErrors))
                                    throw TypeError(".google.api.servicecontrol.v1.AllocateQuotaResponse.allocateErrors: array expected");
                                message.allocateErrors = [];
                                for (var i = 0; i < object.allocateErrors.length; ++i) {
                                    if (typeof object.allocateErrors[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.AllocateQuotaResponse.allocateErrors: object expected");
                                    message.allocateErrors[i] = $root.google.api.servicecontrol.v1.QuotaError.fromObject(object.allocateErrors[i]);
                                }
                            }
                            if (object.quotaMetrics) {
                                if (!Array.isArray(object.quotaMetrics))
                                    throw TypeError(".google.api.servicecontrol.v1.AllocateQuotaResponse.quotaMetrics: array expected");
                                message.quotaMetrics = [];
                                for (var i = 0; i < object.quotaMetrics.length; ++i) {
                                    if (typeof object.quotaMetrics[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.AllocateQuotaResponse.quotaMetrics: object expected");
                                    message.quotaMetrics[i] = $root.google.api.servicecontrol.v1.MetricValueSet.fromObject(object.quotaMetrics[i]);
                                }
                            }
                            if (object.serviceConfigId != null)
                                message.serviceConfigId = String(object.serviceConfigId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AllocateQuotaResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.AllocateQuotaResponse} message AllocateQuotaResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AllocateQuotaResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.allocateErrors = [];
                                object.quotaMetrics = [];
                            }
                            if (options.defaults) {
                                object.operationId = "";
                                object.serviceConfigId = "";
                            }
                            if (message.operationId != null && message.hasOwnProperty("operationId"))
                                object.operationId = message.operationId;
                            if (message.allocateErrors && message.allocateErrors.length) {
                                object.allocateErrors = [];
                                for (var j = 0; j < message.allocateErrors.length; ++j)
                                    object.allocateErrors[j] = $root.google.api.servicecontrol.v1.QuotaError.toObject(message.allocateErrors[j], options);
                            }
                            if (message.quotaMetrics && message.quotaMetrics.length) {
                                object.quotaMetrics = [];
                                for (var j = 0; j < message.quotaMetrics.length; ++j)
                                    object.quotaMetrics[j] = $root.google.api.servicecontrol.v1.MetricValueSet.toObject(message.quotaMetrics[j], options);
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                object.serviceConfigId = message.serviceConfigId;
                            return object;
                        };
    
                        /**
                         * Converts this AllocateQuotaResponse to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AllocateQuotaResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AllocateQuotaResponse
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.AllocateQuotaResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AllocateQuotaResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.AllocateQuotaResponse";
                        };
    
                        return AllocateQuotaResponse;
                    })();
    
                    v1.QuotaError = (function() {
    
                        /**
                         * Properties of a QuotaError.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IQuotaError
                         * @property {google.api.servicecontrol.v1.QuotaError.Code|null} [code] QuotaError code
                         * @property {string|null} [subject] QuotaError subject
                         * @property {string|null} [description] QuotaError description
                         * @property {google.rpc.IStatus|null} [status] QuotaError status
                         */
    
                        /**
                         * Constructs a new QuotaError.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a QuotaError.
                         * @implements IQuotaError
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IQuotaError=} [properties] Properties to set
                         */
                        function QuotaError(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QuotaError code.
                         * @member {google.api.servicecontrol.v1.QuotaError.Code} code
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @instance
                         */
                        QuotaError.prototype.code = 0;
    
                        /**
                         * QuotaError subject.
                         * @member {string} subject
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @instance
                         */
                        QuotaError.prototype.subject = "";
    
                        /**
                         * QuotaError description.
                         * @member {string} description
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @instance
                         */
                        QuotaError.prototype.description = "";
    
                        /**
                         * QuotaError status.
                         * @member {google.rpc.IStatus|null|undefined} status
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @instance
                         */
                        QuotaError.prototype.status = null;
    
                        /**
                         * Creates a new QuotaError instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @static
                         * @param {google.api.servicecontrol.v1.IQuotaError=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.QuotaError} QuotaError instance
                         */
                        QuotaError.create = function create(properties) {
                            return new QuotaError(properties);
                        };
    
                        /**
                         * Encodes the specified QuotaError message. Does not implicitly {@link google.api.servicecontrol.v1.QuotaError.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @static
                         * @param {google.api.servicecontrol.v1.IQuotaError} message QuotaError message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuotaError.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.subject != null && Object.hasOwnProperty.call(message, "subject"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.subject);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                $root.google.rpc.Status.encode(message.status, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QuotaError message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.QuotaError.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @static
                         * @param {google.api.servicecontrol.v1.IQuotaError} message QuotaError message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QuotaError.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QuotaError message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.QuotaError} QuotaError
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuotaError.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.QuotaError();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.code = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.subject = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.status = $root.google.rpc.Status.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QuotaError message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.QuotaError} QuotaError
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QuotaError.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QuotaError message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QuotaError.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                switch (message.code) {
                                default:
                                    return "code: enum value expected";
                                case 0:
                                case 8:
                                case 107:
                                case 108:
                                case 105:
                                case 112:
                                    break;
                                }
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                if (!$util.isString(message.subject))
                                    return "subject: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.status != null && message.hasOwnProperty("status")) {
                                var error = $root.google.rpc.Status.verify(message.status);
                                if (error)
                                    return "status." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a QuotaError message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.QuotaError} QuotaError
                         */
                        QuotaError.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.QuotaError)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.QuotaError();
                            switch (object.code) {
                            default:
                                if (typeof object.code === "number") {
                                    message.code = object.code;
                                    break;
                                }
                                break;
                            case "UNSPECIFIED":
                            case 0:
                                message.code = 0;
                                break;
                            case "RESOURCE_EXHAUSTED":
                            case 8:
                                message.code = 8;
                                break;
                            case "BILLING_NOT_ACTIVE":
                            case 107:
                                message.code = 107;
                                break;
                            case "PROJECT_DELETED":
                            case 108:
                                message.code = 108;
                                break;
                            case "API_KEY_INVALID":
                            case 105:
                                message.code = 105;
                                break;
                            case "API_KEY_EXPIRED":
                            case 112:
                                message.code = 112;
                                break;
                            }
                            if (object.subject != null)
                                message.subject = String(object.subject);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.status != null) {
                                if (typeof object.status !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.QuotaError.status: object expected");
                                message.status = $root.google.rpc.Status.fromObject(object.status);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QuotaError message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @static
                         * @param {google.api.servicecontrol.v1.QuotaError} message QuotaError
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QuotaError.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.code = options.enums === String ? "UNSPECIFIED" : 0;
                                object.subject = "";
                                object.description = "";
                                object.status = null;
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = options.enums === String ? $root.google.api.servicecontrol.v1.QuotaError.Code[message.code] === undefined ? message.code : $root.google.api.servicecontrol.v1.QuotaError.Code[message.code] : message.code;
                            if (message.subject != null && message.hasOwnProperty("subject"))
                                object.subject = message.subject;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = $root.google.rpc.Status.toObject(message.status, options);
                            return object;
                        };
    
                        /**
                         * Converts this QuotaError to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QuotaError.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for QuotaError
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.QuotaError
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        QuotaError.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.QuotaError";
                        };
    
                        /**
                         * Code enum.
                         * @name google.api.servicecontrol.v1.QuotaError.Code
                         * @enum {number}
                         * @property {number} UNSPECIFIED=0 UNSPECIFIED value
                         * @property {number} RESOURCE_EXHAUSTED=8 RESOURCE_EXHAUSTED value
                         * @property {number} BILLING_NOT_ACTIVE=107 BILLING_NOT_ACTIVE value
                         * @property {number} PROJECT_DELETED=108 PROJECT_DELETED value
                         * @property {number} API_KEY_INVALID=105 API_KEY_INVALID value
                         * @property {number} API_KEY_EXPIRED=112 API_KEY_EXPIRED value
                         */
                        QuotaError.Code = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "UNSPECIFIED"] = 0;
                            values[valuesById[8] = "RESOURCE_EXHAUSTED"] = 8;
                            values[valuesById[107] = "BILLING_NOT_ACTIVE"] = 107;
                            values[valuesById[108] = "PROJECT_DELETED"] = 108;
                            values[valuesById[105] = "API_KEY_INVALID"] = 105;
                            values[valuesById[112] = "API_KEY_EXPIRED"] = 112;
                            return values;
                        })();
    
                        return QuotaError;
                    })();
    
                    v1.ServiceController = (function() {
    
                        /**
                         * Constructs a new ServiceController service.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a ServiceController
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function ServiceController(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (ServiceController.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ServiceController;
    
                        /**
                         * Creates new ServiceController service using the specified rpc implementation.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.ServiceController
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {ServiceController} RPC service. Useful where requests and/or responses are streamed.
                         */
                        ServiceController.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.api.servicecontrol.v1.ServiceController|check}.
                         * @memberof google.api.servicecontrol.v1.ServiceController
                         * @typedef CheckCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.api.servicecontrol.v1.CheckResponse} [response] CheckResponse
                         */
    
                        /**
                         * Calls Check.
                         * @function check
                         * @memberof google.api.servicecontrol.v1.ServiceController
                         * @instance
                         * @param {google.api.servicecontrol.v1.ICheckRequest} request CheckRequest message or plain object
                         * @param {google.api.servicecontrol.v1.ServiceController.CheckCallback} callback Node-style callback called with the error, if any, and CheckResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(ServiceController.prototype.check = function check(request, callback) {
                            return this.rpcCall(check, $root.google.api.servicecontrol.v1.CheckRequest, $root.google.api.servicecontrol.v1.CheckResponse, request, callback);
                        }, "name", { value: "Check" });
    
                        /**
                         * Calls Check.
                         * @function check
                         * @memberof google.api.servicecontrol.v1.ServiceController
                         * @instance
                         * @param {google.api.servicecontrol.v1.ICheckRequest} request CheckRequest message or plain object
                         * @returns {Promise<google.api.servicecontrol.v1.CheckResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.api.servicecontrol.v1.ServiceController|report}.
                         * @memberof google.api.servicecontrol.v1.ServiceController
                         * @typedef ReportCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.api.servicecontrol.v1.ReportResponse} [response] ReportResponse
                         */
    
                        /**
                         * Calls Report.
                         * @function report
                         * @memberof google.api.servicecontrol.v1.ServiceController
                         * @instance
                         * @param {google.api.servicecontrol.v1.IReportRequest} request ReportRequest message or plain object
                         * @param {google.api.servicecontrol.v1.ServiceController.ReportCallback} callback Node-style callback called with the error, if any, and ReportResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(ServiceController.prototype.report = function report(request, callback) {
                            return this.rpcCall(report, $root.google.api.servicecontrol.v1.ReportRequest, $root.google.api.servicecontrol.v1.ReportResponse, request, callback);
                        }, "name", { value: "Report" });
    
                        /**
                         * Calls Report.
                         * @function report
                         * @memberof google.api.servicecontrol.v1.ServiceController
                         * @instance
                         * @param {google.api.servicecontrol.v1.IReportRequest} request ReportRequest message or plain object
                         * @returns {Promise<google.api.servicecontrol.v1.ReportResponse>} Promise
                         * @variation 2
                         */
    
                        return ServiceController;
                    })();
    
                    v1.CheckRequest = (function() {
    
                        /**
                         * Properties of a CheckRequest.
                         * @memberof google.api.servicecontrol.v1
                         * @interface ICheckRequest
                         * @property {string|null} [serviceName] CheckRequest serviceName
                         * @property {google.api.servicecontrol.v1.IOperation|null} [operation] CheckRequest operation
                         * @property {string|null} [serviceConfigId] CheckRequest serviceConfigId
                         */
    
                        /**
                         * Constructs a new CheckRequest.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a CheckRequest.
                         * @implements ICheckRequest
                         * @constructor
                         * @param {google.api.servicecontrol.v1.ICheckRequest=} [properties] Properties to set
                         */
                        function CheckRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CheckRequest serviceName.
                         * @member {string} serviceName
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @instance
                         */
                        CheckRequest.prototype.serviceName = "";
    
                        /**
                         * CheckRequest operation.
                         * @member {google.api.servicecontrol.v1.IOperation|null|undefined} operation
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @instance
                         */
                        CheckRequest.prototype.operation = null;
    
                        /**
                         * CheckRequest serviceConfigId.
                         * @member {string} serviceConfigId
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @instance
                         */
                        CheckRequest.prototype.serviceConfigId = "";
    
                        /**
                         * Creates a new CheckRequest instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.ICheckRequest=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.CheckRequest} CheckRequest instance
                         */
                        CheckRequest.create = function create(properties) {
                            return new CheckRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CheckRequest message. Does not implicitly {@link google.api.servicecontrol.v1.CheckRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.ICheckRequest} message CheckRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                            if (message.operation != null && Object.hasOwnProperty.call(message, "operation"))
                                $root.google.api.servicecontrol.v1.Operation.encode(message.operation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.serviceConfigId != null && Object.hasOwnProperty.call(message, "serviceConfigId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.serviceConfigId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CheckRequest message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.CheckRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.ICheckRequest} message CheckRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CheckRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.CheckRequest} CheckRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.CheckRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.serviceName = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.operation = $root.google.api.servicecontrol.v1.Operation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.serviceConfigId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CheckRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.CheckRequest} CheckRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CheckRequest message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CheckRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                if (!$util.isString(message.serviceName))
                                    return "serviceName: string expected";
                            if (message.operation != null && message.hasOwnProperty("operation")) {
                                var error = $root.google.api.servicecontrol.v1.Operation.verify(message.operation);
                                if (error)
                                    return "operation." + error;
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                if (!$util.isString(message.serviceConfigId))
                                    return "serviceConfigId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CheckRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.CheckRequest} CheckRequest
                         */
                        CheckRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.CheckRequest)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.CheckRequest();
                            if (object.serviceName != null)
                                message.serviceName = String(object.serviceName);
                            if (object.operation != null) {
                                if (typeof object.operation !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.CheckRequest.operation: object expected");
                                message.operation = $root.google.api.servicecontrol.v1.Operation.fromObject(object.operation);
                            }
                            if (object.serviceConfigId != null)
                                message.serviceConfigId = String(object.serviceConfigId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CheckRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.CheckRequest} message CheckRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CheckRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.serviceName = "";
                                object.operation = null;
                                object.serviceConfigId = "";
                            }
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                object.serviceName = message.serviceName;
                            if (message.operation != null && message.hasOwnProperty("operation"))
                                object.operation = $root.google.api.servicecontrol.v1.Operation.toObject(message.operation, options);
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                object.serviceConfigId = message.serviceConfigId;
                            return object;
                        };
    
                        /**
                         * Converts this CheckRequest to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CheckRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CheckRequest
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.CheckRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CheckRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.CheckRequest";
                        };
    
                        return CheckRequest;
                    })();
    
                    v1.CheckResponse = (function() {
    
                        /**
                         * Properties of a CheckResponse.
                         * @memberof google.api.servicecontrol.v1
                         * @interface ICheckResponse
                         * @property {string|null} [operationId] CheckResponse operationId
                         * @property {Array.<google.api.servicecontrol.v1.ICheckError>|null} [checkErrors] CheckResponse checkErrors
                         * @property {string|null} [serviceConfigId] CheckResponse serviceConfigId
                         * @property {string|null} [serviceRolloutId] CheckResponse serviceRolloutId
                         * @property {google.api.servicecontrol.v1.CheckResponse.ICheckInfo|null} [checkInfo] CheckResponse checkInfo
                         */
    
                        /**
                         * Constructs a new CheckResponse.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a CheckResponse.
                         * @implements ICheckResponse
                         * @constructor
                         * @param {google.api.servicecontrol.v1.ICheckResponse=} [properties] Properties to set
                         */
                        function CheckResponse(properties) {
                            this.checkErrors = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CheckResponse operationId.
                         * @member {string} operationId
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @instance
                         */
                        CheckResponse.prototype.operationId = "";
    
                        /**
                         * CheckResponse checkErrors.
                         * @member {Array.<google.api.servicecontrol.v1.ICheckError>} checkErrors
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @instance
                         */
                        CheckResponse.prototype.checkErrors = $util.emptyArray;
    
                        /**
                         * CheckResponse serviceConfigId.
                         * @member {string} serviceConfigId
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @instance
                         */
                        CheckResponse.prototype.serviceConfigId = "";
    
                        /**
                         * CheckResponse serviceRolloutId.
                         * @member {string} serviceRolloutId
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @instance
                         */
                        CheckResponse.prototype.serviceRolloutId = "";
    
                        /**
                         * CheckResponse checkInfo.
                         * @member {google.api.servicecontrol.v1.CheckResponse.ICheckInfo|null|undefined} checkInfo
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @instance
                         */
                        CheckResponse.prototype.checkInfo = null;
    
                        /**
                         * Creates a new CheckResponse instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.ICheckResponse=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.CheckResponse} CheckResponse instance
                         */
                        CheckResponse.create = function create(properties) {
                            return new CheckResponse(properties);
                        };
    
                        /**
                         * Encodes the specified CheckResponse message. Does not implicitly {@link google.api.servicecontrol.v1.CheckResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.ICheckResponse} message CheckResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.operationId != null && Object.hasOwnProperty.call(message, "operationId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.operationId);
                            if (message.checkErrors != null && message.checkErrors.length)
                                for (var i = 0; i < message.checkErrors.length; ++i)
                                    $root.google.api.servicecontrol.v1.CheckError.encode(message.checkErrors[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.serviceConfigId != null && Object.hasOwnProperty.call(message, "serviceConfigId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.serviceConfigId);
                            if (message.checkInfo != null && Object.hasOwnProperty.call(message, "checkInfo"))
                                $root.google.api.servicecontrol.v1.CheckResponse.CheckInfo.encode(message.checkInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.serviceRolloutId != null && Object.hasOwnProperty.call(message, "serviceRolloutId"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.serviceRolloutId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CheckResponse message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.CheckResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.ICheckResponse} message CheckResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CheckResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.CheckResponse} CheckResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.CheckResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.operationId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.checkErrors && message.checkErrors.length))
                                            message.checkErrors = [];
                                        message.checkErrors.push($root.google.api.servicecontrol.v1.CheckError.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        message.serviceConfigId = reader.string();
                                        break;
                                    }
                                case 11: {
                                        message.serviceRolloutId = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.checkInfo = $root.google.api.servicecontrol.v1.CheckResponse.CheckInfo.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CheckResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.CheckResponse} CheckResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CheckResponse message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CheckResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.operationId != null && message.hasOwnProperty("operationId"))
                                if (!$util.isString(message.operationId))
                                    return "operationId: string expected";
                            if (message.checkErrors != null && message.hasOwnProperty("checkErrors")) {
                                if (!Array.isArray(message.checkErrors))
                                    return "checkErrors: array expected";
                                for (var i = 0; i < message.checkErrors.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v1.CheckError.verify(message.checkErrors[i]);
                                    if (error)
                                        return "checkErrors." + error;
                                }
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                if (!$util.isString(message.serviceConfigId))
                                    return "serviceConfigId: string expected";
                            if (message.serviceRolloutId != null && message.hasOwnProperty("serviceRolloutId"))
                                if (!$util.isString(message.serviceRolloutId))
                                    return "serviceRolloutId: string expected";
                            if (message.checkInfo != null && message.hasOwnProperty("checkInfo")) {
                                var error = $root.google.api.servicecontrol.v1.CheckResponse.CheckInfo.verify(message.checkInfo);
                                if (error)
                                    return "checkInfo." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CheckResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.CheckResponse} CheckResponse
                         */
                        CheckResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.CheckResponse)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.CheckResponse();
                            if (object.operationId != null)
                                message.operationId = String(object.operationId);
                            if (object.checkErrors) {
                                if (!Array.isArray(object.checkErrors))
                                    throw TypeError(".google.api.servicecontrol.v1.CheckResponse.checkErrors: array expected");
                                message.checkErrors = [];
                                for (var i = 0; i < object.checkErrors.length; ++i) {
                                    if (typeof object.checkErrors[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.CheckResponse.checkErrors: object expected");
                                    message.checkErrors[i] = $root.google.api.servicecontrol.v1.CheckError.fromObject(object.checkErrors[i]);
                                }
                            }
                            if (object.serviceConfigId != null)
                                message.serviceConfigId = String(object.serviceConfigId);
                            if (object.serviceRolloutId != null)
                                message.serviceRolloutId = String(object.serviceRolloutId);
                            if (object.checkInfo != null) {
                                if (typeof object.checkInfo !== "object")
                                    throw TypeError(".google.api.servicecontrol.v1.CheckResponse.checkInfo: object expected");
                                message.checkInfo = $root.google.api.servicecontrol.v1.CheckResponse.CheckInfo.fromObject(object.checkInfo);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CheckResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.CheckResponse} message CheckResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CheckResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.checkErrors = [];
                            if (options.defaults) {
                                object.operationId = "";
                                object.serviceConfigId = "";
                                object.checkInfo = null;
                                object.serviceRolloutId = "";
                            }
                            if (message.operationId != null && message.hasOwnProperty("operationId"))
                                object.operationId = message.operationId;
                            if (message.checkErrors && message.checkErrors.length) {
                                object.checkErrors = [];
                                for (var j = 0; j < message.checkErrors.length; ++j)
                                    object.checkErrors[j] = $root.google.api.servicecontrol.v1.CheckError.toObject(message.checkErrors[j], options);
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                object.serviceConfigId = message.serviceConfigId;
                            if (message.checkInfo != null && message.hasOwnProperty("checkInfo"))
                                object.checkInfo = $root.google.api.servicecontrol.v1.CheckResponse.CheckInfo.toObject(message.checkInfo, options);
                            if (message.serviceRolloutId != null && message.hasOwnProperty("serviceRolloutId"))
                                object.serviceRolloutId = message.serviceRolloutId;
                            return object;
                        };
    
                        /**
                         * Converts this CheckResponse to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CheckResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CheckResponse
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.CheckResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CheckResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.CheckResponse";
                        };
    
                        CheckResponse.CheckInfo = (function() {
    
                            /**
                             * Properties of a CheckInfo.
                             * @memberof google.api.servicecontrol.v1.CheckResponse
                             * @interface ICheckInfo
                             * @property {Array.<string>|null} [unusedArguments] CheckInfo unusedArguments
                             * @property {google.api.servicecontrol.v1.CheckResponse.IConsumerInfo|null} [consumerInfo] CheckInfo consumerInfo
                             */
    
                            /**
                             * Constructs a new CheckInfo.
                             * @memberof google.api.servicecontrol.v1.CheckResponse
                             * @classdesc Represents a CheckInfo.
                             * @implements ICheckInfo
                             * @constructor
                             * @param {google.api.servicecontrol.v1.CheckResponse.ICheckInfo=} [properties] Properties to set
                             */
                            function CheckInfo(properties) {
                                this.unusedArguments = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * CheckInfo unusedArguments.
                             * @member {Array.<string>} unusedArguments
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @instance
                             */
                            CheckInfo.prototype.unusedArguments = $util.emptyArray;
    
                            /**
                             * CheckInfo consumerInfo.
                             * @member {google.api.servicecontrol.v1.CheckResponse.IConsumerInfo|null|undefined} consumerInfo
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @instance
                             */
                            CheckInfo.prototype.consumerInfo = null;
    
                            /**
                             * Creates a new CheckInfo instance using the specified properties.
                             * @function create
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @static
                             * @param {google.api.servicecontrol.v1.CheckResponse.ICheckInfo=} [properties] Properties to set
                             * @returns {google.api.servicecontrol.v1.CheckResponse.CheckInfo} CheckInfo instance
                             */
                            CheckInfo.create = function create(properties) {
                                return new CheckInfo(properties);
                            };
    
                            /**
                             * Encodes the specified CheckInfo message. Does not implicitly {@link google.api.servicecontrol.v1.CheckResponse.CheckInfo.verify|verify} messages.
                             * @function encode
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @static
                             * @param {google.api.servicecontrol.v1.CheckResponse.ICheckInfo} message CheckInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CheckInfo.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.unusedArguments != null && message.unusedArguments.length)
                                    for (var i = 0; i < message.unusedArguments.length; ++i)
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.unusedArguments[i]);
                                if (message.consumerInfo != null && Object.hasOwnProperty.call(message, "consumerInfo"))
                                    $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.encode(message.consumerInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified CheckInfo message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.CheckResponse.CheckInfo.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @static
                             * @param {google.api.servicecontrol.v1.CheckResponse.ICheckInfo} message CheckInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            CheckInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a CheckInfo message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.api.servicecontrol.v1.CheckResponse.CheckInfo} CheckInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CheckInfo.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.CheckResponse.CheckInfo();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (!(message.unusedArguments && message.unusedArguments.length))
                                                message.unusedArguments = [];
                                            message.unusedArguments.push(reader.string());
                                            break;
                                        }
                                    case 2: {
                                            message.consumerInfo = $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a CheckInfo message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.api.servicecontrol.v1.CheckResponse.CheckInfo} CheckInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CheckInfo.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a CheckInfo message.
                             * @function verify
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            CheckInfo.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.unusedArguments != null && message.hasOwnProperty("unusedArguments")) {
                                    if (!Array.isArray(message.unusedArguments))
                                        return "unusedArguments: array expected";
                                    for (var i = 0; i < message.unusedArguments.length; ++i)
                                        if (!$util.isString(message.unusedArguments[i]))
                                            return "unusedArguments: string[] expected";
                                }
                                if (message.consumerInfo != null && message.hasOwnProperty("consumerInfo")) {
                                    var error = $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.verify(message.consumerInfo);
                                    if (error)
                                        return "consumerInfo." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a CheckInfo message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.api.servicecontrol.v1.CheckResponse.CheckInfo} CheckInfo
                             */
                            CheckInfo.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.api.servicecontrol.v1.CheckResponse.CheckInfo)
                                    return object;
                                var message = new $root.google.api.servicecontrol.v1.CheckResponse.CheckInfo();
                                if (object.unusedArguments) {
                                    if (!Array.isArray(object.unusedArguments))
                                        throw TypeError(".google.api.servicecontrol.v1.CheckResponse.CheckInfo.unusedArguments: array expected");
                                    message.unusedArguments = [];
                                    for (var i = 0; i < object.unusedArguments.length; ++i)
                                        message.unusedArguments[i] = String(object.unusedArguments[i]);
                                }
                                if (object.consumerInfo != null) {
                                    if (typeof object.consumerInfo !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumerInfo: object expected");
                                    message.consumerInfo = $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.fromObject(object.consumerInfo);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a CheckInfo message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @static
                             * @param {google.api.servicecontrol.v1.CheckResponse.CheckInfo} message CheckInfo
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            CheckInfo.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.unusedArguments = [];
                                if (options.defaults)
                                    object.consumerInfo = null;
                                if (message.unusedArguments && message.unusedArguments.length) {
                                    object.unusedArguments = [];
                                    for (var j = 0; j < message.unusedArguments.length; ++j)
                                        object.unusedArguments[j] = message.unusedArguments[j];
                                }
                                if (message.consumerInfo != null && message.hasOwnProperty("consumerInfo"))
                                    object.consumerInfo = $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.toObject(message.consumerInfo, options);
                                return object;
                            };
    
                            /**
                             * Converts this CheckInfo to JSON.
                             * @function toJSON
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            CheckInfo.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for CheckInfo
                             * @function getTypeUrl
                             * @memberof google.api.servicecontrol.v1.CheckResponse.CheckInfo
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            CheckInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.api.servicecontrol.v1.CheckResponse.CheckInfo";
                            };
    
                            return CheckInfo;
                        })();
    
                        CheckResponse.ConsumerInfo = (function() {
    
                            /**
                             * Properties of a ConsumerInfo.
                             * @memberof google.api.servicecontrol.v1.CheckResponse
                             * @interface IConsumerInfo
                             * @property {number|Long|null} [projectNumber] ConsumerInfo projectNumber
                             * @property {google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.ConsumerType|null} [type] ConsumerInfo type
                             * @property {number|Long|null} [consumerNumber] ConsumerInfo consumerNumber
                             */
    
                            /**
                             * Constructs a new ConsumerInfo.
                             * @memberof google.api.servicecontrol.v1.CheckResponse
                             * @classdesc Represents a ConsumerInfo.
                             * @implements IConsumerInfo
                             * @constructor
                             * @param {google.api.servicecontrol.v1.CheckResponse.IConsumerInfo=} [properties] Properties to set
                             */
                            function ConsumerInfo(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ConsumerInfo projectNumber.
                             * @member {number|Long} projectNumber
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @instance
                             */
                            ConsumerInfo.prototype.projectNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * ConsumerInfo type.
                             * @member {google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.ConsumerType} type
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @instance
                             */
                            ConsumerInfo.prototype.type = 0;
    
                            /**
                             * ConsumerInfo consumerNumber.
                             * @member {number|Long} consumerNumber
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @instance
                             */
                            ConsumerInfo.prototype.consumerNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Creates a new ConsumerInfo instance using the specified properties.
                             * @function create
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @static
                             * @param {google.api.servicecontrol.v1.CheckResponse.IConsumerInfo=} [properties] Properties to set
                             * @returns {google.api.servicecontrol.v1.CheckResponse.ConsumerInfo} ConsumerInfo instance
                             */
                            ConsumerInfo.create = function create(properties) {
                                return new ConsumerInfo(properties);
                            };
    
                            /**
                             * Encodes the specified ConsumerInfo message. Does not implicitly {@link google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.verify|verify} messages.
                             * @function encode
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @static
                             * @param {google.api.servicecontrol.v1.CheckResponse.IConsumerInfo} message ConsumerInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConsumerInfo.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.projectNumber != null && Object.hasOwnProperty.call(message, "projectNumber"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.projectNumber);
                                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                                if (message.consumerNumber != null && Object.hasOwnProperty.call(message, "consumerNumber"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.consumerNumber);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ConsumerInfo message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @static
                             * @param {google.api.servicecontrol.v1.CheckResponse.IConsumerInfo} message ConsumerInfo message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ConsumerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ConsumerInfo message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.api.servicecontrol.v1.CheckResponse.ConsumerInfo} ConsumerInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConsumerInfo.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.projectNumber = reader.int64();
                                            break;
                                        }
                                    case 2: {
                                            message.type = reader.int32();
                                            break;
                                        }
                                    case 3: {
                                            message.consumerNumber = reader.int64();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ConsumerInfo message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.api.servicecontrol.v1.CheckResponse.ConsumerInfo} ConsumerInfo
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ConsumerInfo.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ConsumerInfo message.
                             * @function verify
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ConsumerInfo.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.projectNumber != null && message.hasOwnProperty("projectNumber"))
                                    if (!$util.isInteger(message.projectNumber) && !(message.projectNumber && $util.isInteger(message.projectNumber.low) && $util.isInteger(message.projectNumber.high)))
                                        return "projectNumber: integer|Long expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                                if (message.consumerNumber != null && message.hasOwnProperty("consumerNumber"))
                                    if (!$util.isInteger(message.consumerNumber) && !(message.consumerNumber && $util.isInteger(message.consumerNumber.low) && $util.isInteger(message.consumerNumber.high)))
                                        return "consumerNumber: integer|Long expected";
                                return null;
                            };
    
                            /**
                             * Creates a ConsumerInfo message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.api.servicecontrol.v1.CheckResponse.ConsumerInfo} ConsumerInfo
                             */
                            ConsumerInfo.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
                                    return object;
                                var message = new $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo();
                                if (object.projectNumber != null)
                                    if ($util.Long)
                                        (message.projectNumber = $util.Long.fromValue(object.projectNumber)).unsigned = false;
                                    else if (typeof object.projectNumber === "string")
                                        message.projectNumber = parseInt(object.projectNumber, 10);
                                    else if (typeof object.projectNumber === "number")
                                        message.projectNumber = object.projectNumber;
                                    else if (typeof object.projectNumber === "object")
                                        message.projectNumber = new $util.LongBits(object.projectNumber.low >>> 0, object.projectNumber.high >>> 0).toNumber();
                                switch (object.type) {
                                default:
                                    if (typeof object.type === "number") {
                                        message.type = object.type;
                                        break;
                                    }
                                    break;
                                case "CONSUMER_TYPE_UNSPECIFIED":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "PROJECT":
                                case 1:
                                    message.type = 1;
                                    break;
                                case "FOLDER":
                                case 2:
                                    message.type = 2;
                                    break;
                                case "ORGANIZATION":
                                case 3:
                                    message.type = 3;
                                    break;
                                case "SERVICE_SPECIFIC":
                                case 4:
                                    message.type = 4;
                                    break;
                                }
                                if (object.consumerNumber != null)
                                    if ($util.Long)
                                        (message.consumerNumber = $util.Long.fromValue(object.consumerNumber)).unsigned = false;
                                    else if (typeof object.consumerNumber === "string")
                                        message.consumerNumber = parseInt(object.consumerNumber, 10);
                                    else if (typeof object.consumerNumber === "number")
                                        message.consumerNumber = object.consumerNumber;
                                    else if (typeof object.consumerNumber === "object")
                                        message.consumerNumber = new $util.LongBits(object.consumerNumber.low >>> 0, object.consumerNumber.high >>> 0).toNumber();
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ConsumerInfo message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @static
                             * @param {google.api.servicecontrol.v1.CheckResponse.ConsumerInfo} message ConsumerInfo
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ConsumerInfo.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.projectNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.projectNumber = options.longs === String ? "0" : 0;
                                    object.type = options.enums === String ? "CONSUMER_TYPE_UNSPECIFIED" : 0;
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.consumerNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.consumerNumber = options.longs === String ? "0" : 0;
                                }
                                if (message.projectNumber != null && message.hasOwnProperty("projectNumber"))
                                    if (typeof message.projectNumber === "number")
                                        object.projectNumber = options.longs === String ? String(message.projectNumber) : message.projectNumber;
                                    else
                                        object.projectNumber = options.longs === String ? $util.Long.prototype.toString.call(message.projectNumber) : options.longs === Number ? new $util.LongBits(message.projectNumber.low >>> 0, message.projectNumber.high >>> 0).toNumber() : message.projectNumber;
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.ConsumerType[message.type] === undefined ? message.type : $root.google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.ConsumerType[message.type] : message.type;
                                if (message.consumerNumber != null && message.hasOwnProperty("consumerNumber"))
                                    if (typeof message.consumerNumber === "number")
                                        object.consumerNumber = options.longs === String ? String(message.consumerNumber) : message.consumerNumber;
                                    else
                                        object.consumerNumber = options.longs === String ? $util.Long.prototype.toString.call(message.consumerNumber) : options.longs === Number ? new $util.LongBits(message.consumerNumber.low >>> 0, message.consumerNumber.high >>> 0).toNumber() : message.consumerNumber;
                                return object;
                            };
    
                            /**
                             * Converts this ConsumerInfo to JSON.
                             * @function toJSON
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ConsumerInfo.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ConsumerInfo
                             * @function getTypeUrl
                             * @memberof google.api.servicecontrol.v1.CheckResponse.ConsumerInfo
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ConsumerInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.api.servicecontrol.v1.CheckResponse.ConsumerInfo";
                            };
    
                            /**
                             * ConsumerType enum.
                             * @name google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.ConsumerType
                             * @enum {number}
                             * @property {number} CONSUMER_TYPE_UNSPECIFIED=0 CONSUMER_TYPE_UNSPECIFIED value
                             * @property {number} PROJECT=1 PROJECT value
                             * @property {number} FOLDER=2 FOLDER value
                             * @property {number} ORGANIZATION=3 ORGANIZATION value
                             * @property {number} SERVICE_SPECIFIC=4 SERVICE_SPECIFIC value
                             */
                            ConsumerInfo.ConsumerType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "CONSUMER_TYPE_UNSPECIFIED"] = 0;
                                values[valuesById[1] = "PROJECT"] = 1;
                                values[valuesById[2] = "FOLDER"] = 2;
                                values[valuesById[3] = "ORGANIZATION"] = 3;
                                values[valuesById[4] = "SERVICE_SPECIFIC"] = 4;
                                return values;
                            })();
    
                            return ConsumerInfo;
                        })();
    
                        return CheckResponse;
                    })();
    
                    v1.ReportRequest = (function() {
    
                        /**
                         * Properties of a ReportRequest.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IReportRequest
                         * @property {string|null} [serviceName] ReportRequest serviceName
                         * @property {Array.<google.api.servicecontrol.v1.IOperation>|null} [operations] ReportRequest operations
                         * @property {string|null} [serviceConfigId] ReportRequest serviceConfigId
                         */
    
                        /**
                         * Constructs a new ReportRequest.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a ReportRequest.
                         * @implements IReportRequest
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IReportRequest=} [properties] Properties to set
                         */
                        function ReportRequest(properties) {
                            this.operations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ReportRequest serviceName.
                         * @member {string} serviceName
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @instance
                         */
                        ReportRequest.prototype.serviceName = "";
    
                        /**
                         * ReportRequest operations.
                         * @member {Array.<google.api.servicecontrol.v1.IOperation>} operations
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @instance
                         */
                        ReportRequest.prototype.operations = $util.emptyArray;
    
                        /**
                         * ReportRequest serviceConfigId.
                         * @member {string} serviceConfigId
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @instance
                         */
                        ReportRequest.prototype.serviceConfigId = "";
    
                        /**
                         * Creates a new ReportRequest instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.IReportRequest=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.ReportRequest} ReportRequest instance
                         */
                        ReportRequest.create = function create(properties) {
                            return new ReportRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ReportRequest message. Does not implicitly {@link google.api.servicecontrol.v1.ReportRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.IReportRequest} message ReportRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReportRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                            if (message.operations != null && message.operations.length)
                                for (var i = 0; i < message.operations.length; ++i)
                                    $root.google.api.servicecontrol.v1.Operation.encode(message.operations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.serviceConfigId != null && Object.hasOwnProperty.call(message, "serviceConfigId"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.serviceConfigId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReportRequest message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.ReportRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.IReportRequest} message ReportRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReportRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReportRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.ReportRequest} ReportRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReportRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.ReportRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.serviceName = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.operations && message.operations.length))
                                            message.operations = [];
                                        message.operations.push($root.google.api.servicecontrol.v1.Operation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.serviceConfigId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReportRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.ReportRequest} ReportRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReportRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReportRequest message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReportRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                if (!$util.isString(message.serviceName))
                                    return "serviceName: string expected";
                            if (message.operations != null && message.hasOwnProperty("operations")) {
                                if (!Array.isArray(message.operations))
                                    return "operations: array expected";
                                for (var i = 0; i < message.operations.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v1.Operation.verify(message.operations[i]);
                                    if (error)
                                        return "operations." + error;
                                }
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                if (!$util.isString(message.serviceConfigId))
                                    return "serviceConfigId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ReportRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.ReportRequest} ReportRequest
                         */
                        ReportRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.ReportRequest)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.ReportRequest();
                            if (object.serviceName != null)
                                message.serviceName = String(object.serviceName);
                            if (object.operations) {
                                if (!Array.isArray(object.operations))
                                    throw TypeError(".google.api.servicecontrol.v1.ReportRequest.operations: array expected");
                                message.operations = [];
                                for (var i = 0; i < object.operations.length; ++i) {
                                    if (typeof object.operations[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.ReportRequest.operations: object expected");
                                    message.operations[i] = $root.google.api.servicecontrol.v1.Operation.fromObject(object.operations[i]);
                                }
                            }
                            if (object.serviceConfigId != null)
                                message.serviceConfigId = String(object.serviceConfigId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ReportRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @static
                         * @param {google.api.servicecontrol.v1.ReportRequest} message ReportRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReportRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.operations = [];
                            if (options.defaults) {
                                object.serviceName = "";
                                object.serviceConfigId = "";
                            }
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                object.serviceName = message.serviceName;
                            if (message.operations && message.operations.length) {
                                object.operations = [];
                                for (var j = 0; j < message.operations.length; ++j)
                                    object.operations[j] = $root.google.api.servicecontrol.v1.Operation.toObject(message.operations[j], options);
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                object.serviceConfigId = message.serviceConfigId;
                            return object;
                        };
    
                        /**
                         * Converts this ReportRequest to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReportRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ReportRequest
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.ReportRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ReportRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.ReportRequest";
                        };
    
                        return ReportRequest;
                    })();
    
                    v1.ReportResponse = (function() {
    
                        /**
                         * Properties of a ReportResponse.
                         * @memberof google.api.servicecontrol.v1
                         * @interface IReportResponse
                         * @property {Array.<google.api.servicecontrol.v1.ReportResponse.IReportError>|null} [reportErrors] ReportResponse reportErrors
                         * @property {string|null} [serviceConfigId] ReportResponse serviceConfigId
                         * @property {string|null} [serviceRolloutId] ReportResponse serviceRolloutId
                         */
    
                        /**
                         * Constructs a new ReportResponse.
                         * @memberof google.api.servicecontrol.v1
                         * @classdesc Represents a ReportResponse.
                         * @implements IReportResponse
                         * @constructor
                         * @param {google.api.servicecontrol.v1.IReportResponse=} [properties] Properties to set
                         */
                        function ReportResponse(properties) {
                            this.reportErrors = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ReportResponse reportErrors.
                         * @member {Array.<google.api.servicecontrol.v1.ReportResponse.IReportError>} reportErrors
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @instance
                         */
                        ReportResponse.prototype.reportErrors = $util.emptyArray;
    
                        /**
                         * ReportResponse serviceConfigId.
                         * @member {string} serviceConfigId
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @instance
                         */
                        ReportResponse.prototype.serviceConfigId = "";
    
                        /**
                         * ReportResponse serviceRolloutId.
                         * @member {string} serviceRolloutId
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @instance
                         */
                        ReportResponse.prototype.serviceRolloutId = "";
    
                        /**
                         * Creates a new ReportResponse instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.IReportResponse=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v1.ReportResponse} ReportResponse instance
                         */
                        ReportResponse.create = function create(properties) {
                            return new ReportResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ReportResponse message. Does not implicitly {@link google.api.servicecontrol.v1.ReportResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.IReportResponse} message ReportResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReportResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.reportErrors != null && message.reportErrors.length)
                                for (var i = 0; i < message.reportErrors.length; ++i)
                                    $root.google.api.servicecontrol.v1.ReportResponse.ReportError.encode(message.reportErrors[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.serviceConfigId != null && Object.hasOwnProperty.call(message, "serviceConfigId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceConfigId);
                            if (message.serviceRolloutId != null && Object.hasOwnProperty.call(message, "serviceRolloutId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.serviceRolloutId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReportResponse message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.ReportResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.IReportResponse} message ReportResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReportResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReportResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v1.ReportResponse} ReportResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReportResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.ReportResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.reportErrors && message.reportErrors.length))
                                            message.reportErrors = [];
                                        message.reportErrors.push($root.google.api.servicecontrol.v1.ReportResponse.ReportError.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.serviceConfigId = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.serviceRolloutId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReportResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v1.ReportResponse} ReportResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReportResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReportResponse message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReportResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.reportErrors != null && message.hasOwnProperty("reportErrors")) {
                                if (!Array.isArray(message.reportErrors))
                                    return "reportErrors: array expected";
                                for (var i = 0; i < message.reportErrors.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v1.ReportResponse.ReportError.verify(message.reportErrors[i]);
                                    if (error)
                                        return "reportErrors." + error;
                                }
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                if (!$util.isString(message.serviceConfigId))
                                    return "serviceConfigId: string expected";
                            if (message.serviceRolloutId != null && message.hasOwnProperty("serviceRolloutId"))
                                if (!$util.isString(message.serviceRolloutId))
                                    return "serviceRolloutId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ReportResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v1.ReportResponse} ReportResponse
                         */
                        ReportResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v1.ReportResponse)
                                return object;
                            var message = new $root.google.api.servicecontrol.v1.ReportResponse();
                            if (object.reportErrors) {
                                if (!Array.isArray(object.reportErrors))
                                    throw TypeError(".google.api.servicecontrol.v1.ReportResponse.reportErrors: array expected");
                                message.reportErrors = [];
                                for (var i = 0; i < object.reportErrors.length; ++i) {
                                    if (typeof object.reportErrors[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.ReportResponse.reportErrors: object expected");
                                    message.reportErrors[i] = $root.google.api.servicecontrol.v1.ReportResponse.ReportError.fromObject(object.reportErrors[i]);
                                }
                            }
                            if (object.serviceConfigId != null)
                                message.serviceConfigId = String(object.serviceConfigId);
                            if (object.serviceRolloutId != null)
                                message.serviceRolloutId = String(object.serviceRolloutId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ReportResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @static
                         * @param {google.api.servicecontrol.v1.ReportResponse} message ReportResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReportResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.reportErrors = [];
                            if (options.defaults) {
                                object.serviceConfigId = "";
                                object.serviceRolloutId = "";
                            }
                            if (message.reportErrors && message.reportErrors.length) {
                                object.reportErrors = [];
                                for (var j = 0; j < message.reportErrors.length; ++j)
                                    object.reportErrors[j] = $root.google.api.servicecontrol.v1.ReportResponse.ReportError.toObject(message.reportErrors[j], options);
                            }
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                object.serviceConfigId = message.serviceConfigId;
                            if (message.serviceRolloutId != null && message.hasOwnProperty("serviceRolloutId"))
                                object.serviceRolloutId = message.serviceRolloutId;
                            return object;
                        };
    
                        /**
                         * Converts this ReportResponse to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReportResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ReportResponse
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v1.ReportResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ReportResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v1.ReportResponse";
                        };
    
                        ReportResponse.ReportError = (function() {
    
                            /**
                             * Properties of a ReportError.
                             * @memberof google.api.servicecontrol.v1.ReportResponse
                             * @interface IReportError
                             * @property {string|null} [operationId] ReportError operationId
                             * @property {google.rpc.IStatus|null} [status] ReportError status
                             */
    
                            /**
                             * Constructs a new ReportError.
                             * @memberof google.api.servicecontrol.v1.ReportResponse
                             * @classdesc Represents a ReportError.
                             * @implements IReportError
                             * @constructor
                             * @param {google.api.servicecontrol.v1.ReportResponse.IReportError=} [properties] Properties to set
                             */
                            function ReportError(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ReportError operationId.
                             * @member {string} operationId
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @instance
                             */
                            ReportError.prototype.operationId = "";
    
                            /**
                             * ReportError status.
                             * @member {google.rpc.IStatus|null|undefined} status
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @instance
                             */
                            ReportError.prototype.status = null;
    
                            /**
                             * Creates a new ReportError instance using the specified properties.
                             * @function create
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @static
                             * @param {google.api.servicecontrol.v1.ReportResponse.IReportError=} [properties] Properties to set
                             * @returns {google.api.servicecontrol.v1.ReportResponse.ReportError} ReportError instance
                             */
                            ReportError.create = function create(properties) {
                                return new ReportError(properties);
                            };
    
                            /**
                             * Encodes the specified ReportError message. Does not implicitly {@link google.api.servicecontrol.v1.ReportResponse.ReportError.verify|verify} messages.
                             * @function encode
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @static
                             * @param {google.api.servicecontrol.v1.ReportResponse.IReportError} message ReportError message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ReportError.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.operationId != null && Object.hasOwnProperty.call(message, "operationId"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.operationId);
                                if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                    $root.google.rpc.Status.encode(message.status, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ReportError message, length delimited. Does not implicitly {@link google.api.servicecontrol.v1.ReportResponse.ReportError.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @static
                             * @param {google.api.servicecontrol.v1.ReportResponse.IReportError} message ReportError message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ReportError.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a ReportError message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.api.servicecontrol.v1.ReportResponse.ReportError} ReportError
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ReportError.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v1.ReportResponse.ReportError();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.operationId = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.status = $root.google.rpc.Status.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a ReportError message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.api.servicecontrol.v1.ReportResponse.ReportError} ReportError
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ReportError.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a ReportError message.
                             * @function verify
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ReportError.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.operationId != null && message.hasOwnProperty("operationId"))
                                    if (!$util.isString(message.operationId))
                                        return "operationId: string expected";
                                if (message.status != null && message.hasOwnProperty("status")) {
                                    var error = $root.google.rpc.Status.verify(message.status);
                                    if (error)
                                        return "status." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates a ReportError message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.api.servicecontrol.v1.ReportResponse.ReportError} ReportError
                             */
                            ReportError.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.api.servicecontrol.v1.ReportResponse.ReportError)
                                    return object;
                                var message = new $root.google.api.servicecontrol.v1.ReportResponse.ReportError();
                                if (object.operationId != null)
                                    message.operationId = String(object.operationId);
                                if (object.status != null) {
                                    if (typeof object.status !== "object")
                                        throw TypeError(".google.api.servicecontrol.v1.ReportResponse.ReportError.status: object expected");
                                    message.status = $root.google.rpc.Status.fromObject(object.status);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a ReportError message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @static
                             * @param {google.api.servicecontrol.v1.ReportResponse.ReportError} message ReportError
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ReportError.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.operationId = "";
                                    object.status = null;
                                }
                                if (message.operationId != null && message.hasOwnProperty("operationId"))
                                    object.operationId = message.operationId;
                                if (message.status != null && message.hasOwnProperty("status"))
                                    object.status = $root.google.rpc.Status.toObject(message.status, options);
                                return object;
                            };
    
                            /**
                             * Converts this ReportError to JSON.
                             * @function toJSON
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ReportError.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ReportError
                             * @function getTypeUrl
                             * @memberof google.api.servicecontrol.v1.ReportResponse.ReportError
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ReportError.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.api.servicecontrol.v1.ReportResponse.ReportError";
                            };
    
                            return ReportError;
                        })();
    
                        return ReportResponse;
                    })();
    
                    return v1;
                })();
    
                servicecontrol.v2 = (function() {
    
                    /**
                     * Namespace v2.
                     * @memberof google.api.servicecontrol
                     * @namespace
                     */
                    var v2 = {};
    
                    v2.ServiceController = (function() {
    
                        /**
                         * Constructs a new ServiceController service.
                         * @memberof google.api.servicecontrol.v2
                         * @classdesc Represents a ServiceController
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function ServiceController(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (ServiceController.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ServiceController;
    
                        /**
                         * Creates new ServiceController service using the specified rpc implementation.
                         * @function create
                         * @memberof google.api.servicecontrol.v2.ServiceController
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {ServiceController} RPC service. Useful where requests and/or responses are streamed.
                         */
                        ServiceController.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.api.servicecontrol.v2.ServiceController|check}.
                         * @memberof google.api.servicecontrol.v2.ServiceController
                         * @typedef CheckCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.api.servicecontrol.v2.CheckResponse} [response] CheckResponse
                         */
    
                        /**
                         * Calls Check.
                         * @function check
                         * @memberof google.api.servicecontrol.v2.ServiceController
                         * @instance
                         * @param {google.api.servicecontrol.v2.ICheckRequest} request CheckRequest message or plain object
                         * @param {google.api.servicecontrol.v2.ServiceController.CheckCallback} callback Node-style callback called with the error, if any, and CheckResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(ServiceController.prototype.check = function check(request, callback) {
                            return this.rpcCall(check, $root.google.api.servicecontrol.v2.CheckRequest, $root.google.api.servicecontrol.v2.CheckResponse, request, callback);
                        }, "name", { value: "Check" });
    
                        /**
                         * Calls Check.
                         * @function check
                         * @memberof google.api.servicecontrol.v2.ServiceController
                         * @instance
                         * @param {google.api.servicecontrol.v2.ICheckRequest} request CheckRequest message or plain object
                         * @returns {Promise<google.api.servicecontrol.v2.CheckResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.api.servicecontrol.v2.ServiceController|report}.
                         * @memberof google.api.servicecontrol.v2.ServiceController
                         * @typedef ReportCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.api.servicecontrol.v2.ReportResponse} [response] ReportResponse
                         */
    
                        /**
                         * Calls Report.
                         * @function report
                         * @memberof google.api.servicecontrol.v2.ServiceController
                         * @instance
                         * @param {google.api.servicecontrol.v2.IReportRequest} request ReportRequest message or plain object
                         * @param {google.api.servicecontrol.v2.ServiceController.ReportCallback} callback Node-style callback called with the error, if any, and ReportResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(ServiceController.prototype.report = function report(request, callback) {
                            return this.rpcCall(report, $root.google.api.servicecontrol.v2.ReportRequest, $root.google.api.servicecontrol.v2.ReportResponse, request, callback);
                        }, "name", { value: "Report" });
    
                        /**
                         * Calls Report.
                         * @function report
                         * @memberof google.api.servicecontrol.v2.ServiceController
                         * @instance
                         * @param {google.api.servicecontrol.v2.IReportRequest} request ReportRequest message or plain object
                         * @returns {Promise<google.api.servicecontrol.v2.ReportResponse>} Promise
                         * @variation 2
                         */
    
                        return ServiceController;
                    })();
    
                    v2.CheckRequest = (function() {
    
                        /**
                         * Properties of a CheckRequest.
                         * @memberof google.api.servicecontrol.v2
                         * @interface ICheckRequest
                         * @property {string|null} [serviceName] CheckRequest serviceName
                         * @property {string|null} [serviceConfigId] CheckRequest serviceConfigId
                         * @property {google.rpc.context.IAttributeContext|null} [attributes] CheckRequest attributes
                         * @property {Array.<google.api.servicecontrol.v2.IResourceInfo>|null} [resources] CheckRequest resources
                         * @property {string|null} [flags] CheckRequest flags
                         */
    
                        /**
                         * Constructs a new CheckRequest.
                         * @memberof google.api.servicecontrol.v2
                         * @classdesc Represents a CheckRequest.
                         * @implements ICheckRequest
                         * @constructor
                         * @param {google.api.servicecontrol.v2.ICheckRequest=} [properties] Properties to set
                         */
                        function CheckRequest(properties) {
                            this.resources = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CheckRequest serviceName.
                         * @member {string} serviceName
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @instance
                         */
                        CheckRequest.prototype.serviceName = "";
    
                        /**
                         * CheckRequest serviceConfigId.
                         * @member {string} serviceConfigId
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @instance
                         */
                        CheckRequest.prototype.serviceConfigId = "";
    
                        /**
                         * CheckRequest attributes.
                         * @member {google.rpc.context.IAttributeContext|null|undefined} attributes
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @instance
                         */
                        CheckRequest.prototype.attributes = null;
    
                        /**
                         * CheckRequest resources.
                         * @member {Array.<google.api.servicecontrol.v2.IResourceInfo>} resources
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @instance
                         */
                        CheckRequest.prototype.resources = $util.emptyArray;
    
                        /**
                         * CheckRequest flags.
                         * @member {string} flags
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @instance
                         */
                        CheckRequest.prototype.flags = "";
    
                        /**
                         * Creates a new CheckRequest instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @static
                         * @param {google.api.servicecontrol.v2.ICheckRequest=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v2.CheckRequest} CheckRequest instance
                         */
                        CheckRequest.create = function create(properties) {
                            return new CheckRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CheckRequest message. Does not implicitly {@link google.api.servicecontrol.v2.CheckRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @static
                         * @param {google.api.servicecontrol.v2.ICheckRequest} message CheckRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                            if (message.serviceConfigId != null && Object.hasOwnProperty.call(message, "serviceConfigId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceConfigId);
                            if (message.attributes != null && Object.hasOwnProperty.call(message, "attributes"))
                                $root.google.rpc.context.AttributeContext.encode(message.attributes, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.resources != null && message.resources.length)
                                for (var i = 0; i < message.resources.length; ++i)
                                    $root.google.api.servicecontrol.v2.ResourceInfo.encode(message.resources[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.flags);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CheckRequest message, length delimited. Does not implicitly {@link google.api.servicecontrol.v2.CheckRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @static
                         * @param {google.api.servicecontrol.v2.ICheckRequest} message CheckRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CheckRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v2.CheckRequest} CheckRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v2.CheckRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.serviceName = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.serviceConfigId = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.attributes = $root.google.rpc.context.AttributeContext.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        if (!(message.resources && message.resources.length))
                                            message.resources = [];
                                        message.resources.push($root.google.api.servicecontrol.v2.ResourceInfo.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        message.flags = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CheckRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v2.CheckRequest} CheckRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CheckRequest message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CheckRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                if (!$util.isString(message.serviceName))
                                    return "serviceName: string expected";
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                if (!$util.isString(message.serviceConfigId))
                                    return "serviceConfigId: string expected";
                            if (message.attributes != null && message.hasOwnProperty("attributes")) {
                                var error = $root.google.rpc.context.AttributeContext.verify(message.attributes);
                                if (error)
                                    return "attributes." + error;
                            }
                            if (message.resources != null && message.hasOwnProperty("resources")) {
                                if (!Array.isArray(message.resources))
                                    return "resources: array expected";
                                for (var i = 0; i < message.resources.length; ++i) {
                                    var error = $root.google.api.servicecontrol.v2.ResourceInfo.verify(message.resources[i]);
                                    if (error)
                                        return "resources." + error;
                                }
                            }
                            if (message.flags != null && message.hasOwnProperty("flags"))
                                if (!$util.isString(message.flags))
                                    return "flags: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CheckRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v2.CheckRequest} CheckRequest
                         */
                        CheckRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v2.CheckRequest)
                                return object;
                            var message = new $root.google.api.servicecontrol.v2.CheckRequest();
                            if (object.serviceName != null)
                                message.serviceName = String(object.serviceName);
                            if (object.serviceConfigId != null)
                                message.serviceConfigId = String(object.serviceConfigId);
                            if (object.attributes != null) {
                                if (typeof object.attributes !== "object")
                                    throw TypeError(".google.api.servicecontrol.v2.CheckRequest.attributes: object expected");
                                message.attributes = $root.google.rpc.context.AttributeContext.fromObject(object.attributes);
                            }
                            if (object.resources) {
                                if (!Array.isArray(object.resources))
                                    throw TypeError(".google.api.servicecontrol.v2.CheckRequest.resources: array expected");
                                message.resources = [];
                                for (var i = 0; i < object.resources.length; ++i) {
                                    if (typeof object.resources[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v2.CheckRequest.resources: object expected");
                                    message.resources[i] = $root.google.api.servicecontrol.v2.ResourceInfo.fromObject(object.resources[i]);
                                }
                            }
                            if (object.flags != null)
                                message.flags = String(object.flags);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CheckRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @static
                         * @param {google.api.servicecontrol.v2.CheckRequest} message CheckRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CheckRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.resources = [];
                            if (options.defaults) {
                                object.serviceName = "";
                                object.serviceConfigId = "";
                                object.attributes = null;
                                object.flags = "";
                            }
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                object.serviceName = message.serviceName;
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                object.serviceConfigId = message.serviceConfigId;
                            if (message.attributes != null && message.hasOwnProperty("attributes"))
                                object.attributes = $root.google.rpc.context.AttributeContext.toObject(message.attributes, options);
                            if (message.resources && message.resources.length) {
                                object.resources = [];
                                for (var j = 0; j < message.resources.length; ++j)
                                    object.resources[j] = $root.google.api.servicecontrol.v2.ResourceInfo.toObject(message.resources[j], options);
                            }
                            if (message.flags != null && message.hasOwnProperty("flags"))
                                object.flags = message.flags;
                            return object;
                        };
    
                        /**
                         * Converts this CheckRequest to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CheckRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CheckRequest
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v2.CheckRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CheckRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v2.CheckRequest";
                        };
    
                        return CheckRequest;
                    })();
    
                    v2.ResourceInfo = (function() {
    
                        /**
                         * Properties of a ResourceInfo.
                         * @memberof google.api.servicecontrol.v2
                         * @interface IResourceInfo
                         * @property {string|null} [name] ResourceInfo name
                         * @property {string|null} [type] ResourceInfo type
                         * @property {string|null} [permission] ResourceInfo permission
                         * @property {string|null} [container] ResourceInfo container
                         * @property {string|null} [location] ResourceInfo location
                         */
    
                        /**
                         * Constructs a new ResourceInfo.
                         * @memberof google.api.servicecontrol.v2
                         * @classdesc Represents a ResourceInfo.
                         * @implements IResourceInfo
                         * @constructor
                         * @param {google.api.servicecontrol.v2.IResourceInfo=} [properties] Properties to set
                         */
                        function ResourceInfo(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ResourceInfo name.
                         * @member {string} name
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @instance
                         */
                        ResourceInfo.prototype.name = "";
    
                        /**
                         * ResourceInfo type.
                         * @member {string} type
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @instance
                         */
                        ResourceInfo.prototype.type = "";
    
                        /**
                         * ResourceInfo permission.
                         * @member {string} permission
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @instance
                         */
                        ResourceInfo.prototype.permission = "";
    
                        /**
                         * ResourceInfo container.
                         * @member {string} container
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @instance
                         */
                        ResourceInfo.prototype.container = "";
    
                        /**
                         * ResourceInfo location.
                         * @member {string} location
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @instance
                         */
                        ResourceInfo.prototype.location = "";
    
                        /**
                         * Creates a new ResourceInfo instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @static
                         * @param {google.api.servicecontrol.v2.IResourceInfo=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v2.ResourceInfo} ResourceInfo instance
                         */
                        ResourceInfo.create = function create(properties) {
                            return new ResourceInfo(properties);
                        };
    
                        /**
                         * Encodes the specified ResourceInfo message. Does not implicitly {@link google.api.servicecontrol.v2.ResourceInfo.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @static
                         * @param {google.api.servicecontrol.v2.IResourceInfo} message ResourceInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ResourceInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);
                            if (message.permission != null && Object.hasOwnProperty.call(message, "permission"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.permission);
                            if (message.container != null && Object.hasOwnProperty.call(message, "container"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.container);
                            if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.location);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ResourceInfo message, length delimited. Does not implicitly {@link google.api.servicecontrol.v2.ResourceInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @static
                         * @param {google.api.servicecontrol.v2.IResourceInfo} message ResourceInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ResourceInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ResourceInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v2.ResourceInfo} ResourceInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ResourceInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v2.ResourceInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.type = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.permission = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.container = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.location = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ResourceInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v2.ResourceInfo} ResourceInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ResourceInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ResourceInfo message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ResourceInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.permission != null && message.hasOwnProperty("permission"))
                                if (!$util.isString(message.permission))
                                    return "permission: string expected";
                            if (message.container != null && message.hasOwnProperty("container"))
                                if (!$util.isString(message.container))
                                    return "container: string expected";
                            if (message.location != null && message.hasOwnProperty("location"))
                                if (!$util.isString(message.location))
                                    return "location: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ResourceInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v2.ResourceInfo} ResourceInfo
                         */
                        ResourceInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v2.ResourceInfo)
                                return object;
                            var message = new $root.google.api.servicecontrol.v2.ResourceInfo();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.permission != null)
                                message.permission = String(object.permission);
                            if (object.container != null)
                                message.container = String(object.container);
                            if (object.location != null)
                                message.location = String(object.location);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ResourceInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @static
                         * @param {google.api.servicecontrol.v2.ResourceInfo} message ResourceInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ResourceInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.type = "";
                                object.permission = "";
                                object.container = "";
                                object.location = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.permission != null && message.hasOwnProperty("permission"))
                                object.permission = message.permission;
                            if (message.container != null && message.hasOwnProperty("container"))
                                object.container = message.container;
                            if (message.location != null && message.hasOwnProperty("location"))
                                object.location = message.location;
                            return object;
                        };
    
                        /**
                         * Converts this ResourceInfo to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ResourceInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ResourceInfo
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v2.ResourceInfo
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ResourceInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v2.ResourceInfo";
                        };
    
                        return ResourceInfo;
                    })();
    
                    v2.CheckResponse = (function() {
    
                        /**
                         * Properties of a CheckResponse.
                         * @memberof google.api.servicecontrol.v2
                         * @interface ICheckResponse
                         * @property {google.rpc.IStatus|null} [status] CheckResponse status
                         * @property {Object.<string,string>|null} [headers] CheckResponse headers
                         */
    
                        /**
                         * Constructs a new CheckResponse.
                         * @memberof google.api.servicecontrol.v2
                         * @classdesc Represents a CheckResponse.
                         * @implements ICheckResponse
                         * @constructor
                         * @param {google.api.servicecontrol.v2.ICheckResponse=} [properties] Properties to set
                         */
                        function CheckResponse(properties) {
                            this.headers = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CheckResponse status.
                         * @member {google.rpc.IStatus|null|undefined} status
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @instance
                         */
                        CheckResponse.prototype.status = null;
    
                        /**
                         * CheckResponse headers.
                         * @member {Object.<string,string>} headers
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @instance
                         */
                        CheckResponse.prototype.headers = $util.emptyObject;
    
                        /**
                         * Creates a new CheckResponse instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @static
                         * @param {google.api.servicecontrol.v2.ICheckResponse=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v2.CheckResponse} CheckResponse instance
                         */
                        CheckResponse.create = function create(properties) {
                            return new CheckResponse(properties);
                        };
    
                        /**
                         * Encodes the specified CheckResponse message. Does not implicitly {@link google.api.servicecontrol.v2.CheckResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @static
                         * @param {google.api.servicecontrol.v2.ICheckResponse} message CheckResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                $root.google.rpc.Status.encode(message.status, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.headers != null && Object.hasOwnProperty.call(message, "headers"))
                                for (var keys = Object.keys(message.headers), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.headers[keys[i]]).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CheckResponse message, length delimited. Does not implicitly {@link google.api.servicecontrol.v2.CheckResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @static
                         * @param {google.api.servicecontrol.v2.ICheckResponse} message CheckResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CheckResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v2.CheckResponse} CheckResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v2.CheckResponse(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.status = $root.google.rpc.Status.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (message.headers === $util.emptyObject)
                                            message.headers = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.headers[key] = value;
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CheckResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v2.CheckResponse} CheckResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CheckResponse message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CheckResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.status != null && message.hasOwnProperty("status")) {
                                var error = $root.google.rpc.Status.verify(message.status);
                                if (error)
                                    return "status." + error;
                            }
                            if (message.headers != null && message.hasOwnProperty("headers")) {
                                if (!$util.isObject(message.headers))
                                    return "headers: object expected";
                                var key = Object.keys(message.headers);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.headers[key[i]]))
                                        return "headers: string{k:string} expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CheckResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v2.CheckResponse} CheckResponse
                         */
                        CheckResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v2.CheckResponse)
                                return object;
                            var message = new $root.google.api.servicecontrol.v2.CheckResponse();
                            if (object.status != null) {
                                if (typeof object.status !== "object")
                                    throw TypeError(".google.api.servicecontrol.v2.CheckResponse.status: object expected");
                                message.status = $root.google.rpc.Status.fromObject(object.status);
                            }
                            if (object.headers) {
                                if (typeof object.headers !== "object")
                                    throw TypeError(".google.api.servicecontrol.v2.CheckResponse.headers: object expected");
                                message.headers = {};
                                for (var keys = Object.keys(object.headers), i = 0; i < keys.length; ++i)
                                    message.headers[keys[i]] = String(object.headers[keys[i]]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CheckResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @static
                         * @param {google.api.servicecontrol.v2.CheckResponse} message CheckResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CheckResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.headers = {};
                            if (options.defaults)
                                object.status = null;
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = $root.google.rpc.Status.toObject(message.status, options);
                            var keys2;
                            if (message.headers && (keys2 = Object.keys(message.headers)).length) {
                                object.headers = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.headers[keys2[j]] = message.headers[keys2[j]];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this CheckResponse to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CheckResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CheckResponse
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v2.CheckResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CheckResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v2.CheckResponse";
                        };
    
                        return CheckResponse;
                    })();
    
                    v2.ReportRequest = (function() {
    
                        /**
                         * Properties of a ReportRequest.
                         * @memberof google.api.servicecontrol.v2
                         * @interface IReportRequest
                         * @property {string|null} [serviceName] ReportRequest serviceName
                         * @property {string|null} [serviceConfigId] ReportRequest serviceConfigId
                         * @property {Array.<google.rpc.context.IAttributeContext>|null} [operations] ReportRequest operations
                         */
    
                        /**
                         * Constructs a new ReportRequest.
                         * @memberof google.api.servicecontrol.v2
                         * @classdesc Represents a ReportRequest.
                         * @implements IReportRequest
                         * @constructor
                         * @param {google.api.servicecontrol.v2.IReportRequest=} [properties] Properties to set
                         */
                        function ReportRequest(properties) {
                            this.operations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ReportRequest serviceName.
                         * @member {string} serviceName
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @instance
                         */
                        ReportRequest.prototype.serviceName = "";
    
                        /**
                         * ReportRequest serviceConfigId.
                         * @member {string} serviceConfigId
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @instance
                         */
                        ReportRequest.prototype.serviceConfigId = "";
    
                        /**
                         * ReportRequest operations.
                         * @member {Array.<google.rpc.context.IAttributeContext>} operations
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @instance
                         */
                        ReportRequest.prototype.operations = $util.emptyArray;
    
                        /**
                         * Creates a new ReportRequest instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @static
                         * @param {google.api.servicecontrol.v2.IReportRequest=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v2.ReportRequest} ReportRequest instance
                         */
                        ReportRequest.create = function create(properties) {
                            return new ReportRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ReportRequest message. Does not implicitly {@link google.api.servicecontrol.v2.ReportRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @static
                         * @param {google.api.servicecontrol.v2.IReportRequest} message ReportRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReportRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.serviceName != null && Object.hasOwnProperty.call(message, "serviceName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                            if (message.serviceConfigId != null && Object.hasOwnProperty.call(message, "serviceConfigId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceConfigId);
                            if (message.operations != null && message.operations.length)
                                for (var i = 0; i < message.operations.length; ++i)
                                    $root.google.rpc.context.AttributeContext.encode(message.operations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReportRequest message, length delimited. Does not implicitly {@link google.api.servicecontrol.v2.ReportRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @static
                         * @param {google.api.servicecontrol.v2.IReportRequest} message ReportRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReportRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReportRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v2.ReportRequest} ReportRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReportRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v2.ReportRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.serviceName = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.serviceConfigId = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.operations && message.operations.length))
                                            message.operations = [];
                                        message.operations.push($root.google.rpc.context.AttributeContext.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReportRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v2.ReportRequest} ReportRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReportRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReportRequest message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReportRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                if (!$util.isString(message.serviceName))
                                    return "serviceName: string expected";
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                if (!$util.isString(message.serviceConfigId))
                                    return "serviceConfigId: string expected";
                            if (message.operations != null && message.hasOwnProperty("operations")) {
                                if (!Array.isArray(message.operations))
                                    return "operations: array expected";
                                for (var i = 0; i < message.operations.length; ++i) {
                                    var error = $root.google.rpc.context.AttributeContext.verify(message.operations[i]);
                                    if (error)
                                        return "operations." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ReportRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v2.ReportRequest} ReportRequest
                         */
                        ReportRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v2.ReportRequest)
                                return object;
                            var message = new $root.google.api.servicecontrol.v2.ReportRequest();
                            if (object.serviceName != null)
                                message.serviceName = String(object.serviceName);
                            if (object.serviceConfigId != null)
                                message.serviceConfigId = String(object.serviceConfigId);
                            if (object.operations) {
                                if (!Array.isArray(object.operations))
                                    throw TypeError(".google.api.servicecontrol.v2.ReportRequest.operations: array expected");
                                message.operations = [];
                                for (var i = 0; i < object.operations.length; ++i) {
                                    if (typeof object.operations[i] !== "object")
                                        throw TypeError(".google.api.servicecontrol.v2.ReportRequest.operations: object expected");
                                    message.operations[i] = $root.google.rpc.context.AttributeContext.fromObject(object.operations[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ReportRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @static
                         * @param {google.api.servicecontrol.v2.ReportRequest} message ReportRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReportRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.operations = [];
                            if (options.defaults) {
                                object.serviceName = "";
                                object.serviceConfigId = "";
                            }
                            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                                object.serviceName = message.serviceName;
                            if (message.serviceConfigId != null && message.hasOwnProperty("serviceConfigId"))
                                object.serviceConfigId = message.serviceConfigId;
                            if (message.operations && message.operations.length) {
                                object.operations = [];
                                for (var j = 0; j < message.operations.length; ++j)
                                    object.operations[j] = $root.google.rpc.context.AttributeContext.toObject(message.operations[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ReportRequest to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReportRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ReportRequest
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v2.ReportRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ReportRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v2.ReportRequest";
                        };
    
                        return ReportRequest;
                    })();
    
                    v2.ReportResponse = (function() {
    
                        /**
                         * Properties of a ReportResponse.
                         * @memberof google.api.servicecontrol.v2
                         * @interface IReportResponse
                         */
    
                        /**
                         * Constructs a new ReportResponse.
                         * @memberof google.api.servicecontrol.v2
                         * @classdesc Represents a ReportResponse.
                         * @implements IReportResponse
                         * @constructor
                         * @param {google.api.servicecontrol.v2.IReportResponse=} [properties] Properties to set
                         */
                        function ReportResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new ReportResponse instance using the specified properties.
                         * @function create
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @static
                         * @param {google.api.servicecontrol.v2.IReportResponse=} [properties] Properties to set
                         * @returns {google.api.servicecontrol.v2.ReportResponse} ReportResponse instance
                         */
                        ReportResponse.create = function create(properties) {
                            return new ReportResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ReportResponse message. Does not implicitly {@link google.api.servicecontrol.v2.ReportResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @static
                         * @param {google.api.servicecontrol.v2.IReportResponse} message ReportResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReportResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ReportResponse message, length delimited. Does not implicitly {@link google.api.servicecontrol.v2.ReportResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @static
                         * @param {google.api.servicecontrol.v2.IReportResponse} message ReportResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ReportResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ReportResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.servicecontrol.v2.ReportResponse} ReportResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReportResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.servicecontrol.v2.ReportResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ReportResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.servicecontrol.v2.ReportResponse} ReportResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ReportResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ReportResponse message.
                         * @function verify
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ReportResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a ReportResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.servicecontrol.v2.ReportResponse} ReportResponse
                         */
                        ReportResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.servicecontrol.v2.ReportResponse)
                                return object;
                            return new $root.google.api.servicecontrol.v2.ReportResponse();
                        };
    
                        /**
                         * Creates a plain object from a ReportResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @static
                         * @param {google.api.servicecontrol.v2.ReportResponse} message ReportResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ReportResponse.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this ReportResponse to JSON.
                         * @function toJSON
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ReportResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ReportResponse
                         * @function getTypeUrl
                         * @memberof google.api.servicecontrol.v2.ReportResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ReportResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.servicecontrol.v2.ReportResponse";
                        };
    
                        return ReportResponse;
                    })();
    
                    return v2;
                })();
    
                return servicecontrol;
            })();
    
            api.Distribution = (function() {
    
                /**
                 * Properties of a Distribution.
                 * @memberof google.api
                 * @interface IDistribution
                 * @property {number|Long|null} [count] Distribution count
                 * @property {number|null} [mean] Distribution mean
                 * @property {number|null} [sumOfSquaredDeviation] Distribution sumOfSquaredDeviation
                 * @property {google.api.Distribution.IRange|null} [range] Distribution range
                 * @property {google.api.Distribution.IBucketOptions|null} [bucketOptions] Distribution bucketOptions
                 * @property {Array.<number|Long>|null} [bucketCounts] Distribution bucketCounts
                 * @property {Array.<google.api.Distribution.IExemplar>|null} [exemplars] Distribution exemplars
                 */
    
                /**
                 * Constructs a new Distribution.
                 * @memberof google.api
                 * @classdesc Represents a Distribution.
                 * @implements IDistribution
                 * @constructor
                 * @param {google.api.IDistribution=} [properties] Properties to set
                 */
                function Distribution(properties) {
                    this.bucketCounts = [];
                    this.exemplars = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Distribution count.
                 * @member {number|Long} count
                 * @memberof google.api.Distribution
                 * @instance
                 */
                Distribution.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Distribution mean.
                 * @member {number} mean
                 * @memberof google.api.Distribution
                 * @instance
                 */
                Distribution.prototype.mean = 0;
    
                /**
                 * Distribution sumOfSquaredDeviation.
                 * @member {number} sumOfSquaredDeviation
                 * @memberof google.api.Distribution
                 * @instance
                 */
                Distribution.prototype.sumOfSquaredDeviation = 0;
    
                /**
                 * Distribution range.
                 * @member {google.api.Distribution.IRange|null|undefined} range
                 * @memberof google.api.Distribution
                 * @instance
                 */
                Distribution.prototype.range = null;
    
                /**
                 * Distribution bucketOptions.
                 * @member {google.api.Distribution.IBucketOptions|null|undefined} bucketOptions
                 * @memberof google.api.Distribution
                 * @instance
                 */
                Distribution.prototype.bucketOptions = null;
    
                /**
                 * Distribution bucketCounts.
                 * @member {Array.<number|Long>} bucketCounts
                 * @memberof google.api.Distribution
                 * @instance
                 */
                Distribution.prototype.bucketCounts = $util.emptyArray;
    
                /**
                 * Distribution exemplars.
                 * @member {Array.<google.api.Distribution.IExemplar>} exemplars
                 * @memberof google.api.Distribution
                 * @instance
                 */
                Distribution.prototype.exemplars = $util.emptyArray;
    
                /**
                 * Creates a new Distribution instance using the specified properties.
                 * @function create
                 * @memberof google.api.Distribution
                 * @static
                 * @param {google.api.IDistribution=} [properties] Properties to set
                 * @returns {google.api.Distribution} Distribution instance
                 */
                Distribution.create = function create(properties) {
                    return new Distribution(properties);
                };
    
                /**
                 * Encodes the specified Distribution message. Does not implicitly {@link google.api.Distribution.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Distribution
                 * @static
                 * @param {google.api.IDistribution} message Distribution message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Distribution.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.count);
                    if (message.mean != null && Object.hasOwnProperty.call(message, "mean"))
                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.mean);
                    if (message.sumOfSquaredDeviation != null && Object.hasOwnProperty.call(message, "sumOfSquaredDeviation"))
                        writer.uint32(/* id 3, wireType 1 =*/25).double(message.sumOfSquaredDeviation);
                    if (message.range != null && Object.hasOwnProperty.call(message, "range"))
                        $root.google.api.Distribution.Range.encode(message.range, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.bucketOptions != null && Object.hasOwnProperty.call(message, "bucketOptions"))
                        $root.google.api.Distribution.BucketOptions.encode(message.bucketOptions, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.bucketCounts != null && message.bucketCounts.length) {
                        writer.uint32(/* id 7, wireType 2 =*/58).fork();
                        for (var i = 0; i < message.bucketCounts.length; ++i)
                            writer.int64(message.bucketCounts[i]);
                        writer.ldelim();
                    }
                    if (message.exemplars != null && message.exemplars.length)
                        for (var i = 0; i < message.exemplars.length; ++i)
                            $root.google.api.Distribution.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Distribution message, length delimited. Does not implicitly {@link google.api.Distribution.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Distribution
                 * @static
                 * @param {google.api.IDistribution} message Distribution message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Distribution.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Distribution message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Distribution
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Distribution} Distribution
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Distribution.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Distribution();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.count = reader.int64();
                                break;
                            }
                        case 2: {
                                message.mean = reader.double();
                                break;
                            }
                        case 3: {
                                message.sumOfSquaredDeviation = reader.double();
                                break;
                            }
                        case 4: {
                                message.range = $root.google.api.Distribution.Range.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.bucketOptions = $root.google.api.Distribution.BucketOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                if (!(message.bucketCounts && message.bucketCounts.length))
                                    message.bucketCounts = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.bucketCounts.push(reader.int64());
                                } else
                                    message.bucketCounts.push(reader.int64());
                                break;
                            }
                        case 10: {
                                if (!(message.exemplars && message.exemplars.length))
                                    message.exemplars = [];
                                message.exemplars.push($root.google.api.Distribution.Exemplar.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Distribution message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Distribution
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Distribution} Distribution
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Distribution.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Distribution message.
                 * @function verify
                 * @memberof google.api.Distribution
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Distribution.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.count != null && message.hasOwnProperty("count"))
                        if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                            return "count: integer|Long expected";
                    if (message.mean != null && message.hasOwnProperty("mean"))
                        if (typeof message.mean !== "number")
                            return "mean: number expected";
                    if (message.sumOfSquaredDeviation != null && message.hasOwnProperty("sumOfSquaredDeviation"))
                        if (typeof message.sumOfSquaredDeviation !== "number")
                            return "sumOfSquaredDeviation: number expected";
                    if (message.range != null && message.hasOwnProperty("range")) {
                        var error = $root.google.api.Distribution.Range.verify(message.range);
                        if (error)
                            return "range." + error;
                    }
                    if (message.bucketOptions != null && message.hasOwnProperty("bucketOptions")) {
                        var error = $root.google.api.Distribution.BucketOptions.verify(message.bucketOptions);
                        if (error)
                            return "bucketOptions." + error;
                    }
                    if (message.bucketCounts != null && message.hasOwnProperty("bucketCounts")) {
                        if (!Array.isArray(message.bucketCounts))
                            return "bucketCounts: array expected";
                        for (var i = 0; i < message.bucketCounts.length; ++i)
                            if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))
                                return "bucketCounts: integer|Long[] expected";
                    }
                    if (message.exemplars != null && message.hasOwnProperty("exemplars")) {
                        if (!Array.isArray(message.exemplars))
                            return "exemplars: array expected";
                        for (var i = 0; i < message.exemplars.length; ++i) {
                            var error = $root.google.api.Distribution.Exemplar.verify(message.exemplars[i]);
                            if (error)
                                return "exemplars." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Distribution message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Distribution
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Distribution} Distribution
                 */
                Distribution.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Distribution)
                        return object;
                    var message = new $root.google.api.Distribution();
                    if (object.count != null)
                        if ($util.Long)
                            (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                        else if (typeof object.count === "string")
                            message.count = parseInt(object.count, 10);
                        else if (typeof object.count === "number")
                            message.count = object.count;
                        else if (typeof object.count === "object")
                            message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                    if (object.mean != null)
                        message.mean = Number(object.mean);
                    if (object.sumOfSquaredDeviation != null)
                        message.sumOfSquaredDeviation = Number(object.sumOfSquaredDeviation);
                    if (object.range != null) {
                        if (typeof object.range !== "object")
                            throw TypeError(".google.api.Distribution.range: object expected");
                        message.range = $root.google.api.Distribution.Range.fromObject(object.range);
                    }
                    if (object.bucketOptions != null) {
                        if (typeof object.bucketOptions !== "object")
                            throw TypeError(".google.api.Distribution.bucketOptions: object expected");
                        message.bucketOptions = $root.google.api.Distribution.BucketOptions.fromObject(object.bucketOptions);
                    }
                    if (object.bucketCounts) {
                        if (!Array.isArray(object.bucketCounts))
                            throw TypeError(".google.api.Distribution.bucketCounts: array expected");
                        message.bucketCounts = [];
                        for (var i = 0; i < object.bucketCounts.length; ++i)
                            if ($util.Long)
                                (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = false;
                            else if (typeof object.bucketCounts[i] === "string")
                                message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);
                            else if (typeof object.bucketCounts[i] === "number")
                                message.bucketCounts[i] = object.bucketCounts[i];
                            else if (typeof object.bucketCounts[i] === "object")
                                message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber();
                    }
                    if (object.exemplars) {
                        if (!Array.isArray(object.exemplars))
                            throw TypeError(".google.api.Distribution.exemplars: array expected");
                        message.exemplars = [];
                        for (var i = 0; i < object.exemplars.length; ++i) {
                            if (typeof object.exemplars[i] !== "object")
                                throw TypeError(".google.api.Distribution.exemplars: object expected");
                            message.exemplars[i] = $root.google.api.Distribution.Exemplar.fromObject(object.exemplars[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Distribution message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Distribution
                 * @static
                 * @param {google.api.Distribution} message Distribution
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Distribution.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.bucketCounts = [];
                        object.exemplars = [];
                    }
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.count = options.longs === String ? "0" : 0;
                        object.mean = 0;
                        object.sumOfSquaredDeviation = 0;
                        object.range = null;
                        object.bucketOptions = null;
                    }
                    if (message.count != null && message.hasOwnProperty("count"))
                        if (typeof message.count === "number")
                            object.count = options.longs === String ? String(message.count) : message.count;
                        else
                            object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                    if (message.mean != null && message.hasOwnProperty("mean"))
                        object.mean = options.json && !isFinite(message.mean) ? String(message.mean) : message.mean;
                    if (message.sumOfSquaredDeviation != null && message.hasOwnProperty("sumOfSquaredDeviation"))
                        object.sumOfSquaredDeviation = options.json && !isFinite(message.sumOfSquaredDeviation) ? String(message.sumOfSquaredDeviation) : message.sumOfSquaredDeviation;
                    if (message.range != null && message.hasOwnProperty("range"))
                        object.range = $root.google.api.Distribution.Range.toObject(message.range, options);
                    if (message.bucketOptions != null && message.hasOwnProperty("bucketOptions"))
                        object.bucketOptions = $root.google.api.Distribution.BucketOptions.toObject(message.bucketOptions, options);
                    if (message.bucketCounts && message.bucketCounts.length) {
                        object.bucketCounts = [];
                        for (var j = 0; j < message.bucketCounts.length; ++j)
                            if (typeof message.bucketCounts[j] === "number")
                                object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];
                            else
                                object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber() : message.bucketCounts[j];
                    }
                    if (message.exemplars && message.exemplars.length) {
                        object.exemplars = [];
                        for (var j = 0; j < message.exemplars.length; ++j)
                            object.exemplars[j] = $root.google.api.Distribution.Exemplar.toObject(message.exemplars[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Distribution to JSON.
                 * @function toJSON
                 * @memberof google.api.Distribution
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Distribution.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Distribution
                 * @function getTypeUrl
                 * @memberof google.api.Distribution
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Distribution.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Distribution";
                };
    
                Distribution.Range = (function() {
    
                    /**
                     * Properties of a Range.
                     * @memberof google.api.Distribution
                     * @interface IRange
                     * @property {number|null} [min] Range min
                     * @property {number|null} [max] Range max
                     */
    
                    /**
                     * Constructs a new Range.
                     * @memberof google.api.Distribution
                     * @classdesc Represents a Range.
                     * @implements IRange
                     * @constructor
                     * @param {google.api.Distribution.IRange=} [properties] Properties to set
                     */
                    function Range(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Range min.
                     * @member {number} min
                     * @memberof google.api.Distribution.Range
                     * @instance
                     */
                    Range.prototype.min = 0;
    
                    /**
                     * Range max.
                     * @member {number} max
                     * @memberof google.api.Distribution.Range
                     * @instance
                     */
                    Range.prototype.max = 0;
    
                    /**
                     * Creates a new Range instance using the specified properties.
                     * @function create
                     * @memberof google.api.Distribution.Range
                     * @static
                     * @param {google.api.Distribution.IRange=} [properties] Properties to set
                     * @returns {google.api.Distribution.Range} Range instance
                     */
                    Range.create = function create(properties) {
                        return new Range(properties);
                    };
    
                    /**
                     * Encodes the specified Range message. Does not implicitly {@link google.api.Distribution.Range.verify|verify} messages.
                     * @function encode
                     * @memberof google.api.Distribution.Range
                     * @static
                     * @param {google.api.Distribution.IRange} message Range message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Range.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.min != null && Object.hasOwnProperty.call(message, "min"))
                            writer.uint32(/* id 1, wireType 1 =*/9).double(message.min);
                        if (message.max != null && Object.hasOwnProperty.call(message, "max"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.max);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Range message, length delimited. Does not implicitly {@link google.api.Distribution.Range.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.api.Distribution.Range
                     * @static
                     * @param {google.api.Distribution.IRange} message Range message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Range.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Range message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.api.Distribution.Range
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.api.Distribution.Range} Range
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Range.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Distribution.Range();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.min = reader.double();
                                    break;
                                }
                            case 2: {
                                    message.max = reader.double();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Range message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.api.Distribution.Range
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.api.Distribution.Range} Range
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Range.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Range message.
                     * @function verify
                     * @memberof google.api.Distribution.Range
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Range.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.min != null && message.hasOwnProperty("min"))
                            if (typeof message.min !== "number")
                                return "min: number expected";
                        if (message.max != null && message.hasOwnProperty("max"))
                            if (typeof message.max !== "number")
                                return "max: number expected";
                        return null;
                    };
    
                    /**
                     * Creates a Range message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.api.Distribution.Range
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.api.Distribution.Range} Range
                     */
                    Range.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.api.Distribution.Range)
                            return object;
                        var message = new $root.google.api.Distribution.Range();
                        if (object.min != null)
                            message.min = Number(object.min);
                        if (object.max != null)
                            message.max = Number(object.max);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Range message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.api.Distribution.Range
                     * @static
                     * @param {google.api.Distribution.Range} message Range
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Range.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.min = 0;
                            object.max = 0;
                        }
                        if (message.min != null && message.hasOwnProperty("min"))
                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;
                        if (message.max != null && message.hasOwnProperty("max"))
                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;
                        return object;
                    };
    
                    /**
                     * Converts this Range to JSON.
                     * @function toJSON
                     * @memberof google.api.Distribution.Range
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Range.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Range
                     * @function getTypeUrl
                     * @memberof google.api.Distribution.Range
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Range.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.api.Distribution.Range";
                    };
    
                    return Range;
                })();
    
                Distribution.BucketOptions = (function() {
    
                    /**
                     * Properties of a BucketOptions.
                     * @memberof google.api.Distribution
                     * @interface IBucketOptions
                     * @property {google.api.Distribution.BucketOptions.ILinear|null} [linearBuckets] BucketOptions linearBuckets
                     * @property {google.api.Distribution.BucketOptions.IExponential|null} [exponentialBuckets] BucketOptions exponentialBuckets
                     * @property {google.api.Distribution.BucketOptions.IExplicit|null} [explicitBuckets] BucketOptions explicitBuckets
                     */
    
                    /**
                     * Constructs a new BucketOptions.
                     * @memberof google.api.Distribution
                     * @classdesc Represents a BucketOptions.
                     * @implements IBucketOptions
                     * @constructor
                     * @param {google.api.Distribution.IBucketOptions=} [properties] Properties to set
                     */
                    function BucketOptions(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BucketOptions linearBuckets.
                     * @member {google.api.Distribution.BucketOptions.ILinear|null|undefined} linearBuckets
                     * @memberof google.api.Distribution.BucketOptions
                     * @instance
                     */
                    BucketOptions.prototype.linearBuckets = null;
    
                    /**
                     * BucketOptions exponentialBuckets.
                     * @member {google.api.Distribution.BucketOptions.IExponential|null|undefined} exponentialBuckets
                     * @memberof google.api.Distribution.BucketOptions
                     * @instance
                     */
                    BucketOptions.prototype.exponentialBuckets = null;
    
                    /**
                     * BucketOptions explicitBuckets.
                     * @member {google.api.Distribution.BucketOptions.IExplicit|null|undefined} explicitBuckets
                     * @memberof google.api.Distribution.BucketOptions
                     * @instance
                     */
                    BucketOptions.prototype.explicitBuckets = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * BucketOptions options.
                     * @member {"linearBuckets"|"exponentialBuckets"|"explicitBuckets"|undefined} options
                     * @memberof google.api.Distribution.BucketOptions
                     * @instance
                     */
                    Object.defineProperty(BucketOptions.prototype, "options", {
                        get: $util.oneOfGetter($oneOfFields = ["linearBuckets", "exponentialBuckets", "explicitBuckets"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new BucketOptions instance using the specified properties.
                     * @function create
                     * @memberof google.api.Distribution.BucketOptions
                     * @static
                     * @param {google.api.Distribution.IBucketOptions=} [properties] Properties to set
                     * @returns {google.api.Distribution.BucketOptions} BucketOptions instance
                     */
                    BucketOptions.create = function create(properties) {
                        return new BucketOptions(properties);
                    };
    
                    /**
                     * Encodes the specified BucketOptions message. Does not implicitly {@link google.api.Distribution.BucketOptions.verify|verify} messages.
                     * @function encode
                     * @memberof google.api.Distribution.BucketOptions
                     * @static
                     * @param {google.api.Distribution.IBucketOptions} message BucketOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BucketOptions.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.linearBuckets != null && Object.hasOwnProperty.call(message, "linearBuckets"))
                            $root.google.api.Distribution.BucketOptions.Linear.encode(message.linearBuckets, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.exponentialBuckets != null && Object.hasOwnProperty.call(message, "exponentialBuckets"))
                            $root.google.api.Distribution.BucketOptions.Exponential.encode(message.exponentialBuckets, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.explicitBuckets != null && Object.hasOwnProperty.call(message, "explicitBuckets"))
                            $root.google.api.Distribution.BucketOptions.Explicit.encode(message.explicitBuckets, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BucketOptions message, length delimited. Does not implicitly {@link google.api.Distribution.BucketOptions.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.api.Distribution.BucketOptions
                     * @static
                     * @param {google.api.Distribution.IBucketOptions} message BucketOptions message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BucketOptions.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BucketOptions message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.api.Distribution.BucketOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.api.Distribution.BucketOptions} BucketOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BucketOptions.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Distribution.BucketOptions();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.linearBuckets = $root.google.api.Distribution.BucketOptions.Linear.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.exponentialBuckets = $root.google.api.Distribution.BucketOptions.Exponential.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.explicitBuckets = $root.google.api.Distribution.BucketOptions.Explicit.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BucketOptions message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.api.Distribution.BucketOptions
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.api.Distribution.BucketOptions} BucketOptions
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BucketOptions.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BucketOptions message.
                     * @function verify
                     * @memberof google.api.Distribution.BucketOptions
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BucketOptions.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.linearBuckets != null && message.hasOwnProperty("linearBuckets")) {
                            properties.options = 1;
                            {
                                var error = $root.google.api.Distribution.BucketOptions.Linear.verify(message.linearBuckets);
                                if (error)
                                    return "linearBuckets." + error;
                            }
                        }
                        if (message.exponentialBuckets != null && message.hasOwnProperty("exponentialBuckets")) {
                            if (properties.options === 1)
                                return "options: multiple values";
                            properties.options = 1;
                            {
                                var error = $root.google.api.Distribution.BucketOptions.Exponential.verify(message.exponentialBuckets);
                                if (error)
                                    return "exponentialBuckets." + error;
                            }
                        }
                        if (message.explicitBuckets != null && message.hasOwnProperty("explicitBuckets")) {
                            if (properties.options === 1)
                                return "options: multiple values";
                            properties.options = 1;
                            {
                                var error = $root.google.api.Distribution.BucketOptions.Explicit.verify(message.explicitBuckets);
                                if (error)
                                    return "explicitBuckets." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a BucketOptions message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.api.Distribution.BucketOptions
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.api.Distribution.BucketOptions} BucketOptions
                     */
                    BucketOptions.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.api.Distribution.BucketOptions)
                            return object;
                        var message = new $root.google.api.Distribution.BucketOptions();
                        if (object.linearBuckets != null) {
                            if (typeof object.linearBuckets !== "object")
                                throw TypeError(".google.api.Distribution.BucketOptions.linearBuckets: object expected");
                            message.linearBuckets = $root.google.api.Distribution.BucketOptions.Linear.fromObject(object.linearBuckets);
                        }
                        if (object.exponentialBuckets != null) {
                            if (typeof object.exponentialBuckets !== "object")
                                throw TypeError(".google.api.Distribution.BucketOptions.exponentialBuckets: object expected");
                            message.exponentialBuckets = $root.google.api.Distribution.BucketOptions.Exponential.fromObject(object.exponentialBuckets);
                        }
                        if (object.explicitBuckets != null) {
                            if (typeof object.explicitBuckets !== "object")
                                throw TypeError(".google.api.Distribution.BucketOptions.explicitBuckets: object expected");
                            message.explicitBuckets = $root.google.api.Distribution.BucketOptions.Explicit.fromObject(object.explicitBuckets);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BucketOptions message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.api.Distribution.BucketOptions
                     * @static
                     * @param {google.api.Distribution.BucketOptions} message BucketOptions
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BucketOptions.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.linearBuckets != null && message.hasOwnProperty("linearBuckets")) {
                            object.linearBuckets = $root.google.api.Distribution.BucketOptions.Linear.toObject(message.linearBuckets, options);
                            if (options.oneofs)
                                object.options = "linearBuckets";
                        }
                        if (message.exponentialBuckets != null && message.hasOwnProperty("exponentialBuckets")) {
                            object.exponentialBuckets = $root.google.api.Distribution.BucketOptions.Exponential.toObject(message.exponentialBuckets, options);
                            if (options.oneofs)
                                object.options = "exponentialBuckets";
                        }
                        if (message.explicitBuckets != null && message.hasOwnProperty("explicitBuckets")) {
                            object.explicitBuckets = $root.google.api.Distribution.BucketOptions.Explicit.toObject(message.explicitBuckets, options);
                            if (options.oneofs)
                                object.options = "explicitBuckets";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this BucketOptions to JSON.
                     * @function toJSON
                     * @memberof google.api.Distribution.BucketOptions
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BucketOptions.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for BucketOptions
                     * @function getTypeUrl
                     * @memberof google.api.Distribution.BucketOptions
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    BucketOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.api.Distribution.BucketOptions";
                    };
    
                    BucketOptions.Linear = (function() {
    
                        /**
                         * Properties of a Linear.
                         * @memberof google.api.Distribution.BucketOptions
                         * @interface ILinear
                         * @property {number|null} [numFiniteBuckets] Linear numFiniteBuckets
                         * @property {number|null} [width] Linear width
                         * @property {number|null} [offset] Linear offset
                         */
    
                        /**
                         * Constructs a new Linear.
                         * @memberof google.api.Distribution.BucketOptions
                         * @classdesc Represents a Linear.
                         * @implements ILinear
                         * @constructor
                         * @param {google.api.Distribution.BucketOptions.ILinear=} [properties] Properties to set
                         */
                        function Linear(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Linear numFiniteBuckets.
                         * @member {number} numFiniteBuckets
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @instance
                         */
                        Linear.prototype.numFiniteBuckets = 0;
    
                        /**
                         * Linear width.
                         * @member {number} width
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @instance
                         */
                        Linear.prototype.width = 0;
    
                        /**
                         * Linear offset.
                         * @member {number} offset
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @instance
                         */
                        Linear.prototype.offset = 0;
    
                        /**
                         * Creates a new Linear instance using the specified properties.
                         * @function create
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @static
                         * @param {google.api.Distribution.BucketOptions.ILinear=} [properties] Properties to set
                         * @returns {google.api.Distribution.BucketOptions.Linear} Linear instance
                         */
                        Linear.create = function create(properties) {
                            return new Linear(properties);
                        };
    
                        /**
                         * Encodes the specified Linear message. Does not implicitly {@link google.api.Distribution.BucketOptions.Linear.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @static
                         * @param {google.api.Distribution.BucketOptions.ILinear} message Linear message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Linear.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.numFiniteBuckets != null && Object.hasOwnProperty.call(message, "numFiniteBuckets"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.numFiniteBuckets);
                            if (message.width != null && Object.hasOwnProperty.call(message, "width"))
                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.width);
                            if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.offset);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Linear message, length delimited. Does not implicitly {@link google.api.Distribution.BucketOptions.Linear.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @static
                         * @param {google.api.Distribution.BucketOptions.ILinear} message Linear message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Linear.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Linear message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.Distribution.BucketOptions.Linear} Linear
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Linear.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Distribution.BucketOptions.Linear();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.numFiniteBuckets = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.width = reader.double();
                                        break;
                                    }
                                case 3: {
                                        message.offset = reader.double();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Linear message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.Distribution.BucketOptions.Linear} Linear
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Linear.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Linear message.
                         * @function verify
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Linear.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.numFiniteBuckets != null && message.hasOwnProperty("numFiniteBuckets"))
                                if (!$util.isInteger(message.numFiniteBuckets))
                                    return "numFiniteBuckets: integer expected";
                            if (message.width != null && message.hasOwnProperty("width"))
                                if (typeof message.width !== "number")
                                    return "width: number expected";
                            if (message.offset != null && message.hasOwnProperty("offset"))
                                if (typeof message.offset !== "number")
                                    return "offset: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a Linear message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.Distribution.BucketOptions.Linear} Linear
                         */
                        Linear.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.Distribution.BucketOptions.Linear)
                                return object;
                            var message = new $root.google.api.Distribution.BucketOptions.Linear();
                            if (object.numFiniteBuckets != null)
                                message.numFiniteBuckets = object.numFiniteBuckets | 0;
                            if (object.width != null)
                                message.width = Number(object.width);
                            if (object.offset != null)
                                message.offset = Number(object.offset);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Linear message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @static
                         * @param {google.api.Distribution.BucketOptions.Linear} message Linear
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Linear.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.numFiniteBuckets = 0;
                                object.width = 0;
                                object.offset = 0;
                            }
                            if (message.numFiniteBuckets != null && message.hasOwnProperty("numFiniteBuckets"))
                                object.numFiniteBuckets = message.numFiniteBuckets;
                            if (message.width != null && message.hasOwnProperty("width"))
                                object.width = options.json && !isFinite(message.width) ? String(message.width) : message.width;
                            if (message.offset != null && message.hasOwnProperty("offset"))
                                object.offset = options.json && !isFinite(message.offset) ? String(message.offset) : message.offset;
                            return object;
                        };
    
                        /**
                         * Converts this Linear to JSON.
                         * @function toJSON
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Linear.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Linear
                         * @function getTypeUrl
                         * @memberof google.api.Distribution.BucketOptions.Linear
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Linear.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.Distribution.BucketOptions.Linear";
                        };
    
                        return Linear;
                    })();
    
                    BucketOptions.Exponential = (function() {
    
                        /**
                         * Properties of an Exponential.
                         * @memberof google.api.Distribution.BucketOptions
                         * @interface IExponential
                         * @property {number|null} [numFiniteBuckets] Exponential numFiniteBuckets
                         * @property {number|null} [growthFactor] Exponential growthFactor
                         * @property {number|null} [scale] Exponential scale
                         */
    
                        /**
                         * Constructs a new Exponential.
                         * @memberof google.api.Distribution.BucketOptions
                         * @classdesc Represents an Exponential.
                         * @implements IExponential
                         * @constructor
                         * @param {google.api.Distribution.BucketOptions.IExponential=} [properties] Properties to set
                         */
                        function Exponential(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Exponential numFiniteBuckets.
                         * @member {number} numFiniteBuckets
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @instance
                         */
                        Exponential.prototype.numFiniteBuckets = 0;
    
                        /**
                         * Exponential growthFactor.
                         * @member {number} growthFactor
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @instance
                         */
                        Exponential.prototype.growthFactor = 0;
    
                        /**
                         * Exponential scale.
                         * @member {number} scale
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @instance
                         */
                        Exponential.prototype.scale = 0;
    
                        /**
                         * Creates a new Exponential instance using the specified properties.
                         * @function create
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @static
                         * @param {google.api.Distribution.BucketOptions.IExponential=} [properties] Properties to set
                         * @returns {google.api.Distribution.BucketOptions.Exponential} Exponential instance
                         */
                        Exponential.create = function create(properties) {
                            return new Exponential(properties);
                        };
    
                        /**
                         * Encodes the specified Exponential message. Does not implicitly {@link google.api.Distribution.BucketOptions.Exponential.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @static
                         * @param {google.api.Distribution.BucketOptions.IExponential} message Exponential message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Exponential.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.numFiniteBuckets != null && Object.hasOwnProperty.call(message, "numFiniteBuckets"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.numFiniteBuckets);
                            if (message.growthFactor != null && Object.hasOwnProperty.call(message, "growthFactor"))
                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.growthFactor);
                            if (message.scale != null && Object.hasOwnProperty.call(message, "scale"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.scale);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Exponential message, length delimited. Does not implicitly {@link google.api.Distribution.BucketOptions.Exponential.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @static
                         * @param {google.api.Distribution.BucketOptions.IExponential} message Exponential message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Exponential.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Exponential message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.Distribution.BucketOptions.Exponential} Exponential
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Exponential.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Distribution.BucketOptions.Exponential();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.numFiniteBuckets = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.growthFactor = reader.double();
                                        break;
                                    }
                                case 3: {
                                        message.scale = reader.double();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Exponential message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.Distribution.BucketOptions.Exponential} Exponential
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Exponential.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Exponential message.
                         * @function verify
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Exponential.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.numFiniteBuckets != null && message.hasOwnProperty("numFiniteBuckets"))
                                if (!$util.isInteger(message.numFiniteBuckets))
                                    return "numFiniteBuckets: integer expected";
                            if (message.growthFactor != null && message.hasOwnProperty("growthFactor"))
                                if (typeof message.growthFactor !== "number")
                                    return "growthFactor: number expected";
                            if (message.scale != null && message.hasOwnProperty("scale"))
                                if (typeof message.scale !== "number")
                                    return "scale: number expected";
                            return null;
                        };
    
                        /**
                         * Creates an Exponential message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.Distribution.BucketOptions.Exponential} Exponential
                         */
                        Exponential.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.Distribution.BucketOptions.Exponential)
                                return object;
                            var message = new $root.google.api.Distribution.BucketOptions.Exponential();
                            if (object.numFiniteBuckets != null)
                                message.numFiniteBuckets = object.numFiniteBuckets | 0;
                            if (object.growthFactor != null)
                                message.growthFactor = Number(object.growthFactor);
                            if (object.scale != null)
                                message.scale = Number(object.scale);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Exponential message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @static
                         * @param {google.api.Distribution.BucketOptions.Exponential} message Exponential
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Exponential.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.numFiniteBuckets = 0;
                                object.growthFactor = 0;
                                object.scale = 0;
                            }
                            if (message.numFiniteBuckets != null && message.hasOwnProperty("numFiniteBuckets"))
                                object.numFiniteBuckets = message.numFiniteBuckets;
                            if (message.growthFactor != null && message.hasOwnProperty("growthFactor"))
                                object.growthFactor = options.json && !isFinite(message.growthFactor) ? String(message.growthFactor) : message.growthFactor;
                            if (message.scale != null && message.hasOwnProperty("scale"))
                                object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                            return object;
                        };
    
                        /**
                         * Converts this Exponential to JSON.
                         * @function toJSON
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Exponential.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Exponential
                         * @function getTypeUrl
                         * @memberof google.api.Distribution.BucketOptions.Exponential
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Exponential.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.Distribution.BucketOptions.Exponential";
                        };
    
                        return Exponential;
                    })();
    
                    BucketOptions.Explicit = (function() {
    
                        /**
                         * Properties of an Explicit.
                         * @memberof google.api.Distribution.BucketOptions
                         * @interface IExplicit
                         * @property {Array.<number>|null} [bounds] Explicit bounds
                         */
    
                        /**
                         * Constructs a new Explicit.
                         * @memberof google.api.Distribution.BucketOptions
                         * @classdesc Represents an Explicit.
                         * @implements IExplicit
                         * @constructor
                         * @param {google.api.Distribution.BucketOptions.IExplicit=} [properties] Properties to set
                         */
                        function Explicit(properties) {
                            this.bounds = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Explicit bounds.
                         * @member {Array.<number>} bounds
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @instance
                         */
                        Explicit.prototype.bounds = $util.emptyArray;
    
                        /**
                         * Creates a new Explicit instance using the specified properties.
                         * @function create
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @static
                         * @param {google.api.Distribution.BucketOptions.IExplicit=} [properties] Properties to set
                         * @returns {google.api.Distribution.BucketOptions.Explicit} Explicit instance
                         */
                        Explicit.create = function create(properties) {
                            return new Explicit(properties);
                        };
    
                        /**
                         * Encodes the specified Explicit message. Does not implicitly {@link google.api.Distribution.BucketOptions.Explicit.verify|verify} messages.
                         * @function encode
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @static
                         * @param {google.api.Distribution.BucketOptions.IExplicit} message Explicit message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Explicit.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.bounds != null && message.bounds.length) {
                                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                for (var i = 0; i < message.bounds.length; ++i)
                                    writer.double(message.bounds[i]);
                                writer.ldelim();
                            }
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Explicit message, length delimited. Does not implicitly {@link google.api.Distribution.BucketOptions.Explicit.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @static
                         * @param {google.api.Distribution.BucketOptions.IExplicit} message Explicit message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Explicit.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Explicit message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.api.Distribution.BucketOptions.Explicit} Explicit
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Explicit.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Distribution.BucketOptions.Explicit();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.bounds && message.bounds.length))
                                            message.bounds = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.bounds.push(reader.double());
                                        } else
                                            message.bounds.push(reader.double());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Explicit message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.api.Distribution.BucketOptions.Explicit} Explicit
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Explicit.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Explicit message.
                         * @function verify
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Explicit.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.bounds != null && message.hasOwnProperty("bounds")) {
                                if (!Array.isArray(message.bounds))
                                    return "bounds: array expected";
                                for (var i = 0; i < message.bounds.length; ++i)
                                    if (typeof message.bounds[i] !== "number")
                                        return "bounds: number[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Explicit message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.api.Distribution.BucketOptions.Explicit} Explicit
                         */
                        Explicit.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.api.Distribution.BucketOptions.Explicit)
                                return object;
                            var message = new $root.google.api.Distribution.BucketOptions.Explicit();
                            if (object.bounds) {
                                if (!Array.isArray(object.bounds))
                                    throw TypeError(".google.api.Distribution.BucketOptions.Explicit.bounds: array expected");
                                message.bounds = [];
                                for (var i = 0; i < object.bounds.length; ++i)
                                    message.bounds[i] = Number(object.bounds[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Explicit message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @static
                         * @param {google.api.Distribution.BucketOptions.Explicit} message Explicit
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Explicit.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.bounds = [];
                            if (message.bounds && message.bounds.length) {
                                object.bounds = [];
                                for (var j = 0; j < message.bounds.length; ++j)
                                    object.bounds[j] = options.json && !isFinite(message.bounds[j]) ? String(message.bounds[j]) : message.bounds[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Explicit to JSON.
                         * @function toJSON
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Explicit.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Explicit
                         * @function getTypeUrl
                         * @memberof google.api.Distribution.BucketOptions.Explicit
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Explicit.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.api.Distribution.BucketOptions.Explicit";
                        };
    
                        return Explicit;
                    })();
    
                    return BucketOptions;
                })();
    
                Distribution.Exemplar = (function() {
    
                    /**
                     * Properties of an Exemplar.
                     * @memberof google.api.Distribution
                     * @interface IExemplar
                     * @property {number|null} [value] Exemplar value
                     * @property {google.protobuf.ITimestamp|null} [timestamp] Exemplar timestamp
                     * @property {Array.<google.protobuf.IAny>|null} [attachments] Exemplar attachments
                     */
    
                    /**
                     * Constructs a new Exemplar.
                     * @memberof google.api.Distribution
                     * @classdesc Represents an Exemplar.
                     * @implements IExemplar
                     * @constructor
                     * @param {google.api.Distribution.IExemplar=} [properties] Properties to set
                     */
                    function Exemplar(properties) {
                        this.attachments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Exemplar value.
                     * @member {number} value
                     * @memberof google.api.Distribution.Exemplar
                     * @instance
                     */
                    Exemplar.prototype.value = 0;
    
                    /**
                     * Exemplar timestamp.
                     * @member {google.protobuf.ITimestamp|null|undefined} timestamp
                     * @memberof google.api.Distribution.Exemplar
                     * @instance
                     */
                    Exemplar.prototype.timestamp = null;
    
                    /**
                     * Exemplar attachments.
                     * @member {Array.<google.protobuf.IAny>} attachments
                     * @memberof google.api.Distribution.Exemplar
                     * @instance
                     */
                    Exemplar.prototype.attachments = $util.emptyArray;
    
                    /**
                     * Creates a new Exemplar instance using the specified properties.
                     * @function create
                     * @memberof google.api.Distribution.Exemplar
                     * @static
                     * @param {google.api.Distribution.IExemplar=} [properties] Properties to set
                     * @returns {google.api.Distribution.Exemplar} Exemplar instance
                     */
                    Exemplar.create = function create(properties) {
                        return new Exemplar(properties);
                    };
    
                    /**
                     * Encodes the specified Exemplar message. Does not implicitly {@link google.api.Distribution.Exemplar.verify|verify} messages.
                     * @function encode
                     * @memberof google.api.Distribution.Exemplar
                     * @static
                     * @param {google.api.Distribution.IExemplar} message Exemplar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Exemplar.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                            writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.attachments != null && message.attachments.length)
                            for (var i = 0; i < message.attachments.length; ++i)
                                $root.google.protobuf.Any.encode(message.attachments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Exemplar message, length delimited. Does not implicitly {@link google.api.Distribution.Exemplar.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.api.Distribution.Exemplar
                     * @static
                     * @param {google.api.Distribution.IExemplar} message Exemplar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Exemplar.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Exemplar message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.api.Distribution.Exemplar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.api.Distribution.Exemplar} Exemplar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Exemplar.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Distribution.Exemplar();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.value = reader.double();
                                    break;
                                }
                            case 2: {
                                    message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    if (!(message.attachments && message.attachments.length))
                                        message.attachments = [];
                                    message.attachments.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Exemplar message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.api.Distribution.Exemplar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.api.Distribution.Exemplar} Exemplar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Exemplar.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Exemplar message.
                     * @function verify
                     * @memberof google.api.Distribution.Exemplar
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Exemplar.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (typeof message.value !== "number")
                                return "value: number expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                            if (error)
                                return "timestamp." + error;
                        }
                        if (message.attachments != null && message.hasOwnProperty("attachments")) {
                            if (!Array.isArray(message.attachments))
                                return "attachments: array expected";
                            for (var i = 0; i < message.attachments.length; ++i) {
                                var error = $root.google.protobuf.Any.verify(message.attachments[i]);
                                if (error)
                                    return "attachments." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Exemplar message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.api.Distribution.Exemplar
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.api.Distribution.Exemplar} Exemplar
                     */
                    Exemplar.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.api.Distribution.Exemplar)
                            return object;
                        var message = new $root.google.api.Distribution.Exemplar();
                        if (object.value != null)
                            message.value = Number(object.value);
                        if (object.timestamp != null) {
                            if (typeof object.timestamp !== "object")
                                throw TypeError(".google.api.Distribution.Exemplar.timestamp: object expected");
                            message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                        }
                        if (object.attachments) {
                            if (!Array.isArray(object.attachments))
                                throw TypeError(".google.api.Distribution.Exemplar.attachments: array expected");
                            message.attachments = [];
                            for (var i = 0; i < object.attachments.length; ++i) {
                                if (typeof object.attachments[i] !== "object")
                                    throw TypeError(".google.api.Distribution.Exemplar.attachments: object expected");
                                message.attachments[i] = $root.google.protobuf.Any.fromObject(object.attachments[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Exemplar message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.api.Distribution.Exemplar
                     * @static
                     * @param {google.api.Distribution.Exemplar} message Exemplar
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Exemplar.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.attachments = [];
                        if (options.defaults) {
                            object.value = 0;
                            object.timestamp = null;
                        }
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                        if (message.attachments && message.attachments.length) {
                            object.attachments = [];
                            for (var j = 0; j < message.attachments.length; ++j)
                                object.attachments[j] = $root.google.protobuf.Any.toObject(message.attachments[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Exemplar to JSON.
                     * @function toJSON
                     * @memberof google.api.Distribution.Exemplar
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Exemplar.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Exemplar
                     * @function getTypeUrl
                     * @memberof google.api.Distribution.Exemplar
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Exemplar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.api.Distribution.Exemplar";
                    };
    
                    return Exemplar;
                })();
    
                return Distribution;
            })();
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.fullyDecodeReservedExpansion = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Http
                 * @function getTypeUrl
                 * @memberof google.api.Http
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Http";
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.get = reader.string();
                                break;
                            }
                        case 3: {
                                message.put = reader.string();
                                break;
                            }
                        case 4: {
                                message.post = reader.string();
                                break;
                            }
                        case 5: {
                                message["delete"] = reader.string();
                                break;
                            }
                        case 6: {
                                message.patch = reader.string();
                                break;
                            }
                        case 8: {
                                message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.body = reader.string();
                                break;
                            }
                        case 12: {
                                message.responseBody = reader.string();
                                break;
                            }
                        case 11: {
                                if (!(message.additionalBindings && message.additionalBindings.length))
                                    message.additionalBindings = [];
                                message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for HttpRule
                 * @function getTypeUrl
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.HttpRule";
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.string();
                                break;
                            }
                        case 2: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CustomHttpPattern
                 * @function getTypeUrl
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CustomHttpPattern";
                };
    
                return CustomHttpPattern;
            })();
    
            return api;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.code = reader.int32();
                                break;
                            }
                        case 2: {
                                message.message = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.details && message.details.length))
                                    message.details = [];
                                message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Status
                 * @function getTypeUrl
                 * @memberof google.rpc.Status
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.rpc.Status";
                };
    
                return Status;
            })();
    
            rpc.context = (function() {
    
                /**
                 * Namespace context.
                 * @memberof google.rpc
                 * @namespace
                 */
                var context = {};
    
                context.AttributeContext = (function() {
    
                    /**
                     * Properties of an AttributeContext.
                     * @memberof google.rpc.context
                     * @interface IAttributeContext
                     * @property {google.rpc.context.AttributeContext.IPeer|null} [origin] AttributeContext origin
                     * @property {google.rpc.context.AttributeContext.IPeer|null} [source] AttributeContext source
                     * @property {google.rpc.context.AttributeContext.IPeer|null} [destination] AttributeContext destination
                     * @property {google.rpc.context.AttributeContext.IRequest|null} [request] AttributeContext request
                     * @property {google.rpc.context.AttributeContext.IResponse|null} [response] AttributeContext response
                     * @property {google.rpc.context.AttributeContext.IResource|null} [resource] AttributeContext resource
                     * @property {google.rpc.context.AttributeContext.IApi|null} [api] AttributeContext api
                     * @property {Array.<google.protobuf.IAny>|null} [extensions] AttributeContext extensions
                     */
    
                    /**
                     * Constructs a new AttributeContext.
                     * @memberof google.rpc.context
                     * @classdesc Represents an AttributeContext.
                     * @implements IAttributeContext
                     * @constructor
                     * @param {google.rpc.context.IAttributeContext=} [properties] Properties to set
                     */
                    function AttributeContext(properties) {
                        this.extensions = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AttributeContext origin.
                     * @member {google.rpc.context.AttributeContext.IPeer|null|undefined} origin
                     * @memberof google.rpc.context.AttributeContext
                     * @instance
                     */
                    AttributeContext.prototype.origin = null;
    
                    /**
                     * AttributeContext source.
                     * @member {google.rpc.context.AttributeContext.IPeer|null|undefined} source
                     * @memberof google.rpc.context.AttributeContext
                     * @instance
                     */
                    AttributeContext.prototype.source = null;
    
                    /**
                     * AttributeContext destination.
                     * @member {google.rpc.context.AttributeContext.IPeer|null|undefined} destination
                     * @memberof google.rpc.context.AttributeContext
                     * @instance
                     */
                    AttributeContext.prototype.destination = null;
    
                    /**
                     * AttributeContext request.
                     * @member {google.rpc.context.AttributeContext.IRequest|null|undefined} request
                     * @memberof google.rpc.context.AttributeContext
                     * @instance
                     */
                    AttributeContext.prototype.request = null;
    
                    /**
                     * AttributeContext response.
                     * @member {google.rpc.context.AttributeContext.IResponse|null|undefined} response
                     * @memberof google.rpc.context.AttributeContext
                     * @instance
                     */
                    AttributeContext.prototype.response = null;
    
                    /**
                     * AttributeContext resource.
                     * @member {google.rpc.context.AttributeContext.IResource|null|undefined} resource
                     * @memberof google.rpc.context.AttributeContext
                     * @instance
                     */
                    AttributeContext.prototype.resource = null;
    
                    /**
                     * AttributeContext api.
                     * @member {google.rpc.context.AttributeContext.IApi|null|undefined} api
                     * @memberof google.rpc.context.AttributeContext
                     * @instance
                     */
                    AttributeContext.prototype.api = null;
    
                    /**
                     * AttributeContext extensions.
                     * @member {Array.<google.protobuf.IAny>} extensions
                     * @memberof google.rpc.context.AttributeContext
                     * @instance
                     */
                    AttributeContext.prototype.extensions = $util.emptyArray;
    
                    /**
                     * Creates a new AttributeContext instance using the specified properties.
                     * @function create
                     * @memberof google.rpc.context.AttributeContext
                     * @static
                     * @param {google.rpc.context.IAttributeContext=} [properties] Properties to set
                     * @returns {google.rpc.context.AttributeContext} AttributeContext instance
                     */
                    AttributeContext.create = function create(properties) {
                        return new AttributeContext(properties);
                    };
    
                    /**
                     * Encodes the specified AttributeContext message. Does not implicitly {@link google.rpc.context.AttributeContext.verify|verify} messages.
                     * @function encode
                     * @memberof google.rpc.context.AttributeContext
                     * @static
                     * @param {google.rpc.context.IAttributeContext} message AttributeContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AttributeContext.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                            $root.google.rpc.context.AttributeContext.Peer.encode(message.source, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                            $root.google.rpc.context.AttributeContext.Peer.encode(message.destination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.request != null && Object.hasOwnProperty.call(message, "request"))
                            $root.google.rpc.context.AttributeContext.Request.encode(message.request, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                            $root.google.rpc.context.AttributeContext.Response.encode(message.response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                            $root.google.rpc.context.AttributeContext.Resource.encode(message.resource, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.api != null && Object.hasOwnProperty.call(message, "api"))
                            $root.google.rpc.context.AttributeContext.Api.encode(message.api, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.origin != null && Object.hasOwnProperty.call(message, "origin"))
                            $root.google.rpc.context.AttributeContext.Peer.encode(message.origin, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.extensions != null && message.extensions.length)
                            for (var i = 0; i < message.extensions.length; ++i)
                                $root.google.protobuf.Any.encode(message.extensions[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AttributeContext message, length delimited. Does not implicitly {@link google.rpc.context.AttributeContext.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.rpc.context.AttributeContext
                     * @static
                     * @param {google.rpc.context.IAttributeContext} message AttributeContext message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AttributeContext.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AttributeContext message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.rpc.context.AttributeContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.rpc.context.AttributeContext} AttributeContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AttributeContext.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.context.AttributeContext();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 7: {
                                    message.origin = $root.google.rpc.context.AttributeContext.Peer.decode(reader, reader.uint32());
                                    break;
                                }
                            case 1: {
                                    message.source = $root.google.rpc.context.AttributeContext.Peer.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.destination = $root.google.rpc.context.AttributeContext.Peer.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.request = $root.google.rpc.context.AttributeContext.Request.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.response = $root.google.rpc.context.AttributeContext.Response.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.resource = $root.google.rpc.context.AttributeContext.Resource.decode(reader, reader.uint32());
                                    break;
                                }
                            case 6: {
                                    message.api = $root.google.rpc.context.AttributeContext.Api.decode(reader, reader.uint32());
                                    break;
                                }
                            case 8: {
                                    if (!(message.extensions && message.extensions.length))
                                        message.extensions = [];
                                    message.extensions.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AttributeContext message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.rpc.context.AttributeContext
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.rpc.context.AttributeContext} AttributeContext
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AttributeContext.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AttributeContext message.
                     * @function verify
                     * @memberof google.rpc.context.AttributeContext
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AttributeContext.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.origin != null && message.hasOwnProperty("origin")) {
                            var error = $root.google.rpc.context.AttributeContext.Peer.verify(message.origin);
                            if (error)
                                return "origin." + error;
                        }
                        if (message.source != null && message.hasOwnProperty("source")) {
                            var error = $root.google.rpc.context.AttributeContext.Peer.verify(message.source);
                            if (error)
                                return "source." + error;
                        }
                        if (message.destination != null && message.hasOwnProperty("destination")) {
                            var error = $root.google.rpc.context.AttributeContext.Peer.verify(message.destination);
                            if (error)
                                return "destination." + error;
                        }
                        if (message.request != null && message.hasOwnProperty("request")) {
                            var error = $root.google.rpc.context.AttributeContext.Request.verify(message.request);
                            if (error)
                                return "request." + error;
                        }
                        if (message.response != null && message.hasOwnProperty("response")) {
                            var error = $root.google.rpc.context.AttributeContext.Response.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                        if (message.resource != null && message.hasOwnProperty("resource")) {
                            var error = $root.google.rpc.context.AttributeContext.Resource.verify(message.resource);
                            if (error)
                                return "resource." + error;
                        }
                        if (message.api != null && message.hasOwnProperty("api")) {
                            var error = $root.google.rpc.context.AttributeContext.Api.verify(message.api);
                            if (error)
                                return "api." + error;
                        }
                        if (message.extensions != null && message.hasOwnProperty("extensions")) {
                            if (!Array.isArray(message.extensions))
                                return "extensions: array expected";
                            for (var i = 0; i < message.extensions.length; ++i) {
                                var error = $root.google.protobuf.Any.verify(message.extensions[i]);
                                if (error)
                                    return "extensions." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AttributeContext message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.rpc.context.AttributeContext
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.rpc.context.AttributeContext} AttributeContext
                     */
                    AttributeContext.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.rpc.context.AttributeContext)
                            return object;
                        var message = new $root.google.rpc.context.AttributeContext();
                        if (object.origin != null) {
                            if (typeof object.origin !== "object")
                                throw TypeError(".google.rpc.context.AttributeContext.origin: object expected");
                            message.origin = $root.google.rpc.context.AttributeContext.Peer.fromObject(object.origin);
                        }
                        if (object.source != null) {
                            if (typeof object.source !== "object")
                                throw TypeError(".google.rpc.context.AttributeContext.source: object expected");
                            message.source = $root.google.rpc.context.AttributeContext.Peer.fromObject(object.source);
                        }
                        if (object.destination != null) {
                            if (typeof object.destination !== "object")
                                throw TypeError(".google.rpc.context.AttributeContext.destination: object expected");
                            message.destination = $root.google.rpc.context.AttributeContext.Peer.fromObject(object.destination);
                        }
                        if (object.request != null) {
                            if (typeof object.request !== "object")
                                throw TypeError(".google.rpc.context.AttributeContext.request: object expected");
                            message.request = $root.google.rpc.context.AttributeContext.Request.fromObject(object.request);
                        }
                        if (object.response != null) {
                            if (typeof object.response !== "object")
                                throw TypeError(".google.rpc.context.AttributeContext.response: object expected");
                            message.response = $root.google.rpc.context.AttributeContext.Response.fromObject(object.response);
                        }
                        if (object.resource != null) {
                            if (typeof object.resource !== "object")
                                throw TypeError(".google.rpc.context.AttributeContext.resource: object expected");
                            message.resource = $root.google.rpc.context.AttributeContext.Resource.fromObject(object.resource);
                        }
                        if (object.api != null) {
                            if (typeof object.api !== "object")
                                throw TypeError(".google.rpc.context.AttributeContext.api: object expected");
                            message.api = $root.google.rpc.context.AttributeContext.Api.fromObject(object.api);
                        }
                        if (object.extensions) {
                            if (!Array.isArray(object.extensions))
                                throw TypeError(".google.rpc.context.AttributeContext.extensions: array expected");
                            message.extensions = [];
                            for (var i = 0; i < object.extensions.length; ++i) {
                                if (typeof object.extensions[i] !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.extensions: object expected");
                                message.extensions[i] = $root.google.protobuf.Any.fromObject(object.extensions[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AttributeContext message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.rpc.context.AttributeContext
                     * @static
                     * @param {google.rpc.context.AttributeContext} message AttributeContext
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AttributeContext.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.extensions = [];
                        if (options.defaults) {
                            object.source = null;
                            object.destination = null;
                            object.request = null;
                            object.response = null;
                            object.resource = null;
                            object.api = null;
                            object.origin = null;
                        }
                        if (message.source != null && message.hasOwnProperty("source"))
                            object.source = $root.google.rpc.context.AttributeContext.Peer.toObject(message.source, options);
                        if (message.destination != null && message.hasOwnProperty("destination"))
                            object.destination = $root.google.rpc.context.AttributeContext.Peer.toObject(message.destination, options);
                        if (message.request != null && message.hasOwnProperty("request"))
                            object.request = $root.google.rpc.context.AttributeContext.Request.toObject(message.request, options);
                        if (message.response != null && message.hasOwnProperty("response"))
                            object.response = $root.google.rpc.context.AttributeContext.Response.toObject(message.response, options);
                        if (message.resource != null && message.hasOwnProperty("resource"))
                            object.resource = $root.google.rpc.context.AttributeContext.Resource.toObject(message.resource, options);
                        if (message.api != null && message.hasOwnProperty("api"))
                            object.api = $root.google.rpc.context.AttributeContext.Api.toObject(message.api, options);
                        if (message.origin != null && message.hasOwnProperty("origin"))
                            object.origin = $root.google.rpc.context.AttributeContext.Peer.toObject(message.origin, options);
                        if (message.extensions && message.extensions.length) {
                            object.extensions = [];
                            for (var j = 0; j < message.extensions.length; ++j)
                                object.extensions[j] = $root.google.protobuf.Any.toObject(message.extensions[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this AttributeContext to JSON.
                     * @function toJSON
                     * @memberof google.rpc.context.AttributeContext
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AttributeContext.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AttributeContext
                     * @function getTypeUrl
                     * @memberof google.rpc.context.AttributeContext
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AttributeContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.rpc.context.AttributeContext";
                    };
    
                    AttributeContext.Peer = (function() {
    
                        /**
                         * Properties of a Peer.
                         * @memberof google.rpc.context.AttributeContext
                         * @interface IPeer
                         * @property {string|null} [ip] Peer ip
                         * @property {number|Long|null} [port] Peer port
                         * @property {Object.<string,string>|null} [labels] Peer labels
                         * @property {string|null} [principal] Peer principal
                         * @property {string|null} [regionCode] Peer regionCode
                         */
    
                        /**
                         * Constructs a new Peer.
                         * @memberof google.rpc.context.AttributeContext
                         * @classdesc Represents a Peer.
                         * @implements IPeer
                         * @constructor
                         * @param {google.rpc.context.AttributeContext.IPeer=} [properties] Properties to set
                         */
                        function Peer(properties) {
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Peer ip.
                         * @member {string} ip
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @instance
                         */
                        Peer.prototype.ip = "";
    
                        /**
                         * Peer port.
                         * @member {number|Long} port
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @instance
                         */
                        Peer.prototype.port = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Peer labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @instance
                         */
                        Peer.prototype.labels = $util.emptyObject;
    
                        /**
                         * Peer principal.
                         * @member {string} principal
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @instance
                         */
                        Peer.prototype.principal = "";
    
                        /**
                         * Peer regionCode.
                         * @member {string} regionCode
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @instance
                         */
                        Peer.prototype.regionCode = "";
    
                        /**
                         * Creates a new Peer instance using the specified properties.
                         * @function create
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @static
                         * @param {google.rpc.context.AttributeContext.IPeer=} [properties] Properties to set
                         * @returns {google.rpc.context.AttributeContext.Peer} Peer instance
                         */
                        Peer.create = function create(properties) {
                            return new Peer(properties);
                        };
    
                        /**
                         * Encodes the specified Peer message. Does not implicitly {@link google.rpc.context.AttributeContext.Peer.verify|verify} messages.
                         * @function encode
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @static
                         * @param {google.rpc.context.AttributeContext.IPeer} message Peer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Peer.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.ip != null && Object.hasOwnProperty.call(message, "ip"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.ip);
                            if (message.port != null && Object.hasOwnProperty.call(message, "port"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.port);
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.principal != null && Object.hasOwnProperty.call(message, "principal"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.principal);
                            if (message.regionCode != null && Object.hasOwnProperty.call(message, "regionCode"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.regionCode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Peer message, length delimited. Does not implicitly {@link google.rpc.context.AttributeContext.Peer.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @static
                         * @param {google.rpc.context.AttributeContext.IPeer} message Peer message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Peer.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Peer message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.rpc.context.AttributeContext.Peer} Peer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Peer.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.context.AttributeContext.Peer(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.ip = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.port = reader.int64();
                                        break;
                                    }
                                case 6: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 7: {
                                        message.principal = reader.string();
                                        break;
                                    }
                                case 8: {
                                        message.regionCode = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Peer message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.rpc.context.AttributeContext.Peer} Peer
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Peer.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Peer message.
                         * @function verify
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Peer.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.ip != null && message.hasOwnProperty("ip"))
                                if (!$util.isString(message.ip))
                                    return "ip: string expected";
                            if (message.port != null && message.hasOwnProperty("port"))
                                if (!$util.isInteger(message.port) && !(message.port && $util.isInteger(message.port.low) && $util.isInteger(message.port.high)))
                                    return "port: integer|Long expected";
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.principal != null && message.hasOwnProperty("principal"))
                                if (!$util.isString(message.principal))
                                    return "principal: string expected";
                            if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                if (!$util.isString(message.regionCode))
                                    return "regionCode: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Peer message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.rpc.context.AttributeContext.Peer} Peer
                         */
                        Peer.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.rpc.context.AttributeContext.Peer)
                                return object;
                            var message = new $root.google.rpc.context.AttributeContext.Peer();
                            if (object.ip != null)
                                message.ip = String(object.ip);
                            if (object.port != null)
                                if ($util.Long)
                                    (message.port = $util.Long.fromValue(object.port)).unsigned = false;
                                else if (typeof object.port === "string")
                                    message.port = parseInt(object.port, 10);
                                else if (typeof object.port === "number")
                                    message.port = object.port;
                                else if (typeof object.port === "object")
                                    message.port = new $util.LongBits(object.port.low >>> 0, object.port.high >>> 0).toNumber();
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Peer.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.principal != null)
                                message.principal = String(object.principal);
                            if (object.regionCode != null)
                                message.regionCode = String(object.regionCode);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Peer message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @static
                         * @param {google.rpc.context.AttributeContext.Peer} message Peer
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Peer.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.ip = "";
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.port = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.port = options.longs === String ? "0" : 0;
                                object.principal = "";
                                object.regionCode = "";
                            }
                            if (message.ip != null && message.hasOwnProperty("ip"))
                                object.ip = message.ip;
                            if (message.port != null && message.hasOwnProperty("port"))
                                if (typeof message.port === "number")
                                    object.port = options.longs === String ? String(message.port) : message.port;
                                else
                                    object.port = options.longs === String ? $util.Long.prototype.toString.call(message.port) : options.longs === Number ? new $util.LongBits(message.port.low >>> 0, message.port.high >>> 0).toNumber() : message.port;
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.principal != null && message.hasOwnProperty("principal"))
                                object.principal = message.principal;
                            if (message.regionCode != null && message.hasOwnProperty("regionCode"))
                                object.regionCode = message.regionCode;
                            return object;
                        };
    
                        /**
                         * Converts this Peer to JSON.
                         * @function toJSON
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Peer.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Peer
                         * @function getTypeUrl
                         * @memberof google.rpc.context.AttributeContext.Peer
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Peer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.rpc.context.AttributeContext.Peer";
                        };
    
                        return Peer;
                    })();
    
                    AttributeContext.Api = (function() {
    
                        /**
                         * Properties of an Api.
                         * @memberof google.rpc.context.AttributeContext
                         * @interface IApi
                         * @property {string|null} [service] Api service
                         * @property {string|null} [operation] Api operation
                         * @property {string|null} [protocol] Api protocol
                         * @property {string|null} [version] Api version
                         */
    
                        /**
                         * Constructs a new Api.
                         * @memberof google.rpc.context.AttributeContext
                         * @classdesc Represents an Api.
                         * @implements IApi
                         * @constructor
                         * @param {google.rpc.context.AttributeContext.IApi=} [properties] Properties to set
                         */
                        function Api(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Api service.
                         * @member {string} service
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @instance
                         */
                        Api.prototype.service = "";
    
                        /**
                         * Api operation.
                         * @member {string} operation
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @instance
                         */
                        Api.prototype.operation = "";
    
                        /**
                         * Api protocol.
                         * @member {string} protocol
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @instance
                         */
                        Api.prototype.protocol = "";
    
                        /**
                         * Api version.
                         * @member {string} version
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @instance
                         */
                        Api.prototype.version = "";
    
                        /**
                         * Creates a new Api instance using the specified properties.
                         * @function create
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @static
                         * @param {google.rpc.context.AttributeContext.IApi=} [properties] Properties to set
                         * @returns {google.rpc.context.AttributeContext.Api} Api instance
                         */
                        Api.create = function create(properties) {
                            return new Api(properties);
                        };
    
                        /**
                         * Encodes the specified Api message. Does not implicitly {@link google.rpc.context.AttributeContext.Api.verify|verify} messages.
                         * @function encode
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @static
                         * @param {google.rpc.context.AttributeContext.IApi} message Api message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Api.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.service);
                            if (message.operation != null && Object.hasOwnProperty.call(message, "operation"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.operation);
                            if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.protocol);
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.version);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Api message, length delimited. Does not implicitly {@link google.rpc.context.AttributeContext.Api.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @static
                         * @param {google.rpc.context.AttributeContext.IApi} message Api message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Api.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Api message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.rpc.context.AttributeContext.Api} Api
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Api.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.context.AttributeContext.Api();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.service = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.operation = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.protocol = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.version = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Api message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.rpc.context.AttributeContext.Api} Api
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Api.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Api message.
                         * @function verify
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Api.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.service != null && message.hasOwnProperty("service"))
                                if (!$util.isString(message.service))
                                    return "service: string expected";
                            if (message.operation != null && message.hasOwnProperty("operation"))
                                if (!$util.isString(message.operation))
                                    return "operation: string expected";
                            if (message.protocol != null && message.hasOwnProperty("protocol"))
                                if (!$util.isString(message.protocol))
                                    return "protocol: string expected";
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an Api message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.rpc.context.AttributeContext.Api} Api
                         */
                        Api.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.rpc.context.AttributeContext.Api)
                                return object;
                            var message = new $root.google.rpc.context.AttributeContext.Api();
                            if (object.service != null)
                                message.service = String(object.service);
                            if (object.operation != null)
                                message.operation = String(object.operation);
                            if (object.protocol != null)
                                message.protocol = String(object.protocol);
                            if (object.version != null)
                                message.version = String(object.version);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Api message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @static
                         * @param {google.rpc.context.AttributeContext.Api} message Api
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Api.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.service = "";
                                object.operation = "";
                                object.protocol = "";
                                object.version = "";
                            }
                            if (message.service != null && message.hasOwnProperty("service"))
                                object.service = message.service;
                            if (message.operation != null && message.hasOwnProperty("operation"))
                                object.operation = message.operation;
                            if (message.protocol != null && message.hasOwnProperty("protocol"))
                                object.protocol = message.protocol;
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            return object;
                        };
    
                        /**
                         * Converts this Api to JSON.
                         * @function toJSON
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Api.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Api
                         * @function getTypeUrl
                         * @memberof google.rpc.context.AttributeContext.Api
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Api.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.rpc.context.AttributeContext.Api";
                        };
    
                        return Api;
                    })();
    
                    AttributeContext.Auth = (function() {
    
                        /**
                         * Properties of an Auth.
                         * @memberof google.rpc.context.AttributeContext
                         * @interface IAuth
                         * @property {string|null} [principal] Auth principal
                         * @property {Array.<string>|null} [audiences] Auth audiences
                         * @property {string|null} [presenter] Auth presenter
                         * @property {google.protobuf.IStruct|null} [claims] Auth claims
                         * @property {Array.<string>|null} [accessLevels] Auth accessLevels
                         */
    
                        /**
                         * Constructs a new Auth.
                         * @memberof google.rpc.context.AttributeContext
                         * @classdesc Represents an Auth.
                         * @implements IAuth
                         * @constructor
                         * @param {google.rpc.context.AttributeContext.IAuth=} [properties] Properties to set
                         */
                        function Auth(properties) {
                            this.audiences = [];
                            this.accessLevels = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Auth principal.
                         * @member {string} principal
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @instance
                         */
                        Auth.prototype.principal = "";
    
                        /**
                         * Auth audiences.
                         * @member {Array.<string>} audiences
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @instance
                         */
                        Auth.prototype.audiences = $util.emptyArray;
    
                        /**
                         * Auth presenter.
                         * @member {string} presenter
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @instance
                         */
                        Auth.prototype.presenter = "";
    
                        /**
                         * Auth claims.
                         * @member {google.protobuf.IStruct|null|undefined} claims
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @instance
                         */
                        Auth.prototype.claims = null;
    
                        /**
                         * Auth accessLevels.
                         * @member {Array.<string>} accessLevels
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @instance
                         */
                        Auth.prototype.accessLevels = $util.emptyArray;
    
                        /**
                         * Creates a new Auth instance using the specified properties.
                         * @function create
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @static
                         * @param {google.rpc.context.AttributeContext.IAuth=} [properties] Properties to set
                         * @returns {google.rpc.context.AttributeContext.Auth} Auth instance
                         */
                        Auth.create = function create(properties) {
                            return new Auth(properties);
                        };
    
                        /**
                         * Encodes the specified Auth message. Does not implicitly {@link google.rpc.context.AttributeContext.Auth.verify|verify} messages.
                         * @function encode
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @static
                         * @param {google.rpc.context.AttributeContext.IAuth} message Auth message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Auth.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.principal != null && Object.hasOwnProperty.call(message, "principal"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.principal);
                            if (message.audiences != null && message.audiences.length)
                                for (var i = 0; i < message.audiences.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.audiences[i]);
                            if (message.presenter != null && Object.hasOwnProperty.call(message, "presenter"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.presenter);
                            if (message.claims != null && Object.hasOwnProperty.call(message, "claims"))
                                $root.google.protobuf.Struct.encode(message.claims, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.accessLevels != null && message.accessLevels.length)
                                for (var i = 0; i < message.accessLevels.length; ++i)
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.accessLevels[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Auth message, length delimited. Does not implicitly {@link google.rpc.context.AttributeContext.Auth.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @static
                         * @param {google.rpc.context.AttributeContext.IAuth} message Auth message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Auth.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Auth message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.rpc.context.AttributeContext.Auth} Auth
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Auth.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.context.AttributeContext.Auth();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.principal = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.audiences && message.audiences.length))
                                            message.audiences = [];
                                        message.audiences.push(reader.string());
                                        break;
                                    }
                                case 3: {
                                        message.presenter = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.claims = $root.google.protobuf.Struct.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        if (!(message.accessLevels && message.accessLevels.length))
                                            message.accessLevels = [];
                                        message.accessLevels.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Auth message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.rpc.context.AttributeContext.Auth} Auth
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Auth.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Auth message.
                         * @function verify
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Auth.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.principal != null && message.hasOwnProperty("principal"))
                                if (!$util.isString(message.principal))
                                    return "principal: string expected";
                            if (message.audiences != null && message.hasOwnProperty("audiences")) {
                                if (!Array.isArray(message.audiences))
                                    return "audiences: array expected";
                                for (var i = 0; i < message.audiences.length; ++i)
                                    if (!$util.isString(message.audiences[i]))
                                        return "audiences: string[] expected";
                            }
                            if (message.presenter != null && message.hasOwnProperty("presenter"))
                                if (!$util.isString(message.presenter))
                                    return "presenter: string expected";
                            if (message.claims != null && message.hasOwnProperty("claims")) {
                                var error = $root.google.protobuf.Struct.verify(message.claims);
                                if (error)
                                    return "claims." + error;
                            }
                            if (message.accessLevels != null && message.hasOwnProperty("accessLevels")) {
                                if (!Array.isArray(message.accessLevels))
                                    return "accessLevels: array expected";
                                for (var i = 0; i < message.accessLevels.length; ++i)
                                    if (!$util.isString(message.accessLevels[i]))
                                        return "accessLevels: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Auth message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.rpc.context.AttributeContext.Auth} Auth
                         */
                        Auth.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.rpc.context.AttributeContext.Auth)
                                return object;
                            var message = new $root.google.rpc.context.AttributeContext.Auth();
                            if (object.principal != null)
                                message.principal = String(object.principal);
                            if (object.audiences) {
                                if (!Array.isArray(object.audiences))
                                    throw TypeError(".google.rpc.context.AttributeContext.Auth.audiences: array expected");
                                message.audiences = [];
                                for (var i = 0; i < object.audiences.length; ++i)
                                    message.audiences[i] = String(object.audiences[i]);
                            }
                            if (object.presenter != null)
                                message.presenter = String(object.presenter);
                            if (object.claims != null) {
                                if (typeof object.claims !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Auth.claims: object expected");
                                message.claims = $root.google.protobuf.Struct.fromObject(object.claims);
                            }
                            if (object.accessLevels) {
                                if (!Array.isArray(object.accessLevels))
                                    throw TypeError(".google.rpc.context.AttributeContext.Auth.accessLevels: array expected");
                                message.accessLevels = [];
                                for (var i = 0; i < object.accessLevels.length; ++i)
                                    message.accessLevels[i] = String(object.accessLevels[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Auth message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @static
                         * @param {google.rpc.context.AttributeContext.Auth} message Auth
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Auth.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.audiences = [];
                                object.accessLevels = [];
                            }
                            if (options.defaults) {
                                object.principal = "";
                                object.presenter = "";
                                object.claims = null;
                            }
                            if (message.principal != null && message.hasOwnProperty("principal"))
                                object.principal = message.principal;
                            if (message.audiences && message.audiences.length) {
                                object.audiences = [];
                                for (var j = 0; j < message.audiences.length; ++j)
                                    object.audiences[j] = message.audiences[j];
                            }
                            if (message.presenter != null && message.hasOwnProperty("presenter"))
                                object.presenter = message.presenter;
                            if (message.claims != null && message.hasOwnProperty("claims"))
                                object.claims = $root.google.protobuf.Struct.toObject(message.claims, options);
                            if (message.accessLevels && message.accessLevels.length) {
                                object.accessLevels = [];
                                for (var j = 0; j < message.accessLevels.length; ++j)
                                    object.accessLevels[j] = message.accessLevels[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Auth to JSON.
                         * @function toJSON
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Auth.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Auth
                         * @function getTypeUrl
                         * @memberof google.rpc.context.AttributeContext.Auth
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Auth.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.rpc.context.AttributeContext.Auth";
                        };
    
                        return Auth;
                    })();
    
                    AttributeContext.Request = (function() {
    
                        /**
                         * Properties of a Request.
                         * @memberof google.rpc.context.AttributeContext
                         * @interface IRequest
                         * @property {string|null} [id] Request id
                         * @property {string|null} [method] Request method
                         * @property {Object.<string,string>|null} [headers] Request headers
                         * @property {string|null} [path] Request path
                         * @property {string|null} [host] Request host
                         * @property {string|null} [scheme] Request scheme
                         * @property {string|null} [query] Request query
                         * @property {google.protobuf.ITimestamp|null} [time] Request time
                         * @property {number|Long|null} [size] Request size
                         * @property {string|null} [protocol] Request protocol
                         * @property {string|null} [reason] Request reason
                         * @property {google.rpc.context.AttributeContext.IAuth|null} [auth] Request auth
                         */
    
                        /**
                         * Constructs a new Request.
                         * @memberof google.rpc.context.AttributeContext
                         * @classdesc Represents a Request.
                         * @implements IRequest
                         * @constructor
                         * @param {google.rpc.context.AttributeContext.IRequest=} [properties] Properties to set
                         */
                        function Request(properties) {
                            this.headers = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Request id.
                         * @member {string} id
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.id = "";
    
                        /**
                         * Request method.
                         * @member {string} method
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.method = "";
    
                        /**
                         * Request headers.
                         * @member {Object.<string,string>} headers
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.headers = $util.emptyObject;
    
                        /**
                         * Request path.
                         * @member {string} path
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.path = "";
    
                        /**
                         * Request host.
                         * @member {string} host
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.host = "";
    
                        /**
                         * Request scheme.
                         * @member {string} scheme
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.scheme = "";
    
                        /**
                         * Request query.
                         * @member {string} query
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.query = "";
    
                        /**
                         * Request time.
                         * @member {google.protobuf.ITimestamp|null|undefined} time
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.time = null;
    
                        /**
                         * Request size.
                         * @member {number|Long} size
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Request protocol.
                         * @member {string} protocol
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.protocol = "";
    
                        /**
                         * Request reason.
                         * @member {string} reason
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.reason = "";
    
                        /**
                         * Request auth.
                         * @member {google.rpc.context.AttributeContext.IAuth|null|undefined} auth
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         */
                        Request.prototype.auth = null;
    
                        /**
                         * Creates a new Request instance using the specified properties.
                         * @function create
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @static
                         * @param {google.rpc.context.AttributeContext.IRequest=} [properties] Properties to set
                         * @returns {google.rpc.context.AttributeContext.Request} Request instance
                         */
                        Request.create = function create(properties) {
                            return new Request(properties);
                        };
    
                        /**
                         * Encodes the specified Request message. Does not implicitly {@link google.rpc.context.AttributeContext.Request.verify|verify} messages.
                         * @function encode
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @static
                         * @param {google.rpc.context.AttributeContext.IRequest} message Request message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Request.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.method != null && Object.hasOwnProperty.call(message, "method"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.method);
                            if (message.headers != null && Object.hasOwnProperty.call(message, "headers"))
                                for (var keys = Object.keys(message.headers), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.headers[keys[i]]).ldelim();
                            if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.path);
                            if (message.host != null && Object.hasOwnProperty.call(message, "host"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.host);
                            if (message.scheme != null && Object.hasOwnProperty.call(message, "scheme"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.scheme);
                            if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.query);
                            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                                $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.size);
                            if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.protocol);
                            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.reason);
                            if (message.auth != null && Object.hasOwnProperty.call(message, "auth"))
                                $root.google.rpc.context.AttributeContext.Auth.encode(message.auth, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Request message, length delimited. Does not implicitly {@link google.rpc.context.AttributeContext.Request.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @static
                         * @param {google.rpc.context.AttributeContext.IRequest} message Request message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Request.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Request message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.rpc.context.AttributeContext.Request} Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Request.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.context.AttributeContext.Request(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.id = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.method = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (message.headers === $util.emptyObject)
                                            message.headers = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.headers[key] = value;
                                        break;
                                    }
                                case 4: {
                                        message.path = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.host = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.scheme = reader.string();
                                        break;
                                    }
                                case 7: {
                                        message.query = reader.string();
                                        break;
                                    }
                                case 9: {
                                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.size = reader.int64();
                                        break;
                                    }
                                case 11: {
                                        message.protocol = reader.string();
                                        break;
                                    }
                                case 12: {
                                        message.reason = reader.string();
                                        break;
                                    }
                                case 13: {
                                        message.auth = $root.google.rpc.context.AttributeContext.Auth.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Request message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.rpc.context.AttributeContext.Request} Request
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Request.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Request message.
                         * @function verify
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Request.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.method != null && message.hasOwnProperty("method"))
                                if (!$util.isString(message.method))
                                    return "method: string expected";
                            if (message.headers != null && message.hasOwnProperty("headers")) {
                                if (!$util.isObject(message.headers))
                                    return "headers: object expected";
                                var key = Object.keys(message.headers);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.headers[key[i]]))
                                        return "headers: string{k:string} expected";
                            }
                            if (message.path != null && message.hasOwnProperty("path"))
                                if (!$util.isString(message.path))
                                    return "path: string expected";
                            if (message.host != null && message.hasOwnProperty("host"))
                                if (!$util.isString(message.host))
                                    return "host: string expected";
                            if (message.scheme != null && message.hasOwnProperty("scheme"))
                                if (!$util.isString(message.scheme))
                                    return "scheme: string expected";
                            if (message.query != null && message.hasOwnProperty("query"))
                                if (!$util.isString(message.query))
                                    return "query: string expected";
                            if (message.time != null && message.hasOwnProperty("time")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.time);
                                if (error)
                                    return "time." + error;
                            }
                            if (message.size != null && message.hasOwnProperty("size"))
                                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))
                                    return "size: integer|Long expected";
                            if (message.protocol != null && message.hasOwnProperty("protocol"))
                                if (!$util.isString(message.protocol))
                                    return "protocol: string expected";
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                if (!$util.isString(message.reason))
                                    return "reason: string expected";
                            if (message.auth != null && message.hasOwnProperty("auth")) {
                                var error = $root.google.rpc.context.AttributeContext.Auth.verify(message.auth);
                                if (error)
                                    return "auth." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Request message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.rpc.context.AttributeContext.Request} Request
                         */
                        Request.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.rpc.context.AttributeContext.Request)
                                return object;
                            var message = new $root.google.rpc.context.AttributeContext.Request();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.method != null)
                                message.method = String(object.method);
                            if (object.headers) {
                                if (typeof object.headers !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Request.headers: object expected");
                                message.headers = {};
                                for (var keys = Object.keys(object.headers), i = 0; i < keys.length; ++i)
                                    message.headers[keys[i]] = String(object.headers[keys[i]]);
                            }
                            if (object.path != null)
                                message.path = String(object.path);
                            if (object.host != null)
                                message.host = String(object.host);
                            if (object.scheme != null)
                                message.scheme = String(object.scheme);
                            if (object.query != null)
                                message.query = String(object.query);
                            if (object.time != null) {
                                if (typeof object.time !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Request.time: object expected");
                                message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                            }
                            if (object.size != null)
                                if ($util.Long)
                                    (message.size = $util.Long.fromValue(object.size)).unsigned = false;
                                else if (typeof object.size === "string")
                                    message.size = parseInt(object.size, 10);
                                else if (typeof object.size === "number")
                                    message.size = object.size;
                                else if (typeof object.size === "object")
                                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber();
                            if (object.protocol != null)
                                message.protocol = String(object.protocol);
                            if (object.reason != null)
                                message.reason = String(object.reason);
                            if (object.auth != null) {
                                if (typeof object.auth !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Request.auth: object expected");
                                message.auth = $root.google.rpc.context.AttributeContext.Auth.fromObject(object.auth);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Request message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @static
                         * @param {google.rpc.context.AttributeContext.Request} message Request
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Request.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.headers = {};
                            if (options.defaults) {
                                object.id = "";
                                object.method = "";
                                object.path = "";
                                object.host = "";
                                object.scheme = "";
                                object.query = "";
                                object.time = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.size = options.longs === String ? "0" : 0;
                                object.protocol = "";
                                object.reason = "";
                                object.auth = null;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.method != null && message.hasOwnProperty("method"))
                                object.method = message.method;
                            var keys2;
                            if (message.headers && (keys2 = Object.keys(message.headers)).length) {
                                object.headers = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.headers[keys2[j]] = message.headers[keys2[j]];
                            }
                            if (message.path != null && message.hasOwnProperty("path"))
                                object.path = message.path;
                            if (message.host != null && message.hasOwnProperty("host"))
                                object.host = message.host;
                            if (message.scheme != null && message.hasOwnProperty("scheme"))
                                object.scheme = message.scheme;
                            if (message.query != null && message.hasOwnProperty("query"))
                                object.query = message.query;
                            if (message.time != null && message.hasOwnProperty("time"))
                                object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                            if (message.size != null && message.hasOwnProperty("size"))
                                if (typeof message.size === "number")
                                    object.size = options.longs === String ? String(message.size) : message.size;
                                else
                                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber() : message.size;
                            if (message.protocol != null && message.hasOwnProperty("protocol"))
                                object.protocol = message.protocol;
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                object.reason = message.reason;
                            if (message.auth != null && message.hasOwnProperty("auth"))
                                object.auth = $root.google.rpc.context.AttributeContext.Auth.toObject(message.auth, options);
                            return object;
                        };
    
                        /**
                         * Converts this Request to JSON.
                         * @function toJSON
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Request.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Request
                         * @function getTypeUrl
                         * @memberof google.rpc.context.AttributeContext.Request
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Request.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.rpc.context.AttributeContext.Request";
                        };
    
                        return Request;
                    })();
    
                    AttributeContext.Response = (function() {
    
                        /**
                         * Properties of a Response.
                         * @memberof google.rpc.context.AttributeContext
                         * @interface IResponse
                         * @property {number|Long|null} [code] Response code
                         * @property {number|Long|null} [size] Response size
                         * @property {Object.<string,string>|null} [headers] Response headers
                         * @property {google.protobuf.ITimestamp|null} [time] Response time
                         * @property {google.protobuf.IDuration|null} [backendLatency] Response backendLatency
                         */
    
                        /**
                         * Constructs a new Response.
                         * @memberof google.rpc.context.AttributeContext
                         * @classdesc Represents a Response.
                         * @implements IResponse
                         * @constructor
                         * @param {google.rpc.context.AttributeContext.IResponse=} [properties] Properties to set
                         */
                        function Response(properties) {
                            this.headers = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Response code.
                         * @member {number|Long} code
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @instance
                         */
                        Response.prototype.code = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Response size.
                         * @member {number|Long} size
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @instance
                         */
                        Response.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Response headers.
                         * @member {Object.<string,string>} headers
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @instance
                         */
                        Response.prototype.headers = $util.emptyObject;
    
                        /**
                         * Response time.
                         * @member {google.protobuf.ITimestamp|null|undefined} time
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @instance
                         */
                        Response.prototype.time = null;
    
                        /**
                         * Response backendLatency.
                         * @member {google.protobuf.IDuration|null|undefined} backendLatency
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @instance
                         */
                        Response.prototype.backendLatency = null;
    
                        /**
                         * Creates a new Response instance using the specified properties.
                         * @function create
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @static
                         * @param {google.rpc.context.AttributeContext.IResponse=} [properties] Properties to set
                         * @returns {google.rpc.context.AttributeContext.Response} Response instance
                         */
                        Response.create = function create(properties) {
                            return new Response(properties);
                        };
    
                        /**
                         * Encodes the specified Response message. Does not implicitly {@link google.rpc.context.AttributeContext.Response.verify|verify} messages.
                         * @function encode
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @static
                         * @param {google.rpc.context.AttributeContext.IResponse} message Response message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Response.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.code);
                            if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.size);
                            if (message.headers != null && Object.hasOwnProperty.call(message, "headers"))
                                for (var keys = Object.keys(message.headers), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.headers[keys[i]]).ldelim();
                            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                                $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.backendLatency != null && Object.hasOwnProperty.call(message, "backendLatency"))
                                $root.google.protobuf.Duration.encode(message.backendLatency, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Response message, length delimited. Does not implicitly {@link google.rpc.context.AttributeContext.Response.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @static
                         * @param {google.rpc.context.AttributeContext.IResponse} message Response message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Response.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Response message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.rpc.context.AttributeContext.Response} Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Response.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.context.AttributeContext.Response(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.code = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.size = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        if (message.headers === $util.emptyObject)
                                            message.headers = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.headers[key] = value;
                                        break;
                                    }
                                case 4: {
                                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.backendLatency = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Response message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.rpc.context.AttributeContext.Response} Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Response.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Response message.
                         * @function verify
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Response.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code) && !(message.code && $util.isInteger(message.code.low) && $util.isInteger(message.code.high)))
                                    return "code: integer|Long expected";
                            if (message.size != null && message.hasOwnProperty("size"))
                                if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))
                                    return "size: integer|Long expected";
                            if (message.headers != null && message.hasOwnProperty("headers")) {
                                if (!$util.isObject(message.headers))
                                    return "headers: object expected";
                                var key = Object.keys(message.headers);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.headers[key[i]]))
                                        return "headers: string{k:string} expected";
                            }
                            if (message.time != null && message.hasOwnProperty("time")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.time);
                                if (error)
                                    return "time." + error;
                            }
                            if (message.backendLatency != null && message.hasOwnProperty("backendLatency")) {
                                var error = $root.google.protobuf.Duration.verify(message.backendLatency);
                                if (error)
                                    return "backendLatency." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Response message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.rpc.context.AttributeContext.Response} Response
                         */
                        Response.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.rpc.context.AttributeContext.Response)
                                return object;
                            var message = new $root.google.rpc.context.AttributeContext.Response();
                            if (object.code != null)
                                if ($util.Long)
                                    (message.code = $util.Long.fromValue(object.code)).unsigned = false;
                                else if (typeof object.code === "string")
                                    message.code = parseInt(object.code, 10);
                                else if (typeof object.code === "number")
                                    message.code = object.code;
                                else if (typeof object.code === "object")
                                    message.code = new $util.LongBits(object.code.low >>> 0, object.code.high >>> 0).toNumber();
                            if (object.size != null)
                                if ($util.Long)
                                    (message.size = $util.Long.fromValue(object.size)).unsigned = false;
                                else if (typeof object.size === "string")
                                    message.size = parseInt(object.size, 10);
                                else if (typeof object.size === "number")
                                    message.size = object.size;
                                else if (typeof object.size === "object")
                                    message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber();
                            if (object.headers) {
                                if (typeof object.headers !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Response.headers: object expected");
                                message.headers = {};
                                for (var keys = Object.keys(object.headers), i = 0; i < keys.length; ++i)
                                    message.headers[keys[i]] = String(object.headers[keys[i]]);
                            }
                            if (object.time != null) {
                                if (typeof object.time !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Response.time: object expected");
                                message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                            }
                            if (object.backendLatency != null) {
                                if (typeof object.backendLatency !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Response.backendLatency: object expected");
                                message.backendLatency = $root.google.protobuf.Duration.fromObject(object.backendLatency);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Response message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @static
                         * @param {google.rpc.context.AttributeContext.Response} message Response
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Response.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.headers = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.code = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.code = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.size = options.longs === String ? "0" : 0;
                                object.time = null;
                                object.backendLatency = null;
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (typeof message.code === "number")
                                    object.code = options.longs === String ? String(message.code) : message.code;
                                else
                                    object.code = options.longs === String ? $util.Long.prototype.toString.call(message.code) : options.longs === Number ? new $util.LongBits(message.code.low >>> 0, message.code.high >>> 0).toNumber() : message.code;
                            if (message.size != null && message.hasOwnProperty("size"))
                                if (typeof message.size === "number")
                                    object.size = options.longs === String ? String(message.size) : message.size;
                                else
                                    object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber() : message.size;
                            var keys2;
                            if (message.headers && (keys2 = Object.keys(message.headers)).length) {
                                object.headers = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.headers[keys2[j]] = message.headers[keys2[j]];
                            }
                            if (message.time != null && message.hasOwnProperty("time"))
                                object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                            if (message.backendLatency != null && message.hasOwnProperty("backendLatency"))
                                object.backendLatency = $root.google.protobuf.Duration.toObject(message.backendLatency, options);
                            return object;
                        };
    
                        /**
                         * Converts this Response to JSON.
                         * @function toJSON
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Response.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Response
                         * @function getTypeUrl
                         * @memberof google.rpc.context.AttributeContext.Response
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Response.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.rpc.context.AttributeContext.Response";
                        };
    
                        return Response;
                    })();
    
                    AttributeContext.Resource = (function() {
    
                        /**
                         * Properties of a Resource.
                         * @memberof google.rpc.context.AttributeContext
                         * @interface IResource
                         * @property {string|null} [service] Resource service
                         * @property {string|null} [name] Resource name
                         * @property {string|null} [type] Resource type
                         * @property {Object.<string,string>|null} [labels] Resource labels
                         * @property {string|null} [uid] Resource uid
                         * @property {Object.<string,string>|null} [annotations] Resource annotations
                         * @property {string|null} [displayName] Resource displayName
                         * @property {google.protobuf.ITimestamp|null} [createTime] Resource createTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] Resource updateTime
                         * @property {google.protobuf.ITimestamp|null} [deleteTime] Resource deleteTime
                         * @property {string|null} [etag] Resource etag
                         * @property {string|null} [location] Resource location
                         */
    
                        /**
                         * Constructs a new Resource.
                         * @memberof google.rpc.context.AttributeContext
                         * @classdesc Represents a Resource.
                         * @implements IResource
                         * @constructor
                         * @param {google.rpc.context.AttributeContext.IResource=} [properties] Properties to set
                         */
                        function Resource(properties) {
                            this.labels = {};
                            this.annotations = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Resource service.
                         * @member {string} service
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.service = "";
    
                        /**
                         * Resource name.
                         * @member {string} name
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.name = "";
    
                        /**
                         * Resource type.
                         * @member {string} type
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.type = "";
    
                        /**
                         * Resource labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.labels = $util.emptyObject;
    
                        /**
                         * Resource uid.
                         * @member {string} uid
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.uid = "";
    
                        /**
                         * Resource annotations.
                         * @member {Object.<string,string>} annotations
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.annotations = $util.emptyObject;
    
                        /**
                         * Resource displayName.
                         * @member {string} displayName
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.displayName = "";
    
                        /**
                         * Resource createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.createTime = null;
    
                        /**
                         * Resource updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.updateTime = null;
    
                        /**
                         * Resource deleteTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} deleteTime
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.deleteTime = null;
    
                        /**
                         * Resource etag.
                         * @member {string} etag
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.etag = "";
    
                        /**
                         * Resource location.
                         * @member {string} location
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         */
                        Resource.prototype.location = "";
    
                        /**
                         * Creates a new Resource instance using the specified properties.
                         * @function create
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @static
                         * @param {google.rpc.context.AttributeContext.IResource=} [properties] Properties to set
                         * @returns {google.rpc.context.AttributeContext.Resource} Resource instance
                         */
                        Resource.create = function create(properties) {
                            return new Resource(properties);
                        };
    
                        /**
                         * Encodes the specified Resource message. Does not implicitly {@link google.rpc.context.AttributeContext.Resource.verify|verify} messages.
                         * @function encode
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @static
                         * @param {google.rpc.context.AttributeContext.IResource} message Resource message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Resource.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.service);
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.uid);
                            if (message.annotations != null && Object.hasOwnProperty.call(message, "annotations"))
                                for (var keys = Object.keys(message.annotations), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.annotations[keys[i]]).ldelim();
                            if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.displayName);
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.deleteTime != null && Object.hasOwnProperty.call(message, "deleteTime"))
                                $root.google.protobuf.Timestamp.encode(message.deleteTime, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.etag != null && Object.hasOwnProperty.call(message, "etag"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.etag);
                            if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.location);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Resource message, length delimited. Does not implicitly {@link google.rpc.context.AttributeContext.Resource.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @static
                         * @param {google.rpc.context.AttributeContext.IResource} message Resource message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Resource.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Resource message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.rpc.context.AttributeContext.Resource} Resource
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Resource.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.context.AttributeContext.Resource(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.service = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.type = reader.string();
                                        break;
                                    }
                                case 4: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 5: {
                                        message.uid = reader.string();
                                        break;
                                    }
                                case 6: {
                                        if (message.annotations === $util.emptyObject)
                                            message.annotations = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.annotations[key] = value;
                                        break;
                                    }
                                case 7: {
                                        message.displayName = reader.string();
                                        break;
                                    }
                                case 8: {
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.deleteTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.etag = reader.string();
                                        break;
                                    }
                                case 12: {
                                        message.location = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Resource message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.rpc.context.AttributeContext.Resource} Resource
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Resource.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Resource message.
                         * @function verify
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Resource.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.service != null && message.hasOwnProperty("service"))
                                if (!$util.isString(message.service))
                                    return "service: string expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.uid != null && message.hasOwnProperty("uid"))
                                if (!$util.isString(message.uid))
                                    return "uid: string expected";
                            if (message.annotations != null && message.hasOwnProperty("annotations")) {
                                if (!$util.isObject(message.annotations))
                                    return "annotations: object expected";
                                var key = Object.keys(message.annotations);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.annotations[key[i]]))
                                        return "annotations: string{k:string} expected";
                            }
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            if (message.deleteTime != null && message.hasOwnProperty("deleteTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.deleteTime);
                                if (error)
                                    return "deleteTime." + error;
                            }
                            if (message.etag != null && message.hasOwnProperty("etag"))
                                if (!$util.isString(message.etag))
                                    return "etag: string expected";
                            if (message.location != null && message.hasOwnProperty("location"))
                                if (!$util.isString(message.location))
                                    return "location: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Resource message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.rpc.context.AttributeContext.Resource} Resource
                         */
                        Resource.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.rpc.context.AttributeContext.Resource)
                                return object;
                            var message = new $root.google.rpc.context.AttributeContext.Resource();
                            if (object.service != null)
                                message.service = String(object.service);
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Resource.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.uid != null)
                                message.uid = String(object.uid);
                            if (object.annotations) {
                                if (typeof object.annotations !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Resource.annotations: object expected");
                                message.annotations = {};
                                for (var keys = Object.keys(object.annotations), i = 0; i < keys.length; ++i)
                                    message.annotations[keys[i]] = String(object.annotations[keys[i]]);
                            }
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Resource.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Resource.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            if (object.deleteTime != null) {
                                if (typeof object.deleteTime !== "object")
                                    throw TypeError(".google.rpc.context.AttributeContext.Resource.deleteTime: object expected");
                                message.deleteTime = $root.google.protobuf.Timestamp.fromObject(object.deleteTime);
                            }
                            if (object.etag != null)
                                message.etag = String(object.etag);
                            if (object.location != null)
                                message.location = String(object.location);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Resource message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @static
                         * @param {google.rpc.context.AttributeContext.Resource} message Resource
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Resource.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults) {
                                object.labels = {};
                                object.annotations = {};
                            }
                            if (options.defaults) {
                                object.service = "";
                                object.name = "";
                                object.type = "";
                                object.uid = "";
                                object.displayName = "";
                                object.createTime = null;
                                object.updateTime = null;
                                object.deleteTime = null;
                                object.etag = "";
                                object.location = "";
                            }
                            if (message.service != null && message.hasOwnProperty("service"))
                                object.service = message.service;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.uid != null && message.hasOwnProperty("uid"))
                                object.uid = message.uid;
                            if (message.annotations && (keys2 = Object.keys(message.annotations)).length) {
                                object.annotations = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.annotations[keys2[j]] = message.annotations[keys2[j]];
                            }
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            if (message.deleteTime != null && message.hasOwnProperty("deleteTime"))
                                object.deleteTime = $root.google.protobuf.Timestamp.toObject(message.deleteTime, options);
                            if (message.etag != null && message.hasOwnProperty("etag"))
                                object.etag = message.etag;
                            if (message.location != null && message.hasOwnProperty("location"))
                                object.location = message.location;
                            return object;
                        };
    
                        /**
                         * Converts this Resource to JSON.
                         * @function toJSON
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Resource.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Resource
                         * @function getTypeUrl
                         * @memberof google.rpc.context.AttributeContext.Resource
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.rpc.context.AttributeContext.Resource";
                        };
    
                        return Resource;
                    })();
    
                    return AttributeContext;
                })();
    
                return context;
            })();
    
            return rpc;
        })();
    
        google.logging = (function() {
    
            /**
             * Namespace logging.
             * @memberof google
             * @namespace
             */
            var logging = {};
    
            logging.type = (function() {
    
                /**
                 * Namespace type.
                 * @memberof google.logging
                 * @namespace
                 */
                var type = {};
    
                /**
                 * LogSeverity enum.
                 * @name google.logging.type.LogSeverity
                 * @enum {number}
                 * @property {number} DEFAULT=0 DEFAULT value
                 * @property {number} DEBUG=100 DEBUG value
                 * @property {number} INFO=200 INFO value
                 * @property {number} NOTICE=300 NOTICE value
                 * @property {number} WARNING=400 WARNING value
                 * @property {number} ERROR=500 ERROR value
                 * @property {number} CRITICAL=600 CRITICAL value
                 * @property {number} ALERT=700 ALERT value
                 * @property {number} EMERGENCY=800 EMERGENCY value
                 */
                type.LogSeverity = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DEFAULT"] = 0;
                    values[valuesById[100] = "DEBUG"] = 100;
                    values[valuesById[200] = "INFO"] = 200;
                    values[valuesById[300] = "NOTICE"] = 300;
                    values[valuesById[400] = "WARNING"] = 400;
                    values[valuesById[500] = "ERROR"] = 500;
                    values[valuesById[600] = "CRITICAL"] = 600;
                    values[valuesById[700] = "ALERT"] = 700;
                    values[valuesById[800] = "EMERGENCY"] = 800;
                    return values;
                })();
    
                return type;
            })();
    
            return logging;
        })();
    
        return google;
    })();

    return $root;
});
