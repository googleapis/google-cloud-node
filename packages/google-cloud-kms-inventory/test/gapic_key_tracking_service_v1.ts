// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as keytrackingserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.KeyTrackingServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        keytrackingserviceModule.v1.KeyTrackingServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        keytrackingserviceModule.v1.KeyTrackingServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = keytrackingserviceModule.v1.KeyTrackingServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.keyTrackingServiceStub, undefined);
      await client.initialize();
      assert(client.keyTrackingServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.keyTrackingServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.keyTrackingServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getProtectedResourcesSummary', () => {
    it('invokes getProtectedResourcesSummary without error', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.GetProtectedResourcesSummaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.GetProtectedResourcesSummaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.ProtectedResourcesSummary()
      );
      client.innerApiCalls.getProtectedResourcesSummary =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getProtectedResourcesSummary(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProtectedResourcesSummary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProtectedResourcesSummary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProtectedResourcesSummary without error using callback', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.GetProtectedResourcesSummaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.GetProtectedResourcesSummaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.ProtectedResourcesSummary()
      );
      client.innerApiCalls.getProtectedResourcesSummary =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getProtectedResourcesSummary(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.inventory.v1.IProtectedResourcesSummary | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProtectedResourcesSummary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProtectedResourcesSummary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProtectedResourcesSummary with error', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.GetProtectedResourcesSummaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.GetProtectedResourcesSummaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getProtectedResourcesSummary = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getProtectedResourcesSummary(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getProtectedResourcesSummary as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProtectedResourcesSummary as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProtectedResourcesSummary with closed client', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.GetProtectedResourcesSummaryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.GetProtectedResourcesSummaryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getProtectedResourcesSummary(request),
        expectedError
      );
    });
  });

  describe('searchProtectedResources', () => {
    it('invokes searchProtectedResources without error', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest',
        ['scope']
      );
      request.scope = defaultValue1;
      const expectedHeaderRequestParams = `scope=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
      ];
      client.innerApiCalls.searchProtectedResources =
        stubSimpleCall(expectedResponse);
      const [response] = await client.searchProtectedResources(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.searchProtectedResources as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchProtectedResources as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchProtectedResources without error using callback', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest',
        ['scope']
      );
      request.scope = defaultValue1;
      const expectedHeaderRequestParams = `scope=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
      ];
      client.innerApiCalls.searchProtectedResources =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.searchProtectedResources(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.kms.inventory.v1.IProtectedResource[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.searchProtectedResources as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchProtectedResources as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchProtectedResources with error', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest',
        ['scope']
      );
      request.scope = defaultValue1;
      const expectedHeaderRequestParams = `scope=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.searchProtectedResources = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.searchProtectedResources(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.searchProtectedResources as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchProtectedResources as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchProtectedResourcesStream without error', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest',
        ['scope']
      );
      request.scope = defaultValue1;
      const expectedHeaderRequestParams = `scope=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
      ];
      client.descriptors.page.searchProtectedResources.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.searchProtectedResourcesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.inventory.v1.ProtectedResource[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.kms.inventory.v1.ProtectedResource
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.searchProtectedResources
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.searchProtectedResources, request)
      );
      assert(
        (
          client.descriptors.page.searchProtectedResources
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes searchProtectedResourcesStream with error', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest',
        ['scope']
      );
      request.scope = defaultValue1;
      const expectedHeaderRequestParams = `scope=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.searchProtectedResources.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.searchProtectedResourcesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.inventory.v1.ProtectedResource[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.kms.inventory.v1.ProtectedResource
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.searchProtectedResources
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.searchProtectedResources, request)
      );
      assert(
        (
          client.descriptors.page.searchProtectedResources
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with searchProtectedResources without error', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest',
        ['scope']
      );
      request.scope = defaultValue1;
      const expectedHeaderRequestParams = `scope=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.inventory.v1.ProtectedResource()
        ),
      ];
      client.descriptors.page.searchProtectedResources.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.kms.inventory.v1.IProtectedResource[] =
        [];
      const iterable = client.searchProtectedResourcesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchProtectedResources
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.searchProtectedResources
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with searchProtectedResources with error', async () => {
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.inventory.v1.SearchProtectedResourcesRequest',
        ['scope']
      );
      request.scope = defaultValue1;
      const expectedHeaderRequestParams = `scope=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.searchProtectedResources.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.searchProtectedResourcesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.kms.inventory.v1.IProtectedResource[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchProtectedResources
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.searchProtectedResources
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('cryptoKey', () => {
      const fakePath = '/rendered/path/cryptoKey';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        crypto_key: 'cryptoKeyValue',
      };
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.cryptoKeyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cryptoKeyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cryptoKeyPath', () => {
        const result = client.cryptoKeyPath(
          'projectValue',
          'locationValue',
          'keyRingValue',
          'cryptoKeyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCryptoKeyName', () => {
        const result = client.matchProjectFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCryptoKeyName', () => {
        const result = client.matchLocationFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromCryptoKeyName', () => {
        const result = client.matchKeyRingFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyFromCryptoKeyName', () => {
        const result = client.matchCryptoKeyFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'cryptoKeyValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('cryptoKeyVersion', () => {
      const fakePath = '/rendered/path/cryptoKeyVersion';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        crypto_key: 'cryptoKeyValue',
        crypto_key_version: 'cryptoKeyVersionValue',
      };
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.cryptoKeyVersionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cryptoKeyVersionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cryptoKeyVersionPath', () => {
        const result = client.cryptoKeyVersionPath(
          'projectValue',
          'locationValue',
          'keyRingValue',
          'cryptoKeyValue',
          'cryptoKeyVersionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.cryptoKeyVersionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCryptoKeyVersionName', () => {
        const result = client.matchProjectFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCryptoKeyVersionName', () => {
        const result = client.matchLocationFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromCryptoKeyVersionName', () => {
        const result = client.matchKeyRingFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyFromCryptoKeyVersionName', () => {
        const result = client.matchCryptoKeyFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'cryptoKeyValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyVersionFromCryptoKeyVersionName', () => {
        const result =
          client.matchCryptoKeyVersionFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'cryptoKeyVersionValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('importJob', () => {
      const fakePath = '/rendered/path/importJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        import_job: 'importJobValue',
      };
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.importJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.importJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('importJobPath', () => {
        const result = client.importJobPath(
          'projectValue',
          'locationValue',
          'keyRingValue',
          'importJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.importJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromImportJobName', () => {
        const result = client.matchProjectFromImportJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.importJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromImportJobName', () => {
        const result = client.matchLocationFromImportJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.importJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromImportJobName', () => {
        const result = client.matchKeyRingFromImportJobName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.importJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchImportJobFromImportJobName', () => {
        const result = client.matchImportJobFromImportJobName(fakePath);
        assert.strictEqual(result, 'importJobValue');
        assert(
          (client.pathTemplates.importJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('keyRing', () => {
      const fakePath = '/rendered/path/keyRing';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
      };
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.keyRingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.keyRingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('keyRingPath', () => {
        const result = client.keyRingPath(
          'projectValue',
          'locationValue',
          'keyRingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.keyRingPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromKeyRingName', () => {
        const result = client.matchProjectFromKeyRingName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.keyRingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromKeyRingName', () => {
        const result = client.matchLocationFromKeyRingName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.keyRingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromKeyRingName', () => {
        const result = client.matchKeyRingFromKeyRingName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.keyRingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organization', () => {
      const fakePath = '/rendered/path/organization';
      const expectedParameters = {
        organization: 'organizationValue',
      };
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationPath', () => {
        const result = client.organizationPath('organizationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.organizationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationName', () => {
        const result = client.matchOrganizationFromOrganizationName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (client.pathTemplates.organizationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummary', () => {
      const fakePath =
        '/rendered/path/projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummary';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        crypto_key: 'cryptoKeyValue',
        crypto_key_version: 'cryptoKeyVersionValue',
      };
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPath', () => {
        const result =
          client.projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPath(
            'projectValue',
            'locationValue',
            'keyRingValue',
            'cryptoKeyValue',
            'cryptoKeyVersionValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName', () => {
        const result =
          client.matchProjectFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName', () => {
        const result =
          client.matchLocationFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName', () => {
        const result =
          client.matchKeyRingFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName(
            fakePath
          );
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName', () => {
        const result =
          client.matchCryptoKeyFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName(
            fakePath
          );
        assert.strictEqual(result, 'cryptoKeyValue');
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyVersionFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName', () => {
        const result =
          client.matchCryptoKeyVersionFromProjectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryName(
            fakePath
          );
        assert.strictEqual(result, 'cryptoKeyVersionValue');
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyCryptoKeyVersionProtectedResourcesSummaryPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationKeyRingCryptoKeyProtectedResourcesSummary', () => {
      const fakePath =
        '/rendered/path/projectLocationKeyRingCryptoKeyProtectedResourcesSummary';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        crypto_key: 'cryptoKeyValue',
      };
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationKeyRingCryptoKeyProtectedResourcesSummaryPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationKeyRingCryptoKeyProtectedResourcesSummaryPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationKeyRingCryptoKeyProtectedResourcesSummaryPath', () => {
        const result =
          client.projectLocationKeyRingCryptoKeyProtectedResourcesSummaryPath(
            'projectValue',
            'locationValue',
            'keyRingValue',
            'cryptoKeyValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyProtectedResourcesSummaryPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationKeyRingCryptoKeyProtectedResourcesSummaryName', () => {
        const result =
          client.matchProjectFromProjectLocationKeyRingCryptoKeyProtectedResourcesSummaryName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyProtectedResourcesSummaryPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationKeyRingCryptoKeyProtectedResourcesSummaryName', () => {
        const result =
          client.matchLocationFromProjectLocationKeyRingCryptoKeyProtectedResourcesSummaryName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyProtectedResourcesSummaryPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromProjectLocationKeyRingCryptoKeyProtectedResourcesSummaryName', () => {
        const result =
          client.matchKeyRingFromProjectLocationKeyRingCryptoKeyProtectedResourcesSummaryName(
            fakePath
          );
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyProtectedResourcesSummaryPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyFromProjectLocationKeyRingCryptoKeyProtectedResourcesSummaryName', () => {
        const result =
          client.matchCryptoKeyFromProjectLocationKeyRingCryptoKeyProtectedResourcesSummaryName(
            fakePath
          );
        assert.strictEqual(result, 'cryptoKeyValue');
        assert(
          (
            client.pathTemplates
              .projectLocationKeyRingCryptoKeyProtectedResourcesSummaryPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('publicKey', () => {
      const fakePath = '/rendered/path/publicKey';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        crypto_key: 'cryptoKeyValue',
        crypto_key_version: 'cryptoKeyVersionValue',
      };
      const client = new keytrackingserviceModule.v1.KeyTrackingServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.publicKeyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.publicKeyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('publicKeyPath', () => {
        const result = client.publicKeyPath(
          'projectValue',
          'locationValue',
          'keyRingValue',
          'cryptoKeyValue',
          'cryptoKeyVersionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.publicKeyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPublicKeyName', () => {
        const result = client.matchProjectFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPublicKeyName', () => {
        const result = client.matchLocationFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromPublicKeyName', () => {
        const result = client.matchKeyRingFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyFromPublicKeyName', () => {
        const result = client.matchCryptoKeyFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'cryptoKeyValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyVersionFromPublicKeyName', () => {
        const result = client.matchCryptoKeyVersionFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'cryptoKeyVersionValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
