// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';

import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/autokey_admin_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './autokey_admin_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Provides interfaces for managing Cloud KMS Autokey folder-level
 *  configurations. A configuration is inherited by all descendent projects. A
 *  configuration at one folder overrides any other configurations in its
 *  ancestry. Setting a configuration on a folder is a prerequisite for Cloud KMS
 *  Autokey, so that users working in a descendant project can request
 *  provisioned {@link protos.google.cloud.kms.v1.CryptoKey|CryptoKeys}, ready for Customer
 *  Managed Encryption Key (CMEK) use, on-demand.
 * @class
 * @memberof v1
 */
export class AutokeyAdminClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  autokeyAdminStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AutokeyAdminClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AutokeyAdminClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AutokeyAdminClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'cloudkms.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      autokeyConfigPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/autokeyConfig'
      ),
      cryptoKeyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}'
      ),
      cryptoKeyVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}'
      ),
      ekmConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ekmConfig'
      ),
      ekmConnectionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/ekmConnections/{ekm_connection}'
      ),
      importJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}/importJobs/{import_job}'
      ),
      keyHandlePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyHandles/{key_handle}'
      ),
      keyRingPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      publicKeyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}/publicKey'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.kms.v1.AutokeyAdmin',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.autokeyAdminStub) {
      return this.autokeyAdminStub;
    }

    // Put together the "service stub" for
    // google.cloud.kms.v1.AutokeyAdmin.
    this.autokeyAdminStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.kms.v1.AutokeyAdmin'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.kms.v1.AutokeyAdmin,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const autokeyAdminStubMethods = [
      'updateAutokeyConfig',
      'getAutokeyConfig',
      'showEffectiveAutokeyConfig',
    ];
    for (const methodName of autokeyAdminStubMethods) {
      const callPromise = this.autokeyAdminStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.autokeyAdminStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'cloudkms.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'cloudkms.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloudkms',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Updates the {@link protos.google.cloud.kms.v1.AutokeyConfig|AutokeyConfig} for a
   * folder. The caller must have both `cloudkms.autokeyConfigs.update`
   * permission on the parent folder and `cloudkms.cryptoKeys.setIamPolicy`
   * permission on the provided key project. A
   * {@link protos.google.cloud.kms.v1.KeyHandle|KeyHandle} creation in the folder's
   * descendant projects will use this configuration to determine where to
   * create the resulting {@link protos.google.cloud.kms.v1.CryptoKey|CryptoKey}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.kms.v1.AutokeyConfig} request.autokeyConfig
   *   Required. {@link protos.google.cloud.kms.v1.AutokeyConfig|AutokeyConfig} with values to
   *   update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Masks which fields of the
   *   {@link protos.google.cloud.kms.v1.AutokeyConfig|AutokeyConfig} to update, e.g.
   *   `keyProject`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.kms.v1.AutokeyConfig|AutokeyConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/autokey_admin.update_autokey_config.js</caption>
   * region_tag:cloudkms_v1_generated_AutokeyAdmin_UpdateAutokeyConfig_async
   */
  updateAutokeyConfig(
    request?: protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest | undefined,
      {} | undefined,
    ]
  >;
  updateAutokeyConfig(
    request: protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAutokeyConfig(
    request: protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest,
    callback: Callback<
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAutokeyConfig(
    request?: protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.kms.v1.IAutokeyConfig,
          | protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IUpdateAutokeyConfigRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'autokey_config.name': request.autokeyConfig!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateAutokeyConfig(request, options, callback);
  }
  /**
   * Returns the {@link protos.google.cloud.kms.v1.AutokeyConfig|AutokeyConfig} for a
   * folder.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the {@link protos.google.cloud.kms.v1.AutokeyConfig|AutokeyConfig}
   *   resource, e.g. `folders/{FOLDER_NUMBER}/autokeyConfig`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.kms.v1.AutokeyConfig|AutokeyConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/autokey_admin.get_autokey_config.js</caption>
   * region_tag:cloudkms_v1_generated_AutokeyAdmin_GetAutokeyConfig_async
   */
  getAutokeyConfig(
    request?: protos.google.cloud.kms.v1.IGetAutokeyConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IGetAutokeyConfigRequest | undefined,
      {} | undefined,
    ]
  >;
  getAutokeyConfig(
    request: protos.google.cloud.kms.v1.IGetAutokeyConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IGetAutokeyConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getAutokeyConfig(
    request: protos.google.cloud.kms.v1.IGetAutokeyConfigRequest,
    callback: Callback<
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IGetAutokeyConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getAutokeyConfig(
    request?: protos.google.cloud.kms.v1.IGetAutokeyConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.kms.v1.IAutokeyConfig,
          | protos.google.cloud.kms.v1.IGetAutokeyConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IGetAutokeyConfigRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.kms.v1.IAutokeyConfig,
      protos.google.cloud.kms.v1.IGetAutokeyConfigRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAutokeyConfig(request, options, callback);
  }
  /**
   * Returns the effective Cloud KMS Autokey configuration for a given project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the resource project to the show effective Cloud KMS
   *   Autokey configuration for. This may be helpful for interrogating the effect
   *   of nested folder configurations on a given resource project.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.kms.v1.ShowEffectiveAutokeyConfigResponse|ShowEffectiveAutokeyConfigResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/autokey_admin.show_effective_autokey_config.js</caption>
   * region_tag:cloudkms_v1_generated_AutokeyAdmin_ShowEffectiveAutokeyConfig_async
   */
  showEffectiveAutokeyConfig(
    request?: protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigResponse,
      protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest | undefined,
      {} | undefined,
    ]
  >;
  showEffectiveAutokeyConfig(
    request: protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigResponse,
      | protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  showEffectiveAutokeyConfig(
    request: protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest,
    callback: Callback<
      protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigResponse,
      | protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  showEffectiveAutokeyConfig(
    request?: protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigResponse,
          | protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigResponse,
      | protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigResponse,
      protos.google.cloud.kms.v1.IShowEffectiveAutokeyConfigRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.showEffectiveAutokeyConfig(
      request,
      options,
      callback
    );
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified autokeyConfig resource name string.
   *
   * @param {string} folder
   * @returns {string} Resource name string.
   */
  autokeyConfigPath(folder: string) {
    return this.pathTemplates.autokeyConfigPathTemplate.render({
      folder: folder,
    });
  }

  /**
   * Parse the folder from AutokeyConfig resource.
   *
   * @param {string} autokeyConfigName
   *   A fully-qualified path representing AutokeyConfig resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromAutokeyConfigName(autokeyConfigName: string) {
    return this.pathTemplates.autokeyConfigPathTemplate.match(autokeyConfigName)
      .folder;
  }

  /**
   * Return a fully-qualified cryptoKey resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @param {string} crypto_key
   * @returns {string} Resource name string.
   */
  cryptoKeyPath(
    project: string,
    location: string,
    keyRing: string,
    cryptoKey: string
  ) {
    return this.pathTemplates.cryptoKeyPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
      crypto_key: cryptoKey,
    });
  }

  /**
   * Parse the project from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
      .project;
  }

  /**
   * Parse the location from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
      .location;
  }

  /**
   * Parse the key_ring from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
      .key_ring;
  }

  /**
   * Parse the crypto_key from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the crypto_key.
   */
  matchCryptoKeyFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName)
      .crypto_key;
  }

  /**
   * Return a fully-qualified cryptoKeyVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @param {string} crypto_key
   * @param {string} crypto_key_version
   * @returns {string} Resource name string.
   */
  cryptoKeyVersionPath(
    project: string,
    location: string,
    keyRing: string,
    cryptoKey: string,
    cryptoKeyVersion: string
  ) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
      crypto_key: cryptoKey,
      crypto_key_version: cryptoKeyVersion,
    });
  }

  /**
   * Parse the project from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(
      cryptoKeyVersionName
    ).project;
  }

  /**
   * Parse the location from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(
      cryptoKeyVersionName
    ).location;
  }

  /**
   * Parse the key_ring from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(
      cryptoKeyVersionName
    ).key_ring;
  }

  /**
   * Parse the crypto_key from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the crypto_key.
   */
  matchCryptoKeyFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(
      cryptoKeyVersionName
    ).crypto_key;
  }

  /**
   * Parse the crypto_key_version from CryptoKeyVersion resource.
   *
   * @param {string} cryptoKeyVersionName
   *   A fully-qualified path representing CryptoKeyVersion resource.
   * @returns {string} A string representing the crypto_key_version.
   */
  matchCryptoKeyVersionFromCryptoKeyVersionName(cryptoKeyVersionName: string) {
    return this.pathTemplates.cryptoKeyVersionPathTemplate.match(
      cryptoKeyVersionName
    ).crypto_key_version;
  }

  /**
   * Return a fully-qualified ekmConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  ekmConfigPath(project: string, location: string) {
    return this.pathTemplates.ekmConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from EkmConfig resource.
   *
   * @param {string} ekmConfigName
   *   A fully-qualified path representing EkmConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEkmConfigName(ekmConfigName: string) {
    return this.pathTemplates.ekmConfigPathTemplate.match(ekmConfigName)
      .project;
  }

  /**
   * Parse the location from EkmConfig resource.
   *
   * @param {string} ekmConfigName
   *   A fully-qualified path representing EkmConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEkmConfigName(ekmConfigName: string) {
    return this.pathTemplates.ekmConfigPathTemplate.match(ekmConfigName)
      .location;
  }

  /**
   * Return a fully-qualified ekmConnection resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} ekm_connection
   * @returns {string} Resource name string.
   */
  ekmConnectionPath(project: string, location: string, ekmConnection: string) {
    return this.pathTemplates.ekmConnectionPathTemplate.render({
      project: project,
      location: location,
      ekm_connection: ekmConnection,
    });
  }

  /**
   * Parse the project from EkmConnection resource.
   *
   * @param {string} ekmConnectionName
   *   A fully-qualified path representing EkmConnection resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEkmConnectionName(ekmConnectionName: string) {
    return this.pathTemplates.ekmConnectionPathTemplate.match(ekmConnectionName)
      .project;
  }

  /**
   * Parse the location from EkmConnection resource.
   *
   * @param {string} ekmConnectionName
   *   A fully-qualified path representing EkmConnection resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEkmConnectionName(ekmConnectionName: string) {
    return this.pathTemplates.ekmConnectionPathTemplate.match(ekmConnectionName)
      .location;
  }

  /**
   * Parse the ekm_connection from EkmConnection resource.
   *
   * @param {string} ekmConnectionName
   *   A fully-qualified path representing EkmConnection resource.
   * @returns {string} A string representing the ekm_connection.
   */
  matchEkmConnectionFromEkmConnectionName(ekmConnectionName: string) {
    return this.pathTemplates.ekmConnectionPathTemplate.match(ekmConnectionName)
      .ekm_connection;
  }

  /**
   * Return a fully-qualified importJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @param {string} import_job
   * @returns {string} Resource name string.
   */
  importJobPath(
    project: string,
    location: string,
    keyRing: string,
    importJob: string
  ) {
    return this.pathTemplates.importJobPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
      import_job: importJob,
    });
  }

  /**
   * Parse the project from ImportJob resource.
   *
   * @param {string} importJobName
   *   A fully-qualified path representing ImportJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromImportJobName(importJobName: string) {
    return this.pathTemplates.importJobPathTemplate.match(importJobName)
      .project;
  }

  /**
   * Parse the location from ImportJob resource.
   *
   * @param {string} importJobName
   *   A fully-qualified path representing ImportJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromImportJobName(importJobName: string) {
    return this.pathTemplates.importJobPathTemplate.match(importJobName)
      .location;
  }

  /**
   * Parse the key_ring from ImportJob resource.
   *
   * @param {string} importJobName
   *   A fully-qualified path representing ImportJob resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromImportJobName(importJobName: string) {
    return this.pathTemplates.importJobPathTemplate.match(importJobName)
      .key_ring;
  }

  /**
   * Parse the import_job from ImportJob resource.
   *
   * @param {string} importJobName
   *   A fully-qualified path representing ImportJob resource.
   * @returns {string} A string representing the import_job.
   */
  matchImportJobFromImportJobName(importJobName: string) {
    return this.pathTemplates.importJobPathTemplate.match(importJobName)
      .import_job;
  }

  /**
   * Return a fully-qualified keyHandle resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_handle
   * @returns {string} Resource name string.
   */
  keyHandlePath(project: string, location: string, keyHandle: string) {
    return this.pathTemplates.keyHandlePathTemplate.render({
      project: project,
      location: location,
      key_handle: keyHandle,
    });
  }

  /**
   * Parse the project from KeyHandle resource.
   *
   * @param {string} keyHandleName
   *   A fully-qualified path representing KeyHandle resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromKeyHandleName(keyHandleName: string) {
    return this.pathTemplates.keyHandlePathTemplate.match(keyHandleName)
      .project;
  }

  /**
   * Parse the location from KeyHandle resource.
   *
   * @param {string} keyHandleName
   *   A fully-qualified path representing KeyHandle resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromKeyHandleName(keyHandleName: string) {
    return this.pathTemplates.keyHandlePathTemplate.match(keyHandleName)
      .location;
  }

  /**
   * Parse the key_handle from KeyHandle resource.
   *
   * @param {string} keyHandleName
   *   A fully-qualified path representing KeyHandle resource.
   * @returns {string} A string representing the key_handle.
   */
  matchKeyHandleFromKeyHandleName(keyHandleName: string) {
    return this.pathTemplates.keyHandlePathTemplate.match(keyHandleName)
      .key_handle;
  }

  /**
   * Return a fully-qualified keyRing resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @returns {string} Resource name string.
   */
  keyRingPath(project: string, location: string, keyRing: string) {
    return this.pathTemplates.keyRingPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
    });
  }

  /**
   * Parse the project from KeyRing resource.
   *
   * @param {string} keyRingName
   *   A fully-qualified path representing KeyRing resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromKeyRingName(keyRingName: string) {
    return this.pathTemplates.keyRingPathTemplate.match(keyRingName).project;
  }

  /**
   * Parse the location from KeyRing resource.
   *
   * @param {string} keyRingName
   *   A fully-qualified path representing KeyRing resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromKeyRingName(keyRingName: string) {
    return this.pathTemplates.keyRingPathTemplate.match(keyRingName).location;
  }

  /**
   * Parse the key_ring from KeyRing resource.
   *
   * @param {string} keyRingName
   *   A fully-qualified path representing KeyRing resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromKeyRingName(keyRingName: string) {
    return this.pathTemplates.keyRingPathTemplate.match(keyRingName).key_ring;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified publicKey resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} key_ring
   * @param {string} crypto_key
   * @param {string} crypto_key_version
   * @returns {string} Resource name string.
   */
  publicKeyPath(
    project: string,
    location: string,
    keyRing: string,
    cryptoKey: string,
    cryptoKeyVersion: string
  ) {
    return this.pathTemplates.publicKeyPathTemplate.render({
      project: project,
      location: location,
      key_ring: keyRing,
      crypto_key: cryptoKey,
      crypto_key_version: cryptoKeyVersion,
    });
  }

  /**
   * Parse the project from PublicKey resource.
   *
   * @param {string} publicKeyName
   *   A fully-qualified path representing PublicKey resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPublicKeyName(publicKeyName: string) {
    return this.pathTemplates.publicKeyPathTemplate.match(publicKeyName)
      .project;
  }

  /**
   * Parse the location from PublicKey resource.
   *
   * @param {string} publicKeyName
   *   A fully-qualified path representing PublicKey resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPublicKeyName(publicKeyName: string) {
    return this.pathTemplates.publicKeyPathTemplate.match(publicKeyName)
      .location;
  }

  /**
   * Parse the key_ring from PublicKey resource.
   *
   * @param {string} publicKeyName
   *   A fully-qualified path representing PublicKey resource.
   * @returns {string} A string representing the key_ring.
   */
  matchKeyRingFromPublicKeyName(publicKeyName: string) {
    return this.pathTemplates.publicKeyPathTemplate.match(publicKeyName)
      .key_ring;
  }

  /**
   * Parse the crypto_key from PublicKey resource.
   *
   * @param {string} publicKeyName
   *   A fully-qualified path representing PublicKey resource.
   * @returns {string} A string representing the crypto_key.
   */
  matchCryptoKeyFromPublicKeyName(publicKeyName: string) {
    return this.pathTemplates.publicKeyPathTemplate.match(publicKeyName)
      .crypto_key;
  }

  /**
   * Parse the crypto_key_version from PublicKey resource.
   *
   * @param {string} publicKeyName
   *   A fully-qualified path representing PublicKey resource.
   * @returns {string} A string representing the crypto_key_version.
   */
  matchCryptoKeyVersionFromPublicKeyName(publicKeyName: string) {
    return this.pathTemplates.publicKeyPathTemplate.match(publicKeyName)
      .crypto_key_version;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.autokeyAdminStub && !this._terminated) {
      return this.autokeyAdminStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
