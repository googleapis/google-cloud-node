// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protosTypes from '../protos/protos';
import * as assert from 'assert';
import {describe, it} from 'mocha';
const keymanagementserviceModule = require('../src');

const FAKE_STATUS_CODE = 1;
class FakeError {
  name: string;
  message: string;
  code: number;
  constructor(n: number) {
    this.name = 'fakeName';
    this.message = 'fake message';
    this.code = n;
  }
}
const error = new FakeError(FAKE_STATUS_CODE);
export interface Callback {
  (err: FakeError | null, response?: {} | null): void;
}

export class Operation {
  constructor() {}
  promise() {}
}
function mockSimpleGrpcMethod(
  expectedRequest: {},
  response: {} | null,
  error: FakeError | null
) {
  return (actualRequest: {}, options: {}, callback: Callback) => {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    if (error) {
      callback(error);
    } else if (response) {
      callback(null, response);
    } else {
      callback(null);
    }
  };
}
describe('v1.KeyManagementServiceClient', () => {
  it('has servicePath', () => {
    const servicePath =
      keymanagementserviceModule.v1.KeyManagementServiceClient.servicePath;
    assert(servicePath);
  });
  it('has apiEndpoint', () => {
    const apiEndpoint =
      keymanagementserviceModule.v1.KeyManagementServiceClient.apiEndpoint;
    assert(apiEndpoint);
  });
  it('has port', () => {
    const port = keymanagementserviceModule.v1.KeyManagementServiceClient.port;
    assert(port);
    assert(typeof port === 'number');
  });
  it('should create a client with no option', () => {
    const client = new keymanagementserviceModule.v1.KeyManagementServiceClient();
    assert(client);
  });
  it('should create a client with gRPC fallback', () => {
    const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
      {
        fallback: true,
      }
    );
    assert(client);
  });
  it('has initialize method and supports deferred initialization', async () => {
    const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
      {
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      }
    );
    assert.strictEqual(client.keyManagementServiceStub, undefined);
    await client.initialize();
    assert(client.keyManagementServiceStub);
  });
  it('has close method', () => {
    const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
      {
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      }
    );
    client.close();
  });
  describe('getKeyRing', () => {
    it('invokes getKeyRing without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetKeyRingRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getKeyRing = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getKeyRing(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getKeyRing with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetKeyRingRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getKeyRing = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getKeyRing(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getCryptoKey', () => {
    it('invokes getCryptoKey without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getCryptoKey = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getCryptoKey(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getCryptoKey with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getCryptoKey = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getCryptoKey(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getCryptoKeyVersion', () => {
    it('invokes getCryptoKeyVersion without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getCryptoKeyVersion(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getCryptoKeyVersion with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetCryptoKeyVersionRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getCryptoKeyVersion(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getPublicKey', () => {
    it('invokes getPublicKey without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getPublicKey = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getPublicKey(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getPublicKey with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetPublicKeyRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getPublicKey = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getPublicKey(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('getImportJob', () => {
    it('invokes getImportJob without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetImportJobRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getImportJob = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.getImportJob(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getImportJob with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IGetImportJobRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.getImportJob = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.getImportJob(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createKeyRing', () => {
    it('invokes createKeyRing without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createKeyRing = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createKeyRing(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createKeyRing with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.ICreateKeyRingRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createKeyRing = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createKeyRing(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createCryptoKey', () => {
    it('invokes createCryptoKey without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createCryptoKey = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createCryptoKey(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createCryptoKey with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createCryptoKey = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createCryptoKey(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createCryptoKeyVersion', () => {
    it('invokes createCryptoKeyVersion without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createCryptoKeyVersion(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createCryptoKeyVersion with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.ICreateCryptoKeyVersionRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createCryptoKeyVersion(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('importCryptoKeyVersion', () => {
    it('invokes importCryptoKeyVersion without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.importCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.importCryptoKeyVersion(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes importCryptoKeyVersion with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IImportCryptoKeyVersionRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.importCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.importCryptoKeyVersion(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('createImportJob', () => {
    it('invokes createImportJob without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.ICreateImportJobRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createImportJob = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.createImportJob(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createImportJob with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.ICreateImportJobRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.createImportJob = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.createImportJob(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateCryptoKey', () => {
    it('invokes updateCryptoKey without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest = {};
      request.cryptoKey = {};
      request.cryptoKey.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateCryptoKey = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateCryptoKey(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateCryptoKey with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyRequest = {};
      request.cryptoKey = {};
      request.cryptoKey.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateCryptoKey = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateCryptoKey(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateCryptoKeyVersion', () => {
    it('invokes updateCryptoKeyVersion without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest = {};
      request.cryptoKeyVersion = {};
      request.cryptoKeyVersion.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateCryptoKeyVersion(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateCryptoKeyVersion with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyVersionRequest = {};
      request.cryptoKeyVersion = {};
      request.cryptoKeyVersion.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateCryptoKeyVersion(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('encrypt', () => {
    it('invokes encrypt without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IEncryptRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.encrypt = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.encrypt(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes encrypt with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IEncryptRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.encrypt = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.encrypt(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('decrypt', () => {
    it('invokes decrypt without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IDecryptRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.decrypt = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.decrypt(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes decrypt with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IDecryptRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.decrypt = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.decrypt(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('asymmetricSign', () => {
    it('invokes asymmetricSign without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.asymmetricSign = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.asymmetricSign(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes asymmetricSign with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IAsymmetricSignRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.asymmetricSign = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.asymmetricSign(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('asymmetricDecrypt', () => {
    it('invokes asymmetricDecrypt without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.asymmetricDecrypt = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.asymmetricDecrypt(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes asymmetricDecrypt with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IAsymmetricDecryptRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.asymmetricDecrypt = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.asymmetricDecrypt(request, (err: FakeError, response: {}) => {
        assert(err instanceof FakeError);
        assert.strictEqual(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });
  describe('updateCryptoKeyPrimaryVersion', () => {
    it('invokes updateCryptoKeyPrimaryVersion without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateCryptoKeyPrimaryVersion = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.updateCryptoKeyPrimaryVersion(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateCryptoKeyPrimaryVersion with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IUpdateCryptoKeyPrimaryVersionRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.updateCryptoKeyPrimaryVersion = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.updateCryptoKeyPrimaryVersion(
        request,
        (err: FakeError, response: {}) => {
          assert(err instanceof FakeError);
          assert.strictEqual(err.code, FAKE_STATUS_CODE);
          assert(typeof response === 'undefined');
          done();
        }
      );
    });
  });
  describe('destroyCryptoKeyVersion', () => {
    it('invokes destroyCryptoKeyVersion without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.destroyCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.destroyCryptoKeyVersion(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes destroyCryptoKeyVersion with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IDestroyCryptoKeyVersionRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.destroyCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.destroyCryptoKeyVersion(
        request,
        (err: FakeError, response: {}) => {
          assert(err instanceof FakeError);
          assert.strictEqual(err.code, FAKE_STATUS_CODE);
          assert(typeof response === 'undefined');
          done();
        }
      );
    });
  });
  describe('restoreCryptoKeyVersion', () => {
    it('invokes restoreCryptoKeyVersion without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.restoreCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        expectedResponse,
        null
      );
      client.restoreCryptoKeyVersion(request, (err: {}, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes restoreCryptoKeyVersion with error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IRestoreCryptoKeyVersionRequest = {};
      request.name = '';
      // Mock response
      const expectedResponse = {};
      // Mock gRPC layer
      client._innerApiCalls.restoreCryptoKeyVersion = mockSimpleGrpcMethod(
        request,
        null,
        error
      );
      client.restoreCryptoKeyVersion(
        request,
        (err: FakeError, response: {}) => {
          assert(err instanceof FakeError);
          assert.strictEqual(err.code, FAKE_STATUS_CODE);
          assert(typeof response === 'undefined');
          done();
        }
      );
    });
  });
  describe('listKeyRings', () => {
    it('invokes listKeyRings without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IListKeyRingsRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.listKeyRings = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      client.listKeyRings(request, (err: FakeError, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });
  });
  describe('listKeyRingsStream', () => {
    it('invokes listKeyRingsStream without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IListKeyRingsRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {response: 'data'};
      // Mock Grpc layer
      client._innerApiCalls.listKeyRings = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      const stream = client
        .listKeyRingsStream(request, {})
        .on('data', (response: {}) => {
          assert.deepStrictEqual(response, expectedResponse);
          done();
        })
        .on('error', (err: FakeError) => {
          done(err);
        });
      stream.write(expectedResponse);
    });
  });
  describe('listCryptoKeys', () => {
    it('invokes listCryptoKeys without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.listCryptoKeys = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      client.listCryptoKeys(request, (err: FakeError, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });
  });
  describe('listCryptoKeysStream', () => {
    it('invokes listCryptoKeysStream without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IListCryptoKeysRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {response: 'data'};
      // Mock Grpc layer
      client._innerApiCalls.listCryptoKeys = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      const stream = client
        .listCryptoKeysStream(request, {})
        .on('data', (response: {}) => {
          assert.deepStrictEqual(response, expectedResponse);
          done();
        })
        .on('error', (err: FakeError) => {
          done(err);
        });
      stream.write(expectedResponse);
    });
  });
  describe('listCryptoKeyVersions', () => {
    it('invokes listCryptoKeyVersions without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.listCryptoKeyVersions = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      client.listCryptoKeyVersions(request, (err: FakeError, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });
  });
  describe('listCryptoKeyVersionsStream', () => {
    it('invokes listCryptoKeyVersionsStream without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IListCryptoKeyVersionsRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {response: 'data'};
      // Mock Grpc layer
      client._innerApiCalls.listCryptoKeyVersions = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      const stream = client
        .listCryptoKeyVersionsStream(request, {})
        .on('data', (response: {}) => {
          assert.deepStrictEqual(response, expectedResponse);
          done();
        })
        .on('error', (err: FakeError) => {
          done(err);
        });
      stream.write(expectedResponse);
    });
  });
  describe('listImportJobs', () => {
    it('invokes listImportJobs without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IListImportJobsRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {};
      // Mock Grpc layer
      client._innerApiCalls.listImportJobs = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      client.listImportJobs(request, (err: FakeError, response: {}) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });
  });
  describe('listImportJobsStream', () => {
    it('invokes listImportJobsStream without error', done => {
      const client = new keymanagementserviceModule.v1.KeyManagementServiceClient(
        {
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        }
      );
      // Initialize client before mocking
      client.initialize();
      // Mock request
      const request: protosTypes.google.cloud.kms.v1.IListImportJobsRequest = {};
      request.parent = '';
      // Mock response
      const expectedResponse = {response: 'data'};
      // Mock Grpc layer
      client._innerApiCalls.listImportJobs = (
        actualRequest: {},
        options: {},
        callback: Callback
      ) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse);
      };
      const stream = client
        .listImportJobsStream(request, {})
        .on('data', (response: {}) => {
          assert.deepStrictEqual(response, expectedResponse);
          done();
        })
        .on('error', (err: FakeError) => {
          done(err);
        });
      stream.write(expectedResponse);
    });
  });
});
