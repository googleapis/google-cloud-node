// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as keymanagementserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, IamProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.KeyManagementServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        keymanagementserviceModule.v1.KeyManagementServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        keymanagementserviceModule.v1.KeyManagementServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port =
        keymanagementserviceModule.v1.KeyManagementServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.keyManagementServiceStub, undefined);
      await client.initialize();
      assert(client.keyManagementServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.keyManagementServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.keyManagementServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getKeyRing', () => {
    it('invokes getKeyRing without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetKeyRingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetKeyRingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.KeyRing()
      );
      client.innerApiCalls.getKeyRing = stubSimpleCall(expectedResponse);
      const [response] = await client.getKeyRing(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getKeyRing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getKeyRing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getKeyRing without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetKeyRingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetKeyRingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.KeyRing()
      );
      client.innerApiCalls.getKeyRing =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getKeyRing(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IKeyRing | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getKeyRing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getKeyRing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getKeyRing with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetKeyRingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetKeyRingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getKeyRing = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getKeyRing(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getKeyRing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getKeyRing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getKeyRing with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetKeyRingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetKeyRingRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getKeyRing(request), expectedError);
    });
  });

  describe('getCryptoKey', () => {
    it('invokes getCryptoKey without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetCryptoKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetCryptoKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKey()
      );
      client.innerApiCalls.getCryptoKey = stubSimpleCall(expectedResponse);
      const [response] = await client.getCryptoKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCryptoKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCryptoKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCryptoKey without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetCryptoKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetCryptoKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKey()
      );
      client.innerApiCalls.getCryptoKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCryptoKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCryptoKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCryptoKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCryptoKey with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetCryptoKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetCryptoKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCryptoKey = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCryptoKey(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCryptoKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCryptoKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCryptoKey with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetCryptoKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetCryptoKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCryptoKey(request), expectedError);
    });
  });

  describe('getCryptoKeyVersion', () => {
    it('invokes getCryptoKeyVersion without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.getCryptoKeyVersion =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getCryptoKeyVersion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCryptoKeyVersion without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.getCryptoKeyVersion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCryptoKeyVersion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKeyVersion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCryptoKeyVersion with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCryptoKeyVersion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCryptoKeyVersion(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCryptoKeyVersion with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCryptoKeyVersion(request), expectedError);
    });
  });

  describe('getPublicKey', () => {
    it('invokes getPublicKey without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetPublicKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetPublicKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.PublicKey()
      );
      client.innerApiCalls.getPublicKey = stubSimpleCall(expectedResponse);
      const [response] = await client.getPublicKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPublicKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPublicKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPublicKey without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetPublicKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetPublicKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.PublicKey()
      );
      client.innerApiCalls.getPublicKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPublicKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IPublicKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPublicKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPublicKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPublicKey with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetPublicKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetPublicKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPublicKey = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPublicKey(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPublicKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPublicKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPublicKey with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetPublicKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetPublicKeyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPublicKey(request), expectedError);
    });
  });

  describe('getImportJob', () => {
    it('invokes getImportJob without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetImportJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetImportJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.ImportJob()
      );
      client.innerApiCalls.getImportJob = stubSimpleCall(expectedResponse);
      const [response] = await client.getImportJob(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getImportJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getImportJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getImportJob without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetImportJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetImportJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.ImportJob()
      );
      client.innerApiCalls.getImportJob =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getImportJob(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IImportJob | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getImportJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getImportJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getImportJob with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetImportJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetImportJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getImportJob = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getImportJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getImportJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getImportJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getImportJob with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GetImportJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GetImportJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getImportJob(request), expectedError);
    });
  });

  describe('createKeyRing', () => {
    it('invokes createKeyRing without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateKeyRingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateKeyRingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.KeyRing()
      );
      client.innerApiCalls.createKeyRing = stubSimpleCall(expectedResponse);
      const [response] = await client.createKeyRing(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createKeyRing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKeyRing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createKeyRing without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateKeyRingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateKeyRingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.KeyRing()
      );
      client.innerApiCalls.createKeyRing =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createKeyRing(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IKeyRing | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createKeyRing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKeyRing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createKeyRing with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateKeyRingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateKeyRingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createKeyRing = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createKeyRing(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createKeyRing as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createKeyRing as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createKeyRing with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateKeyRingRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateKeyRingRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createKeyRing(request), expectedError);
    });
  });

  describe('createCryptoKey', () => {
    it('invokes createCryptoKey without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateCryptoKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateCryptoKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKey()
      );
      client.innerApiCalls.createCryptoKey = stubSimpleCall(expectedResponse);
      const [response] = await client.createCryptoKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCryptoKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCryptoKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCryptoKey without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateCryptoKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateCryptoKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKey()
      );
      client.innerApiCalls.createCryptoKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCryptoKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCryptoKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCryptoKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCryptoKey with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateCryptoKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateCryptoKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCryptoKey = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createCryptoKey(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCryptoKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCryptoKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCryptoKey with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateCryptoKeyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateCryptoKeyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createCryptoKey(request), expectedError);
    });
  });

  describe('createCryptoKeyVersion', () => {
    it('invokes createCryptoKeyVersion without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateCryptoKeyVersionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.createCryptoKeyVersion =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createCryptoKeyVersion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCryptoKeyVersion without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateCryptoKeyVersionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.createCryptoKeyVersion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCryptoKeyVersion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKeyVersion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCryptoKeyVersion with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateCryptoKeyVersionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCryptoKeyVersion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createCryptoKeyVersion(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCryptoKeyVersion with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateCryptoKeyVersionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createCryptoKeyVersion(request),
        expectedError
      );
    });
  });

  describe('importCryptoKeyVersion', () => {
    it('invokes importCryptoKeyVersion without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ImportCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ImportCryptoKeyVersionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.importCryptoKeyVersion =
        stubSimpleCall(expectedResponse);
      const [response] = await client.importCryptoKeyVersion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importCryptoKeyVersion without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ImportCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ImportCryptoKeyVersionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.importCryptoKeyVersion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.importCryptoKeyVersion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKeyVersion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importCryptoKeyVersion with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ImportCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ImportCryptoKeyVersionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importCryptoKeyVersion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.importCryptoKeyVersion(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.importCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importCryptoKeyVersion with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ImportCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ImportCryptoKeyVersionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.importCryptoKeyVersion(request),
        expectedError
      );
    });
  });

  describe('createImportJob', () => {
    it('invokes createImportJob without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateImportJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateImportJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.ImportJob()
      );
      client.innerApiCalls.createImportJob = stubSimpleCall(expectedResponse);
      const [response] = await client.createImportJob(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createImportJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createImportJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createImportJob without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateImportJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateImportJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.ImportJob()
      );
      client.innerApiCalls.createImportJob =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createImportJob(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IImportJob | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createImportJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createImportJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createImportJob with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateImportJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateImportJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createImportJob = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createImportJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createImportJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createImportJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createImportJob with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.CreateImportJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.CreateImportJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createImportJob(request), expectedError);
    });
  });

  describe('updateCryptoKey', () => {
    it('invokes updateCryptoKey without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyRequest()
      );
      request.cryptoKey ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyRequest',
        ['cryptoKey', 'name']
      );
      request.cryptoKey.name = defaultValue1;
      const expectedHeaderRequestParams = `crypto_key.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKey()
      );
      client.innerApiCalls.updateCryptoKey = stubSimpleCall(expectedResponse);
      const [response] = await client.updateCryptoKey(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCryptoKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCryptoKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCryptoKey without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyRequest()
      );
      request.cryptoKey ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyRequest',
        ['cryptoKey', 'name']
      );
      request.cryptoKey.name = defaultValue1;
      const expectedHeaderRequestParams = `crypto_key.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKey()
      );
      client.innerApiCalls.updateCryptoKey =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCryptoKey(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCryptoKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCryptoKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCryptoKey with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyRequest()
      );
      request.cryptoKey ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyRequest',
        ['cryptoKey', 'name']
      );
      request.cryptoKey.name = defaultValue1;
      const expectedHeaderRequestParams = `crypto_key.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCryptoKey = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateCryptoKey(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateCryptoKey as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCryptoKey as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCryptoKey with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyRequest()
      );
      request.cryptoKey ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyRequest',
        ['cryptoKey', 'name']
      );
      request.cryptoKey.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateCryptoKey(request), expectedError);
    });
  });

  describe('updateCryptoKeyVersion', () => {
    it('invokes updateCryptoKeyVersion without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest()
      );
      request.cryptoKeyVersion ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest',
        ['cryptoKeyVersion', 'name']
      );
      request.cryptoKeyVersion.name = defaultValue1;
      const expectedHeaderRequestParams = `crypto_key_version.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.updateCryptoKeyVersion =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateCryptoKeyVersion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCryptoKeyVersion without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest()
      );
      request.cryptoKeyVersion ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest',
        ['cryptoKeyVersion', 'name']
      );
      request.cryptoKeyVersion.name = defaultValue1;
      const expectedHeaderRequestParams = `crypto_key_version.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.updateCryptoKeyVersion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCryptoKeyVersion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKeyVersion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCryptoKeyVersion with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest()
      );
      request.cryptoKeyVersion ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest',
        ['cryptoKeyVersion', 'name']
      );
      request.cryptoKeyVersion.name = defaultValue1;
      const expectedHeaderRequestParams = `crypto_key_version.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCryptoKeyVersion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateCryptoKeyVersion(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCryptoKeyVersion with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest()
      );
      request.cryptoKeyVersion ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyVersionRequest',
        ['cryptoKeyVersion', 'name']
      );
      request.cryptoKeyVersion.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateCryptoKeyVersion(request),
        expectedError
      );
    });
  });

  describe('updateCryptoKeyPrimaryVersion', () => {
    it('invokes updateCryptoKeyPrimaryVersion without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKey()
      );
      client.innerApiCalls.updateCryptoKeyPrimaryVersion =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateCryptoKeyPrimaryVersion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCryptoKeyPrimaryVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCryptoKeyPrimaryVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCryptoKeyPrimaryVersion without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKey()
      );
      client.innerApiCalls.updateCryptoKeyPrimaryVersion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCryptoKeyPrimaryVersion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKey | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCryptoKeyPrimaryVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCryptoKeyPrimaryVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCryptoKeyPrimaryVersion with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCryptoKeyPrimaryVersion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateCryptoKeyPrimaryVersion(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateCryptoKeyPrimaryVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCryptoKeyPrimaryVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCryptoKeyPrimaryVersion with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.UpdateCryptoKeyPrimaryVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateCryptoKeyPrimaryVersion(request),
        expectedError
      );
    });
  });

  describe('destroyCryptoKeyVersion', () => {
    it('invokes destroyCryptoKeyVersion without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.destroyCryptoKeyVersion =
        stubSimpleCall(expectedResponse);
      const [response] = await client.destroyCryptoKeyVersion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.destroyCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.destroyCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes destroyCryptoKeyVersion without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.destroyCryptoKeyVersion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.destroyCryptoKeyVersion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKeyVersion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.destroyCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.destroyCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes destroyCryptoKeyVersion with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.destroyCryptoKeyVersion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.destroyCryptoKeyVersion(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.destroyCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.destroyCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes destroyCryptoKeyVersion with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.DestroyCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.destroyCryptoKeyVersion(request),
        expectedError
      );
    });
  });

  describe('restoreCryptoKeyVersion', () => {
    it('invokes restoreCryptoKeyVersion without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.restoreCryptoKeyVersion =
        stubSimpleCall(expectedResponse);
      const [response] = await client.restoreCryptoKeyVersion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restoreCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreCryptoKeyVersion without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.CryptoKeyVersion()
      );
      client.innerApiCalls.restoreCryptoKeyVersion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.restoreCryptoKeyVersion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKeyVersion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restoreCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreCryptoKeyVersion with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restoreCryptoKeyVersion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.restoreCryptoKeyVersion(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.restoreCryptoKeyVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreCryptoKeyVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreCryptoKeyVersion with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.RestoreCryptoKeyVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.restoreCryptoKeyVersion(request),
        expectedError
      );
    });
  });

  describe('encrypt', () => {
    it('invokes encrypt without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.EncryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.EncryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.EncryptResponse()
      );
      client.innerApiCalls.encrypt = stubSimpleCall(expectedResponse);
      const [response] = await client.encrypt(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.encrypt as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.encrypt as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes encrypt without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.EncryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.EncryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.EncryptResponse()
      );
      client.innerApiCalls.encrypt =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.encrypt(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IEncryptResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.encrypt as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.encrypt as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes encrypt with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.EncryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.EncryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.encrypt = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.encrypt(request), expectedError);
      const actualRequest = (client.innerApiCalls.encrypt as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.encrypt as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes encrypt with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.EncryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.EncryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.encrypt(request), expectedError);
    });
  });

  describe('decrypt', () => {
    it('invokes decrypt without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.DecryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.DecryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.DecryptResponse()
      );
      client.innerApiCalls.decrypt = stubSimpleCall(expectedResponse);
      const [response] = await client.decrypt(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.decrypt as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.decrypt as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes decrypt without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.DecryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.DecryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.DecryptResponse()
      );
      client.innerApiCalls.decrypt =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.decrypt(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IDecryptResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.decrypt as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.decrypt as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes decrypt with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.DecryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.DecryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.decrypt = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.decrypt(request), expectedError);
      const actualRequest = (client.innerApiCalls.decrypt as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.decrypt as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes decrypt with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.DecryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.DecryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.decrypt(request), expectedError);
    });
  });

  describe('asymmetricSign', () => {
    it('invokes asymmetricSign without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricSignRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.AsymmetricSignRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricSignResponse()
      );
      client.innerApiCalls.asymmetricSign = stubSimpleCall(expectedResponse);
      const [response] = await client.asymmetricSign(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.asymmetricSign as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.asymmetricSign as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes asymmetricSign without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricSignRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.AsymmetricSignRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricSignResponse()
      );
      client.innerApiCalls.asymmetricSign =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.asymmetricSign(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IAsymmetricSignResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.asymmetricSign as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.asymmetricSign as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes asymmetricSign with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricSignRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.AsymmetricSignRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.asymmetricSign = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.asymmetricSign(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.asymmetricSign as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.asymmetricSign as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes asymmetricSign with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricSignRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.AsymmetricSignRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.asymmetricSign(request), expectedError);
    });
  });

  describe('asymmetricDecrypt', () => {
    it('invokes asymmetricDecrypt without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricDecryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.AsymmetricDecryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricDecryptResponse()
      );
      client.innerApiCalls.asymmetricDecrypt = stubSimpleCall(expectedResponse);
      const [response] = await client.asymmetricDecrypt(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.asymmetricDecrypt as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.asymmetricDecrypt as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes asymmetricDecrypt without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricDecryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.AsymmetricDecryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricDecryptResponse()
      );
      client.innerApiCalls.asymmetricDecrypt =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.asymmetricDecrypt(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IAsymmetricDecryptResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.asymmetricDecrypt as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.asymmetricDecrypt as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes asymmetricDecrypt with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricDecryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.AsymmetricDecryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.asymmetricDecrypt = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.asymmetricDecrypt(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.asymmetricDecrypt as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.asymmetricDecrypt as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes asymmetricDecrypt with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.AsymmetricDecryptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.AsymmetricDecryptRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.asymmetricDecrypt(request), expectedError);
    });
  });

  describe('macSign', () => {
    it('invokes macSign without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacSignRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.MacSignRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacSignResponse()
      );
      client.innerApiCalls.macSign = stubSimpleCall(expectedResponse);
      const [response] = await client.macSign(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.macSign as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.macSign as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes macSign without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacSignRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.MacSignRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacSignResponse()
      );
      client.innerApiCalls.macSign =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.macSign(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IMacSignResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.macSign as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.macSign as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes macSign with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacSignRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.MacSignRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.macSign = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.macSign(request), expectedError);
      const actualRequest = (client.innerApiCalls.macSign as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.macSign as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes macSign with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacSignRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.MacSignRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.macSign(request), expectedError);
    });
  });

  describe('macVerify', () => {
    it('invokes macVerify without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacVerifyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.MacVerifyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacVerifyResponse()
      );
      client.innerApiCalls.macVerify = stubSimpleCall(expectedResponse);
      const [response] = await client.macVerify(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.macVerify as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.macVerify as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes macVerify without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacVerifyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.MacVerifyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacVerifyResponse()
      );
      client.innerApiCalls.macVerify =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.macVerify(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IMacVerifyResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.macVerify as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.macVerify as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes macVerify with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacVerifyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.MacVerifyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.macVerify = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.macVerify(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.macVerify as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.macVerify as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes macVerify with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.MacVerifyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.MacVerifyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.macVerify(request), expectedError);
    });
  });

  describe('generateRandomBytes', () => {
    it('invokes generateRandomBytes without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GenerateRandomBytesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GenerateRandomBytesRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.GenerateRandomBytesResponse()
      );
      client.innerApiCalls.generateRandomBytes =
        stubSimpleCall(expectedResponse);
      const [response] = await client.generateRandomBytes(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateRandomBytes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateRandomBytes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateRandomBytes without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GenerateRandomBytesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GenerateRandomBytesRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.kms.v1.GenerateRandomBytesResponse()
      );
      client.innerApiCalls.generateRandomBytes =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.generateRandomBytes(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IGenerateRandomBytesResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateRandomBytes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateRandomBytes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateRandomBytes with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GenerateRandomBytesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GenerateRandomBytesRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedHeaderRequestParams = `location=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.generateRandomBytes = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.generateRandomBytes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.generateRandomBytes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateRandomBytes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateRandomBytes with closed client', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.GenerateRandomBytesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.GenerateRandomBytesRequest',
        ['location']
      );
      request.location = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.generateRandomBytes(request), expectedError);
    });
  });

  describe('listKeyRings', () => {
    it('invokes listKeyRings without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListKeyRingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListKeyRingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
      ];
      client.innerApiCalls.listKeyRings = stubSimpleCall(expectedResponse);
      const [response] = await client.listKeyRings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listKeyRings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listKeyRings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listKeyRings without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListKeyRingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListKeyRingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
      ];
      client.innerApiCalls.listKeyRings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listKeyRings(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IKeyRing[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listKeyRings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listKeyRings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listKeyRings with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListKeyRingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListKeyRingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listKeyRings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listKeyRings(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listKeyRings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listKeyRings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listKeyRingsStream without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListKeyRingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListKeyRingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
      ];
      client.descriptors.page.listKeyRings.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listKeyRingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.v1.KeyRing[] = [];
        stream.on('data', (response: protos.google.cloud.kms.v1.KeyRing) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listKeyRings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listKeyRings, request)
      );
      assert(
        (client.descriptors.page.listKeyRings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listKeyRingsStream with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListKeyRingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListKeyRingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listKeyRings.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listKeyRingsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.v1.KeyRing[] = [];
        stream.on('data', (response: protos.google.cloud.kms.v1.KeyRing) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listKeyRings.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listKeyRings, request)
      );
      assert(
        (client.descriptors.page.listKeyRings.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listKeyRings without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListKeyRingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListKeyRingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
        generateSampleMessage(new protos.google.cloud.kms.v1.KeyRing()),
      ];
      client.descriptors.page.listKeyRings.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.kms.v1.IKeyRing[] = [];
      const iterable = client.listKeyRingsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listKeyRings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listKeyRings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listKeyRings with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListKeyRingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListKeyRingsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listKeyRings.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listKeyRingsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.kms.v1.IKeyRing[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listKeyRings.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listKeyRings.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listCryptoKeys', () => {
    it('invokes listCryptoKeys without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
      ];
      client.innerApiCalls.listCryptoKeys = stubSimpleCall(expectedResponse);
      const [response] = await client.listCryptoKeys(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCryptoKeys as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCryptoKeys as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCryptoKeys without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
      ];
      client.innerApiCalls.listCryptoKeys =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCryptoKeys(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKey[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCryptoKeys as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCryptoKeys as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCryptoKeys with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCryptoKeys = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCryptoKeys(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listCryptoKeys as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCryptoKeys as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCryptoKeysStream without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
      ];
      client.descriptors.page.listCryptoKeys.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCryptoKeysStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.v1.CryptoKey[] = [];
        stream.on('data', (response: protos.google.cloud.kms.v1.CryptoKey) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCryptoKeys.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCryptoKeys, request)
      );
      assert(
        (client.descriptors.page.listCryptoKeys.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCryptoKeysStream with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCryptoKeys.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCryptoKeysStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.v1.CryptoKey[] = [];
        stream.on('data', (response: protos.google.cloud.kms.v1.CryptoKey) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCryptoKeys.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCryptoKeys, request)
      );
      assert(
        (client.descriptors.page.listCryptoKeys.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCryptoKeys without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
        generateSampleMessage(new protos.google.cloud.kms.v1.CryptoKey()),
      ];
      client.descriptors.page.listCryptoKeys.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.kms.v1.ICryptoKey[] = [];
      const iterable = client.listCryptoKeysAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCryptoKeys.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCryptoKeys.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCryptoKeys with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeysRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeysRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCryptoKeys.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCryptoKeysAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.kms.v1.ICryptoKey[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCryptoKeys.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCryptoKeys.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listCryptoKeyVersions', () => {
    it('invokes listCryptoKeyVersions without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeyVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
      ];
      client.innerApiCalls.listCryptoKeyVersions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listCryptoKeyVersions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCryptoKeyVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCryptoKeyVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCryptoKeyVersions without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeyVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
      ];
      client.innerApiCalls.listCryptoKeyVersions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCryptoKeyVersions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.ICryptoKeyVersion[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCryptoKeyVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCryptoKeyVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCryptoKeyVersions with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeyVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCryptoKeyVersions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listCryptoKeyVersions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listCryptoKeyVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCryptoKeyVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCryptoKeyVersionsStream without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeyVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
      ];
      client.descriptors.page.listCryptoKeyVersions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCryptoKeyVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.v1.CryptoKeyVersion[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.kms.v1.CryptoKeyVersion) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listCryptoKeyVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listCryptoKeyVersions, request)
      );
      assert(
        (
          client.descriptors.page.listCryptoKeyVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCryptoKeyVersionsStream with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeyVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCryptoKeyVersions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCryptoKeyVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.v1.CryptoKeyVersion[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.kms.v1.CryptoKeyVersion) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listCryptoKeyVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listCryptoKeyVersions, request)
      );
      assert(
        (
          client.descriptors.page.listCryptoKeyVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCryptoKeyVersions without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeyVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.kms.v1.CryptoKeyVersion()
        ),
      ];
      client.descriptors.page.listCryptoKeyVersions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.kms.v1.ICryptoKeyVersion[] = [];
      const iterable = client.listCryptoKeyVersionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCryptoKeyVersions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listCryptoKeyVersions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCryptoKeyVersions with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListCryptoKeyVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListCryptoKeyVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCryptoKeyVersions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCryptoKeyVersionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.kms.v1.ICryptoKeyVersion[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCryptoKeyVersions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listCryptoKeyVersions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listImportJobs', () => {
    it('invokes listImportJobs without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListImportJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListImportJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
      ];
      client.innerApiCalls.listImportJobs = stubSimpleCall(expectedResponse);
      const [response] = await client.listImportJobs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listImportJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listImportJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listImportJobs without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListImportJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListImportJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
      ];
      client.innerApiCalls.listImportJobs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listImportJobs(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.kms.v1.IImportJob[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listImportJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listImportJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listImportJobs with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListImportJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListImportJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listImportJobs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listImportJobs(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listImportJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listImportJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listImportJobsStream without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListImportJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListImportJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
      ];
      client.descriptors.page.listImportJobs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listImportJobsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.v1.ImportJob[] = [];
        stream.on('data', (response: protos.google.cloud.kms.v1.ImportJob) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listImportJobs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listImportJobs, request)
      );
      assert(
        (client.descriptors.page.listImportJobs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listImportJobsStream with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListImportJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListImportJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listImportJobs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listImportJobsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.kms.v1.ImportJob[] = [];
        stream.on('data', (response: protos.google.cloud.kms.v1.ImportJob) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listImportJobs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listImportJobs, request)
      );
      assert(
        (client.descriptors.page.listImportJobs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listImportJobs without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListImportJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListImportJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
        generateSampleMessage(new protos.google.cloud.kms.v1.ImportJob()),
      ];
      client.descriptors.page.listImportJobs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.kms.v1.IImportJob[] = [];
      const iterable = client.listImportJobsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listImportJobs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listImportJobs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listImportJobs with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.kms.v1.ListImportJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.kms.v1.ListImportJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listImportJobs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listImportJobsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.kms.v1.IImportJob[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listImportJobs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listImportJobs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('cryptoKey', () => {
      const fakePath = '/rendered/path/cryptoKey';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        crypto_key: 'cryptoKeyValue',
      };
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.cryptoKeyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cryptoKeyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cryptoKeyPath', () => {
        const result = client.cryptoKeyPath(
          'projectValue',
          'locationValue',
          'keyRingValue',
          'cryptoKeyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCryptoKeyName', () => {
        const result = client.matchProjectFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCryptoKeyName', () => {
        const result = client.matchLocationFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromCryptoKeyName', () => {
        const result = client.matchKeyRingFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyFromCryptoKeyName', () => {
        const result = client.matchCryptoKeyFromCryptoKeyName(fakePath);
        assert.strictEqual(result, 'cryptoKeyValue');
        assert(
          (client.pathTemplates.cryptoKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('cryptoKeyVersion', () => {
      const fakePath = '/rendered/path/cryptoKeyVersion';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        crypto_key: 'cryptoKeyValue',
        crypto_key_version: 'cryptoKeyVersionValue',
      };
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.cryptoKeyVersionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cryptoKeyVersionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cryptoKeyVersionPath', () => {
        const result = client.cryptoKeyVersionPath(
          'projectValue',
          'locationValue',
          'keyRingValue',
          'cryptoKeyValue',
          'cryptoKeyVersionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.cryptoKeyVersionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCryptoKeyVersionName', () => {
        const result = client.matchProjectFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCryptoKeyVersionName', () => {
        const result = client.matchLocationFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromCryptoKeyVersionName', () => {
        const result = client.matchKeyRingFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyFromCryptoKeyVersionName', () => {
        const result = client.matchCryptoKeyFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'cryptoKeyValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyVersionFromCryptoKeyVersionName', () => {
        const result =
          client.matchCryptoKeyVersionFromCryptoKeyVersionName(fakePath);
        assert.strictEqual(result, 'cryptoKeyVersionValue');
        assert(
          (client.pathTemplates.cryptoKeyVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('ekmConnection', () => {
      const fakePath = '/rendered/path/ekmConnection';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        ekm_connection: 'ekmConnectionValue',
      };
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.ekmConnectionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.ekmConnectionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('ekmConnectionPath', () => {
        const result = client.ekmConnectionPath(
          'projectValue',
          'locationValue',
          'ekmConnectionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.ekmConnectionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEkmConnectionName', () => {
        const result = client.matchProjectFromEkmConnectionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.ekmConnectionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEkmConnectionName', () => {
        const result = client.matchLocationFromEkmConnectionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.ekmConnectionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEkmConnectionFromEkmConnectionName', () => {
        const result = client.matchEkmConnectionFromEkmConnectionName(fakePath);
        assert.strictEqual(result, 'ekmConnectionValue');
        assert(
          (client.pathTemplates.ekmConnectionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('importJob', () => {
      const fakePath = '/rendered/path/importJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        import_job: 'importJobValue',
      };
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.importJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.importJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('importJobPath', () => {
        const result = client.importJobPath(
          'projectValue',
          'locationValue',
          'keyRingValue',
          'importJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.importJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromImportJobName', () => {
        const result = client.matchProjectFromImportJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.importJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromImportJobName', () => {
        const result = client.matchLocationFromImportJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.importJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromImportJobName', () => {
        const result = client.matchKeyRingFromImportJobName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.importJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchImportJobFromImportJobName', () => {
        const result = client.matchImportJobFromImportJobName(fakePath);
        assert.strictEqual(result, 'importJobValue');
        assert(
          (client.pathTemplates.importJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('keyRing', () => {
      const fakePath = '/rendered/path/keyRing';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
      };
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.keyRingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.keyRingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('keyRingPath', () => {
        const result = client.keyRingPath(
          'projectValue',
          'locationValue',
          'keyRingValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.keyRingPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromKeyRingName', () => {
        const result = client.matchProjectFromKeyRingName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.keyRingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromKeyRingName', () => {
        const result = client.matchLocationFromKeyRingName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.keyRingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromKeyRingName', () => {
        const result = client.matchKeyRingFromKeyRingName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.keyRingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('publicKey', () => {
      const fakePath = '/rendered/path/publicKey';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        key_ring: 'keyRingValue',
        crypto_key: 'cryptoKeyValue',
        crypto_key_version: 'cryptoKeyVersionValue',
      };
      const client =
        new keymanagementserviceModule.v1.KeyManagementServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.publicKeyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.publicKeyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('publicKeyPath', () => {
        const result = client.publicKeyPath(
          'projectValue',
          'locationValue',
          'keyRingValue',
          'cryptoKeyValue',
          'cryptoKeyVersionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.publicKeyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPublicKeyName', () => {
        const result = client.matchProjectFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPublicKeyName', () => {
        const result = client.matchLocationFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchKeyRingFromPublicKeyName', () => {
        const result = client.matchKeyRingFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'keyRingValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyFromPublicKeyName', () => {
        const result = client.matchCryptoKeyFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'cryptoKeyValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCryptoKeyVersionFromPublicKeyName', () => {
        const result = client.matchCryptoKeyVersionFromPublicKeyName(fakePath);
        assert.strictEqual(result, 'cryptoKeyVersionValue');
        assert(
          (client.pathTemplates.publicKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
