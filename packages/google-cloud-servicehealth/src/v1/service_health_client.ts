// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/service_health_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './service_health_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Request service health events relevant to your Google Cloud project.
 * @class
 * @memberof v1
 */
export class ServiceHealthClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  serviceHealthStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ServiceHealthClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ServiceHealthClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ServiceHealthClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      eventPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/events/{event}'
      ),
      organizationEventPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/organizationEvents/{event}'
      ),
      organizationImpactPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/organizationImpacts/{organization_impact}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listEvents: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'events'
      ),
      listOrganizationEvents: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'organizationEvents'
      ),
      listOrganizationImpacts: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'organizationImpacts'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.servicehealth.v1.ServiceHealth',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.serviceHealthStub) {
      return this.serviceHealthStub;
    }

    // Put together the "service stub" for
    // google.cloud.servicehealth.v1.ServiceHealth.
    this.serviceHealthStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.servicehealth.v1.ServiceHealth'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.servicehealth.v1.ServiceHealth,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const serviceHealthStubMethods = [
      'listEvents',
      'getEvent',
      'listOrganizationEvents',
      'getOrganizationEvent',
      'listOrganizationImpacts',
      'getOrganizationImpact',
    ];
    for (const methodName of serviceHealthStubMethods) {
      const callPromise = this.serviceHealthStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.serviceHealthStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'servicehealth.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'servicehealth.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Retrieves a resource containing information about an event.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Unique name of the event in this scope including project
   *   and location using the form
   *   `projects/{project_id}/locations/{location}/events/{event_id}`.
   *
   *   `project_id` - Project ID of the project that contains the event. <br>
   *   `location` - The location to get the service health events from. <br>
   *   `event_id` - Event ID to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.servicehealth.v1.Event|Event}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_health.get_event.js</caption>
   * region_tag:servicehealth_v1_generated_ServiceHealth_GetEvent_async
   */
  getEvent(
    request?: protos.google.cloud.servicehealth.v1.IGetEventRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IEvent,
      protos.google.cloud.servicehealth.v1.IGetEventRequest | undefined,
      {} | undefined,
    ]
  >;
  getEvent(
    request: protos.google.cloud.servicehealth.v1.IGetEventRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.servicehealth.v1.IEvent,
      protos.google.cloud.servicehealth.v1.IGetEventRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getEvent(
    request: protos.google.cloud.servicehealth.v1.IGetEventRequest,
    callback: Callback<
      protos.google.cloud.servicehealth.v1.IEvent,
      protos.google.cloud.servicehealth.v1.IGetEventRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getEvent(
    request?: protos.google.cloud.servicehealth.v1.IGetEventRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.servicehealth.v1.IEvent,
          | protos.google.cloud.servicehealth.v1.IGetEventRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicehealth.v1.IEvent,
      protos.google.cloud.servicehealth.v1.IGetEventRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IEvent,
      protos.google.cloud.servicehealth.v1.IGetEventRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getEvent(request, options, callback);
  }
  /**
   * Retrieves a resource containing information about an event affecting an
   * organization .
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Unique name of the event in this scope including organization and
   *   event ID using the form
   *   `organizations/{organization_id}/locations/locations/global/organizationEvents/{event_id}`.
   *
   *   `organization_id` - ID (number) of the project that contains the event. To
   *   get your `organization_id`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).<br>
   *   `event_id` - Organization event ID to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.servicehealth.v1.OrganizationEvent|OrganizationEvent}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_health.get_organization_event.js</caption>
   * region_tag:servicehealth_v1_generated_ServiceHealth_GetOrganizationEvent_async
   */
  getOrganizationEvent(
    request?: protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IOrganizationEvent,
      (
        | protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getOrganizationEvent(
    request: protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.servicehealth.v1.IOrganizationEvent,
      | protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getOrganizationEvent(
    request: protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest,
    callback: Callback<
      protos.google.cloud.servicehealth.v1.IOrganizationEvent,
      | protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getOrganizationEvent(
    request?: protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.servicehealth.v1.IOrganizationEvent,
          | protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicehealth.v1.IOrganizationEvent,
      | protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IOrganizationEvent,
      (
        | protos.google.cloud.servicehealth.v1.IGetOrganizationEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getOrganizationEvent(request, options, callback);
  }
  /**
   * Retrieves a resource containing information about impact to an asset under
   * an organization affected by a service health event.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource using the form
   *   `organizations/{organization_id}/locations/global/organizationImpacts/{organization_impact_id}`.
   *
   *   `organization_id` - ID (number) of the organization that contains the
   *   event. To get your `organization_id`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).<br>
   *   `organization_impact_id` - ID of the [OrganizationImpact
   *   resource](/service-health/docs/reference/rest/v1beta/organizations.locations.organizationImpacts#OrganizationImpact).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.servicehealth.v1.OrganizationImpact|OrganizationImpact}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_health.get_organization_impact.js</caption>
   * region_tag:servicehealth_v1_generated_ServiceHealth_GetOrganizationImpact_async
   */
  getOrganizationImpact(
    request?: protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IOrganizationImpact,
      (
        | protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getOrganizationImpact(
    request: protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.servicehealth.v1.IOrganizationImpact,
      | protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getOrganizationImpact(
    request: protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest,
    callback: Callback<
      protos.google.cloud.servicehealth.v1.IOrganizationImpact,
      | protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getOrganizationImpact(
    request?: protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.servicehealth.v1.IOrganizationImpact,
          | protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.servicehealth.v1.IOrganizationImpact,
      | protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IOrganizationImpact,
      (
        | protos.google.cloud.servicehealth.v1.IGetOrganizationImpactRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getOrganizationImpact(request, options, callback);
  }

  /**
   * Lists events under a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value using the form
   *   `projects/{project_id}/locations/{location}/events`.
   *
   *   `project_id` - ID of the project for which to list service health
   *   events.
   *   `location` - The location to get the service health events from.
   *   To retrieve service health events of category = INCIDENT, use `location` =
   *   `global`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of events that should be returned.  Acceptable
   *   values are 1 to 100, inclusive. (The default value is 10.) If more results
   *   are available, the service returns a next_page_token that you can use to
   *   get the next page of results in subsequent list requests. The service may
   *   return fewer events than the requested page_size.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   *   Provide Page token returned by a previous `ListEvents` call to retrieve the
   *   next page of results. When paginating, all other parameters provided to
   *   `ListEvents` must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. A filter expression that filters resources listed in the
   *   response. The expression takes the following forms: <br>
   *   *   field=value for `category` and `state`<br>
   *   *   field &lt;, >, &lt;=, or >= value for `update_time` <br>
   *   Examples: `category=INCIDENT`, `update_time>=2000-01-01T11:30:00-04:00`
   *   <br>
   *
   *   Multiple filter queries are separated by spaces. Example:
   *   `category=INCIDENT state=ACTIVE`.
   *
   *   By default, each expression is an AND expression. However, you can include
   *   AND and OR expressions explicitly.
   *
   *   Filter is supported for the following fields: `category`, `state`,
   *   `update_time`
   * @param {google.cloud.servicehealth.v1.EventView} [request.view]
   *   Optional. Event fields to include in response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.servicehealth.v1.Event|Event}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listEventsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEvents(
    request?: protos.google.cloud.servicehealth.v1.IListEventsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IEvent[],
      protos.google.cloud.servicehealth.v1.IListEventsRequest | null,
      protos.google.cloud.servicehealth.v1.IListEventsResponse,
    ]
  >;
  listEvents(
    request: protos.google.cloud.servicehealth.v1.IListEventsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.servicehealth.v1.IListEventsRequest,
      | protos.google.cloud.servicehealth.v1.IListEventsResponse
      | null
      | undefined,
      protos.google.cloud.servicehealth.v1.IEvent
    >
  ): void;
  listEvents(
    request: protos.google.cloud.servicehealth.v1.IListEventsRequest,
    callback: PaginationCallback<
      protos.google.cloud.servicehealth.v1.IListEventsRequest,
      | protos.google.cloud.servicehealth.v1.IListEventsResponse
      | null
      | undefined,
      protos.google.cloud.servicehealth.v1.IEvent
    >
  ): void;
  listEvents(
    request?: protos.google.cloud.servicehealth.v1.IListEventsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.servicehealth.v1.IListEventsRequest,
          | protos.google.cloud.servicehealth.v1.IListEventsResponse
          | null
          | undefined,
          protos.google.cloud.servicehealth.v1.IEvent
        >,
    callback?: PaginationCallback<
      protos.google.cloud.servicehealth.v1.IListEventsRequest,
      | protos.google.cloud.servicehealth.v1.IListEventsResponse
      | null
      | undefined,
      protos.google.cloud.servicehealth.v1.IEvent
    >
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IEvent[],
      protos.google.cloud.servicehealth.v1.IListEventsRequest | null,
      protos.google.cloud.servicehealth.v1.IListEventsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listEvents(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value using the form
   *   `projects/{project_id}/locations/{location}/events`.
   *
   *   `project_id` - ID of the project for which to list service health
   *   events.
   *   `location` - The location to get the service health events from.
   *   To retrieve service health events of category = INCIDENT, use `location` =
   *   `global`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of events that should be returned.  Acceptable
   *   values are 1 to 100, inclusive. (The default value is 10.) If more results
   *   are available, the service returns a next_page_token that you can use to
   *   get the next page of results in subsequent list requests. The service may
   *   return fewer events than the requested page_size.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   *   Provide Page token returned by a previous `ListEvents` call to retrieve the
   *   next page of results. When paginating, all other parameters provided to
   *   `ListEvents` must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. A filter expression that filters resources listed in the
   *   response. The expression takes the following forms: <br>
   *   *   field=value for `category` and `state`<br>
   *   *   field &lt;, >, &lt;=, or >= value for `update_time` <br>
   *   Examples: `category=INCIDENT`, `update_time>=2000-01-01T11:30:00-04:00`
   *   <br>
   *
   *   Multiple filter queries are separated by spaces. Example:
   *   `category=INCIDENT state=ACTIVE`.
   *
   *   By default, each expression is an AND expression. However, you can include
   *   AND and OR expressions explicitly.
   *
   *   Filter is supported for the following fields: `category`, `state`,
   *   `update_time`
   * @param {google.cloud.servicehealth.v1.EventView} [request.view]
   *   Optional. Event fields to include in response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.servicehealth.v1.Event|Event} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listEventsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEventsStream(
    request?: protos.google.cloud.servicehealth.v1.IListEventsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEvents.createStream(
      this.innerApiCalls.listEvents as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listEvents`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value using the form
   *   `projects/{project_id}/locations/{location}/events`.
   *
   *   `project_id` - ID of the project for which to list service health
   *   events.
   *   `location` - The location to get the service health events from.
   *   To retrieve service health events of category = INCIDENT, use `location` =
   *   `global`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of events that should be returned.  Acceptable
   *   values are 1 to 100, inclusive. (The default value is 10.) If more results
   *   are available, the service returns a next_page_token that you can use to
   *   get the next page of results in subsequent list requests. The service may
   *   return fewer events than the requested page_size.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   *   Provide Page token returned by a previous `ListEvents` call to retrieve the
   *   next page of results. When paginating, all other parameters provided to
   *   `ListEvents` must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. A filter expression that filters resources listed in the
   *   response. The expression takes the following forms: <br>
   *   *   field=value for `category` and `state`<br>
   *   *   field &lt;, >, &lt;=, or >= value for `update_time` <br>
   *   Examples: `category=INCIDENT`, `update_time>=2000-01-01T11:30:00-04:00`
   *   <br>
   *
   *   Multiple filter queries are separated by spaces. Example:
   *   `category=INCIDENT state=ACTIVE`.
   *
   *   By default, each expression is an AND expression. However, you can include
   *   AND and OR expressions explicitly.
   *
   *   Filter is supported for the following fields: `category`, `state`,
   *   `update_time`
   * @param {google.cloud.servicehealth.v1.EventView} [request.view]
   *   Optional. Event fields to include in response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.servicehealth.v1.Event|Event}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_health.list_events.js</caption>
   * region_tag:servicehealth_v1_generated_ServiceHealth_ListEvents_async
   */
  listEventsAsync(
    request?: protos.google.cloud.servicehealth.v1.IListEventsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.servicehealth.v1.IEvent> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEvents.asyncIterate(
      this.innerApiCalls['listEvents'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.servicehealth.v1.IEvent>;
  }
  /**
   * Lists organization events under a given organization and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value using the form
   *   `organizations/{organization_id}/locations/{location}/organizationEvents`.
   *
   *   `organization_id` - ID (number) of the project that contains the event. To
   *   get your `organization_id`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).<br>
   *   `location` - The location to get the service health events from. To
   *   retrieve service health events of category = INCIDENT, use `location` =
   *   `global`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of events that should be returned.  Acceptable
   *   values are `1` to `100`, inclusive. (The default value is `10`.) If more
   *   results are available, the service returns a `next_page_token` that you can
   *   use to get the next page of results in subsequent list requests. The
   *   service may return fewer events than the requested `page_size`.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   *
   *   Provide Page token returned by a previous `ListOrganizationEvents` call to
   *   retrieve the next page of results.
   *
   *   When paginating, all other parameters provided to
   *   `ListOrganizationEvents` must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. A filter expression that filters resources listed in the
   *   response. The expression takes the following forms:
   *
   *   *   field=value for `category` and `state`
   *   *   field &lt;, >, &lt;=, or >= value for `update_time`
   *
   *   Examples: `category=INCIDENT`, `update_time>=2000-01-01T11:30:00-04:00`
   *
   *   Multiple filter queries are space-separated. Example:
   *   `category=INCIDENT state=ACTIVE`.
   *
   *   By default, each expression is an AND expression. However, you can include
   *   AND and OR expressions explicitly.
   *
   *   Filter is supported for the following fields: `category`, `state`,
   *   `update_time`
   * @param {google.cloud.servicehealth.v1.OrganizationEventView} [request.view]
   *   Optional. OrganizationEvent fields to include in response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.servicehealth.v1.OrganizationEvent|OrganizationEvent}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listOrganizationEventsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOrganizationEvents(
    request?: protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IOrganizationEvent[],
      protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest | null,
      protos.google.cloud.servicehealth.v1.IListOrganizationEventsResponse,
    ]
  >;
  listOrganizationEvents(
    request: protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
      | protos.google.cloud.servicehealth.v1.IListOrganizationEventsResponse
      | null
      | undefined,
      protos.google.cloud.servicehealth.v1.IOrganizationEvent
    >
  ): void;
  listOrganizationEvents(
    request: protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
    callback: PaginationCallback<
      protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
      | protos.google.cloud.servicehealth.v1.IListOrganizationEventsResponse
      | null
      | undefined,
      protos.google.cloud.servicehealth.v1.IOrganizationEvent
    >
  ): void;
  listOrganizationEvents(
    request?: protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
          | protos.google.cloud.servicehealth.v1.IListOrganizationEventsResponse
          | null
          | undefined,
          protos.google.cloud.servicehealth.v1.IOrganizationEvent
        >,
    callback?: PaginationCallback<
      protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
      | protos.google.cloud.servicehealth.v1.IListOrganizationEventsResponse
      | null
      | undefined,
      protos.google.cloud.servicehealth.v1.IOrganizationEvent
    >
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IOrganizationEvent[],
      protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest | null,
      protos.google.cloud.servicehealth.v1.IListOrganizationEventsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listOrganizationEvents(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value using the form
   *   `organizations/{organization_id}/locations/{location}/organizationEvents`.
   *
   *   `organization_id` - ID (number) of the project that contains the event. To
   *   get your `organization_id`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).<br>
   *   `location` - The location to get the service health events from. To
   *   retrieve service health events of category = INCIDENT, use `location` =
   *   `global`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of events that should be returned.  Acceptable
   *   values are `1` to `100`, inclusive. (The default value is `10`.) If more
   *   results are available, the service returns a `next_page_token` that you can
   *   use to get the next page of results in subsequent list requests. The
   *   service may return fewer events than the requested `page_size`.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   *
   *   Provide Page token returned by a previous `ListOrganizationEvents` call to
   *   retrieve the next page of results.
   *
   *   When paginating, all other parameters provided to
   *   `ListOrganizationEvents` must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. A filter expression that filters resources listed in the
   *   response. The expression takes the following forms:
   *
   *   *   field=value for `category` and `state`
   *   *   field &lt;, >, &lt;=, or >= value for `update_time`
   *
   *   Examples: `category=INCIDENT`, `update_time>=2000-01-01T11:30:00-04:00`
   *
   *   Multiple filter queries are space-separated. Example:
   *   `category=INCIDENT state=ACTIVE`.
   *
   *   By default, each expression is an AND expression. However, you can include
   *   AND and OR expressions explicitly.
   *
   *   Filter is supported for the following fields: `category`, `state`,
   *   `update_time`
   * @param {google.cloud.servicehealth.v1.OrganizationEventView} [request.view]
   *   Optional. OrganizationEvent fields to include in response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.servicehealth.v1.OrganizationEvent|OrganizationEvent} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listOrganizationEventsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOrganizationEventsStream(
    request?: protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOrganizationEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOrganizationEvents.createStream(
      this.innerApiCalls.listOrganizationEvents as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listOrganizationEvents`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value using the form
   *   `organizations/{organization_id}/locations/{location}/organizationEvents`.
   *
   *   `organization_id` - ID (number) of the project that contains the event. To
   *   get your `organization_id`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).<br>
   *   `location` - The location to get the service health events from. To
   *   retrieve service health events of category = INCIDENT, use `location` =
   *   `global`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of events that should be returned.  Acceptable
   *   values are `1` to `100`, inclusive. (The default value is `10`.) If more
   *   results are available, the service returns a `next_page_token` that you can
   *   use to get the next page of results in subsequent list requests. The
   *   service may return fewer events than the requested `page_size`.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   *
   *   Provide Page token returned by a previous `ListOrganizationEvents` call to
   *   retrieve the next page of results.
   *
   *   When paginating, all other parameters provided to
   *   `ListOrganizationEvents` must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. A filter expression that filters resources listed in the
   *   response. The expression takes the following forms:
   *
   *   *   field=value for `category` and `state`
   *   *   field &lt;, >, &lt;=, or >= value for `update_time`
   *
   *   Examples: `category=INCIDENT`, `update_time>=2000-01-01T11:30:00-04:00`
   *
   *   Multiple filter queries are space-separated. Example:
   *   `category=INCIDENT state=ACTIVE`.
   *
   *   By default, each expression is an AND expression. However, you can include
   *   AND and OR expressions explicitly.
   *
   *   Filter is supported for the following fields: `category`, `state`,
   *   `update_time`
   * @param {google.cloud.servicehealth.v1.OrganizationEventView} [request.view]
   *   Optional. OrganizationEvent fields to include in response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.servicehealth.v1.OrganizationEvent|OrganizationEvent}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_health.list_organization_events.js</caption>
   * region_tag:servicehealth_v1_generated_ServiceHealth_ListOrganizationEvents_async
   */
  listOrganizationEventsAsync(
    request?: protos.google.cloud.servicehealth.v1.IListOrganizationEventsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.servicehealth.v1.IOrganizationEvent> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOrganizationEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOrganizationEvents.asyncIterate(
      this.innerApiCalls['listOrganizationEvents'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.servicehealth.v1.IOrganizationEvent>;
  }
  /**
   * Lists assets impacted by organization events under a given organization and
   * location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value using the form
   *   `organizations/{organization_id}/locations/{location}/organizationImpacts`.
   *
   *   `organization_id` - ID (number) of the project that contains the event. To
   *   get your `organization_id`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of events that should be returned. Acceptable
   *   values are `1` to `100`, inclusive. The default value is `10`.
   *
   *    If more results are available, the service returns a
   *   `next_page_token` that can be used to get the next page of results in
   *   subsequent list requests. The service may return fewer
   *   [impacts](/service-health/docs/reference/rest/v1beta/organizations.locations.organizationImpacts#OrganizationImpact)
   *   than the requested `page_size`.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   *
   *   Provide `page_token` returned by a previous `ListOrganizationImpacts` call
   *   to retrieve the next page of results.
   *
   *   When paginating, all other parameters provided to `ListOrganizationImpacts`
   *   must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. A filter expression that filters resources listed in the
   *   response. The expression is in the form of `field:value` for checking if a
   *   repeated field contains a value.
   *
   *   Example:
   *   `events:organizations%2F{organization_id}%2Flocations%2Fglobal%2ForganizationEvents%2Fevent-id`
   *
   *   To get your `{organization_id}`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).
   *
   *   Multiple filter queries are separated by spaces.
   *
   *   By default, each expression is an AND expression. However, you can include
   *   AND and OR expressions explicitly.
   *   Filter is supported for the following fields: `events`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.servicehealth.v1.OrganizationImpact|OrganizationImpact}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listOrganizationImpactsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOrganizationImpacts(
    request?: protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IOrganizationImpact[],
      protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest | null,
      protos.google.cloud.servicehealth.v1.IListOrganizationImpactsResponse,
    ]
  >;
  listOrganizationImpacts(
    request: protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
      | protos.google.cloud.servicehealth.v1.IListOrganizationImpactsResponse
      | null
      | undefined,
      protos.google.cloud.servicehealth.v1.IOrganizationImpact
    >
  ): void;
  listOrganizationImpacts(
    request: protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
    callback: PaginationCallback<
      protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
      | protos.google.cloud.servicehealth.v1.IListOrganizationImpactsResponse
      | null
      | undefined,
      protos.google.cloud.servicehealth.v1.IOrganizationImpact
    >
  ): void;
  listOrganizationImpacts(
    request?: protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
          | protos.google.cloud.servicehealth.v1.IListOrganizationImpactsResponse
          | null
          | undefined,
          protos.google.cloud.servicehealth.v1.IOrganizationImpact
        >,
    callback?: PaginationCallback<
      protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
      | protos.google.cloud.servicehealth.v1.IListOrganizationImpactsResponse
      | null
      | undefined,
      protos.google.cloud.servicehealth.v1.IOrganizationImpact
    >
  ): Promise<
    [
      protos.google.cloud.servicehealth.v1.IOrganizationImpact[],
      protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest | null,
      protos.google.cloud.servicehealth.v1.IListOrganizationImpactsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listOrganizationImpacts(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value using the form
   *   `organizations/{organization_id}/locations/{location}/organizationImpacts`.
   *
   *   `organization_id` - ID (number) of the project that contains the event. To
   *   get your `organization_id`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of events that should be returned. Acceptable
   *   values are `1` to `100`, inclusive. The default value is `10`.
   *
   *    If more results are available, the service returns a
   *   `next_page_token` that can be used to get the next page of results in
   *   subsequent list requests. The service may return fewer
   *   [impacts](/service-health/docs/reference/rest/v1beta/organizations.locations.organizationImpacts#OrganizationImpact)
   *   than the requested `page_size`.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   *
   *   Provide `page_token` returned by a previous `ListOrganizationImpacts` call
   *   to retrieve the next page of results.
   *
   *   When paginating, all other parameters provided to `ListOrganizationImpacts`
   *   must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. A filter expression that filters resources listed in the
   *   response. The expression is in the form of `field:value` for checking if a
   *   repeated field contains a value.
   *
   *   Example:
   *   `events:organizations%2F{organization_id}%2Flocations%2Fglobal%2ForganizationEvents%2Fevent-id`
   *
   *   To get your `{organization_id}`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).
   *
   *   Multiple filter queries are separated by spaces.
   *
   *   By default, each expression is an AND expression. However, you can include
   *   AND and OR expressions explicitly.
   *   Filter is supported for the following fields: `events`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.servicehealth.v1.OrganizationImpact|OrganizationImpact} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listOrganizationImpactsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listOrganizationImpactsStream(
    request?: protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOrganizationImpacts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOrganizationImpacts.createStream(
      this.innerApiCalls.listOrganizationImpacts as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listOrganizationImpacts`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value using the form
   *   `organizations/{organization_id}/locations/{location}/organizationImpacts`.
   *
   *   `organization_id` - ID (number) of the project that contains the event. To
   *   get your `organization_id`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of events that should be returned. Acceptable
   *   values are `1` to `100`, inclusive. The default value is `10`.
   *
   *    If more results are available, the service returns a
   *   `next_page_token` that can be used to get the next page of results in
   *   subsequent list requests. The service may return fewer
   *   [impacts](/service-health/docs/reference/rest/v1beta/organizations.locations.organizationImpacts#OrganizationImpact)
   *   than the requested `page_size`.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   *
   *   Provide `page_token` returned by a previous `ListOrganizationImpacts` call
   *   to retrieve the next page of results.
   *
   *   When paginating, all other parameters provided to `ListOrganizationImpacts`
   *   must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. A filter expression that filters resources listed in the
   *   response. The expression is in the form of `field:value` for checking if a
   *   repeated field contains a value.
   *
   *   Example:
   *   `events:organizations%2F{organization_id}%2Flocations%2Fglobal%2ForganizationEvents%2Fevent-id`
   *
   *   To get your `{organization_id}`, see
   *   [Getting your organization resource
   *   ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).
   *
   *   Multiple filter queries are separated by spaces.
   *
   *   By default, each expression is an AND expression. However, you can include
   *   AND and OR expressions explicitly.
   *   Filter is supported for the following fields: `events`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.servicehealth.v1.OrganizationImpact|OrganizationImpact}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/service_health.list_organization_impacts.js</caption>
   * region_tag:servicehealth_v1_generated_ServiceHealth_ListOrganizationImpacts_async
   */
  listOrganizationImpactsAsync(
    request?: protos.google.cloud.servicehealth.v1.IListOrganizationImpactsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.servicehealth.v1.IOrganizationImpact> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listOrganizationImpacts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listOrganizationImpacts.asyncIterate(
      this.innerApiCalls['listOrganizationImpacts'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.servicehealth.v1.IOrganizationImpact>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified event resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} event
   * @returns {string} Resource name string.
   */
  eventPath(project: string, location: string, event: string) {
    return this.pathTemplates.eventPathTemplate.render({
      project: project,
      location: location,
      event: event,
    });
  }

  /**
   * Parse the project from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).project;
  }

  /**
   * Parse the location from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).location;
  }

  /**
   * Parse the event from Event resource.
   *
   * @param {string} eventName
   *   A fully-qualified path representing Event resource.
   * @returns {string} A string representing the event.
   */
  matchEventFromEventName(eventName: string) {
    return this.pathTemplates.eventPathTemplate.match(eventName).event;
  }

  /**
   * Return a fully-qualified organizationEvent resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} event
   * @returns {string} Resource name string.
   */
  organizationEventPath(organization: string, location: string, event: string) {
    return this.pathTemplates.organizationEventPathTemplate.render({
      organization: organization,
      location: location,
      event: event,
    });
  }

  /**
   * Parse the organization from OrganizationEvent resource.
   *
   * @param {string} organizationEventName
   *   A fully-qualified path representing OrganizationEvent resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationEventName(organizationEventName: string) {
    return this.pathTemplates.organizationEventPathTemplate.match(
      organizationEventName
    ).organization;
  }

  /**
   * Parse the location from OrganizationEvent resource.
   *
   * @param {string} organizationEventName
   *   A fully-qualified path representing OrganizationEvent resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationEventName(organizationEventName: string) {
    return this.pathTemplates.organizationEventPathTemplate.match(
      organizationEventName
    ).location;
  }

  /**
   * Parse the event from OrganizationEvent resource.
   *
   * @param {string} organizationEventName
   *   A fully-qualified path representing OrganizationEvent resource.
   * @returns {string} A string representing the event.
   */
  matchEventFromOrganizationEventName(organizationEventName: string) {
    return this.pathTemplates.organizationEventPathTemplate.match(
      organizationEventName
    ).event;
  }

  /**
   * Return a fully-qualified organizationImpact resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} organization_impact
   * @returns {string} Resource name string.
   */
  organizationImpactPath(
    organization: string,
    location: string,
    organizationImpact: string
  ) {
    return this.pathTemplates.organizationImpactPathTemplate.render({
      organization: organization,
      location: location,
      organization_impact: organizationImpact,
    });
  }

  /**
   * Parse the organization from OrganizationImpact resource.
   *
   * @param {string} organizationImpactName
   *   A fully-qualified path representing OrganizationImpact resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationImpactName(organizationImpactName: string) {
    return this.pathTemplates.organizationImpactPathTemplate.match(
      organizationImpactName
    ).organization;
  }

  /**
   * Parse the location from OrganizationImpact resource.
   *
   * @param {string} organizationImpactName
   *   A fully-qualified path representing OrganizationImpact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationImpactName(organizationImpactName: string) {
    return this.pathTemplates.organizationImpactPathTemplate.match(
      organizationImpactName
    ).location;
  }

  /**
   * Parse the organization_impact from OrganizationImpact resource.
   *
   * @param {string} organizationImpactName
   *   A fully-qualified path representing OrganizationImpact resource.
   * @returns {string} A string representing the organization_impact.
   */
  matchOrganizationImpactFromOrganizationImpactName(
    organizationImpactName: string
  ) {
    return this.pathTemplates.organizationImpactPathTemplate.match(
      organizationImpactName
    ).organization_impact;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.serviceHealthStub && !this._terminated) {
      return this.serviceHealthStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
