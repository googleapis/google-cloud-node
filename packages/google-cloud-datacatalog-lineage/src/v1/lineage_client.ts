// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/lineage_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './lineage_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Lineage is used to track data flows between assets over time. You can
 *  create {@link protos.google.cloud.datacatalog.lineage.v1.LineageEvent|LineageEvents}
 *  to record lineage between multiple sources and a single target, for
 *  example, when table data is based on data from multiple tables.
 * @class
 * @memberof v1
 */
export class LineageClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  lineageStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of LineageClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new LineageClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof LineageClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    this._universeDomain =
      opts?.universeDomain ?? opts?.universe_domain ?? 'googleapis.com';
    this._servicePath = 'datalineage.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      lineageEventPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processes/{process}/runs/{run}/lineageEvents/{lineage_event}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      processPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processes/{process}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      runPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/processes/{process}/runs/{run}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listProcesses: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'processes'
      ),
      listRuns: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'runs'
      ),
      listLineageEvents: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'lineageEvents'
      ),
      searchLinks: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'links'
      ),
      batchSearchLinkProcesses: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'processLinks'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const deleteProcessResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteProcessMetadata = protoFilesRoot.lookup(
      '.google.cloud.datacatalog.lineage.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteRunResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteRunMetadata = protoFilesRoot.lookup(
      '.google.cloud.datacatalog.lineage.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      deleteProcess: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteProcessResponse.decode.bind(deleteProcessResponse),
        deleteProcessMetadata.decode.bind(deleteProcessMetadata)
      ),
      deleteRun: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteRunResponse.decode.bind(deleteRunResponse),
        deleteRunMetadata.decode.bind(deleteRunMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.datacatalog.lineage.v1.Lineage',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.lineageStub) {
      return this.lineageStub;
    }

    // Put together the "service stub" for
    // google.cloud.datacatalog.lineage.v1.Lineage.
    this.lineageStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.datacatalog.lineage.v1.Lineage'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.datacatalog.lineage.v1.Lineage,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const lineageStubMethods = [
      'processOpenLineageRunEvent',
      'createProcess',
      'updateProcess',
      'getProcess',
      'listProcesses',
      'deleteProcess',
      'createRun',
      'updateRun',
      'getRun',
      'listRuns',
      'deleteRun',
      'createLineageEvent',
      'getLineageEvent',
      'listLineageEvents',
      'deleteLineageEvent',
      'searchLinks',
      'batchSearchLinkProcesses',
    ];
    for (const methodName of lineageStubMethods) {
      const callPromise = this.lineageStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.lineageStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process !== undefined &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'datalineage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process !== undefined &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'datalineage.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates new lineage events together with their parents: process and run.
   * Updates the process and run if they already exist.
   * Mapped from Open Lineage specification:
   * https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.json.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project and its location that should own the
   *   process, run, and lineage event.
   * @param {google.protobuf.Struct} request.openLineage
   *   Required. OpenLineage message following OpenLineage format:
   *   https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.json
   * @param {string} request.requestId
   *   A unique identifier for this request. Restricted to 36 ASCII characters.
   *   A random UUID is recommended. This request is idempotent only if a
   *   `request_id` is provided.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.lineage.v1.ProcessOpenLineageRunEventResponse|ProcessOpenLineageRunEventResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.process_open_lineage_run_event.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_ProcessOpenLineageRunEvent_async
   */
  processOpenLineageRunEvent(
    request?: protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventResponse,
      (
        | protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  processOpenLineageRunEvent(
    request: protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventResponse,
      | protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  processOpenLineageRunEvent(
    request: protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventResponse,
      | protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  processOpenLineageRunEvent(
    request?: protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventResponse,
          | protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventResponse,
      | protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventResponse,
      (
        | protos.google.cloud.datacatalog.lineage.v1.IProcessOpenLineageRunEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.processOpenLineageRunEvent(
      request,
      options,
      callback
    );
  }
  /**
   * Creates a new process.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project and its location that should own the
   *   process.
   * @param {google.cloud.datacatalog.lineage.v1.Process} request.process
   *   Required. The process to create.
   * @param {string} request.requestId
   *   A unique identifier for this request. Restricted to 36 ASCII characters.
   *   A random UUID is recommended. This request is idempotent only if a
   *   `request_id` is provided.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.lineage.v1.Process|Process}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.create_process.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_CreateProcess_async
   */
  createProcess(
    request?: protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      (
        | protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createProcess(
    request: protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      | protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createProcess(
    request: protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      | protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createProcess(
    request?: protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.lineage.v1.IProcess,
          | protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      | protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      (
        | protos.google.cloud.datacatalog.lineage.v1.ICreateProcessRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createProcess(request, options, callback);
  }
  /**
   * Updates a process.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.lineage.v1.Process} request.process
   *   Required. The lineage process to update.
   *
   *   The process's `name` field is used to identify the process to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to update. Currently not used. The whole message is
   *   updated.
   * @param {boolean} request.allowMissing
   *   If set to true and the process is not found, the request inserts it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.lineage.v1.Process|Process}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.update_process.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_UpdateProcess_async
   */
  updateProcess(
    request?: protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      (
        | protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateProcess(
    request: protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      | protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateProcess(
    request: protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      | protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateProcess(
    request?: protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.lineage.v1.IProcess,
          | protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      | protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      (
        | protos.google.cloud.datacatalog.lineage.v1.IUpdateProcessRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'process.name': request.process!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateProcess(request, options, callback);
  }
  /**
   * Gets the details of the specified process.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the process to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.lineage.v1.Process|Process}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.get_process.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_GetProcess_async
   */
  getProcess(
    request?: protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest | undefined,
      {} | undefined,
    ]
  >;
  getProcess(
    request: protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      | protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getProcess(
    request: protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      | protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getProcess(
    request?: protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.lineage.v1.IProcess,
          | protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      | protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcess,
      protos.google.cloud.datacatalog.lineage.v1.IGetProcessRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getProcess(request, options, callback);
  }
  /**
   * Creates a new run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the process that should own the run.
   * @param {google.cloud.datacatalog.lineage.v1.Run} request.run
   *   Required. The run to create.
   * @param {string} request.requestId
   *   A unique identifier for this request. Restricted to 36 ASCII characters.
   *   A random UUID is recommended. This request is idempotent only if a
   *   `request_id` is provided.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.lineage.v1.Run|Run}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.create_run.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_CreateRun_async
   */
  createRun(
    request?: protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest | undefined,
      {} | undefined,
    ]
  >;
  createRun(
    request: protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      | protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createRun(
    request: protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      | protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createRun(
    request?: protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.lineage.v1.IRun,
          | protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      | protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      protos.google.cloud.datacatalog.lineage.v1.ICreateRunRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRun(request, options, callback);
  }
  /**
   * Updates a run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.datacatalog.lineage.v1.Run} request.run
   *   Required. The lineage run to update.
   *
   *   The run's `name` field is used to identify the run to update.
   *
   *   Format:
   *   `projects/{project}/locations/{location}/processes/{process}/runs/{run}`.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to update. Currently not used. The whole message is
   *   updated.
   * @param {boolean} request.allowMissing
   *   If set to true and the run is not found, the request creates it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.lineage.v1.Run|Run}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.update_run.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_UpdateRun_async
   */
  updateRun(
    request?: protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest | undefined,
      {} | undefined,
    ]
  >;
  updateRun(
    request: protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      | protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRun(
    request: protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      | protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRun(
    request?: protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.lineage.v1.IRun,
          | protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      | protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      protos.google.cloud.datacatalog.lineage.v1.IUpdateRunRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'run.name': request.run!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateRun(request, options, callback);
  }
  /**
   * Gets the details of the specified run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the run to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.lineage.v1.Run|Run}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.get_run.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_GetRun_async
   */
  getRun(
    request?: protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest | undefined,
      {} | undefined,
    ]
  >;
  getRun(
    request: protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      | protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRun(
    request: protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      | protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRun(
    request?: protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.lineage.v1.IRun,
          | protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      | protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IRun,
      protos.google.cloud.datacatalog.lineage.v1.IGetRunRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRun(request, options, callback);
  }
  /**
   * Creates a new lineage event.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the run that should own the lineage event.
   * @param {google.cloud.datacatalog.lineage.v1.LineageEvent} request.lineageEvent
   *   Required. The lineage event to create.
   * @param {string} request.requestId
   *   A unique identifier for this request. Restricted to 36 ASCII characters.
   *   A random UUID is recommended. This request is idempotent only if a
   *   `request_id` is provided.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.lineage.v1.LineageEvent|LineageEvent}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.create_lineage_event.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_CreateLineageEvent_async
   */
  createLineageEvent(
    request?: protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      (
        | protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createLineageEvent(
    request: protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      | protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createLineageEvent(
    request: protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      | protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createLineageEvent(
    request?: protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
          | protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      | protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      (
        | protos.google.cloud.datacatalog.lineage.v1.ICreateLineageEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createLineageEvent(request, options, callback);
  }
  /**
   * Gets details of a specified lineage event.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the lineage event to get.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.datacatalog.lineage.v1.LineageEvent|LineageEvent}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.get_lineage_event.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_GetLineageEvent_async
   */
  getLineageEvent(
    request?: protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      (
        | protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getLineageEvent(
    request: protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      | protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLineageEvent(
    request: protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest,
    callback: Callback<
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      | protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLineageEvent(
    request?: protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
          | protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      | protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent,
      (
        | protos.google.cloud.datacatalog.lineage.v1.IGetLineageEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getLineageEvent(request, options, callback);
  }
  /**
   * Deletes the lineage event with the specified name.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the lineage event to delete.
   * @param {boolean} request.allowMissing
   *   If set to true and the lineage event is not found, the request
   *   succeeds but the server doesn't perform any actions.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.delete_lineage_event.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_DeleteLineageEvent_async
   */
  deleteLineageEvent(
    request?: protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  deleteLineageEvent(
    request: protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteLineageEvent(
    request: protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteLineageEvent(
    request?: protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.datacatalog.lineage.v1.IDeleteLineageEventRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteLineageEvent(request, options, callback);
  }

  /**
   * Deletes the process with the specified name.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the process to delete.
   * @param {boolean} request.allowMissing
   *   If set to true and the process is not found, the request
   *   succeeds but the server doesn't perform any actions.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.delete_process.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_DeleteProcess_async
   */
  deleteProcess(
    request?: protos.google.cloud.datacatalog.lineage.v1.IDeleteProcessRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteProcess(
    request: protos.google.cloud.datacatalog.lineage.v1.IDeleteProcessRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteProcess(
    request: protos.google.cloud.datacatalog.lineage.v1.IDeleteProcessRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteProcess(
    request?: protos.google.cloud.datacatalog.lineage.v1.IDeleteProcessRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteProcess(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteProcess()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.delete_process.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_DeleteProcess_async
   */
  async checkDeleteProcessProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datacatalog.lineage.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteProcess,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datacatalog.lineage.v1.OperationMetadata
    >;
  }
  /**
   * Deletes the run with the specified name.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the run to delete.
   * @param {boolean} request.allowMissing
   *   If set to true and the run is not found, the request
   *   succeeds but the server doesn't perform any actions.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.delete_run.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_DeleteRun_async
   */
  deleteRun(
    request?: protos.google.cloud.datacatalog.lineage.v1.IDeleteRunRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteRun(
    request: protos.google.cloud.datacatalog.lineage.v1.IDeleteRunRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRun(
    request: protos.google.cloud.datacatalog.lineage.v1.IDeleteRunRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRun(
    request?: protos.google.cloud.datacatalog.lineage.v1.IDeleteRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.datacatalog.lineage.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRun(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteRun()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.delete_run.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_DeleteRun_async
   */
  async checkDeleteRunProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datacatalog.lineage.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteRun,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.datacatalog.lineage.v1.OperationMetadata
    >;
  }
  /**
   * List processes in the given project and location. List order is descending
   * by insertion time.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project and its location that owns this
   *   collection of processes.
   * @param {number} request.pageSize
   *   The maximum number of processes to return. The service may return
   *   fewer than this value. If unspecified, at most 50 processes are
   *   returned. The maximum value is 100; values greater than 100 are cut to
   *   100.
   * @param {string} request.pageToken
   *   The page token received from a previous `ListProcesses` call. Specify
   *   it to get the next page.
   *
   *   When paginating, all other parameters specified in this call must
   *   match the parameters of the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.datacatalog.lineage.v1.Process|Process}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listProcessesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listProcesses(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcess[],
      protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.IListProcessesResponse,
    ]
  >;
  listProcesses(
    request: protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IListProcessesResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.IProcess
    >
  ): void;
  listProcesses(
    request: protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IListProcessesResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.IProcess
    >
  ): void;
  listProcesses(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
          | protos.google.cloud.datacatalog.lineage.v1.IListProcessesResponse
          | null
          | undefined,
          protos.google.cloud.datacatalog.lineage.v1.IProcess
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IListProcessesResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.IProcess
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcess[],
      protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.IListProcessesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listProcesses(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project and its location that owns this
   *   collection of processes.
   * @param {number} request.pageSize
   *   The maximum number of processes to return. The service may return
   *   fewer than this value. If unspecified, at most 50 processes are
   *   returned. The maximum value is 100; values greater than 100 are cut to
   *   100.
   * @param {string} request.pageToken
   *   The page token received from a previous `ListProcesses` call. Specify
   *   it to get the next page.
   *
   *   When paginating, all other parameters specified in this call must
   *   match the parameters of the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.datacatalog.lineage.v1.Process|Process} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listProcessesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listProcessesStream(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listProcesses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listProcesses.createStream(
      this.innerApiCalls.listProcesses as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listProcesses`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project and its location that owns this
   *   collection of processes.
   * @param {number} request.pageSize
   *   The maximum number of processes to return. The service may return
   *   fewer than this value. If unspecified, at most 50 processes are
   *   returned. The maximum value is 100; values greater than 100 are cut to
   *   100.
   * @param {string} request.pageToken
   *   The page token received from a previous `ListProcesses` call. Specify
   *   it to get the next page.
   *
   *   When paginating, all other parameters specified in this call must
   *   match the parameters of the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.datacatalog.lineage.v1.Process|Process}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.list_processes.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_ListProcesses_async
   */
  listProcessesAsync(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListProcessesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.IProcess> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listProcesses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listProcesses.asyncIterate(
      this.innerApiCalls['listProcesses'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.IProcess>;
  }
  /**
   * Lists runs in the given project and location. List order is descending by
   * `start_time`.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of process that owns this collection of runs.
   * @param {number} request.pageSize
   *   The maximum number of runs to return. The service may return
   *   fewer than this value. If unspecified, at most 50 runs are
   *   returned. The maximum value is 100; values greater than 100 are cut to
   *   100.
   * @param {string} request.pageToken
   *   The page token received from a previous `ListRuns` call. Specify
   *   it to get the next page.
   *
   *   When paginating, all other parameters specified in this call must
   *   match the parameters of the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.datacatalog.lineage.v1.Run|Run}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRunsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRuns(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IRun[],
      protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.IListRunsResponse,
    ]
  >;
  listRuns(
    request: protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IListRunsResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.IRun
    >
  ): void;
  listRuns(
    request: protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IListRunsResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.IRun
    >
  ): void;
  listRuns(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
          | protos.google.cloud.datacatalog.lineage.v1.IListRunsResponse
          | null
          | undefined,
          protos.google.cloud.datacatalog.lineage.v1.IRun
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IListRunsResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.IRun
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IRun[],
      protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.IListRunsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRuns(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of process that owns this collection of runs.
   * @param {number} request.pageSize
   *   The maximum number of runs to return. The service may return
   *   fewer than this value. If unspecified, at most 50 runs are
   *   returned. The maximum value is 100; values greater than 100 are cut to
   *   100.
   * @param {string} request.pageToken
   *   The page token received from a previous `ListRuns` call. Specify
   *   it to get the next page.
   *
   *   When paginating, all other parameters specified in this call must
   *   match the parameters of the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.datacatalog.lineage.v1.Run|Run} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRunsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRunsStream(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRuns'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRuns.createStream(
      this.innerApiCalls.listRuns as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRuns`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of process that owns this collection of runs.
   * @param {number} request.pageSize
   *   The maximum number of runs to return. The service may return
   *   fewer than this value. If unspecified, at most 50 runs are
   *   returned. The maximum value is 100; values greater than 100 are cut to
   *   100.
   * @param {string} request.pageToken
   *   The page token received from a previous `ListRuns` call. Specify
   *   it to get the next page.
   *
   *   When paginating, all other parameters specified in this call must
   *   match the parameters of the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.datacatalog.lineage.v1.Run|Run}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.list_runs.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_ListRuns_async
   */
  listRunsAsync(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListRunsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.IRun> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRuns'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRuns.asyncIterate(
      this.innerApiCalls['listRuns'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.IRun>;
  }
  /**
   * Lists lineage events in the given project and location. The list order is
   * not defined.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the run that owns the collection of lineage events to
   *   get.
   * @param {number} request.pageSize
   *   The maximum number of lineage events to return.
   *
   *   The service may return fewer events than this value.
   *   If unspecified, at most 50 events are returned. The maximum value is 100;
   *   values greater than 100 are cut to 100.
   * @param {string} request.pageToken
   *   The page token received from a previous `ListLineageEvents` call. Specify
   *   it to get the next page.
   *
   *   When paginating, all other parameters specified in this call must
   *   match the parameters of the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.datacatalog.lineage.v1.LineageEvent|LineageEvent}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listLineageEventsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listLineageEvents(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent[],
      protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsResponse,
    ]
  >;
  listLineageEvents(
    request: protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent
    >
  ): void;
  listLineageEvents(
    request: protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent
    >
  ): void;
  listLineageEvents(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
          | protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsResponse
          | null
          | undefined,
          protos.google.cloud.datacatalog.lineage.v1.ILineageEvent
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.ILineageEvent[],
      protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listLineageEvents(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the run that owns the collection of lineage events to
   *   get.
   * @param {number} request.pageSize
   *   The maximum number of lineage events to return.
   *
   *   The service may return fewer events than this value.
   *   If unspecified, at most 50 events are returned. The maximum value is 100;
   *   values greater than 100 are cut to 100.
   * @param {string} request.pageToken
   *   The page token received from a previous `ListLineageEvents` call. Specify
   *   it to get the next page.
   *
   *   When paginating, all other parameters specified in this call must
   *   match the parameters of the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.datacatalog.lineage.v1.LineageEvent|LineageEvent} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listLineageEventsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listLineageEventsStream(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLineageEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLineageEvents.createStream(
      this.innerApiCalls.listLineageEvents as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listLineageEvents`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the run that owns the collection of lineage events to
   *   get.
   * @param {number} request.pageSize
   *   The maximum number of lineage events to return.
   *
   *   The service may return fewer events than this value.
   *   If unspecified, at most 50 events are returned. The maximum value is 100;
   *   values greater than 100 are cut to 100.
   * @param {string} request.pageToken
   *   The page token received from a previous `ListLineageEvents` call. Specify
   *   it to get the next page.
   *
   *   When paginating, all other parameters specified in this call must
   *   match the parameters of the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.datacatalog.lineage.v1.LineageEvent|LineageEvent}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.list_lineage_events.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_ListLineageEvents_async
   */
  listLineageEventsAsync(
    request?: protos.google.cloud.datacatalog.lineage.v1.IListLineageEventsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.ILineageEvent> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLineageEvents'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLineageEvents.asyncIterate(
      this.innerApiCalls['listLineageEvents'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.ILineageEvent>;
  }
  /**
   * Retrieve a list of links connected to a specific asset.
   * Links represent the data flow between **source** (upstream)
   * and **target** (downstream) assets in transformation pipelines.
   * Links are stored in the same project as the Lineage Events that create
   * them.
   *
   * You can retrieve links in every project where you have the
   * `datalineage.events.get` permission. The project provided in the URL
   * is used for Billing and Quota.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location you want search in.
   * @param {google.cloud.datacatalog.lineage.v1.EntityReference} [request.source]
   *   Optional. Send asset information in the **source** field to retrieve all
   *   links that lead from the specified asset to downstream assets.
   * @param {google.cloud.datacatalog.lineage.v1.EntityReference} [request.target]
   *   Optional. Send asset information in the **target** field to retrieve all
   *   links that lead from upstream assets to the specified asset.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of links to return in a single page of the
   *   response. A page may contain fewer links than this value. If unspecified,
   *   at most 10 links are returned.
   *
   *   Maximum value is 100; values greater than 100 are reduced to 100.
   * @param {string} [request.pageToken]
   *   Optional. The page token received from a previous `SearchLinksRequest`
   *   call. Use it to get the next page.
   *
   *   When requesting subsequent pages of a response, remember that
   *   all parameters must match the values you provided
   *   in the original request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.datacatalog.lineage.v1.Link|Link}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `searchLinksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchLinks(
    request?: protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.ILink[],
      protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.ISearchLinksResponse,
    ]
  >;
  searchLinks(
    request: protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
      | protos.google.cloud.datacatalog.lineage.v1.ISearchLinksResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.ILink
    >
  ): void;
  searchLinks(
    request: protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
      | protos.google.cloud.datacatalog.lineage.v1.ISearchLinksResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.ILink
    >
  ): void;
  searchLinks(
    request?: protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
          | protos.google.cloud.datacatalog.lineage.v1.ISearchLinksResponse
          | null
          | undefined,
          protos.google.cloud.datacatalog.lineage.v1.ILink
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
      | protos.google.cloud.datacatalog.lineage.v1.ISearchLinksResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.ILink
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.ILink[],
      protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.ISearchLinksResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.searchLinks(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location you want search in.
   * @param {google.cloud.datacatalog.lineage.v1.EntityReference} [request.source]
   *   Optional. Send asset information in the **source** field to retrieve all
   *   links that lead from the specified asset to downstream assets.
   * @param {google.cloud.datacatalog.lineage.v1.EntityReference} [request.target]
   *   Optional. Send asset information in the **target** field to retrieve all
   *   links that lead from upstream assets to the specified asset.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of links to return in a single page of the
   *   response. A page may contain fewer links than this value. If unspecified,
   *   at most 10 links are returned.
   *
   *   Maximum value is 100; values greater than 100 are reduced to 100.
   * @param {string} [request.pageToken]
   *   Optional. The page token received from a previous `SearchLinksRequest`
   *   call. Use it to get the next page.
   *
   *   When requesting subsequent pages of a response, remember that
   *   all parameters must match the values you provided
   *   in the original request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.datacatalog.lineage.v1.Link|Link} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `searchLinksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchLinksStream(
    request?: protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchLinks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchLinks.createStream(
      this.innerApiCalls.searchLinks as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `searchLinks`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location you want search in.
   * @param {google.cloud.datacatalog.lineage.v1.EntityReference} [request.source]
   *   Optional. Send asset information in the **source** field to retrieve all
   *   links that lead from the specified asset to downstream assets.
   * @param {google.cloud.datacatalog.lineage.v1.EntityReference} [request.target]
   *   Optional. Send asset information in the **target** field to retrieve all
   *   links that lead from upstream assets to the specified asset.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of links to return in a single page of the
   *   response. A page may contain fewer links than this value. If unspecified,
   *   at most 10 links are returned.
   *
   *   Maximum value is 100; values greater than 100 are reduced to 100.
   * @param {string} [request.pageToken]
   *   Optional. The page token received from a previous `SearchLinksRequest`
   *   call. Use it to get the next page.
   *
   *   When requesting subsequent pages of a response, remember that
   *   all parameters must match the values you provided
   *   in the original request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.datacatalog.lineage.v1.Link|Link}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.search_links.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_SearchLinks_async
   */
  searchLinksAsync(
    request?: protos.google.cloud.datacatalog.lineage.v1.ISearchLinksRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.ILink> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchLinks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchLinks.asyncIterate(
      this.innerApiCalls['searchLinks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.ILink>;
  }
  /**
   * Retrieve information about LineageProcesses associated with specific
   * links. LineageProcesses are transformation pipelines that result in data
   * flowing from **source** to **target** assets. Links between assets
   * represent this operation.
   *
   * If you have specific link names, you can use this method to
   * verify which LineageProcesses contribute to creating those links.
   * See the
   * {@link protos.google.cloud.datacatalog.lineage.v1.Lineage.SearchLinks|SearchLinks}
   * method for more information on how to retrieve link name.
   *
   * You can retrieve the LineageProcess information in every project where you
   * have the `datalineage.events.get` permission. The project provided in the
   * URL is used for Billing and Quota.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location where you want to search.
   * @param {string[]} request.links
   *   Required. An array of links to check for their associated LineageProcesses.
   *
   *   The maximum number of items in this array is 100.
   *   If the request contains more than 100 links, it returns the
   *   `INVALID_ARGUMENT` error.
   *
   *   Format: `projects/{project}/locations/{location}/links/{link}`.
   * @param {number} request.pageSize
   *   The maximum number of processes to return in a single page of the response.
   *   A page may contain fewer results than this value.
   * @param {string} request.pageToken
   *   The page token received from a previous `BatchSearchLinkProcesses` call.
   *   Use it to get the next page.
   *
   *   When requesting subsequent pages of a response, remember that
   *   all parameters must match the values you provided
   *   in the original request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.datacatalog.lineage.v1.ProcessLinks|ProcessLinks}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `batchSearchLinkProcessesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  batchSearchLinkProcesses(
    request?: protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcessLinks[],
      protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesResponse,
    ]
  >;
  batchSearchLinkProcesses(
    request: protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.IProcessLinks
    >
  ): void;
  batchSearchLinkProcesses(
    request: protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
    callback: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.IProcessLinks
    >
  ): void;
  batchSearchLinkProcesses(
    request?: protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
          | protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesResponse
          | null
          | undefined,
          protos.google.cloud.datacatalog.lineage.v1.IProcessLinks
        >,
    callback?: PaginationCallback<
      protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
      | protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesResponse
      | null
      | undefined,
      protos.google.cloud.datacatalog.lineage.v1.IProcessLinks
    >
  ): Promise<
    [
      protos.google.cloud.datacatalog.lineage.v1.IProcessLinks[],
      protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest | null,
      protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchSearchLinkProcesses(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location where you want to search.
   * @param {string[]} request.links
   *   Required. An array of links to check for their associated LineageProcesses.
   *
   *   The maximum number of items in this array is 100.
   *   If the request contains more than 100 links, it returns the
   *   `INVALID_ARGUMENT` error.
   *
   *   Format: `projects/{project}/locations/{location}/links/{link}`.
   * @param {number} request.pageSize
   *   The maximum number of processes to return in a single page of the response.
   *   A page may contain fewer results than this value.
   * @param {string} request.pageToken
   *   The page token received from a previous `BatchSearchLinkProcesses` call.
   *   Use it to get the next page.
   *
   *   When requesting subsequent pages of a response, remember that
   *   all parameters must match the values you provided
   *   in the original request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.datacatalog.lineage.v1.ProcessLinks|ProcessLinks} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `batchSearchLinkProcessesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  batchSearchLinkProcessesStream(
    request?: protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['batchSearchLinkProcesses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.batchSearchLinkProcesses.createStream(
      this.innerApiCalls.batchSearchLinkProcesses as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `batchSearchLinkProcesses`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location where you want to search.
   * @param {string[]} request.links
   *   Required. An array of links to check for their associated LineageProcesses.
   *
   *   The maximum number of items in this array is 100.
   *   If the request contains more than 100 links, it returns the
   *   `INVALID_ARGUMENT` error.
   *
   *   Format: `projects/{project}/locations/{location}/links/{link}`.
   * @param {number} request.pageSize
   *   The maximum number of processes to return in a single page of the response.
   *   A page may contain fewer results than this value.
   * @param {string} request.pageToken
   *   The page token received from a previous `BatchSearchLinkProcesses` call.
   *   Use it to get the next page.
   *
   *   When requesting subsequent pages of a response, remember that
   *   all parameters must match the values you provided
   *   in the original request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.datacatalog.lineage.v1.ProcessLinks|ProcessLinks}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/lineage.batch_search_link_processes.js</caption>
   * region_tag:datalineage_v1_generated_Lineage_BatchSearchLinkProcesses_async
   */
  batchSearchLinkProcessesAsync(
    request?: protos.google.cloud.datacatalog.lineage.v1.IBatchSearchLinkProcessesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.IProcessLinks> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['batchSearchLinkProcesses'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.batchSearchLinkProcesses.asyncIterate(
      this.innerApiCalls['batchSearchLinkProcesses'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.datacatalog.lineage.v1.IProcessLinks>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified lineageEvent resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} process
   * @param {string} run
   * @param {string} lineage_event
   * @returns {string} Resource name string.
   */
  lineageEventPath(
    project: string,
    location: string,
    process: string,
    run: string,
    lineageEvent: string
  ) {
    return this.pathTemplates.lineageEventPathTemplate.render({
      project: project,
      location: location,
      process: process,
      run: run,
      lineage_event: lineageEvent,
    });
  }

  /**
   * Parse the project from LineageEvent resource.
   *
   * @param {string} lineageEventName
   *   A fully-qualified path representing LineageEvent resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLineageEventName(lineageEventName: string) {
    return this.pathTemplates.lineageEventPathTemplate.match(lineageEventName)
      .project;
  }

  /**
   * Parse the location from LineageEvent resource.
   *
   * @param {string} lineageEventName
   *   A fully-qualified path representing LineageEvent resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLineageEventName(lineageEventName: string) {
    return this.pathTemplates.lineageEventPathTemplate.match(lineageEventName)
      .location;
  }

  /**
   * Parse the process from LineageEvent resource.
   *
   * @param {string} lineageEventName
   *   A fully-qualified path representing LineageEvent resource.
   * @returns {string} A string representing the process.
   */
  matchProcessFromLineageEventName(lineageEventName: string) {
    return this.pathTemplates.lineageEventPathTemplate.match(lineageEventName)
      .process;
  }

  /**
   * Parse the run from LineageEvent resource.
   *
   * @param {string} lineageEventName
   *   A fully-qualified path representing LineageEvent resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromLineageEventName(lineageEventName: string) {
    return this.pathTemplates.lineageEventPathTemplate.match(lineageEventName)
      .run;
  }

  /**
   * Parse the lineage_event from LineageEvent resource.
   *
   * @param {string} lineageEventName
   *   A fully-qualified path representing LineageEvent resource.
   * @returns {string} A string representing the lineage_event.
   */
  matchLineageEventFromLineageEventName(lineageEventName: string) {
    return this.pathTemplates.lineageEventPathTemplate.match(lineageEventName)
      .lineage_event;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified process resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} process
   * @returns {string} Resource name string.
   */
  processPath(project: string, location: string, process: string) {
    return this.pathTemplates.processPathTemplate.render({
      project: project,
      location: location,
      process: process,
    });
  }

  /**
   * Parse the project from Process resource.
   *
   * @param {string} processName
   *   A fully-qualified path representing Process resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProcessName(processName: string) {
    return this.pathTemplates.processPathTemplate.match(processName).project;
  }

  /**
   * Parse the location from Process resource.
   *
   * @param {string} processName
   *   A fully-qualified path representing Process resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProcessName(processName: string) {
    return this.pathTemplates.processPathTemplate.match(processName).location;
  }

  /**
   * Parse the process from Process resource.
   *
   * @param {string} processName
   *   A fully-qualified path representing Process resource.
   * @returns {string} A string representing the process.
   */
  matchProcessFromProcessName(processName: string) {
    return this.pathTemplates.processPathTemplate.match(processName).process;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified run resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} process
   * @param {string} run
   * @returns {string} Resource name string.
   */
  runPath(project: string, location: string, process: string, run: string) {
    return this.pathTemplates.runPathTemplate.render({
      project: project,
      location: location,
      process: process,
      run: run,
    });
  }

  /**
   * Parse the project from Run resource.
   *
   * @param {string} runName
   *   A fully-qualified path representing Run resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRunName(runName: string) {
    return this.pathTemplates.runPathTemplate.match(runName).project;
  }

  /**
   * Parse the location from Run resource.
   *
   * @param {string} runName
   *   A fully-qualified path representing Run resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRunName(runName: string) {
    return this.pathTemplates.runPathTemplate.match(runName).location;
  }

  /**
   * Parse the process from Run resource.
   *
   * @param {string} runName
   *   A fully-qualified path representing Run resource.
   * @returns {string} A string representing the process.
   */
  matchProcessFromRunName(runName: string) {
    return this.pathTemplates.runPathTemplate.match(runName).process;
  }

  /**
   * Parse the run from Run resource.
   *
   * @param {string} runName
   *   A fully-qualified path representing Run resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromRunName(runName: string) {
    return this.pathTemplates.runPathTemplate.match(runName).run;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.lineageStub && !this._terminated) {
      return this.lineageStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
