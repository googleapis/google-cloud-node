// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/video_stitcher_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './video_stitcher_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Video-On-Demand content stitching API allows you to insert ads
 *  into (VoD) video on demand files. You will be able to render custom
 *  scrubber bars with highlighted ads, enforce ad policies, allow
 *  seamless playback and tracking on native players and monetize
 *  content with any standard VMAP compliant ad server.
 * @class
 * @memberof v1
 */
export class VideoStitcherServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  videoStitcherServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of VideoStitcherServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new VideoStitcherServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof VideoStitcherServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      cdnKeyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cdnKeys/{cdn_key}'
      ),
      liveAdTagDetailPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/liveSessions/{live_session}/liveAdTagDetails/{live_ad_tag_detail}'
      ),
      liveSessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/liveSessions/{live_session}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      slatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/slates/{slate}'
      ),
      vodAdTagDetailPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/vodSessions/{vod_session}/vodAdTagDetails/{vod_ad_tag_detail}'
      ),
      vodSessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/vodSessions/{vod_session}'
      ),
      vodStitchDetailPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/vodSessions/{vod_session}/vodStitchDetails/{vod_stitch_detail}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listCdnKeys: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'cdnKeys'
      ),
      listVodStitchDetails: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'vodStitchDetails'
      ),
      listVodAdTagDetails: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'vodAdTagDetails'
      ),
      listLiveAdTagDetails: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'liveAdTagDetails'
      ),
      listSlates: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'slates'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.video.stitcher.v1.VideoStitcherService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.videoStitcherServiceStub) {
      return this.videoStitcherServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.video.stitcher.v1.VideoStitcherService.
    this.videoStitcherServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.video.stitcher.v1.VideoStitcherService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.video.stitcher.v1
            .VideoStitcherService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const videoStitcherServiceStubMethods = [
      'createCdnKey',
      'listCdnKeys',
      'getCdnKey',
      'deleteCdnKey',
      'updateCdnKey',
      'createVodSession',
      'getVodSession',
      'listVodStitchDetails',
      'getVodStitchDetail',
      'listVodAdTagDetails',
      'getVodAdTagDetail',
      'listLiveAdTagDetails',
      'getLiveAdTagDetail',
      'createSlate',
      'listSlates',
      'getSlate',
      'updateSlate',
      'deleteSlate',
      'createLiveSession',
      'getLiveSession',
    ];
    for (const methodName of videoStitcherServiceStubMethods) {
      const callPromise = this.videoStitcherServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.videoStitcherServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'videostitcher.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'videostitcher.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a new CDN key.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project in which the CDN key should be created, in the form of
   *   `projects/{project_number}/locations/{location}`.
   * @param {google.cloud.video.stitcher.v1.CdnKey} request.cdnKey
   *   Required. The CDN key resource to create.
   * @param {string} request.cdnKeyId
   *   Required. The ID to use for the CDN key, which will become the final component of
   *   the CDN key's resource name.
   *
   *   This value should conform to RFC-1034, which restricts to
   *   lower-case letters, numbers, and hyphen, with the first character a
   *   letter, the last a letter or a number, and a 63 character maximum.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CdnKey]{@link google.cloud.video.stitcher.v1.CdnKey}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.create_cdn_key.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_CreateCdnKey_async
   */
  createCdnKey(
    request?: protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest | undefined,
      {} | undefined
    ]
  >;
  createCdnKey(
    request: protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      | protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createCdnKey(
    request: protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      | protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createCdnKey(
    request?: protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.ICdnKey,
          | protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      | protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      protos.google.cloud.video.stitcher.v1.ICreateCdnKeyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createCdnKey(request, options, callback);
  }
  /**
   * Returns the specified CDN key.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the CDN key to be retrieved, in the form of
   *   `projects/{project}/locations/{location}/cdnKeys/{id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CdnKey]{@link google.cloud.video.stitcher.v1.CdnKey}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.get_cdn_key.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_GetCdnKey_async
   */
  getCdnKey(
    request?: protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest | undefined,
      {} | undefined
    ]
  >;
  getCdnKey(
    request: protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      | protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCdnKey(
    request: protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      | protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCdnKey(
    request?: protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.ICdnKey,
          | protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      | protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      protos.google.cloud.video.stitcher.v1.IGetCdnKeyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getCdnKey(request, options, callback);
  }
  /**
   * Deletes the specified CDN key.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the CDN key to be deleted, in the form of
   *   `projects/{project_number}/locations/{location}/cdnKeys/{id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.delete_cdn_key.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_DeleteCdnKey_async
   */
  deleteCdnKey(
    request?: protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest | undefined,
      {} | undefined
    ]
  >;
  deleteCdnKey(
    request: protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCdnKey(
    request: protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCdnKey(
    request?: protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.video.stitcher.v1.IDeleteCdnKeyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteCdnKey(request, options, callback);
  }
  /**
   * Updates the specified CDN key. Only update fields specified
   * in the call method body.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.video.stitcher.v1.CdnKey} request.cdnKey
   *   Required. The CDN key resource which replaces the resource on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The update mask applies to the resource.
   *   For the `FieldMask` definition, see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CdnKey]{@link google.cloud.video.stitcher.v1.CdnKey}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.update_cdn_key.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_UpdateCdnKey_async
   */
  updateCdnKey(
    request?: protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest | undefined,
      {} | undefined
    ]
  >;
  updateCdnKey(
    request: protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      | protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateCdnKey(
    request: protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      | protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateCdnKey(
    request?: protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.ICdnKey,
          | protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      | protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ICdnKey,
      protos.google.cloud.video.stitcher.v1.IUpdateCdnKeyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'cdn_key.name': request.cdnKey!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateCdnKey(request, options, callback);
  }
  /**
   * Creates a client side playback VOD session and returns the full
   * tracking and playback metadata of the session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location in which the VOD session should be created, in the
   *   form of `projects/{project_number}/locations/{location}`.
   * @param {google.cloud.video.stitcher.v1.VodSession} request.vodSession
   *   Required. Parameters for creating a session.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [VodSession]{@link google.cloud.video.stitcher.v1.VodSession}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.create_vod_session.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_CreateVodSession_async
   */
  createVodSession(
    request?: protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodSession,
      (
        | protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createVodSession(
    request: protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.IVodSession,
      | protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createVodSession(
    request: protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.IVodSession,
      | protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createVodSession(
    request?: protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.IVodSession,
          | protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.IVodSession,
      | protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodSession,
      (
        | protos.google.cloud.video.stitcher.v1.ICreateVodSessionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createVodSession(request, options, callback);
  }
  /**
   * Returns the full tracking, playback metadata, and relevant ad-ops
   * logs for the specified VOD session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the VOD session to be retrieved, in the form of
   *   `projects/{project_number}/locations/{location}/vodSessions/{id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [VodSession]{@link google.cloud.video.stitcher.v1.VodSession}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.get_vod_session.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_GetVodSession_async
   */
  getVodSession(
    request?: protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodSession,
      protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest | undefined,
      {} | undefined
    ]
  >;
  getVodSession(
    request: protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.IVodSession,
      | protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVodSession(
    request: protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.IVodSession,
      | protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVodSession(
    request?: protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.IVodSession,
          | protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.IVodSession,
      | protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodSession,
      protos.google.cloud.video.stitcher.v1.IGetVodSessionRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVodSession(request, options, callback);
  }
  /**
   * Returns the specified stitching information for the specified VOD session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the stitch detail in the specified VOD session, in the form of
   *   `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodStitchDetails/{id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [VodStitchDetail]{@link google.cloud.video.stitcher.v1.VodStitchDetail}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.get_vod_stitch_detail.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_GetVodStitchDetail_async
   */
  getVodStitchDetail(
    request?: protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail,
      (
        | protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getVodStitchDetail(
    request: protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail,
      | protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVodStitchDetail(
    request: protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail,
      | protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVodStitchDetail(
    request?: protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.IVodStitchDetail,
          | protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail,
      | protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail,
      (
        | protos.google.cloud.video.stitcher.v1.IGetVodStitchDetailRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVodStitchDetail(request, options, callback);
  }
  /**
   * Returns the specified ad tag detail for the specified VOD session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the ad tag detail for the specified VOD session, in the form of
   *   `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodAdTagDetails/{vod_ad_tag_detail}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [VodAdTagDetail]{@link google.cloud.video.stitcher.v1.VodAdTagDetail}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.get_vod_ad_tag_detail.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_GetVodAdTagDetail_async
   */
  getVodAdTagDetail(
    request?: protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail,
      (
        | protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getVodAdTagDetail(
    request: protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail,
      | protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVodAdTagDetail(
    request: protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail,
      | protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVodAdTagDetail(
    request?: protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.IVodAdTagDetail,
          | protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail,
      | protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail,
      (
        | protos.google.cloud.video.stitcher.v1.IGetVodAdTagDetailRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVodAdTagDetail(request, options, callback);
  }
  /**
   * Returns the specified ad tag detail for the specified live session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name in the form of
   *   `projects/{project}/locations/{location}/liveSessions/{live_session}/liveAdTagDetails/{live_ad_tag_detail}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [LiveAdTagDetail]{@link google.cloud.video.stitcher.v1.LiveAdTagDetail}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.get_live_ad_tag_detail.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_GetLiveAdTagDetail_async
   */
  getLiveAdTagDetail(
    request?: protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail,
      (
        | protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getLiveAdTagDetail(
    request: protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail,
      | protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLiveAdTagDetail(
    request: protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail,
      | protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLiveAdTagDetail(
    request?: protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail,
          | protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail,
      | protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail,
      (
        | protos.google.cloud.video.stitcher.v1.IGetLiveAdTagDetailRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getLiveAdTagDetail(request, options, callback);
  }
  /**
   * Creates a slate.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project in which the slate should be created, in the form of
   *   `projects/{project_number}`.
   * @param {string} request.slateId
   *   Required. The unique identifier for the slate.
   *   This value should conform to RFC-1034, which restricts to
   *   lower-case letters, numbers, and hyphen, with the first character a
   *   letter, the last a letter or a number, and a 63 character maximum.
   * @param {google.cloud.video.stitcher.v1.Slate} request.slate
   *   Required. The slate to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Slate]{@link google.cloud.video.stitcher.v1.Slate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.create_slate.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_CreateSlate_async
   */
  createSlate(
    request?: protos.google.cloud.video.stitcher.v1.ICreateSlateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ISlate,
      protos.google.cloud.video.stitcher.v1.ICreateSlateRequest | undefined,
      {} | undefined
    ]
  >;
  createSlate(
    request: protos.google.cloud.video.stitcher.v1.ICreateSlateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ISlate,
      | protos.google.cloud.video.stitcher.v1.ICreateSlateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createSlate(
    request: protos.google.cloud.video.stitcher.v1.ICreateSlateRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ISlate,
      | protos.google.cloud.video.stitcher.v1.ICreateSlateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createSlate(
    request?: protos.google.cloud.video.stitcher.v1.ICreateSlateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.ISlate,
          | protos.google.cloud.video.stitcher.v1.ICreateSlateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.ISlate,
      | protos.google.cloud.video.stitcher.v1.ICreateSlateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ISlate,
      protos.google.cloud.video.stitcher.v1.ICreateSlateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createSlate(request, options, callback);
  }
  /**
   * Returns the specified slate.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the slate to be retrieved, of the slate, in the form of
   *   `projects/{project_number}/locations/{location}/slates/{id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Slate]{@link google.cloud.video.stitcher.v1.Slate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.get_slate.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_GetSlate_async
   */
  getSlate(
    request?: protos.google.cloud.video.stitcher.v1.IGetSlateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ISlate,
      protos.google.cloud.video.stitcher.v1.IGetSlateRequest | undefined,
      {} | undefined
    ]
  >;
  getSlate(
    request: protos.google.cloud.video.stitcher.v1.IGetSlateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ISlate,
      protos.google.cloud.video.stitcher.v1.IGetSlateRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSlate(
    request: protos.google.cloud.video.stitcher.v1.IGetSlateRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ISlate,
      protos.google.cloud.video.stitcher.v1.IGetSlateRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getSlate(
    request?: protos.google.cloud.video.stitcher.v1.IGetSlateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.ISlate,
          | protos.google.cloud.video.stitcher.v1.IGetSlateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.ISlate,
      protos.google.cloud.video.stitcher.v1.IGetSlateRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ISlate,
      protos.google.cloud.video.stitcher.v1.IGetSlateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getSlate(request, options, callback);
  }
  /**
   * Updates the specified slate.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.video.stitcher.v1.Slate} request.slate
   *   Required. The resource with updated fields.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The update mask which specifies fields which should be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Slate]{@link google.cloud.video.stitcher.v1.Slate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.update_slate.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_UpdateSlate_async
   */
  updateSlate(
    request?: protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ISlate,
      protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest | undefined,
      {} | undefined
    ]
  >;
  updateSlate(
    request: protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ISlate,
      | protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateSlate(
    request: protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ISlate,
      | protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateSlate(
    request?: protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.ISlate,
          | protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.ISlate,
      | protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ISlate,
      protos.google.cloud.video.stitcher.v1.IUpdateSlateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'slate.name': request.slate!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateSlate(request, options, callback);
  }
  /**
   * Deletes the specified slate.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the slate to be deleted, in the form of
   *   `projects/{project_number}/locations/{location}/slates/{id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.delete_slate.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_DeleteSlate_async
   */
  deleteSlate(
    request?: protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest | undefined,
      {} | undefined
    ]
  >;
  deleteSlate(
    request: protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSlate(
    request: protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteSlate(
    request?: protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.video.stitcher.v1.IDeleteSlateRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteSlate(request, options, callback);
  }
  /**
   * Creates a new live session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location in which the live session should be created,
   *   in the form of `projects/{project_number}/locations/{location}`.
   * @param {google.cloud.video.stitcher.v1.LiveSession} request.liveSession
   *   Required. Parameters for creating a live session.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [LiveSession]{@link google.cloud.video.stitcher.v1.LiveSession}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.create_live_session.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_CreateLiveSession_async
   */
  createLiveSession(
    request?: protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      (
        | protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createLiveSession(
    request: protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      | protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createLiveSession(
    request: protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      | protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createLiveSession(
    request?: protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.ILiveSession,
          | protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      | protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      (
        | protos.google.cloud.video.stitcher.v1.ICreateLiveSessionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createLiveSession(request, options, callback);
  }
  /**
   * Returns the details for the specified live session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the live session, in the form of
   *   `projects/{project_number}/locations/{location}/liveSessions/{id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [LiveSession]{@link google.cloud.video.stitcher.v1.LiveSession}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.get_live_session.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_GetLiveSession_async
   */
  getLiveSession(
    request?: protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest | undefined,
      {} | undefined
    ]
  >;
  getLiveSession(
    request: protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      | protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLiveSession(
    request: protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest,
    callback: Callback<
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      | protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getLiveSession(
    request?: protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.video.stitcher.v1.ILiveSession,
          | protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      | protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ILiveSession,
      protos.google.cloud.video.stitcher.v1.IGetLiveSessionRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getLiveSession(request, options, callback);
  }

  /**
   * Lists all CDN keys in the specified project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project that contains the list of CDN keys, in the form of
   *   `projects/{project_number}/locations/{location}`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [CdnKey]{@link google.cloud.video.stitcher.v1.CdnKey}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listCdnKeysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listCdnKeys(
    request?: protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ICdnKey[],
      protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest | null,
      protos.google.cloud.video.stitcher.v1.IListCdnKeysResponse
    ]
  >;
  listCdnKeys(
    request: protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
      | protos.google.cloud.video.stitcher.v1.IListCdnKeysResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.ICdnKey
    >
  ): void;
  listCdnKeys(
    request: protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
      | protos.google.cloud.video.stitcher.v1.IListCdnKeysResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.ICdnKey
    >
  ): void;
  listCdnKeys(
    request?: protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
          | protos.google.cloud.video.stitcher.v1.IListCdnKeysResponse
          | null
          | undefined,
          protos.google.cloud.video.stitcher.v1.ICdnKey
        >,
    callback?: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
      | protos.google.cloud.video.stitcher.v1.IListCdnKeysResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.ICdnKey
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ICdnKey[],
      protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest | null,
      protos.google.cloud.video.stitcher.v1.IListCdnKeysResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listCdnKeys(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project that contains the list of CDN keys, in the form of
   *   `projects/{project_number}/locations/{location}`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [CdnKey]{@link google.cloud.video.stitcher.v1.CdnKey} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listCdnKeysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listCdnKeysStream(
    request?: protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listCdnKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCdnKeys.createStream(
      this.innerApiCalls.listCdnKeys as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listCdnKeys`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project that contains the list of CDN keys, in the form of
   *   `projects/{project_number}/locations/{location}`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [CdnKey]{@link google.cloud.video.stitcher.v1.CdnKey}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.list_cdn_keys.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_ListCdnKeys_async
   */
  listCdnKeysAsync(
    request?: protos.google.cloud.video.stitcher.v1.IListCdnKeysRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.video.stitcher.v1.ICdnKey> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listCdnKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCdnKeys.asyncIterate(
      this.innerApiCalls['listCdnKeys'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.video.stitcher.v1.ICdnKey>;
  }
  /**
   * Returns a list of detailed stitching information of the specified VOD
   * session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The VOD session where the stitch details belong to, in the form of
   *   `projects/{project}/locations/{location}/vodSessions/{id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [VodStitchDetail]{@link google.cloud.video.stitcher.v1.VodStitchDetail}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listVodStitchDetailsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVodStitchDetails(
    request?: protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail[],
      protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest | null,
      protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsResponse
    ]
  >;
  listVodStitchDetails(
    request: protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
      | protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail
    >
  ): void;
  listVodStitchDetails(
    request: protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
      | protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail
    >
  ): void;
  listVodStitchDetails(
    request?: protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
          | protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsResponse
          | null
          | undefined,
          protos.google.cloud.video.stitcher.v1.IVodStitchDetail
        >,
    callback?: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
      | protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodStitchDetail[],
      protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest | null,
      protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listVodStitchDetails(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The VOD session where the stitch details belong to, in the form of
   *   `projects/{project}/locations/{location}/vodSessions/{id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [VodStitchDetail]{@link google.cloud.video.stitcher.v1.VodStitchDetail} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listVodStitchDetailsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVodStitchDetailsStream(
    request?: protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVodStitchDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVodStitchDetails.createStream(
      this.innerApiCalls.listVodStitchDetails as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listVodStitchDetails`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The VOD session where the stitch details belong to, in the form of
   *   `projects/{project}/locations/{location}/vodSessions/{id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [VodStitchDetail]{@link google.cloud.video.stitcher.v1.VodStitchDetail}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.list_vod_stitch_details.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_ListVodStitchDetails_async
   */
  listVodStitchDetailsAsync(
    request?: protos.google.cloud.video.stitcher.v1.IListVodStitchDetailsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.video.stitcher.v1.IVodStitchDetail> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVodStitchDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVodStitchDetails.asyncIterate(
      this.innerApiCalls['listVodStitchDetails'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.video.stitcher.v1.IVodStitchDetail>;
  }
  /**
   * Return the list of ad tag details for the specified VOD session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The VOD session which the ad tag details belong to, in the form of
   *   `projects/{project}/locations/{location}/vodSessions/{vod_session_id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [VodAdTagDetail]{@link google.cloud.video.stitcher.v1.VodAdTagDetail}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listVodAdTagDetailsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVodAdTagDetails(
    request?: protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail[],
      protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest | null,
      protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsResponse
    ]
  >;
  listVodAdTagDetails(
    request: protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
      | protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail
    >
  ): void;
  listVodAdTagDetails(
    request: protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
      | protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail
    >
  ): void;
  listVodAdTagDetails(
    request?: protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
          | protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsResponse
          | null
          | undefined,
          protos.google.cloud.video.stitcher.v1.IVodAdTagDetail
        >,
    callback?: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
      | protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.IVodAdTagDetail[],
      protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest | null,
      protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listVodAdTagDetails(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The VOD session which the ad tag details belong to, in the form of
   *   `projects/{project}/locations/{location}/vodSessions/{vod_session_id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [VodAdTagDetail]{@link google.cloud.video.stitcher.v1.VodAdTagDetail} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listVodAdTagDetailsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVodAdTagDetailsStream(
    request?: protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVodAdTagDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVodAdTagDetails.createStream(
      this.innerApiCalls.listVodAdTagDetails as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listVodAdTagDetails`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The VOD session which the ad tag details belong to, in the form of
   *   `projects/{project}/locations/{location}/vodSessions/{vod_session_id}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [VodAdTagDetail]{@link google.cloud.video.stitcher.v1.VodAdTagDetail}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.list_vod_ad_tag_details.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_ListVodAdTagDetails_async
   */
  listVodAdTagDetailsAsync(
    request?: protos.google.cloud.video.stitcher.v1.IListVodAdTagDetailsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.video.stitcher.v1.IVodAdTagDetail> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVodAdTagDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVodAdTagDetails.asyncIterate(
      this.innerApiCalls['listVodAdTagDetails'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.video.stitcher.v1.IVodAdTagDetail>;
  }
  /**
   * Return the list of ad tag details for the specified live session.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource parent in the form of
   *   `projects/{project}/locations/{location}/liveSessions/{live_session}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The pagination token returned from a previous List request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [LiveAdTagDetail]{@link google.cloud.video.stitcher.v1.LiveAdTagDetail}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listLiveAdTagDetailsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listLiveAdTagDetails(
    request?: protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail[],
      protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest | null,
      protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsResponse
    ]
  >;
  listLiveAdTagDetails(
    request: protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
      | protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail
    >
  ): void;
  listLiveAdTagDetails(
    request: protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
      | protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail
    >
  ): void;
  listLiveAdTagDetails(
    request?: protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
          | protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsResponse
          | null
          | undefined,
          protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail
        >,
    callback?: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
      | protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail[],
      protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest | null,
      protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listLiveAdTagDetails(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource parent in the form of
   *   `projects/{project}/locations/{location}/liveSessions/{live_session}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The pagination token returned from a previous List request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [LiveAdTagDetail]{@link google.cloud.video.stitcher.v1.LiveAdTagDetail} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listLiveAdTagDetailsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listLiveAdTagDetailsStream(
    request?: protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLiveAdTagDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLiveAdTagDetails.createStream(
      this.innerApiCalls.listLiveAdTagDetails as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listLiveAdTagDetails`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource parent in the form of
   *   `projects/{project}/locations/{location}/liveSessions/{live_session}`.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   * @param {string} request.pageToken
   *   The pagination token returned from a previous List request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [LiveAdTagDetail]{@link google.cloud.video.stitcher.v1.LiveAdTagDetail}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.list_live_ad_tag_details.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_ListLiveAdTagDetails_async
   */
  listLiveAdTagDetailsAsync(
    request?: protos.google.cloud.video.stitcher.v1.IListLiveAdTagDetailsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listLiveAdTagDetails'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLiveAdTagDetails.asyncIterate(
      this.innerApiCalls['listLiveAdTagDetails'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.video.stitcher.v1.ILiveAdTagDetail>;
  }
  /**
   * Lists all slates in the specified project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project to list slates, in the form of `projects/{project_number}`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Slate]{@link google.cloud.video.stitcher.v1.Slate}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listSlatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listSlates(
    request?: protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ISlate[],
      protos.google.cloud.video.stitcher.v1.IListSlatesRequest | null,
      protos.google.cloud.video.stitcher.v1.IListSlatesResponse
    ]
  >;
  listSlates(
    request: protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
      | protos.google.cloud.video.stitcher.v1.IListSlatesResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.ISlate
    >
  ): void;
  listSlates(
    request: protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
    callback: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
      | protos.google.cloud.video.stitcher.v1.IListSlatesResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.ISlate
    >
  ): void;
  listSlates(
    request?: protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
          | protos.google.cloud.video.stitcher.v1.IListSlatesResponse
          | null
          | undefined,
          protos.google.cloud.video.stitcher.v1.ISlate
        >,
    callback?: PaginationCallback<
      protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
      | protos.google.cloud.video.stitcher.v1.IListSlatesResponse
      | null
      | undefined,
      protos.google.cloud.video.stitcher.v1.ISlate
    >
  ): Promise<
    [
      protos.google.cloud.video.stitcher.v1.ISlate[],
      protos.google.cloud.video.stitcher.v1.IListSlatesRequest | null,
      protos.google.cloud.video.stitcher.v1.IListSlatesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listSlates(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project to list slates, in the form of `projects/{project_number}`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Slate]{@link google.cloud.video.stitcher.v1.Slate} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listSlatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listSlatesStream(
    request?: protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSlates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSlates.createStream(
      this.innerApiCalls.listSlates as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listSlates`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project to list slates, in the form of `projects/{project_number}`.
   * @param {number} request.pageSize
   *   Requested page size. Server may return fewer items than requested.
   *   If unspecified, server will pick an appropriate default.
   * @param {string} request.pageToken
   *   A token identifying a page of results the server should return.
   * @param {string} request.filter
   *   Filtering results
   * @param {string} request.orderBy
   *   Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Slate]{@link google.cloud.video.stitcher.v1.Slate}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/video_stitcher_service.list_slates.js</caption>
   * region_tag:videostitcher_v1_generated_VideoStitcherService_ListSlates_async
   */
  listSlatesAsync(
    request?: protos.google.cloud.video.stitcher.v1.IListSlatesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.video.stitcher.v1.ISlate> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listSlates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSlates.asyncIterate(
      this.innerApiCalls['listSlates'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.video.stitcher.v1.ISlate>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified cdnKey resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cdn_key
   * @returns {string} Resource name string.
   */
  cdnKeyPath(project: string, location: string, cdnKey: string) {
    return this.pathTemplates.cdnKeyPathTemplate.render({
      project: project,
      location: location,
      cdn_key: cdnKey,
    });
  }

  /**
   * Parse the project from CdnKey resource.
   *
   * @param {string} cdnKeyName
   *   A fully-qualified path representing CdnKey resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCdnKeyName(cdnKeyName: string) {
    return this.pathTemplates.cdnKeyPathTemplate.match(cdnKeyName).project;
  }

  /**
   * Parse the location from CdnKey resource.
   *
   * @param {string} cdnKeyName
   *   A fully-qualified path representing CdnKey resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCdnKeyName(cdnKeyName: string) {
    return this.pathTemplates.cdnKeyPathTemplate.match(cdnKeyName).location;
  }

  /**
   * Parse the cdn_key from CdnKey resource.
   *
   * @param {string} cdnKeyName
   *   A fully-qualified path representing CdnKey resource.
   * @returns {string} A string representing the cdn_key.
   */
  matchCdnKeyFromCdnKeyName(cdnKeyName: string) {
    return this.pathTemplates.cdnKeyPathTemplate.match(cdnKeyName).cdn_key;
  }

  /**
   * Return a fully-qualified liveAdTagDetail resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} live_session
   * @param {string} live_ad_tag_detail
   * @returns {string} Resource name string.
   */
  liveAdTagDetailPath(
    project: string,
    location: string,
    liveSession: string,
    liveAdTagDetail: string
  ) {
    return this.pathTemplates.liveAdTagDetailPathTemplate.render({
      project: project,
      location: location,
      live_session: liveSession,
      live_ad_tag_detail: liveAdTagDetail,
    });
  }

  /**
   * Parse the project from LiveAdTagDetail resource.
   *
   * @param {string} liveAdTagDetailName
   *   A fully-qualified path representing LiveAdTagDetail resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLiveAdTagDetailName(liveAdTagDetailName: string) {
    return this.pathTemplates.liveAdTagDetailPathTemplate.match(
      liveAdTagDetailName
    ).project;
  }

  /**
   * Parse the location from LiveAdTagDetail resource.
   *
   * @param {string} liveAdTagDetailName
   *   A fully-qualified path representing LiveAdTagDetail resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLiveAdTagDetailName(liveAdTagDetailName: string) {
    return this.pathTemplates.liveAdTagDetailPathTemplate.match(
      liveAdTagDetailName
    ).location;
  }

  /**
   * Parse the live_session from LiveAdTagDetail resource.
   *
   * @param {string} liveAdTagDetailName
   *   A fully-qualified path representing LiveAdTagDetail resource.
   * @returns {string} A string representing the live_session.
   */
  matchLiveSessionFromLiveAdTagDetailName(liveAdTagDetailName: string) {
    return this.pathTemplates.liveAdTagDetailPathTemplate.match(
      liveAdTagDetailName
    ).live_session;
  }

  /**
   * Parse the live_ad_tag_detail from LiveAdTagDetail resource.
   *
   * @param {string} liveAdTagDetailName
   *   A fully-qualified path representing LiveAdTagDetail resource.
   * @returns {string} A string representing the live_ad_tag_detail.
   */
  matchLiveAdTagDetailFromLiveAdTagDetailName(liveAdTagDetailName: string) {
    return this.pathTemplates.liveAdTagDetailPathTemplate.match(
      liveAdTagDetailName
    ).live_ad_tag_detail;
  }

  /**
   * Return a fully-qualified liveSession resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} live_session
   * @returns {string} Resource name string.
   */
  liveSessionPath(project: string, location: string, liveSession: string) {
    return this.pathTemplates.liveSessionPathTemplate.render({
      project: project,
      location: location,
      live_session: liveSession,
    });
  }

  /**
   * Parse the project from LiveSession resource.
   *
   * @param {string} liveSessionName
   *   A fully-qualified path representing LiveSession resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLiveSessionName(liveSessionName: string) {
    return this.pathTemplates.liveSessionPathTemplate.match(liveSessionName)
      .project;
  }

  /**
   * Parse the location from LiveSession resource.
   *
   * @param {string} liveSessionName
   *   A fully-qualified path representing LiveSession resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLiveSessionName(liveSessionName: string) {
    return this.pathTemplates.liveSessionPathTemplate.match(liveSessionName)
      .location;
  }

  /**
   * Parse the live_session from LiveSession resource.
   *
   * @param {string} liveSessionName
   *   A fully-qualified path representing LiveSession resource.
   * @returns {string} A string representing the live_session.
   */
  matchLiveSessionFromLiveSessionName(liveSessionName: string) {
    return this.pathTemplates.liveSessionPathTemplate.match(liveSessionName)
      .live_session;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified slate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} slate
   * @returns {string} Resource name string.
   */
  slatePath(project: string, location: string, slate: string) {
    return this.pathTemplates.slatePathTemplate.render({
      project: project,
      location: location,
      slate: slate,
    });
  }

  /**
   * Parse the project from Slate resource.
   *
   * @param {string} slateName
   *   A fully-qualified path representing Slate resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSlateName(slateName: string) {
    return this.pathTemplates.slatePathTemplate.match(slateName).project;
  }

  /**
   * Parse the location from Slate resource.
   *
   * @param {string} slateName
   *   A fully-qualified path representing Slate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSlateName(slateName: string) {
    return this.pathTemplates.slatePathTemplate.match(slateName).location;
  }

  /**
   * Parse the slate from Slate resource.
   *
   * @param {string} slateName
   *   A fully-qualified path representing Slate resource.
   * @returns {string} A string representing the slate.
   */
  matchSlateFromSlateName(slateName: string) {
    return this.pathTemplates.slatePathTemplate.match(slateName).slate;
  }

  /**
   * Return a fully-qualified vodAdTagDetail resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} vod_session
   * @param {string} vod_ad_tag_detail
   * @returns {string} Resource name string.
   */
  vodAdTagDetailPath(
    project: string,
    location: string,
    vodSession: string,
    vodAdTagDetail: string
  ) {
    return this.pathTemplates.vodAdTagDetailPathTemplate.render({
      project: project,
      location: location,
      vod_session: vodSession,
      vod_ad_tag_detail: vodAdTagDetail,
    });
  }

  /**
   * Parse the project from VodAdTagDetail resource.
   *
   * @param {string} vodAdTagDetailName
   *   A fully-qualified path representing VodAdTagDetail resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVodAdTagDetailName(vodAdTagDetailName: string) {
    return this.pathTemplates.vodAdTagDetailPathTemplate.match(
      vodAdTagDetailName
    ).project;
  }

  /**
   * Parse the location from VodAdTagDetail resource.
   *
   * @param {string} vodAdTagDetailName
   *   A fully-qualified path representing VodAdTagDetail resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVodAdTagDetailName(vodAdTagDetailName: string) {
    return this.pathTemplates.vodAdTagDetailPathTemplate.match(
      vodAdTagDetailName
    ).location;
  }

  /**
   * Parse the vod_session from VodAdTagDetail resource.
   *
   * @param {string} vodAdTagDetailName
   *   A fully-qualified path representing VodAdTagDetail resource.
   * @returns {string} A string representing the vod_session.
   */
  matchVodSessionFromVodAdTagDetailName(vodAdTagDetailName: string) {
    return this.pathTemplates.vodAdTagDetailPathTemplate.match(
      vodAdTagDetailName
    ).vod_session;
  }

  /**
   * Parse the vod_ad_tag_detail from VodAdTagDetail resource.
   *
   * @param {string} vodAdTagDetailName
   *   A fully-qualified path representing VodAdTagDetail resource.
   * @returns {string} A string representing the vod_ad_tag_detail.
   */
  matchVodAdTagDetailFromVodAdTagDetailName(vodAdTagDetailName: string) {
    return this.pathTemplates.vodAdTagDetailPathTemplate.match(
      vodAdTagDetailName
    ).vod_ad_tag_detail;
  }

  /**
   * Return a fully-qualified vodSession resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} vod_session
   * @returns {string} Resource name string.
   */
  vodSessionPath(project: string, location: string, vodSession: string) {
    return this.pathTemplates.vodSessionPathTemplate.render({
      project: project,
      location: location,
      vod_session: vodSession,
    });
  }

  /**
   * Parse the project from VodSession resource.
   *
   * @param {string} vodSessionName
   *   A fully-qualified path representing VodSession resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVodSessionName(vodSessionName: string) {
    return this.pathTemplates.vodSessionPathTemplate.match(vodSessionName)
      .project;
  }

  /**
   * Parse the location from VodSession resource.
   *
   * @param {string} vodSessionName
   *   A fully-qualified path representing VodSession resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVodSessionName(vodSessionName: string) {
    return this.pathTemplates.vodSessionPathTemplate.match(vodSessionName)
      .location;
  }

  /**
   * Parse the vod_session from VodSession resource.
   *
   * @param {string} vodSessionName
   *   A fully-qualified path representing VodSession resource.
   * @returns {string} A string representing the vod_session.
   */
  matchVodSessionFromVodSessionName(vodSessionName: string) {
    return this.pathTemplates.vodSessionPathTemplate.match(vodSessionName)
      .vod_session;
  }

  /**
   * Return a fully-qualified vodStitchDetail resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} vod_session
   * @param {string} vod_stitch_detail
   * @returns {string} Resource name string.
   */
  vodStitchDetailPath(
    project: string,
    location: string,
    vodSession: string,
    vodStitchDetail: string
  ) {
    return this.pathTemplates.vodStitchDetailPathTemplate.render({
      project: project,
      location: location,
      vod_session: vodSession,
      vod_stitch_detail: vodStitchDetail,
    });
  }

  /**
   * Parse the project from VodStitchDetail resource.
   *
   * @param {string} vodStitchDetailName
   *   A fully-qualified path representing VodStitchDetail resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVodStitchDetailName(vodStitchDetailName: string) {
    return this.pathTemplates.vodStitchDetailPathTemplate.match(
      vodStitchDetailName
    ).project;
  }

  /**
   * Parse the location from VodStitchDetail resource.
   *
   * @param {string} vodStitchDetailName
   *   A fully-qualified path representing VodStitchDetail resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVodStitchDetailName(vodStitchDetailName: string) {
    return this.pathTemplates.vodStitchDetailPathTemplate.match(
      vodStitchDetailName
    ).location;
  }

  /**
   * Parse the vod_session from VodStitchDetail resource.
   *
   * @param {string} vodStitchDetailName
   *   A fully-qualified path representing VodStitchDetail resource.
   * @returns {string} A string representing the vod_session.
   */
  matchVodSessionFromVodStitchDetailName(vodStitchDetailName: string) {
    return this.pathTemplates.vodStitchDetailPathTemplate.match(
      vodStitchDetailName
    ).vod_session;
  }

  /**
   * Parse the vod_stitch_detail from VodStitchDetail resource.
   *
   * @param {string} vodStitchDetailName
   *   A fully-qualified path representing VodStitchDetail resource.
   * @returns {string} A string representing the vod_stitch_detail.
   */
  matchVodStitchDetailFromVodStitchDetailName(vodStitchDetailName: string) {
    return this.pathTemplates.vodStitchDetailPathTemplate.match(
      vodStitchDetailName
    ).vod_stitch_detail;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.videoStitcherServiceStub && !this._terminated) {
      return this.videoStitcherServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
