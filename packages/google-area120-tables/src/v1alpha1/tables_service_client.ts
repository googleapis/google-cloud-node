// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha1/tables_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './tables_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The Tables Service provides an API for reading and updating tables.
 *  It defines the following resource model:
 *
 *  - The API has a collection of {@link google.area120.tables.v1alpha1.Table|Table}
 *    resources, named `tables/*`
 *
 *  - Each Table has a collection of {@link google.area120.tables.v1alpha1.Row|Row}
 *    resources, named `tables/* /rows/*`
 *
 *  - The API has a collection of
 *    {@link google.area120.tables.v1alpha1.Workspace|Workspace}
 *    resources, named `workspaces/*`.
 * @class
 * @memberof v1alpha1
 */
export class TablesServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  tablesServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of TablesServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new TablesServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof TablesServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      rowPathTemplate: new this._gaxModule.PathTemplate(
        'tables/{table}/rows/{row}'
      ),
      tablePathTemplate: new this._gaxModule.PathTemplate('tables/{table}'),
      workspacePathTemplate: new this._gaxModule.PathTemplate(
        'workspaces/{workspace}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTables: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tables'
      ),
      listWorkspaces: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'workspaces'
      ),
      listRows: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'rows'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.area120.tables.v1alpha1.TablesService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.tablesServiceStub) {
      return this.tablesServiceStub;
    }

    // Put together the "service stub" for
    // google.area120.tables.v1alpha1.TablesService.
    this.tablesServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.area120.tables.v1alpha1.TablesService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.area120.tables.v1alpha1.TablesService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const tablesServiceStubMethods = [
      'getTable',
      'listTables',
      'getWorkspace',
      'listWorkspaces',
      'getRow',
      'listRows',
      'createRow',
      'batchCreateRows',
      'updateRow',
      'batchUpdateRows',
      'deleteRow',
      'batchDeleteRows',
    ];
    for (const methodName of tablesServiceStubMethods) {
      const callPromise = this.tablesServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.tablesServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'area120tables.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'area120tables.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/drive',
      'https://www.googleapis.com/auth/drive.file',
      'https://www.googleapis.com/auth/drive.readonly',
      'https://www.googleapis.com/auth/spreadsheets',
      'https://www.googleapis.com/auth/spreadsheets.readonly',
      'https://www.googleapis.com/auth/tables',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a table. Returns NOT_FOUND if the table does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the table to retrieve.
   *   Format: tables/{table}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Table]{@link google.area120.tables.v1alpha1.Table}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.get_table.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_GetTable_async
   */
  getTable(
    request?: protos.google.area120.tables.v1alpha1.IGetTableRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.ITable,
      protos.google.area120.tables.v1alpha1.IGetTableRequest | undefined,
      {} | undefined
    ]
  >;
  getTable(
    request: protos.google.area120.tables.v1alpha1.IGetTableRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.ITable,
      protos.google.area120.tables.v1alpha1.IGetTableRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTable(
    request: protos.google.area120.tables.v1alpha1.IGetTableRequest,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.ITable,
      protos.google.area120.tables.v1alpha1.IGetTableRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getTable(
    request?: protos.google.area120.tables.v1alpha1.IGetTableRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.area120.tables.v1alpha1.ITable,
          | protos.google.area120.tables.v1alpha1.IGetTableRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.area120.tables.v1alpha1.ITable,
      protos.google.area120.tables.v1alpha1.IGetTableRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.ITable,
      protos.google.area120.tables.v1alpha1.IGetTableRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTable(request, options, callback);
  }
  /**
   * Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the workspace to retrieve.
   *   Format: workspaces/{workspace}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Workspace]{@link google.area120.tables.v1alpha1.Workspace}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.get_workspace.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_GetWorkspace_async
   */
  getWorkspace(
    request?: protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IWorkspace,
      protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest | undefined,
      {} | undefined
    ]
  >;
  getWorkspace(
    request: protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IWorkspace,
      | protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkspace(
    request: protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IWorkspace,
      | protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkspace(
    request?: protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.area120.tables.v1alpha1.IWorkspace,
          | protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.area120.tables.v1alpha1.IWorkspace,
      | protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IWorkspace,
      protos.google.area120.tables.v1alpha1.IGetWorkspaceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getWorkspace(request, options, callback);
  }
  /**
   * Gets a row. Returns NOT_FOUND if the row does not exist in the table.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the row to retrieve.
   *   Format: tables/{table}/rows/{row}
   * @param {google.area120.tables.v1alpha1.View} [request.view]
   *   Optional. Column key to use for values in the row.
   *   Defaults to user entered name.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Row]{@link google.area120.tables.v1alpha1.Row}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.get_row.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_GetRow_async
   */
  getRow(
    request?: protos.google.area120.tables.v1alpha1.IGetRowRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IRow,
      protos.google.area120.tables.v1alpha1.IGetRowRequest | undefined,
      {} | undefined
    ]
  >;
  getRow(
    request: protos.google.area120.tables.v1alpha1.IGetRowRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IRow,
      protos.google.area120.tables.v1alpha1.IGetRowRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRow(
    request: protos.google.area120.tables.v1alpha1.IGetRowRequest,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IRow,
      protos.google.area120.tables.v1alpha1.IGetRowRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRow(
    request?: protos.google.area120.tables.v1alpha1.IGetRowRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.area120.tables.v1alpha1.IRow,
          | protos.google.area120.tables.v1alpha1.IGetRowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.area120.tables.v1alpha1.IRow,
      protos.google.area120.tables.v1alpha1.IGetRowRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IRow,
      protos.google.area120.tables.v1alpha1.IGetRowRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRow(request, options, callback);
  }
  /**
   * Creates a row.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent table where this row will be created.
   *   Format: tables/{table}
   * @param {google.area120.tables.v1alpha1.Row} request.row
   *   Required. The row to create.
   * @param {google.area120.tables.v1alpha1.View} [request.view]
   *   Optional. Column key to use for values in the row.
   *   Defaults to user entered name.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Row]{@link google.area120.tables.v1alpha1.Row}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.create_row.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_CreateRow_async
   */
  createRow(
    request?: protos.google.area120.tables.v1alpha1.ICreateRowRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IRow,
      protos.google.area120.tables.v1alpha1.ICreateRowRequest | undefined,
      {} | undefined
    ]
  >;
  createRow(
    request: protos.google.area120.tables.v1alpha1.ICreateRowRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IRow,
      | protos.google.area120.tables.v1alpha1.ICreateRowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createRow(
    request: protos.google.area120.tables.v1alpha1.ICreateRowRequest,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IRow,
      | protos.google.area120.tables.v1alpha1.ICreateRowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createRow(
    request?: protos.google.area120.tables.v1alpha1.ICreateRowRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.area120.tables.v1alpha1.IRow,
          | protos.google.area120.tables.v1alpha1.ICreateRowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.area120.tables.v1alpha1.IRow,
      | protos.google.area120.tables.v1alpha1.ICreateRowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IRow,
      protos.google.area120.tables.v1alpha1.ICreateRowRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRow(request, options, callback);
  }
  /**
   * Creates multiple rows.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent table where the rows will be created.
   *   Format: tables/{table}
   * @param {number[]} request.requests
   *   Required. The request message specifying the rows to create.
   *
   *   A maximum of 500 rows can be created in a single batch.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchCreateRowsResponse]{@link google.area120.tables.v1alpha1.BatchCreateRowsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.batch_create_rows.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_BatchCreateRows_async
   */
  batchCreateRows(
    request?: protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IBatchCreateRowsResponse,
      protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest | undefined,
      {} | undefined
    ]
  >;
  batchCreateRows(
    request: protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IBatchCreateRowsResponse,
      | protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateRows(
    request: protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IBatchCreateRowsResponse,
      | protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCreateRows(
    request?: protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.area120.tables.v1alpha1.IBatchCreateRowsResponse,
          | protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.area120.tables.v1alpha1.IBatchCreateRowsResponse,
      | protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IBatchCreateRowsResponse,
      protos.google.area120.tables.v1alpha1.IBatchCreateRowsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCreateRows(request, options, callback);
  }
  /**
   * Updates a row.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.area120.tables.v1alpha1.Row} request.row
   *   Required. The row to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to update.
   * @param {google.area120.tables.v1alpha1.View} [request.view]
   *   Optional. Column key to use for values in the row.
   *   Defaults to user entered name.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Row]{@link google.area120.tables.v1alpha1.Row}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.update_row.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_UpdateRow_async
   */
  updateRow(
    request?: protos.google.area120.tables.v1alpha1.IUpdateRowRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IRow,
      protos.google.area120.tables.v1alpha1.IUpdateRowRequest | undefined,
      {} | undefined
    ]
  >;
  updateRow(
    request: protos.google.area120.tables.v1alpha1.IUpdateRowRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IRow,
      | protos.google.area120.tables.v1alpha1.IUpdateRowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRow(
    request: protos.google.area120.tables.v1alpha1.IUpdateRowRequest,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IRow,
      | protos.google.area120.tables.v1alpha1.IUpdateRowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRow(
    request?: protos.google.area120.tables.v1alpha1.IUpdateRowRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.area120.tables.v1alpha1.IRow,
          | protos.google.area120.tables.v1alpha1.IUpdateRowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.area120.tables.v1alpha1.IRow,
      | protos.google.area120.tables.v1alpha1.IUpdateRowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IRow,
      protos.google.area120.tables.v1alpha1.IUpdateRowRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'row.name': request.row!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateRow(request, options, callback);
  }
  /**
   * Updates multiple rows.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent table shared by all rows being updated.
   *   Format: tables/{table}
   * @param {number[]} request.requests
   *   Required. The request messages specifying the rows to update.
   *
   *   A maximum of 500 rows can be modified in a single batch.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchUpdateRowsResponse]{@link google.area120.tables.v1alpha1.BatchUpdateRowsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.batch_update_rows.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_BatchUpdateRows_async
   */
  batchUpdateRows(
    request?: protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IBatchUpdateRowsResponse,
      protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest | undefined,
      {} | undefined
    ]
  >;
  batchUpdateRows(
    request: protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IBatchUpdateRowsResponse,
      | protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchUpdateRows(
    request: protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest,
    callback: Callback<
      protos.google.area120.tables.v1alpha1.IBatchUpdateRowsResponse,
      | protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchUpdateRows(
    request?: protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.area120.tables.v1alpha1.IBatchUpdateRowsResponse,
          | protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.area120.tables.v1alpha1.IBatchUpdateRowsResponse,
      | protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IBatchUpdateRowsResponse,
      protos.google.area120.tables.v1alpha1.IBatchUpdateRowsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchUpdateRows(request, options, callback);
  }
  /**
   * Deletes a row.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the row to delete.
   *   Format: tables/{table}/rows/{row}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.delete_row.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_DeleteRow_async
   */
  deleteRow(
    request?: protos.google.area120.tables.v1alpha1.IDeleteRowRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.area120.tables.v1alpha1.IDeleteRowRequest | undefined,
      {} | undefined
    ]
  >;
  deleteRow(
    request: protos.google.area120.tables.v1alpha1.IDeleteRowRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.area120.tables.v1alpha1.IDeleteRowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRow(
    request: protos.google.area120.tables.v1alpha1.IDeleteRowRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.area120.tables.v1alpha1.IDeleteRowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRow(
    request?: protos.google.area120.tables.v1alpha1.IDeleteRowRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.area120.tables.v1alpha1.IDeleteRowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.area120.tables.v1alpha1.IDeleteRowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.area120.tables.v1alpha1.IDeleteRowRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRow(request, options, callback);
  }
  /**
   * Deletes multiple rows.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent table shared by all rows being deleted.
   *   Format: tables/{table}
   * @param {string[]} request.names
   *   Required. The names of the rows to delete. All rows must belong to the parent table
   *   or else the entire batch will fail. A maximum of 500 rows can be deleted
   *   in a batch.
   *   Format: tables/{table}/rows/{row}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.batch_delete_rows.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_BatchDeleteRows_async
   */
  batchDeleteRows(
    request?: protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest | undefined,
      {} | undefined
    ]
  >;
  batchDeleteRows(
    request: protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteRows(
    request: protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteRows(
    request?: protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.area120.tables.v1alpha1.IBatchDeleteRowsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchDeleteRows(request, options, callback);
  }

  /**
   * Lists tables for the user.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} request.pageSize
   *   The maximum number of tables to return. The service may return fewer than
   *   this value.
   *
   *   If unspecified, at most 20 tables are returned. The maximum value is 100;
   *   values above 100 are coerced to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListTables` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListTables` must match
   *   the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Table]{@link google.area120.tables.v1alpha1.Table}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTablesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTables(
    request?: protos.google.area120.tables.v1alpha1.IListTablesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.ITable[],
      protos.google.area120.tables.v1alpha1.IListTablesRequest | null,
      protos.google.area120.tables.v1alpha1.IListTablesResponse
    ]
  >;
  listTables(
    request: protos.google.area120.tables.v1alpha1.IListTablesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.area120.tables.v1alpha1.IListTablesRequest,
      | protos.google.area120.tables.v1alpha1.IListTablesResponse
      | null
      | undefined,
      protos.google.area120.tables.v1alpha1.ITable
    >
  ): void;
  listTables(
    request: protos.google.area120.tables.v1alpha1.IListTablesRequest,
    callback: PaginationCallback<
      protos.google.area120.tables.v1alpha1.IListTablesRequest,
      | protos.google.area120.tables.v1alpha1.IListTablesResponse
      | null
      | undefined,
      protos.google.area120.tables.v1alpha1.ITable
    >
  ): void;
  listTables(
    request?: protos.google.area120.tables.v1alpha1.IListTablesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.area120.tables.v1alpha1.IListTablesRequest,
          | protos.google.area120.tables.v1alpha1.IListTablesResponse
          | null
          | undefined,
          protos.google.area120.tables.v1alpha1.ITable
        >,
    callback?: PaginationCallback<
      protos.google.area120.tables.v1alpha1.IListTablesRequest,
      | protos.google.area120.tables.v1alpha1.IListTablesResponse
      | null
      | undefined,
      protos.google.area120.tables.v1alpha1.ITable
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.ITable[],
      protos.google.area120.tables.v1alpha1.IListTablesRequest | null,
      protos.google.area120.tables.v1alpha1.IListTablesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listTables(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} request.pageSize
   *   The maximum number of tables to return. The service may return fewer than
   *   this value.
   *
   *   If unspecified, at most 20 tables are returned. The maximum value is 100;
   *   values above 100 are coerced to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListTables` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListTables` must match
   *   the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Table]{@link google.area120.tables.v1alpha1.Table} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTablesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTablesStream(
    request?: protos.google.area120.tables.v1alpha1.IListTablesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listTables'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTables.createStream(
      this.innerApiCalls.listTables as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTables`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} request.pageSize
   *   The maximum number of tables to return. The service may return fewer than
   *   this value.
   *
   *   If unspecified, at most 20 tables are returned. The maximum value is 100;
   *   values above 100 are coerced to 100.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListTables` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListTables` must match
   *   the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Table]{@link google.area120.tables.v1alpha1.Table}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.list_tables.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_ListTables_async
   */
  listTablesAsync(
    request?: protos.google.area120.tables.v1alpha1.IListTablesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.area120.tables.v1alpha1.ITable> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listTables'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTables.asyncIterate(
      this.innerApiCalls['listTables'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.area120.tables.v1alpha1.ITable>;
  }
  /**
   * Lists workspaces for the user.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} request.pageSize
   *   The maximum number of workspaces to return. The service may return fewer
   *   than this value.
   *
   *   If unspecified, at most 10 workspaces are returned. The maximum value is
   *   25; values above 25 are coerced to 25.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListWorkspaces` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListWorkspaces` must
   *   match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Workspace]{@link google.area120.tables.v1alpha1.Workspace}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listWorkspacesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkspaces(
    request?: protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IWorkspace[],
      protos.google.area120.tables.v1alpha1.IListWorkspacesRequest | null,
      protos.google.area120.tables.v1alpha1.IListWorkspacesResponse
    ]
  >;
  listWorkspaces(
    request: protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
      | protos.google.area120.tables.v1alpha1.IListWorkspacesResponse
      | null
      | undefined,
      protos.google.area120.tables.v1alpha1.IWorkspace
    >
  ): void;
  listWorkspaces(
    request: protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
    callback: PaginationCallback<
      protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
      | protos.google.area120.tables.v1alpha1.IListWorkspacesResponse
      | null
      | undefined,
      protos.google.area120.tables.v1alpha1.IWorkspace
    >
  ): void;
  listWorkspaces(
    request?: protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
          | protos.google.area120.tables.v1alpha1.IListWorkspacesResponse
          | null
          | undefined,
          protos.google.area120.tables.v1alpha1.IWorkspace
        >,
    callback?: PaginationCallback<
      protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
      | protos.google.area120.tables.v1alpha1.IListWorkspacesResponse
      | null
      | undefined,
      protos.google.area120.tables.v1alpha1.IWorkspace
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IWorkspace[],
      protos.google.area120.tables.v1alpha1.IListWorkspacesRequest | null,
      protos.google.area120.tables.v1alpha1.IListWorkspacesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listWorkspaces(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} request.pageSize
   *   The maximum number of workspaces to return. The service may return fewer
   *   than this value.
   *
   *   If unspecified, at most 10 workspaces are returned. The maximum value is
   *   25; values above 25 are coerced to 25.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListWorkspaces` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListWorkspaces` must
   *   match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Workspace]{@link google.area120.tables.v1alpha1.Workspace} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listWorkspacesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkspacesStream(
    request?: protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listWorkspaces'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkspaces.createStream(
      this.innerApiCalls.listWorkspaces as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listWorkspaces`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} request.pageSize
   *   The maximum number of workspaces to return. The service may return fewer
   *   than this value.
   *
   *   If unspecified, at most 10 workspaces are returned. The maximum value is
   *   25; values above 25 are coerced to 25.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListWorkspaces` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListWorkspaces` must
   *   match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Workspace]{@link google.area120.tables.v1alpha1.Workspace}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.list_workspaces.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_ListWorkspaces_async
   */
  listWorkspacesAsync(
    request?: protos.google.area120.tables.v1alpha1.IListWorkspacesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.area120.tables.v1alpha1.IWorkspace> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listWorkspaces'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkspaces.asyncIterate(
      this.innerApiCalls['listWorkspaces'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.area120.tables.v1alpha1.IWorkspace>;
  }
  /**
   * Lists rows in a table. Returns NOT_FOUND if the table does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent table.
   *   Format: tables/{table}
   * @param {number} request.pageSize
   *   The maximum number of rows to return. The service may return fewer than
   *   this value.
   *
   *   If unspecified, at most 50 rows are returned. The maximum value is 1,000;
   *   values above 1,000 are coerced to 1,000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListRows` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListRows` must match
   *   the call that provided the page token.
   * @param {google.area120.tables.v1alpha1.View} [request.view]
   *   Optional. Column key to use for values in the row.
   *   Defaults to user entered name.
   * @param {string} [request.filter]
   *   Optional. Raw text query to search for in rows of the table.
   *   Special characters must be escaped. Logical operators and field specific
   *   filtering not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Row]{@link google.area120.tables.v1alpha1.Row}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRowsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRows(
    request?: protos.google.area120.tables.v1alpha1.IListRowsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IRow[],
      protos.google.area120.tables.v1alpha1.IListRowsRequest | null,
      protos.google.area120.tables.v1alpha1.IListRowsResponse
    ]
  >;
  listRows(
    request: protos.google.area120.tables.v1alpha1.IListRowsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.area120.tables.v1alpha1.IListRowsRequest,
      | protos.google.area120.tables.v1alpha1.IListRowsResponse
      | null
      | undefined,
      protos.google.area120.tables.v1alpha1.IRow
    >
  ): void;
  listRows(
    request: protos.google.area120.tables.v1alpha1.IListRowsRequest,
    callback: PaginationCallback<
      protos.google.area120.tables.v1alpha1.IListRowsRequest,
      | protos.google.area120.tables.v1alpha1.IListRowsResponse
      | null
      | undefined,
      protos.google.area120.tables.v1alpha1.IRow
    >
  ): void;
  listRows(
    request?: protos.google.area120.tables.v1alpha1.IListRowsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.area120.tables.v1alpha1.IListRowsRequest,
          | protos.google.area120.tables.v1alpha1.IListRowsResponse
          | null
          | undefined,
          protos.google.area120.tables.v1alpha1.IRow
        >,
    callback?: PaginationCallback<
      protos.google.area120.tables.v1alpha1.IListRowsRequest,
      | protos.google.area120.tables.v1alpha1.IListRowsResponse
      | null
      | undefined,
      protos.google.area120.tables.v1alpha1.IRow
    >
  ): Promise<
    [
      protos.google.area120.tables.v1alpha1.IRow[],
      protos.google.area120.tables.v1alpha1.IListRowsRequest | null,
      protos.google.area120.tables.v1alpha1.IListRowsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRows(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent table.
   *   Format: tables/{table}
   * @param {number} request.pageSize
   *   The maximum number of rows to return. The service may return fewer than
   *   this value.
   *
   *   If unspecified, at most 50 rows are returned. The maximum value is 1,000;
   *   values above 1,000 are coerced to 1,000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListRows` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListRows` must match
   *   the call that provided the page token.
   * @param {google.area120.tables.v1alpha1.View} [request.view]
   *   Optional. Column key to use for values in the row.
   *   Defaults to user entered name.
   * @param {string} [request.filter]
   *   Optional. Raw text query to search for in rows of the table.
   *   Special characters must be escaped. Logical operators and field specific
   *   filtering not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Row]{@link google.area120.tables.v1alpha1.Row} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRowsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRowsStream(
    request?: protos.google.area120.tables.v1alpha1.IListRowsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRows'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRows.createStream(
      this.innerApiCalls.listRows as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRows`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent table.
   *   Format: tables/{table}
   * @param {number} request.pageSize
   *   The maximum number of rows to return. The service may return fewer than
   *   this value.
   *
   *   If unspecified, at most 50 rows are returned. The maximum value is 1,000;
   *   values above 1,000 are coerced to 1,000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListRows` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListRows` must match
   *   the call that provided the page token.
   * @param {google.area120.tables.v1alpha1.View} [request.view]
   *   Optional. Column key to use for values in the row.
   *   Defaults to user entered name.
   * @param {string} [request.filter]
   *   Optional. Raw text query to search for in rows of the table.
   *   Special characters must be escaped. Logical operators and field specific
   *   filtering not supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Row]{@link google.area120.tables.v1alpha1.Row}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha1/tables_service.list_rows.js</caption>
   * region_tag:area120tables_v1alpha1_generated_TablesService_ListRows_async
   */
  listRowsAsync(
    request?: protos.google.area120.tables.v1alpha1.IListRowsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.area120.tables.v1alpha1.IRow> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRows'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRows.asyncIterate(
      this.innerApiCalls['listRows'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.area120.tables.v1alpha1.IRow>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified row resource name string.
   *
   * @param {string} table
   * @param {string} row
   * @returns {string} Resource name string.
   */
  rowPath(table: string, row: string) {
    return this.pathTemplates.rowPathTemplate.render({
      table: table,
      row: row,
    });
  }

  /**
   * Parse the table from Row resource.
   *
   * @param {string} rowName
   *   A fully-qualified path representing Row resource.
   * @returns {string} A string representing the table.
   */
  matchTableFromRowName(rowName: string) {
    return this.pathTemplates.rowPathTemplate.match(rowName).table;
  }

  /**
   * Parse the row from Row resource.
   *
   * @param {string} rowName
   *   A fully-qualified path representing Row resource.
   * @returns {string} A string representing the row.
   */
  matchRowFromRowName(rowName: string) {
    return this.pathTemplates.rowPathTemplate.match(rowName).row;
  }

  /**
   * Return a fully-qualified table resource name string.
   *
   * @param {string} table
   * @returns {string} Resource name string.
   */
  tablePath(table: string) {
    return this.pathTemplates.tablePathTemplate.render({
      table: table,
    });
  }

  /**
   * Parse the table from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the table.
   */
  matchTableFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).table;
  }

  /**
   * Return a fully-qualified workspace resource name string.
   *
   * @param {string} workspace
   * @returns {string} Resource name string.
   */
  workspacePath(workspace: string) {
    return this.pathTemplates.workspacePathTemplate.render({
      workspace: workspace,
    });
  }

  /**
   * Parse the workspace from Workspace resource.
   *
   * @param {string} workspaceName
   *   A fully-qualified path representing Workspace resource.
   * @returns {string} A string representing the workspace.
   */
  matchWorkspaceFromWorkspaceName(workspaceName: string) {
    return this.pathTemplates.workspacePathTemplate.match(workspaceName)
      .workspace;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.tablesServiceStub && !this._terminated) {
      return this.tablesServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
