// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as documentserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta.DocumentServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        documentserviceModule.v1beta.DocumentServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        documentserviceModule.v1beta.DocumentServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = documentserviceModule.v1beta.DocumentServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.documentServiceStub, undefined);
      await client.initialize();
      assert(client.documentServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.documentServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.documentServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getDocument', () => {
    it('invokes getDocument without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.Document()
      );
      client.innerApiCalls.getDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.getDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDocument without error using callback', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.Document()
      );
      client.innerApiCalls.getDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.discoveryengine.v1beta.IDocument | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDocument with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDocument with closed client', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.GetDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.GetDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getDocument(request), expectedError);
    });
  });

  describe('createDocument', () => {
    it('invokes createDocument without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.Document()
      );
      client.innerApiCalls.createDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.createDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDocument without error using callback', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.Document()
      );
      client.innerApiCalls.createDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.discoveryengine.v1beta.IDocument | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDocument with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDocument with closed client', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.CreateDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.CreateDocumentRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createDocument(request), expectedError);
    });
  });

  describe('updateDocument', () => {
    it('invokes updateDocument without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedHeaderRequestParams = `document.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.Document()
      );
      client.innerApiCalls.updateDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.updateDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDocument without error using callback', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedHeaderRequestParams = `document.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.Document()
      );
      client.innerApiCalls.updateDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.discoveryengine.v1beta.IDocument | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDocument with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedHeaderRequestParams = `document.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDocument with closed client', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.UpdateDocumentRequest()
      );
      request.document ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.UpdateDocumentRequest',
        ['document', 'name']
      );
      request.document.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateDocument(request), expectedError);
    });
  });

  describe('deleteDocument', () => {
    it('invokes deleteDocument without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDocument = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteDocument(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDocument without error using callback', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDocument =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteDocument(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDocument with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDocument = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteDocument(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDocument as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDocument with closed client', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.DeleteDocumentRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.DeleteDocumentRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteDocument(request), expectedError);
    });
  });

  describe('importDocuments', () => {
    it('invokes importDocuments without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ImportDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ImportDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.importDocuments =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.importDocuments(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importDocuments without error using callback', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ImportDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ImportDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.importDocuments =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.importDocuments(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.discoveryengine.v1beta.IImportDocumentsResponse,
              protos.google.cloud.discoveryengine.v1beta.IImportDocumentsMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsResponse,
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.importDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importDocuments with call error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ImportDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ImportDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importDocuments = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.importDocuments(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.importDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes importDocuments with LRO error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ImportDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ImportDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.importDocuments = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.importDocuments(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.importDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.importDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkImportDocumentsProgress without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkImportDocumentsProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkImportDocumentsProgress with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkImportDocumentsProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listDocuments', () => {
    it('invokes listDocuments without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
      ];
      client.innerApiCalls.listDocuments = stubSimpleCall(expectedResponse);
      const [response] = await client.listDocuments(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDocuments without error using callback', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
      ];
      client.innerApiCalls.listDocuments =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDocuments(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.discoveryengine.v1beta.IDocument[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDocuments with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDocuments = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listDocuments(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDocuments as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDocumentsStream without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
      ];
      client.descriptors.page.listDocuments.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDocumentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.discoveryengine.v1beta.Document[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.discoveryengine.v1beta.Document) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDocuments, request)
      );
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDocumentsStream with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDocuments.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDocumentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.discoveryengine.v1beta.Document[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.discoveryengine.v1beta.Document) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDocuments, request)
      );
      assert(
        (client.descriptors.page.listDocuments.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDocuments without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
        generateSampleMessage(
          new protos.google.cloud.discoveryengine.v1beta.Document()
        ),
      ];
      client.descriptors.page.listDocuments.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.discoveryengine.v1beta.IDocument[] =
        [];
      const iterable = client.listDocumentsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDocuments.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDocuments.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDocuments with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1beta.ListDocumentsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1beta.ListDocumentsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDocuments.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDocumentsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.discoveryengine.v1beta.IDocument[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDocuments.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDocuments.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('branch', () => {
      const fakePath = '/rendered/path/branch';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_store: 'dataStoreValue',
        branch: 'branchValue',
      };
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.branchPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.branchPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('branchPath', () => {
        const result = client.branchPath(
          'projectValue',
          'locationValue',
          'dataStoreValue',
          'branchValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.branchPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromBranchName', () => {
        const result = client.matchProjectFromBranchName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.branchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromBranchName', () => {
        const result = client.matchLocationFromBranchName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.branchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromBranchName', () => {
        const result = client.matchDataStoreFromBranchName(fakePath);
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (client.pathTemplates.branchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBranchFromBranchName', () => {
        const result = client.matchBranchFromBranchName(fakePath);
        assert.strictEqual(result, 'branchValue');
        assert(
          (client.pathTemplates.branchPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('document', () => {
      const fakePath = '/rendered/path/document';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_store: 'dataStoreValue',
        branch: 'branchValue',
        document: 'documentValue',
      };
      const client = new documentserviceModule.v1beta.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.documentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.documentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('documentPath', () => {
        const result = client.documentPath(
          'projectValue',
          'locationValue',
          'dataStoreValue',
          'branchValue',
          'documentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.documentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDocumentName', () => {
        const result = client.matchProjectFromDocumentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDocumentName', () => {
        const result = client.matchLocationFromDocumentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromDocumentName', () => {
        const result = client.matchDataStoreFromDocumentName(fakePath);
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBranchFromDocumentName', () => {
        const result = client.matchBranchFromDocumentName(fakePath);
        assert.strictEqual(result, 'branchValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDocumentFromDocumentName', () => {
        const result = client.matchDocumentFromDocumentName(fakePath);
        assert.strictEqual(result, 'documentValue');
        assert(
          (client.pathTemplates.documentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
