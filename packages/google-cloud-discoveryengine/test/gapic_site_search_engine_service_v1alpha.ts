// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as sitesearchengineserviceModule from '../src';

import {
  protobuf,
  LROperation,
  operationsProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1alpha.SiteSearchEngineServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient
          .servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient
          .apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port =
        sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient
          .port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            fallback: true,
          }
        );
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.siteSearchEngineServiceStub, undefined);
      await client.initialize();
      assert(client.siteSearchEngineServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      assert(client.siteSearchEngineServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      assert.strictEqual(client.siteSearchEngineServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('recrawlUris', () => {
    it('invokes recrawlUris without error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1alpha.RecrawlUrisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1alpha.RecrawlUrisRequest',
        ['siteSearchEngine']
      );
      request.siteSearchEngine = defaultValue1;
      const expectedHeaderRequestParams = `site_search_engine=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.recrawlUris = stubLongRunningCall(expectedResponse);
      const [operation] = await client.recrawlUris(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.recrawlUris as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.recrawlUris as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes recrawlUris without error using callback', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1alpha.RecrawlUrisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1alpha.RecrawlUrisRequest',
        ['siteSearchEngine']
      );
      request.siteSearchEngine = defaultValue1;
      const expectedHeaderRequestParams = `site_search_engine=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.recrawlUris =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.recrawlUris(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.discoveryengine.v1alpha.IRecrawlUrisResponse,
              protos.google.cloud.discoveryengine.v1alpha.IRecrawlUrisMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.discoveryengine.v1alpha.IRecrawlUrisResponse,
        protos.google.cloud.discoveryengine.v1alpha.IRecrawlUrisMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.recrawlUris as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.recrawlUris as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes recrawlUris with call error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1alpha.RecrawlUrisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1alpha.RecrawlUrisRequest',
        ['siteSearchEngine']
      );
      request.siteSearchEngine = defaultValue1;
      const expectedHeaderRequestParams = `site_search_engine=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.recrawlUris = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.recrawlUris(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.recrawlUris as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.recrawlUris as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes recrawlUris with LRO error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.discoveryengine.v1alpha.RecrawlUrisRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.discoveryengine.v1alpha.RecrawlUrisRequest',
        ['siteSearchEngine']
      );
      request.siteSearchEngine = defaultValue1;
      const expectedHeaderRequestParams = `site_search_engine=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.recrawlUris = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.recrawlUris(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.recrawlUris as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.recrawlUris as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRecrawlUrisProgress without error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkRecrawlUrisProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRecrawlUrisProgress with error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.checkRecrawlUrisProgress(''), expectedError);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('projectLocationCollectionDataStoreBranchDocument', () => {
      const fakePath =
        '/rendered/path/projectLocationCollectionDataStoreBranchDocument';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        collection: 'collectionValue',
        data_store: 'dataStoreValue',
        branch: 'branchValue',
        document: 'documentValue',
      };
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationCollectionDataStoreBranchDocumentPath', () => {
        const result =
          client.projectLocationCollectionDataStoreBranchDocumentPath(
            'projectValue',
            'locationValue',
            'collectionValue',
            'dataStoreValue',
            'branchValue',
            'documentValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreBranchDocumentPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationCollectionDataStoreBranchDocumentName', () => {
        const result =
          client.matchProjectFromProjectLocationCollectionDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationCollectionDataStoreBranchDocumentName', () => {
        const result =
          client.matchLocationFromProjectLocationCollectionDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentName', () => {
        const result =
          client.matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'collectionValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentName', () => {
        const result =
          client.matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBranchFromProjectLocationCollectionDataStoreBranchDocumentName', () => {
        const result =
          client.matchBranchFromProjectLocationCollectionDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'branchValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentName', () => {
        const result =
          client.matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'documentValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationCollectionDataStoreConversation', () => {
      const fakePath =
        '/rendered/path/projectLocationCollectionDataStoreConversation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        collection: 'collectionValue',
        data_store: 'dataStoreValue',
        conversation: 'conversationValue',
      };
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationCollectionDataStoreConversationPath', () => {
        const result =
          client.projectLocationCollectionDataStoreConversationPath(
            'projectValue',
            'locationValue',
            'collectionValue',
            'dataStoreValue',
            'conversationValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreConversationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationCollectionDataStoreConversationName', () => {
        const result =
          client.matchProjectFromProjectLocationCollectionDataStoreConversationName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationCollectionDataStoreConversationName', () => {
        const result =
          client.matchLocationFromProjectLocationCollectionDataStoreConversationName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCollectionFromProjectLocationCollectionDataStoreConversationName', () => {
        const result =
          client.matchCollectionFromProjectLocationCollectionDataStoreConversationName(
            fakePath
          );
        assert.strictEqual(result, 'collectionValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromProjectLocationCollectionDataStoreConversationName', () => {
        const result =
          client.matchDataStoreFromProjectLocationCollectionDataStoreConversationName(
            fakePath
          );
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConversationFromProjectLocationCollectionDataStoreConversationName', () => {
        const result =
          client.matchConversationFromProjectLocationCollectionDataStoreConversationName(
            fakePath
          );
        assert.strictEqual(result, 'conversationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationCollectionDataStoreSchema', () => {
      const fakePath =
        '/rendered/path/projectLocationCollectionDataStoreSchema';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        collection: 'collectionValue',
        data_store: 'dataStoreValue',
        schema: 'schemaValue',
      };
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationCollectionDataStoreSchemaPath', () => {
        const result = client.projectLocationCollectionDataStoreSchemaPath(
          'projectValue',
          'locationValue',
          'collectionValue',
          'dataStoreValue',
          'schemaValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSchemaPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationCollectionDataStoreSchemaName', () => {
        const result =
          client.matchProjectFromProjectLocationCollectionDataStoreSchemaName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSchemaPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationCollectionDataStoreSchemaName', () => {
        const result =
          client.matchLocationFromProjectLocationCollectionDataStoreSchemaName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSchemaPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCollectionFromProjectLocationCollectionDataStoreSchemaName', () => {
        const result =
          client.matchCollectionFromProjectLocationCollectionDataStoreSchemaName(
            fakePath
          );
        assert.strictEqual(result, 'collectionValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSchemaPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromProjectLocationCollectionDataStoreSchemaName', () => {
        const result =
          client.matchDataStoreFromProjectLocationCollectionDataStoreSchemaName(
            fakePath
          );
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSchemaPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSchemaFromProjectLocationCollectionDataStoreSchemaName', () => {
        const result =
          client.matchSchemaFromProjectLocationCollectionDataStoreSchemaName(
            fakePath
          );
        assert.strictEqual(result, 'schemaValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSchemaPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationCollectionDataStoreSiteSearchEngine', () => {
      const fakePath =
        '/rendered/path/projectLocationCollectionDataStoreSiteSearchEngine';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        collection: 'collectionValue',
        data_store: 'dataStoreValue',
      };
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationCollectionDataStoreSiteSearchEnginePath', () => {
        const result =
          client.projectLocationCollectionDataStoreSiteSearchEnginePath(
            'projectValue',
            'locationValue',
            'collectionValue',
            'dataStoreValue'
          );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSiteSearchEnginePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationCollectionDataStoreSiteSearchEngineName', () => {
        const result =
          client.matchProjectFromProjectLocationCollectionDataStoreSiteSearchEngineName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSiteSearchEnginePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationCollectionDataStoreSiteSearchEngineName', () => {
        const result =
          client.matchLocationFromProjectLocationCollectionDataStoreSiteSearchEngineName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSiteSearchEnginePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCollectionFromProjectLocationCollectionDataStoreSiteSearchEngineName', () => {
        const result =
          client.matchCollectionFromProjectLocationCollectionDataStoreSiteSearchEngineName(
            fakePath
          );
        assert.strictEqual(result, 'collectionValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSiteSearchEnginePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromProjectLocationCollectionDataStoreSiteSearchEngineName', () => {
        const result =
          client.matchDataStoreFromProjectLocationCollectionDataStoreSiteSearchEngineName(
            fakePath
          );
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (
            client.pathTemplates
              .projectLocationCollectionDataStoreSiteSearchEnginePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationDataStoreBranchDocument', () => {
      const fakePath = '/rendered/path/projectLocationDataStoreBranchDocument';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_store: 'dataStoreValue',
        branch: 'branchValue',
        document: 'documentValue',
      };
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationDataStoreBranchDocumentPath', () => {
        const result = client.projectLocationDataStoreBranchDocumentPath(
          'projectValue',
          'locationValue',
          'dataStoreValue',
          'branchValue',
          'documentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreBranchDocumentPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationDataStoreBranchDocumentName', () => {
        const result =
          client.matchProjectFromProjectLocationDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationDataStoreBranchDocumentName', () => {
        const result =
          client.matchLocationFromProjectLocationDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromProjectLocationDataStoreBranchDocumentName', () => {
        const result =
          client.matchDataStoreFromProjectLocationDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchBranchFromProjectLocationDataStoreBranchDocumentName', () => {
        const result =
          client.matchBranchFromProjectLocationDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'branchValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDocumentFromProjectLocationDataStoreBranchDocumentName', () => {
        const result =
          client.matchDocumentFromProjectLocationDataStoreBranchDocumentName(
            fakePath
          );
        assert.strictEqual(result, 'documentValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreBranchDocumentPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationDataStoreConversation', () => {
      const fakePath = '/rendered/path/projectLocationDataStoreConversation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_store: 'dataStoreValue',
        conversation: 'conversationValue',
      };
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectLocationDataStoreConversationPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationDataStoreConversationPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationDataStoreConversationPath', () => {
        const result = client.projectLocationDataStoreConversationPath(
          'projectValue',
          'locationValue',
          'dataStoreValue',
          'conversationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreConversationPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationDataStoreConversationName', () => {
        const result =
          client.matchProjectFromProjectLocationDataStoreConversationName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationDataStoreConversationName', () => {
        const result =
          client.matchLocationFromProjectLocationDataStoreConversationName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromProjectLocationDataStoreConversationName', () => {
        const result =
          client.matchDataStoreFromProjectLocationDataStoreConversationName(
            fakePath
          );
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConversationFromProjectLocationDataStoreConversationName', () => {
        const result =
          client.matchConversationFromProjectLocationDataStoreConversationName(
            fakePath
          );
        assert.strictEqual(result, 'conversationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreConversationPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationDataStoreSchema', () => {
      const fakePath = '/rendered/path/projectLocationDataStoreSchema';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_store: 'dataStoreValue',
        schema: 'schemaValue',
      };
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectLocationDataStoreSchemaPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationDataStoreSchemaPath', () => {
        const result = client.projectLocationDataStoreSchemaPath(
          'projectValue',
          'locationValue',
          'dataStoreValue',
          'schemaValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationDataStoreSchemaPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationDataStoreSchemaName', () => {
        const result =
          client.matchProjectFromProjectLocationDataStoreSchemaName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationDataStoreSchemaPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationDataStoreSchemaName', () => {
        const result =
          client.matchLocationFromProjectLocationDataStoreSchemaName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationDataStoreSchemaPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromProjectLocationDataStoreSchemaName', () => {
        const result =
          client.matchDataStoreFromProjectLocationDataStoreSchemaName(fakePath);
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (
            client.pathTemplates.projectLocationDataStoreSchemaPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSchemaFromProjectLocationDataStoreSchemaName', () => {
        const result =
          client.matchSchemaFromProjectLocationDataStoreSchemaName(fakePath);
        assert.strictEqual(result, 'schemaValue');
        assert(
          (
            client.pathTemplates.projectLocationDataStoreSchemaPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationDataStoreSiteSearchEngine', () => {
      const fakePath =
        '/rendered/path/projectLocationDataStoreSiteSearchEngine';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_store: 'dataStoreValue',
      };
      const client =
        new sitesearchengineserviceModule.v1alpha.SiteSearchEngineServiceClient(
          {
            credentials: {client_email: 'bogus', private_key: 'bogus'},
            projectId: 'bogus',
          }
        );
      client.initialize();
      client.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationDataStoreSiteSearchEnginePath', () => {
        const result = client.projectLocationDataStoreSiteSearchEnginePath(
          'projectValue',
          'locationValue',
          'dataStoreValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreSiteSearchEnginePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationDataStoreSiteSearchEngineName', () => {
        const result =
          client.matchProjectFromProjectLocationDataStoreSiteSearchEngineName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreSiteSearchEnginePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationDataStoreSiteSearchEngineName', () => {
        const result =
          client.matchLocationFromProjectLocationDataStoreSiteSearchEngineName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreSiteSearchEnginePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStoreFromProjectLocationDataStoreSiteSearchEngineName', () => {
        const result =
          client.matchDataStoreFromProjectLocationDataStoreSiteSearchEngineName(
            fakePath
          );
        assert.strictEqual(result, 'dataStoreValue');
        assert(
          (
            client.pathTemplates
              .projectLocationDataStoreSiteSearchEnginePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
