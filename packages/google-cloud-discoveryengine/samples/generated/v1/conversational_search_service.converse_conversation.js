// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name, query) {
  // [START discoveryengine_v1_generated_ConversationalSearchService_ConverseConversation_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the Conversation to get. Format:
   *  `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
   *  Use
   *  `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
   *  to activate auto session mode, which automatically creates a new
   *  conversation inside a ConverseConversation session.
   */
  // const name = 'abc123'
  /**
   *  Required. Current user input.
   */
  // const query = {}
  /**
   *  The resource name of the Serving Config to use. Format:
   *  `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}`
   *  If this is not set, the default serving config will be used.
   */
  // const servingConfig = 'abc123'
  /**
   *  The conversation to be used by auto session only. The name field will be
   *  ignored as we automatically assign new name for the conversation in auto
   *  session.
   */
  // const conversation = {}
  /**
   *  Whether to turn on safe search.
   */
  // const safeSearch = true
  /**
   *  The user labels applied to a resource must meet the following requirements:
   *  * Each resource can have multiple labels, up to a maximum of 64.
   *  * Each label must be a key-value pair.
   *  * Keys have a minimum length of 1 character and a maximum length of 63
   *    characters and cannot be empty. Values can be empty and have a maximum
   *    length of 63 characters.
   *  * Keys and values can contain only lowercase letters, numeric characters,
   *    underscores, and dashes. All characters must use UTF-8 encoding, and
   *    international characters are allowed.
   *  * The key portion of a label must be unique. However, you can use the same
   *    key with multiple resources.
   *  * Keys must start with a lowercase letter or international character.
   *  See Google Cloud
   *  Document (https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   *  for more details.
   */
  // const userLabels = [1,2,3,4]
  /**
   *  A specification for configuring the summary returned in the response.
   */
  // const summarySpec = {}
  /**
   *  The filter syntax consists of an expression language for constructing a
   *  predicate from one or more fields of the documents being filtered. Filter
   *  expression is case-sensitive. This will be used to filter search results
   *  which may affect the summary response.
   *  If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   *  Filtering in Vertex AI Search is done by mapping the LHS filter key to a
   *  key property defined in the Vertex AI Search backend -- this mapping is
   *  defined by the customer in their schema. For example a media customer might
   *  have a field 'name' in their schema. In this case the filter would look
   *  like this: filter --> name:'ANY("king kong")'
   *  For more information about filtering including syntax and filter
   *  operators, see
   *  Filter (https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)
   */
  // const filter = 'abc123'
  /**
   *  Boost specification to boost certain documents in search results which may
   *  affect the converse response. For more information on boosting, see
   *  Boosting (https://cloud.google.com/retail/docs/boosting#boost)
   */
  // const boostSpec = {}

  // Imports the Discoveryengine library
  const {ConversationalSearchServiceClient} = require('@google-cloud/discoveryengine').v1;

  // Instantiates a client
  const discoveryengineClient = new ConversationalSearchServiceClient();

  async function callConverseConversation() {
    // Construct request
    const request = {
      name,
      query,
    };

    // Run request
    const response = await discoveryengineClient.converseConversation(request);
    console.log(response);
  }

  callConverseConversation();
  // [END discoveryengine_v1_generated_ConversationalSearchService_ConverseConversation_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
