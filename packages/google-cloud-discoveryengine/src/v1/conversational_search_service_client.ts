// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/conversational_search_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './conversational_search_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for conversational search.
 * @class
 * @memberof v1
 */
export class ConversationalSearchServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  conversationalSearchServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ConversationalSearchServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ConversationalSearchServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof ConversationalSearchServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'discoveryengine.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      enginePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/collections/{collection}/engines/{engine}'
      ),
      projectLocationCollectionDataStorePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}'
        ),
      projectLocationCollectionDataStoreBranchDocumentPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}'
        ),
      projectLocationCollectionDataStoreConversationPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/conversations/{conversation}'
        ),
      projectLocationCollectionDataStoreSchemaPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}'
        ),
      projectLocationCollectionDataStoreServingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/servingConfigs/{serving_config}'
        ),
      projectLocationCollectionDataStoreSiteSearchEnginePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine'
        ),
      projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}'
        ),
      projectLocationCollectionEngineConversationPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/conversations/{conversation}'
        ),
      projectLocationCollectionEngineServingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/servingConfigs/{serving_config}'
        ),
      projectLocationDataStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataStores/{data_store}'
      ),
      projectLocationDataStoreBranchDocumentPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}/documents/{document}'
        ),
      projectLocationDataStoreConversationPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/conversations/{conversation}'
        ),
      projectLocationDataStoreSchemaPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/schemas/{schema}'
        ),
      projectLocationDataStoreServingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/servingConfigs/{serving_config}'
        ),
      projectLocationDataStoreSiteSearchEnginePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/siteSearchEngine'
        ),
      projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}'
        ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listConversations: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'conversations'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.discoveryengine.v1.ConversationalSearchService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.conversationalSearchServiceStub) {
      return this.conversationalSearchServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.discoveryengine.v1.ConversationalSearchService.
    this.conversationalSearchServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.discoveryengine.v1.ConversationalSearchService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.discoveryengine.v1
            .ConversationalSearchService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const conversationalSearchServiceStubMethods = [
      'converseConversation',
      'createConversation',
      'deleteConversation',
      'updateConversation',
      'getConversation',
      'listConversations',
    ];
    for (const methodName of conversationalSearchServiceStubMethods) {
      const callPromise = this.conversationalSearchServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.conversationalSearchServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'discoveryengine.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'discoveryengine.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Converses a conversation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Conversation to get. Format:
   *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
   *   Use
   *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
   *   to activate auto session mode, which automatically creates a new
   *   conversation inside a ConverseConversation session.
   * @param {google.cloud.discoveryengine.v1.TextInput} request.query
   *   Required. Current user input.
   * @param {string} request.servingConfig
   *   The resource name of the Serving Config to use. Format:
   *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}`
   *   If this is not set, the default serving config will be used.
   * @param {google.cloud.discoveryengine.v1.Conversation} request.conversation
   *   The conversation to be used by auto session only. The name field will be
   *   ignored as we automatically assign new name for the conversation in auto
   *   session.
   * @param {boolean} request.safeSearch
   *   Whether to turn on safe search.
   * @param {number[]} request.userLabels
   *   The user labels applied to a resource must meet the following requirements:
   *
   *   * Each resource can have multiple labels, up to a maximum of 64.
   *   * Each label must be a key-value pair.
   *   * Keys have a minimum length of 1 character and a maximum length of 63
   *     characters and cannot be empty. Values can be empty and have a maximum
   *     length of 63 characters.
   *   * Keys and values can contain only lowercase letters, numeric characters,
   *     underscores, and dashes. All characters must use UTF-8 encoding, and
   *     international characters are allowed.
   *   * The key portion of a label must be unique. However, you can use the same
   *     key with multiple resources.
   *   * Keys must start with a lowercase letter or international character.
   *
   *   See [Google Cloud
   *   Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   *   for more details.
   * @param {google.cloud.discoveryengine.v1.SearchRequest.ContentSearchSpec.SummarySpec} request.summarySpec
   *   A specification for configuring the summary returned in the response.
   * @param {string} request.filter
   *   The filter syntax consists of an expression language for constructing a
   *   predicate from one or more fields of the documents being filtered. Filter
   *   expression is case-sensitive. This will be used to filter search results
   *   which may affect the summary response.
   *
   *   If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   *
   *   Filtering in Vertex AI Search is done by mapping the LHS filter key to a
   *   key property defined in the Vertex AI Search backend -- this mapping is
   *   defined by the customer in their schema. For example a media customer might
   *   have a field 'name' in their schema. In this case the filter would look
   *   like this: filter --> name:'ANY("king kong")'
   *
   *   For more information about filtering including syntax and filter
   *   operators, see
   *   [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)
   * @param {google.cloud.discoveryengine.v1.SearchRequest.BoostSpec} request.boostSpec
   *   Boost specification to boost certain documents in search results which may
   *   affect the converse response. For more information on boosting, see
   *   [Boosting](https://cloud.google.com/retail/docs/boosting#boost)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1.ConverseConversationResponse|ConverseConversationResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/conversational_search_service.converse_conversation.js</caption>
   * region_tag:discoveryengine_v1_generated_ConversationalSearchService_ConverseConversation_async
   */
  converseConversation(
    request?: protos.google.cloud.discoveryengine.v1.IConverseConversationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConverseConversationResponse,
      (
        | protos.google.cloud.discoveryengine.v1.IConverseConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  converseConversation(
    request: protos.google.cloud.discoveryengine.v1.IConverseConversationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1.IConverseConversationResponse,
      | protos.google.cloud.discoveryengine.v1.IConverseConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  converseConversation(
    request: protos.google.cloud.discoveryengine.v1.IConverseConversationRequest,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1.IConverseConversationResponse,
      | protos.google.cloud.discoveryengine.v1.IConverseConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  converseConversation(
    request?: protos.google.cloud.discoveryengine.v1.IConverseConversationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.discoveryengine.v1.IConverseConversationResponse,
          | protos.google.cloud.discoveryengine.v1.IConverseConversationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.discoveryengine.v1.IConverseConversationResponse,
      | protos.google.cloud.discoveryengine.v1.IConverseConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConverseConversationResponse,
      (
        | protos.google.cloud.discoveryengine.v1.IConverseConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.converseConversation(request, options, callback);
  }
  /**
   * Creates a Conversation.
   *
   * If the {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} to
   * create already exists, an ALREADY_EXISTS error is returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Full resource name of parent data store. Format:
   *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
   * @param {google.cloud.discoveryengine.v1.Conversation} request.conversation
   *   Required. The conversation to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/conversational_search_service.create_conversation.js</caption>
   * region_tag:discoveryengine_v1_generated_ConversationalSearchService_CreateConversation_async
   */
  createConversation(
    request?: protos.google.cloud.discoveryengine.v1.ICreateConversationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConversation,
      (
        | protos.google.cloud.discoveryengine.v1.ICreateConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createConversation(
    request: protos.google.cloud.discoveryengine.v1.ICreateConversationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1.IConversation,
      | protos.google.cloud.discoveryengine.v1.ICreateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createConversation(
    request: protos.google.cloud.discoveryengine.v1.ICreateConversationRequest,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1.IConversation,
      | protos.google.cloud.discoveryengine.v1.ICreateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createConversation(
    request?: protos.google.cloud.discoveryengine.v1.ICreateConversationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.discoveryengine.v1.IConversation,
          | protos.google.cloud.discoveryengine.v1.ICreateConversationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.discoveryengine.v1.IConversation,
      | protos.google.cloud.discoveryengine.v1.ICreateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConversation,
      (
        | protos.google.cloud.discoveryengine.v1.ICreateConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createConversation(request, options, callback);
  }
  /**
   * Deletes a Conversation.
   *
   * If the {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} to
   * delete does not exist, a NOT_FOUND error is returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Conversation to delete. Format:
   *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/conversational_search_service.delete_conversation.js</caption>
   * region_tag:discoveryengine_v1_generated_ConversationalSearchService_DeleteConversation_async
   */
  deleteConversation(
    request?: protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  deleteConversation(
    request: protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConversation(
    request: protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConversation(
    request?: protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.discoveryengine.v1.IDeleteConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteConversation(request, options, callback);
  }
  /**
   * Updates a Conversation.
   *
   * {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} action type
   * cannot be changed. If the
   * {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} to update does
   * not exist, a NOT_FOUND error is returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.discoveryengine.v1.Conversation} request.conversation
   *   Required. The Conversation to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Indicates which fields in the provided
   *   {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} to update. The
   *   following are NOT supported:
   *
   *   * {@link protos.google.cloud.discoveryengine.v1.Conversation.name|Conversation.name}
   *
   *   If not set or empty, all supported fields are updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/conversational_search_service.update_conversation.js</caption>
   * region_tag:discoveryengine_v1_generated_ConversationalSearchService_UpdateConversation_async
   */
  updateConversation(
    request?: protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConversation,
      (
        | protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateConversation(
    request: protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1.IConversation,
      | protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateConversation(
    request: protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1.IConversation,
      | protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateConversation(
    request?: protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.discoveryengine.v1.IConversation,
          | protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.discoveryengine.v1.IConversation,
      | protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConversation,
      (
        | protos.google.cloud.discoveryengine.v1.IUpdateConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'conversation.name': request.conversation!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateConversation(request, options, callback);
  }
  /**
   * Gets a Conversation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Conversation to get. Format:
   *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/conversational_search_service.get_conversation.js</caption>
   * region_tag:discoveryengine_v1_generated_ConversationalSearchService_GetConversation_async
   */
  getConversation(
    request?: protos.google.cloud.discoveryengine.v1.IGetConversationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConversation,
      (
        | protos.google.cloud.discoveryengine.v1.IGetConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getConversation(
    request: protos.google.cloud.discoveryengine.v1.IGetConversationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1.IConversation,
      | protos.google.cloud.discoveryengine.v1.IGetConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConversation(
    request: protos.google.cloud.discoveryengine.v1.IGetConversationRequest,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1.IConversation,
      | protos.google.cloud.discoveryengine.v1.IGetConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConversation(
    request?: protos.google.cloud.discoveryengine.v1.IGetConversationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.discoveryengine.v1.IConversation,
          | protos.google.cloud.discoveryengine.v1.IGetConversationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.discoveryengine.v1.IConversation,
      | protos.google.cloud.discoveryengine.v1.IGetConversationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConversation,
      (
        | protos.google.cloud.discoveryengine.v1.IGetConversationRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getConversation(request, options, callback);
  }

  /**
   * Lists all Conversations by their parent
   * {@link protos.google.cloud.discoveryengine.v1.DataStore|DataStore}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The data store resource name. Format:
   *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
   * @param {number} request.pageSize
   *   Maximum number of results to return. If unspecified, defaults
   *   to 50. Max allowed value is 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListConversations` call.
   *   Provide this to retrieve the subsequent page.
   * @param {string} request.filter
   *   A filter to apply on the list results. The supported features are:
   *   user_pseudo_id, state.
   *
   *   Example:
   *   "user_pseudo_id = some_id"
   * @param {string} request.orderBy
   *   A comma-separated list of fields to order by, sorted in ascending order.
   *   Use "desc" after a field name for descending.
   *   Supported fields:
   *     * `update_time`
   *     * `create_time`
   *     * `conversation_name`
   *
   *   Example:
   *   "update_time desc"
   *   "create_time"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listConversationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listConversations(
    request?: protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConversation[],
      protos.google.cloud.discoveryengine.v1.IListConversationsRequest | null,
      protos.google.cloud.discoveryengine.v1.IListConversationsResponse,
    ]
  >;
  listConversations(
    request: protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
      | protos.google.cloud.discoveryengine.v1.IListConversationsResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1.IConversation
    >
  ): void;
  listConversations(
    request: protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
    callback: PaginationCallback<
      protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
      | protos.google.cloud.discoveryengine.v1.IListConversationsResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1.IConversation
    >
  ): void;
  listConversations(
    request?: protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
          | protos.google.cloud.discoveryengine.v1.IListConversationsResponse
          | null
          | undefined,
          protos.google.cloud.discoveryengine.v1.IConversation
        >,
    callback?: PaginationCallback<
      protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
      | protos.google.cloud.discoveryengine.v1.IListConversationsResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1.IConversation
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1.IConversation[],
      protos.google.cloud.discoveryengine.v1.IListConversationsRequest | null,
      protos.google.cloud.discoveryengine.v1.IListConversationsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listConversations(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The data store resource name. Format:
   *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
   * @param {number} request.pageSize
   *   Maximum number of results to return. If unspecified, defaults
   *   to 50. Max allowed value is 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListConversations` call.
   *   Provide this to retrieve the subsequent page.
   * @param {string} request.filter
   *   A filter to apply on the list results. The supported features are:
   *   user_pseudo_id, state.
   *
   *   Example:
   *   "user_pseudo_id = some_id"
   * @param {string} request.orderBy
   *   A comma-separated list of fields to order by, sorted in ascending order.
   *   Use "desc" after a field name for descending.
   *   Supported fields:
   *     * `update_time`
   *     * `create_time`
   *     * `conversation_name`
   *
   *   Example:
   *   "update_time desc"
   *   "create_time"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listConversationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listConversationsStream(
    request?: protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConversations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConversations.createStream(
      this.innerApiCalls.listConversations as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listConversations`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The data store resource name. Format:
   *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
   * @param {number} request.pageSize
   *   Maximum number of results to return. If unspecified, defaults
   *   to 50. Max allowed value is 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListConversations` call.
   *   Provide this to retrieve the subsequent page.
   * @param {string} request.filter
   *   A filter to apply on the list results. The supported features are:
   *   user_pseudo_id, state.
   *
   *   Example:
   *   "user_pseudo_id = some_id"
   * @param {string} request.orderBy
   *   A comma-separated list of fields to order by, sorted in ascending order.
   *   Use "desc" after a field name for descending.
   *   Supported fields:
   *     * `update_time`
   *     * `create_time`
   *     * `conversation_name`
   *
   *   Example:
   *   "update_time desc"
   *   "create_time"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.discoveryengine.v1.Conversation|Conversation}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/conversational_search_service.list_conversations.js</caption>
   * region_tag:discoveryengine_v1_generated_ConversationalSearchService_ListConversations_async
   */
  listConversationsAsync(
    request?: protos.google.cloud.discoveryengine.v1.IListConversationsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.discoveryengine.v1.IConversation> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConversations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConversations.asyncIterate(
      this.innerApiCalls['listConversations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.discoveryengine.v1.IConversation>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified engine resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} engine
   * @returns {string} Resource name string.
   */
  enginePath(
    project: string,
    location: string,
    collection: string,
    engine: string
  ) {
    return this.pathTemplates.enginePathTemplate.render({
      project: project,
      location: location,
      collection: collection,
      engine: engine,
    });
  }

  /**
   * Parse the project from Engine resource.
   *
   * @param {string} engineName
   *   A fully-qualified path representing Engine resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEngineName(engineName: string) {
    return this.pathTemplates.enginePathTemplate.match(engineName).project;
  }

  /**
   * Parse the location from Engine resource.
   *
   * @param {string} engineName
   *   A fully-qualified path representing Engine resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEngineName(engineName: string) {
    return this.pathTemplates.enginePathTemplate.match(engineName).location;
  }

  /**
   * Parse the collection from Engine resource.
   *
   * @param {string} engineName
   *   A fully-qualified path representing Engine resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromEngineName(engineName: string) {
    return this.pathTemplates.enginePathTemplate.match(engineName).collection;
  }

  /**
   * Parse the engine from Engine resource.
   *
   * @param {string} engineName
   *   A fully-qualified path representing Engine resource.
   * @returns {string} A string representing the engine.
   */
  matchEngineFromEngineName(engineName: string) {
    return this.pathTemplates.enginePathTemplate.match(engineName).engine;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStorePath(
    project: string,
    location: string,
    collection: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStore resource.
   *
   * @param {string} projectLocationCollectionDataStoreName
   *   A fully-qualified path representing project_location_collection_data_store resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreName(
    projectLocationCollectionDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.match(
      projectLocationCollectionDataStoreName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStore resource.
   *
   * @param {string} projectLocationCollectionDataStoreName
   *   A fully-qualified path representing project_location_collection_data_store resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreName(
    projectLocationCollectionDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.match(
      projectLocationCollectionDataStoreName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStore resource.
   *
   * @param {string} projectLocationCollectionDataStoreName
   *   A fully-qualified path representing project_location_collection_data_store resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreName(
    projectLocationCollectionDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.match(
      projectLocationCollectionDataStoreName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStore resource.
   *
   * @param {string} projectLocationCollectionDataStoreName
   *   A fully-qualified path representing project_location_collection_data_store resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreName(
    projectLocationCollectionDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.match(
      projectLocationCollectionDataStoreName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreBranchDocument resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} branch
   * @param {string} document
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreBranchDocumentPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    branch: string,
    document: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        branch: branch,
        document: document,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).branch;
  }

  /**
   * Parse the document from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).document;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreConversation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} conversation
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreConversationPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    conversation: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        conversation: conversation,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).data_store;
  }

  /**
   * Parse the conversation from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the conversation.
   */
  matchConversationFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).conversation;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreSchema resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} schema
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreSchemaPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    schema: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        schema: schema,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).data_store;
  }

  /**
   * Parse the schema from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the schema.
   */
  matchSchemaFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).schema;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreServingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreServingConfigPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    servingConfig: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        serving_config: servingConfig,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).data_store;
  }

  /**
   * Parse the serving_config from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).serving_config;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreSiteSearchEngine resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreSiteSearchEnginePath(
    project: string,
    location: string,
    collection: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreSiteSearchEngineName(
    projectLocationCollectionDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreSiteSearchEngineName(
    projectLocationCollectionDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreSiteSearchEngineName(
    projectLocationCollectionDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreSiteSearchEngineName(
    projectLocationCollectionDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreSiteSearchEngineTargetSite resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} target_site
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreSiteSearchEngineTargetSitePath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    targetSite: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        target_site: targetSite,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).data_store;
  }

  /**
   * Parse the target_site from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the target_site.
   */
  matchTargetSiteFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).target_site;
  }

  /**
   * Return a fully-qualified projectLocationCollectionEngineConversation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} engine
   * @param {string} conversation
   * @returns {string} Resource name string.
   */
  projectLocationCollectionEngineConversationPath(
    project: string,
    location: string,
    collection: string,
    engine: string,
    conversation: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        engine: engine,
        conversation: conversation,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).collection;
  }

  /**
   * Parse the engine from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the engine.
   */
  matchEngineFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).engine;
  }

  /**
   * Parse the conversation from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the conversation.
   */
  matchConversationFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).conversation;
  }

  /**
   * Return a fully-qualified projectLocationCollectionEngineServingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} engine
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  projectLocationCollectionEngineServingConfigPath(
    project: string,
    location: string,
    collection: string,
    engine: string,
    servingConfig: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        engine: engine,
        serving_config: servingConfig,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).collection;
  }

  /**
   * Parse the engine from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the engine.
   */
  matchEngineFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).engine;
  }

  /**
   * Parse the serving_config from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).serving_config;
  }

  /**
   * Return a fully-qualified projectLocationDataStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationDataStorePath(
    project: string,
    location: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationDataStorePathTemplate.render({
      project: project,
      location: location,
      data_store: dataStore,
    });
  }

  /**
   * Parse the project from ProjectLocationDataStore resource.
   *
   * @param {string} projectLocationDataStoreName
   *   A fully-qualified path representing project_location_data_store resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreName(
    projectLocationDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationDataStorePathTemplate.match(
      projectLocationDataStoreName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStore resource.
   *
   * @param {string} projectLocationDataStoreName
   *   A fully-qualified path representing project_location_data_store resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreName(
    projectLocationDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationDataStorePathTemplate.match(
      projectLocationDataStoreName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStore resource.
   *
   * @param {string} projectLocationDataStoreName
   *   A fully-qualified path representing project_location_data_store resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreName(
    projectLocationDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationDataStorePathTemplate.match(
      projectLocationDataStoreName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreBranchDocument resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} branch
   * @param {string} document
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreBranchDocumentPath(
    project: string,
    location: string,
    dataStore: string,
    branch: string,
    document: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        branch: branch,
        document: document,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).branch;
  }

  /**
   * Parse the document from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).document;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreConversation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} conversation
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreConversationPath(
    project: string,
    location: string,
    dataStore: string,
    conversation: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        conversation: conversation,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreConversation resource.
   *
   * @param {string} projectLocationDataStoreConversationName
   *   A fully-qualified path representing project_location_data_store_conversation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreConversationName(
    projectLocationDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(
      projectLocationDataStoreConversationName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreConversation resource.
   *
   * @param {string} projectLocationDataStoreConversationName
   *   A fully-qualified path representing project_location_data_store_conversation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreConversationName(
    projectLocationDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(
      projectLocationDataStoreConversationName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreConversation resource.
   *
   * @param {string} projectLocationDataStoreConversationName
   *   A fully-qualified path representing project_location_data_store_conversation resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreConversationName(
    projectLocationDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(
      projectLocationDataStoreConversationName
    ).data_store;
  }

  /**
   * Parse the conversation from ProjectLocationDataStoreConversation resource.
   *
   * @param {string} projectLocationDataStoreConversationName
   *   A fully-qualified path representing project_location_data_store_conversation resource.
   * @returns {string} A string representing the conversation.
   */
  matchConversationFromProjectLocationDataStoreConversationName(
    projectLocationDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(
      projectLocationDataStoreConversationName
    ).conversation;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreSchema resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} schema
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreSchemaPath(
    project: string,
    location: string,
    dataStore: string,
    schema: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        schema: schema,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).data_store;
  }

  /**
   * Parse the schema from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the schema.
   */
  matchSchemaFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).schema;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreServingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreServingConfigPath(
    project: string,
    location: string,
    dataStore: string,
    servingConfig: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        serving_config: servingConfig,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).data_store;
  }

  /**
   * Parse the serving_config from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).serving_config;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreSiteSearchEngine resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreSiteSearchEnginePath(
    project: string,
    location: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreSiteSearchEngineName(
    projectLocationDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreSiteSearchEngineName(
    projectLocationDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreSiteSearchEngineName(
    projectLocationDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreSiteSearchEngineTargetSite resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} target_site
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreSiteSearchEngineTargetSitePath(
    project: string,
    location: string,
    dataStore: string,
    targetSite: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        target_site: targetSite,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(
    projectLocationDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineTargetSiteName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(
    projectLocationDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineTargetSiteName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(
    projectLocationDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineTargetSiteName
    ).data_store;
  }

  /**
   * Parse the target_site from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the target_site.
   */
  matchTargetSiteFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(
    projectLocationDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineTargetSiteName
    ).target_site;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.conversationalSearchServiceStub && !this._terminated) {
      return this.conversationalSearchServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
