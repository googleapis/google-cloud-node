// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta/document_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './document_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for ingesting
 *  {@link google.cloud.discoveryengine.v1beta.Document|Document} information of the
 *  customer's website.
 * @class
 * @memberof v1beta
 */
export class DocumentServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  documentServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DocumentServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DocumentServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DocumentServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      branchPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}'
      ),
      documentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}/documents/{document}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listDocuments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'documents'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1beta/{name=projects/*/locations/*/dataStores/*/branches/*/operations/*}',
          additional_bindings: [
            {
              get: '/v1beta/{name=projects/*/locations/*/dataStores/*/models/*/operations/*}',
            },
            {
              get: '/v1beta/{name=projects/*/locations/*/dataStores/*/operations/*}',
            },
            {get: '/v1beta/{name=projects/*/locations/*/operations/*}'},
            {get: '/v1beta/{name=projects/*/operations/*}'},
          ],
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1beta/{name=projects/*/locations/*/dataStores/*/branches/*}/operations',
          additional_bindings: [
            {
              get: '/v1beta/{name=projects/*/locations/*/dataStores/*/models/*}/operations',
            },
            {
              get: '/v1beta/{name=projects/*/locations/*/dataStores/*}/operations',
            },
            {get: '/v1beta/{name=projects/*/locations/*}/operations'},
            {get: '/v1beta/{name=projects/*}/operations'},
          ],
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const importDocumentsResponse = protoFilesRoot.lookup(
      '.google.cloud.discoveryengine.v1beta.ImportDocumentsResponse'
    ) as gax.protobuf.Type;
    const importDocumentsMetadata = protoFilesRoot.lookup(
      '.google.cloud.discoveryengine.v1beta.ImportDocumentsMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      importDocuments: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importDocumentsResponse.decode.bind(importDocumentsResponse),
        importDocumentsMetadata.decode.bind(importDocumentsMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.discoveryengine.v1beta.DocumentService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.documentServiceStub) {
      return this.documentServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.discoveryengine.v1beta.DocumentService.
    this.documentServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.discoveryengine.v1beta.DocumentService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.discoveryengine.v1beta
            .DocumentService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const documentServiceStubMethods = [
      'getDocument',
      'listDocuments',
      'createDocument',
      'updateDocument',
      'deleteDocument',
      'importDocuments',
    ];
    for (const methodName of documentServiceStubMethods) {
      const callPromise = this.documentServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.documentServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'discoveryengine.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'discoveryengine.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a {@link google.cloud.discoveryengine.v1beta.Document|Document}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Full resource name of
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}, such as
   *   `projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
   *
   *   If the caller does not have permission to access the
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}, regardless of
   *   whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   *   If the requested {@link google.cloud.discoveryengine.v1beta.Document|Document}
   *   does not exist, a NOT_FOUND error is returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Document]{@link google.cloud.discoveryengine.v1beta.Document}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/document_service.get_document.js</caption>
   * region_tag:discoveryengine_v1beta_generated_DocumentService_GetDocument_async
   */
  getDocument(
    request?: protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      (
        | protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getDocument(
    request: protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      | protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDocument(
    request: protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      | protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDocument(
    request?: protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.discoveryengine.v1beta.IDocument,
          | protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      | protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      (
        | protos.google.cloud.discoveryengine.v1beta.IGetDocumentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDocument(request, options, callback);
  }
  /**
   * Creates a {@link google.cloud.discoveryengine.v1beta.Document|Document}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource name, such as
   *   `projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}`.
   * @param {google.cloud.discoveryengine.v1beta.Document} request.document
   *   Required. The {@link google.cloud.discoveryengine.v1beta.Document|Document} to
   *   create.
   * @param {string} request.documentId
   *   Required. The ID to use for the
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}, which will become
   *   the final component of the
   *   {@link google.cloud.discoveryengine.v1beta.Document.name|Document.name}.
   *
   *   If the caller does not have permission to create the
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}, regardless of
   *   whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   *   This field must be unique among all
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}s with the same
   *   {@link google.cloud.discoveryengine.v1beta.CreateDocumentRequest.parent|parent}.
   *   Otherwise, an ALREADY_EXISTS error is returned.
   *
   *   This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034)
   *   standard with a length limit of 63 characters. Otherwise, an
   *   INVALID_ARGUMENT error is returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Document]{@link google.cloud.discoveryengine.v1beta.Document}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/document_service.create_document.js</caption>
   * region_tag:discoveryengine_v1beta_generated_DocumentService_CreateDocument_async
   */
  createDocument(
    request?: protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      (
        | protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createDocument(
    request: protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      | protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createDocument(
    request: protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      | protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createDocument(
    request?: protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.discoveryengine.v1beta.IDocument,
          | protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      | protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      (
        | protos.google.cloud.discoveryengine.v1beta.ICreateDocumentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createDocument(request, options, callback);
  }
  /**
   * Updates a {@link google.cloud.discoveryengine.v1beta.Document|Document}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.discoveryengine.v1beta.Document} request.document
   *   Required. The document to update/create.
   *
   *   If the caller does not have permission to update the
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}, regardless of
   *   whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   *   If the {@link google.cloud.discoveryengine.v1beta.Document|Document} to update
   *   does not exist and
   *   {@link google.cloud.discoveryengine.v1beta.UpdateDocumentRequest.allow_missing|allow_missing}
   *   is not set, a NOT_FOUND error is returned.
   * @param {boolean} request.allowMissing
   *   If set to true, and the
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document} is not found, a
   *   new {@link google.cloud.discoveryengine.v1beta.Document|Document} will be
   *   created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Document]{@link google.cloud.discoveryengine.v1beta.Document}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/document_service.update_document.js</caption>
   * region_tag:discoveryengine_v1beta_generated_DocumentService_UpdateDocument_async
   */
  updateDocument(
    request?: protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      (
        | protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateDocument(
    request: protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      | protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateDocument(
    request: protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      | protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateDocument(
    request?: protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.discoveryengine.v1beta.IDocument,
          | protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      | protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.IDocument,
      (
        | protos.google.cloud.discoveryengine.v1beta.IUpdateDocumentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'document.name': request.document!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateDocument(request, options, callback);
  }
  /**
   * Deletes a {@link google.cloud.discoveryengine.v1beta.Document|Document}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Full resource name of
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}, such as
   *   `projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
   *
   *   If the caller does not have permission to delete the
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}, regardless of
   *   whether or not it exists, a PERMISSION_DENIED error is returned.
   *
   *   If the {@link google.cloud.discoveryengine.v1beta.Document|Document} to delete
   *   does not exist, a NOT_FOUND error is returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/document_service.delete_document.js</caption>
   * region_tag:discoveryengine_v1beta_generated_DocumentService_DeleteDocument_async
   */
  deleteDocument(
    request?: protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteDocument(
    request: protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDocument(
    request: protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDocument(
    request?: protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.discoveryengine.v1beta.IDeleteDocumentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteDocument(request, options, callback);
  }

  /**
   * Bulk import of multiple
   * {@link google.cloud.discoveryengine.v1beta.Document|Document}s. Request
   * processing may be synchronous. Non-existing items will be created.
   *
   * Note: It is possible for a subset of the
   * {@link google.cloud.discoveryengine.v1beta.Document|Document}s to be
   * successfully updated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.InlineSource} request.inlineSource
   *   The Inline source for the input content for documents.
   * @param {google.cloud.discoveryengine.v1beta.GcsSource} request.gcsSource
   *   Google Cloud Storage location for the input content.
   * @param {google.cloud.discoveryengine.v1beta.BigQuerySource} request.bigquerySource
   *   BigQuery input source.
   * @param {string} request.parent
   *   Required. The parent branch resource name, such as
   *   `projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}`.
   *   Requires create/update permission.
   * @param {google.cloud.discoveryengine.v1beta.ImportErrorConfig} request.errorConfig
   *   The desired location of errors incurred during the Import.
   * @param {google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.ReconciliationMode} request.reconciliationMode
   *   The mode of reconciliation between existing documents and the documents to
   *   be imported. Defaults to
   *   {@link google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.ReconciliationMode.INCREMENTAL|ReconciliationMode.INCREMENTAL}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/document_service.import_documents.js</caption>
   * region_tag:discoveryengine_v1beta_generated_DocumentService_ImportDocuments_async
   */
  importDocuments(
    request?: protos.google.cloud.discoveryengine.v1beta.IImportDocumentsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsResponse,
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  importDocuments(
    request: protos.google.cloud.discoveryengine.v1beta.IImportDocumentsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsResponse,
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importDocuments(
    request: protos.google.cloud.discoveryengine.v1beta.IImportDocumentsRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsResponse,
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importDocuments(
    request?: protos.google.cloud.discoveryengine.v1beta.IImportDocumentsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.discoveryengine.v1beta.IImportDocumentsResponse,
            protos.google.cloud.discoveryengine.v1beta.IImportDocumentsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsResponse,
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsResponse,
        protos.google.cloud.discoveryengine.v1beta.IImportDocumentsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importDocuments(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `importDocuments()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/document_service.import_documents.js</caption>
   * region_tag:discoveryengine_v1beta_generated_DocumentService_ImportDocuments_async
   */
  async checkImportDocumentsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.discoveryengine.v1beta.ImportDocumentsResponse,
      protos.google.cloud.discoveryengine.v1beta.ImportDocumentsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.importDocuments,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.discoveryengine.v1beta.ImportDocumentsResponse,
      protos.google.cloud.discoveryengine.v1beta.ImportDocumentsMetadata
    >;
  }
  /**
   * Gets a list of {@link google.cloud.discoveryengine.v1beta.Document|Document}s.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent branch resource name, such as
   *   `projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}`.
   *   Use `default_branch` as the branch ID, to list documents under the default
   *   branch.
   *
   *   If the caller does not have permission to list {@link |Documents}s under this
   *   branch, regardless of whether or not this branch exists, a
   *   PERMISSION_DENIED error is returned.
   * @param {number} request.pageSize
   *   Maximum number of {@link google.cloud.discoveryengine.v1beta.Document|Document}s
   *   to return. If unspecified, defaults to 100. The maximum allowed value is
   *   1000. Values above 1000 will be coerced to 1000.
   *
   *   If this field is negative, an INVALID_ARGUMENT error is returned.
   * @param {string} request.pageToken
   *   A page token
   *   {@link google.cloud.discoveryengine.v1beta.ListDocumentsResponse.next_page_token|ListDocumentsResponse.next_page_token},
   *   received from a previous
   *   {@link google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
   *   must match the call that provided the page token. Otherwise, an
   *   INVALID_ARGUMENT error is returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Document]{@link google.cloud.discoveryengine.v1beta.Document}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDocumentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDocuments(
    request?: protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.IDocument[],
      protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest | null,
      protos.google.cloud.discoveryengine.v1beta.IListDocumentsResponse
    ]
  >;
  listDocuments(
    request: protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
      | protos.google.cloud.discoveryengine.v1beta.IListDocumentsResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1beta.IDocument
    >
  ): void;
  listDocuments(
    request: protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
      | protos.google.cloud.discoveryengine.v1beta.IListDocumentsResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1beta.IDocument
    >
  ): void;
  listDocuments(
    request?: protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
          | protos.google.cloud.discoveryengine.v1beta.IListDocumentsResponse
          | null
          | undefined,
          protos.google.cloud.discoveryengine.v1beta.IDocument
        >,
    callback?: PaginationCallback<
      protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
      | protos.google.cloud.discoveryengine.v1beta.IListDocumentsResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1beta.IDocument
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.IDocument[],
      protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest | null,
      protos.google.cloud.discoveryengine.v1beta.IListDocumentsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDocuments(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent branch resource name, such as
   *   `projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}`.
   *   Use `default_branch` as the branch ID, to list documents under the default
   *   branch.
   *
   *   If the caller does not have permission to list {@link |Documents}s under this
   *   branch, regardless of whether or not this branch exists, a
   *   PERMISSION_DENIED error is returned.
   * @param {number} request.pageSize
   *   Maximum number of {@link google.cloud.discoveryengine.v1beta.Document|Document}s
   *   to return. If unspecified, defaults to 100. The maximum allowed value is
   *   1000. Values above 1000 will be coerced to 1000.
   *
   *   If this field is negative, an INVALID_ARGUMENT error is returned.
   * @param {string} request.pageToken
   *   A page token
   *   {@link google.cloud.discoveryengine.v1beta.ListDocumentsResponse.next_page_token|ListDocumentsResponse.next_page_token},
   *   received from a previous
   *   {@link google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
   *   must match the call that provided the page token. Otherwise, an
   *   INVALID_ARGUMENT error is returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Document]{@link google.cloud.discoveryengine.v1beta.Document} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDocumentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDocumentsStream(
    request?: protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDocuments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDocuments.createStream(
      this.innerApiCalls.listDocuments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDocuments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent branch resource name, such as
   *   `projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}`.
   *   Use `default_branch` as the branch ID, to list documents under the default
   *   branch.
   *
   *   If the caller does not have permission to list {@link |Documents}s under this
   *   branch, regardless of whether or not this branch exists, a
   *   PERMISSION_DENIED error is returned.
   * @param {number} request.pageSize
   *   Maximum number of {@link google.cloud.discoveryengine.v1beta.Document|Document}s
   *   to return. If unspecified, defaults to 100. The maximum allowed value is
   *   1000. Values above 1000 will be coerced to 1000.
   *
   *   If this field is negative, an INVALID_ARGUMENT error is returned.
   * @param {string} request.pageToken
   *   A page token
   *   {@link google.cloud.discoveryengine.v1beta.ListDocumentsResponse.next_page_token|ListDocumentsResponse.next_page_token},
   *   received from a previous
   *   {@link google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.discoveryengine.v1beta.DocumentService.ListDocuments|DocumentService.ListDocuments}
   *   must match the call that provided the page token. Otherwise, an
   *   INVALID_ARGUMENT error is returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Document]{@link google.cloud.discoveryengine.v1beta.Document}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/document_service.list_documents.js</caption>
   * region_tag:discoveryengine_v1beta_generated_DocumentService_ListDocuments_async
   */
  listDocumentsAsync(
    request?: protos.google.cloud.discoveryengine.v1beta.IListDocumentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.discoveryengine.v1beta.IDocument> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDocuments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDocuments.asyncIterate(
      this.innerApiCalls['listDocuments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.discoveryengine.v1beta.IDocument>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified branch resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} branch
   * @returns {string} Resource name string.
   */
  branchPath(
    project: string,
    location: string,
    dataStore: string,
    branch: string
  ) {
    return this.pathTemplates.branchPathTemplate.render({
      project: project,
      location: location,
      data_store: dataStore,
      branch: branch,
    });
  }

  /**
   * Parse the project from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).project;
  }

  /**
   * Parse the location from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).location;
  }

  /**
   * Parse the data_store from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).data_store;
  }

  /**
   * Parse the branch from Branch resource.
   *
   * @param {string} branchName
   *   A fully-qualified path representing Branch resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromBranchName(branchName: string) {
    return this.pathTemplates.branchPathTemplate.match(branchName).branch;
  }

  /**
   * Return a fully-qualified document resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} branch
   * @param {string} document
   * @returns {string} Resource name string.
   */
  documentPath(
    project: string,
    location: string,
    dataStore: string,
    branch: string,
    document: string
  ) {
    return this.pathTemplates.documentPathTemplate.render({
      project: project,
      location: location,
      data_store: dataStore,
      branch: branch,
      document: document,
    });
  }

  /**
   * Parse the project from Document resource.
   *
   * @param {string} documentName
   *   A fully-qualified path representing Document resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDocumentName(documentName: string) {
    return this.pathTemplates.documentPathTemplate.match(documentName).project;
  }

  /**
   * Parse the location from Document resource.
   *
   * @param {string} documentName
   *   A fully-qualified path representing Document resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDocumentName(documentName: string) {
    return this.pathTemplates.documentPathTemplate.match(documentName).location;
  }

  /**
   * Parse the data_store from Document resource.
   *
   * @param {string} documentName
   *   A fully-qualified path representing Document resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromDocumentName(documentName: string) {
    return this.pathTemplates.documentPathTemplate.match(documentName)
      .data_store;
  }

  /**
   * Parse the branch from Document resource.
   *
   * @param {string} documentName
   *   A fully-qualified path representing Document resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromDocumentName(documentName: string) {
    return this.pathTemplates.documentPathTemplate.match(documentName).branch;
  }

  /**
   * Parse the document from Document resource.
   *
   * @param {string} documentName
   *   A fully-qualified path representing Document resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromDocumentName(documentName: string) {
    return this.pathTemplates.documentPathTemplate.match(documentName).document;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.documentServiceStub && !this._terminated) {
      return this.documentServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
