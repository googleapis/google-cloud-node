// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta/search_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './search_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for search.
 * @class
 * @memberof v1beta
 */
export class SearchServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  searchServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of SearchServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new SearchServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof SearchServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      projectLocationCollectionDataStoreBranchPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}'
        ),
      projectLocationCollectionDataStoreBranchDocumentPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}'
        ),
      projectLocationCollectionDataStoreSchemaPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}'
        ),
      projectLocationCollectionDataStoreServingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/servingConfigs/{serving_config}'
        ),
      projectLocationDataStoreBranchPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}'
        ),
      projectLocationDataStoreBranchDocumentPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}/documents/{document}'
        ),
      projectLocationDataStoreSchemaPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/schemas/{schema}'
        ),
      projectLocationDataStoreServingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/servingConfigs/{serving_config}'
        ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      search: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'results'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.discoveryengine.v1beta.SearchService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.searchServiceStub) {
      return this.searchServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.discoveryengine.v1beta.SearchService.
    this.searchServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.discoveryengine.v1beta.SearchService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.discoveryengine.v1beta
            .SearchService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const searchServiceStubMethods = ['search'];
    for (const methodName of searchServiceStubMethods) {
      const callPromise = this.searchServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.searchServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'discoveryengine.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'discoveryengine.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------

  /**
   * Performs a search.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.servingConfig
   *   Required. The resource name of the Search serving config, such as
   *   `projects/* /locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.
   *   This field is used to identify the serving configuration name, set
   *   of models used to make the search.
   * @param {string} request.branch
   *   The branch resource name, such as
   *   `projects/* /locations/global/collections/default_collection/dataStores/default_data_store/branches/0`.
   *
   *   Use `default_branch` as the branch ID or leave this field empty, to search
   *   documents under the default branch.
   * @param {string} request.query
   *   Raw search query.
   * @param {number} request.pageSize
   *   Maximum number of {@link google.cloud.discoveryengine.v1beta.Document|Document}s
   *   to return. If unspecified, defaults to a reasonable value. The maximum
   *   allowed value is 100. Values above 100 will be coerced to 100.
   *
   *   If this field is negative, an  `INVALID_ARGUMENT`  is returned.
   * @param {string} request.pageToken
   *   A page token received from a previous
   *   {@link google.cloud.discoveryengine.v1beta.SearchService.Search|SearchService.Search}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.discoveryengine.v1beta.SearchService.Search|SearchService.Search}
   *   must match the call that provided the page token. Otherwise, an
   *    `INVALID_ARGUMENT`  error is returned.
   * @param {number} request.offset
   *   A 0-indexed integer that specifies the current offset (that is, starting
   *   result location, amongst the
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}s deemed by the API
   *   as relevant) in search results. This field is only considered if
   *   {@link google.cloud.discoveryengine.v1beta.SearchRequest.page_token|page_token}
   *   is unset.
   *
   *   If this field is negative, an  `INVALID_ARGUMENT`  is returned.
   * @param {string} request.filter
   *   The filter syntax consists of an expression language for constructing a
   *   predicate from one or more fields of the documents being filtered. Filter
   *   expression is case-sensitive.
   *
   *   If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   * @param {string} request.orderBy
   *   The order in which documents are returned. Document can be ordered by
   *   a field in an {@link google.cloud.discoveryengine.v1beta.Document|Document}
   *   object. Leave it unset if ordered by relevance. OrderBy expression is
   *   case-sensitive.
   *
   *   If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   * @param {number[]} request.facetSpecs
   *   Facet specifications for faceted search. If empty, no facets are returned.
   *
   *   A maximum of 100 values are allowed. Otherwise, an  `INVALID_ARGUMENT`
   *   error is returned.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.BoostSpec} request.boostSpec
   *   Boost specification to boost certain documents.
   * @param {number[]} request.params
   *   Additional search parameters.
   *
   *   For
   *   {@link google.cloud.discoveryengine.v1beta.IndustryVertical.SITE_SEARCH|IndustryVertical.SITE_SEARCH}
   *   vertical, supported values are:
   *
   *   * `user_country_code`: string. Default empty. If set to non-empty, results
   *      are restricted or boosted based on the location provided.
   *   * `search_type`: double. Default empty. Enables non-webpage searching
   *     depending on the value. The only valid non-default value is 1,
   *     which enables image searching.
   *   This field is ignored for other verticals.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.QueryExpansionSpec} request.queryExpansionSpec
   *   The query expansion specification that specifies the conditions under which
   *   query expansion will occur.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.SpellCorrectionSpec} request.spellCorrectionSpec
   *   The spell correction specification that specifies the mode under
   *   which spell correction will take effect.
   * @param {string} request.userPseudoId
   *   A unique identifier for tracking visitors. For example, this could be
   *   implemented with an HTTP cookie, which should be able to uniquely identify
   *   a visitor on a single device. This unique identifier should not change if
   *   the visitor logs in or out of the website.
   *
   *   This field should NOT have a fixed value such as `unknown_visitor`.
   *
   *   This should be the same identifier as
   *   {@link google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id|UserEvent.user_pseudo_id}
   *   and
   *   {@link google.cloud.discoveryengine.v1beta.CompleteQueryRequest.user_pseudo_id|CompleteQueryRequest.user_pseudo_id}
   *
   *   The field must be a UTF-8 encoded string with a length limit of 128
   *   characters. Otherwise, an  `INVALID_ARGUMENT`  error is returned.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.ContentSearchSpec} request.contentSearchSpec
   *   The content search spec that configs the desired behavior of content
   *   search.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link google.cloud.discoveryengine.v1beta.SearchResponse.SearchResult | SearchResult}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `searchAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  search(
    request?: protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.SearchResponse.ISearchResult[],
      protos.google.cloud.discoveryengine.v1beta.ISearchRequest | null,
      protos.google.cloud.discoveryengine.v1beta.ISearchResponse
    ]
  >;
  search(
    request: protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
      | protos.google.cloud.discoveryengine.v1beta.ISearchResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1beta.SearchResponse.ISearchResult
    >
  ): void;
  search(
    request: protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
    callback: PaginationCallback<
      protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
      | protos.google.cloud.discoveryengine.v1beta.ISearchResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1beta.SearchResponse.ISearchResult
    >
  ): void;
  search(
    request?: protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
          | protos.google.cloud.discoveryengine.v1beta.ISearchResponse
          | null
          | undefined,
          protos.google.cloud.discoveryengine.v1beta.SearchResponse.ISearchResult
        >,
    callback?: PaginationCallback<
      protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
      | protos.google.cloud.discoveryengine.v1beta.ISearchResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1beta.SearchResponse.ISearchResult
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1beta.SearchResponse.ISearchResult[],
      protos.google.cloud.discoveryengine.v1beta.ISearchRequest | null,
      protos.google.cloud.discoveryengine.v1beta.ISearchResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        serving_config: request.servingConfig ?? '',
      });
    this.initialize();
    return this.innerApiCalls.search(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.servingConfig
   *   Required. The resource name of the Search serving config, such as
   *   `projects/* /locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.
   *   This field is used to identify the serving configuration name, set
   *   of models used to make the search.
   * @param {string} request.branch
   *   The branch resource name, such as
   *   `projects/* /locations/global/collections/default_collection/dataStores/default_data_store/branches/0`.
   *
   *   Use `default_branch` as the branch ID or leave this field empty, to search
   *   documents under the default branch.
   * @param {string} request.query
   *   Raw search query.
   * @param {number} request.pageSize
   *   Maximum number of {@link google.cloud.discoveryengine.v1beta.Document|Document}s
   *   to return. If unspecified, defaults to a reasonable value. The maximum
   *   allowed value is 100. Values above 100 will be coerced to 100.
   *
   *   If this field is negative, an  `INVALID_ARGUMENT`  is returned.
   * @param {string} request.pageToken
   *   A page token received from a previous
   *   {@link google.cloud.discoveryengine.v1beta.SearchService.Search|SearchService.Search}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.discoveryengine.v1beta.SearchService.Search|SearchService.Search}
   *   must match the call that provided the page token. Otherwise, an
   *    `INVALID_ARGUMENT`  error is returned.
   * @param {number} request.offset
   *   A 0-indexed integer that specifies the current offset (that is, starting
   *   result location, amongst the
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}s deemed by the API
   *   as relevant) in search results. This field is only considered if
   *   {@link google.cloud.discoveryengine.v1beta.SearchRequest.page_token|page_token}
   *   is unset.
   *
   *   If this field is negative, an  `INVALID_ARGUMENT`  is returned.
   * @param {string} request.filter
   *   The filter syntax consists of an expression language for constructing a
   *   predicate from one or more fields of the documents being filtered. Filter
   *   expression is case-sensitive.
   *
   *   If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   * @param {string} request.orderBy
   *   The order in which documents are returned. Document can be ordered by
   *   a field in an {@link google.cloud.discoveryengine.v1beta.Document|Document}
   *   object. Leave it unset if ordered by relevance. OrderBy expression is
   *   case-sensitive.
   *
   *   If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   * @param {number[]} request.facetSpecs
   *   Facet specifications for faceted search. If empty, no facets are returned.
   *
   *   A maximum of 100 values are allowed. Otherwise, an  `INVALID_ARGUMENT`
   *   error is returned.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.BoostSpec} request.boostSpec
   *   Boost specification to boost certain documents.
   * @param {number[]} request.params
   *   Additional search parameters.
   *
   *   For
   *   {@link google.cloud.discoveryengine.v1beta.IndustryVertical.SITE_SEARCH|IndustryVertical.SITE_SEARCH}
   *   vertical, supported values are:
   *
   *   * `user_country_code`: string. Default empty. If set to non-empty, results
   *      are restricted or boosted based on the location provided.
   *   * `search_type`: double. Default empty. Enables non-webpage searching
   *     depending on the value. The only valid non-default value is 1,
   *     which enables image searching.
   *   This field is ignored for other verticals.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.QueryExpansionSpec} request.queryExpansionSpec
   *   The query expansion specification that specifies the conditions under which
   *   query expansion will occur.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.SpellCorrectionSpec} request.spellCorrectionSpec
   *   The spell correction specification that specifies the mode under
   *   which spell correction will take effect.
   * @param {string} request.userPseudoId
   *   A unique identifier for tracking visitors. For example, this could be
   *   implemented with an HTTP cookie, which should be able to uniquely identify
   *   a visitor on a single device. This unique identifier should not change if
   *   the visitor logs in or out of the website.
   *
   *   This field should NOT have a fixed value such as `unknown_visitor`.
   *
   *   This should be the same identifier as
   *   {@link google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id|UserEvent.user_pseudo_id}
   *   and
   *   {@link google.cloud.discoveryengine.v1beta.CompleteQueryRequest.user_pseudo_id|CompleteQueryRequest.user_pseudo_id}
   *
   *   The field must be a UTF-8 encoded string with a length limit of 128
   *   characters. Otherwise, an  `INVALID_ARGUMENT`  error is returned.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.ContentSearchSpec} request.contentSearchSpec
   *   The content search spec that configs the desired behavior of content
   *   search.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link google.cloud.discoveryengine.v1beta.SearchResponse.SearchResult | SearchResult} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `searchAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  searchStream(
    request?: protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        serving_config: request.servingConfig ?? '',
      });
    const defaultCallSettings = this._defaults['search'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.search.createStream(
      this.innerApiCalls.search as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `search`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.servingConfig
   *   Required. The resource name of the Search serving config, such as
   *   `projects/* /locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.
   *   This field is used to identify the serving configuration name, set
   *   of models used to make the search.
   * @param {string} request.branch
   *   The branch resource name, such as
   *   `projects/* /locations/global/collections/default_collection/dataStores/default_data_store/branches/0`.
   *
   *   Use `default_branch` as the branch ID or leave this field empty, to search
   *   documents under the default branch.
   * @param {string} request.query
   *   Raw search query.
   * @param {number} request.pageSize
   *   Maximum number of {@link google.cloud.discoveryengine.v1beta.Document|Document}s
   *   to return. If unspecified, defaults to a reasonable value. The maximum
   *   allowed value is 100. Values above 100 will be coerced to 100.
   *
   *   If this field is negative, an  `INVALID_ARGUMENT`  is returned.
   * @param {string} request.pageToken
   *   A page token received from a previous
   *   {@link google.cloud.discoveryengine.v1beta.SearchService.Search|SearchService.Search}
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to
   *   {@link google.cloud.discoveryengine.v1beta.SearchService.Search|SearchService.Search}
   *   must match the call that provided the page token. Otherwise, an
   *    `INVALID_ARGUMENT`  error is returned.
   * @param {number} request.offset
   *   A 0-indexed integer that specifies the current offset (that is, starting
   *   result location, amongst the
   *   {@link google.cloud.discoveryengine.v1beta.Document|Document}s deemed by the API
   *   as relevant) in search results. This field is only considered if
   *   {@link google.cloud.discoveryengine.v1beta.SearchRequest.page_token|page_token}
   *   is unset.
   *
   *   If this field is negative, an  `INVALID_ARGUMENT`  is returned.
   * @param {string} request.filter
   *   The filter syntax consists of an expression language for constructing a
   *   predicate from one or more fields of the documents being filtered. Filter
   *   expression is case-sensitive.
   *
   *   If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   * @param {string} request.orderBy
   *   The order in which documents are returned. Document can be ordered by
   *   a field in an {@link google.cloud.discoveryengine.v1beta.Document|Document}
   *   object. Leave it unset if ordered by relevance. OrderBy expression is
   *   case-sensitive.
   *
   *   If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
   * @param {number[]} request.facetSpecs
   *   Facet specifications for faceted search. If empty, no facets are returned.
   *
   *   A maximum of 100 values are allowed. Otherwise, an  `INVALID_ARGUMENT`
   *   error is returned.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.BoostSpec} request.boostSpec
   *   Boost specification to boost certain documents.
   * @param {number[]} request.params
   *   Additional search parameters.
   *
   *   For
   *   {@link google.cloud.discoveryengine.v1beta.IndustryVertical.SITE_SEARCH|IndustryVertical.SITE_SEARCH}
   *   vertical, supported values are:
   *
   *   * `user_country_code`: string. Default empty. If set to non-empty, results
   *      are restricted or boosted based on the location provided.
   *   * `search_type`: double. Default empty. Enables non-webpage searching
   *     depending on the value. The only valid non-default value is 1,
   *     which enables image searching.
   *   This field is ignored for other verticals.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.QueryExpansionSpec} request.queryExpansionSpec
   *   The query expansion specification that specifies the conditions under which
   *   query expansion will occur.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.SpellCorrectionSpec} request.spellCorrectionSpec
   *   The spell correction specification that specifies the mode under
   *   which spell correction will take effect.
   * @param {string} request.userPseudoId
   *   A unique identifier for tracking visitors. For example, this could be
   *   implemented with an HTTP cookie, which should be able to uniquely identify
   *   a visitor on a single device. This unique identifier should not change if
   *   the visitor logs in or out of the website.
   *
   *   This field should NOT have a fixed value such as `unknown_visitor`.
   *
   *   This should be the same identifier as
   *   {@link google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id|UserEvent.user_pseudo_id}
   *   and
   *   {@link google.cloud.discoveryengine.v1beta.CompleteQueryRequest.user_pseudo_id|CompleteQueryRequest.user_pseudo_id}
   *
   *   The field must be a UTF-8 encoded string with a length limit of 128
   *   characters. Otherwise, an  `INVALID_ARGUMENT`  error is returned.
   * @param {google.cloud.discoveryengine.v1beta.SearchRequest.ContentSearchSpec} request.contentSearchSpec
   *   The content search spec that configs the desired behavior of content
   *   search.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.discoveryengine.v1beta.SearchResponse.SearchResult | SearchResult}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta/search_service.search.js</caption>
   * region_tag:discoveryengine_v1beta_generated_SearchService_Search_async
   */
  searchAsync(
    request?: protos.google.cloud.discoveryengine.v1beta.ISearchRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.discoveryengine.v1beta.SearchResponse.ISearchResult> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        serving_config: request.servingConfig ?? '',
      });
    const defaultCallSettings = this._defaults['search'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.search.asyncIterate(
      this.innerApiCalls['search'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.discoveryengine.v1beta.SearchResponse.ISearchResult>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreBranch resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} branch
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreBranchPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    branch: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        branch: branch,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreBranch resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchName
   *   A fully-qualified path representing project_location_collection_data_store_branch resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreBranchName(
    projectLocationCollectionDataStoreBranchName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(
      projectLocationCollectionDataStoreBranchName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreBranch resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchName
   *   A fully-qualified path representing project_location_collection_data_store_branch resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreBranchName(
    projectLocationCollectionDataStoreBranchName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(
      projectLocationCollectionDataStoreBranchName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreBranch resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchName
   *   A fully-qualified path representing project_location_collection_data_store_branch resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreBranchName(
    projectLocationCollectionDataStoreBranchName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(
      projectLocationCollectionDataStoreBranchName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreBranch resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchName
   *   A fully-qualified path representing project_location_collection_data_store_branch resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreBranchName(
    projectLocationCollectionDataStoreBranchName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(
      projectLocationCollectionDataStoreBranchName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationCollectionDataStoreBranch resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchName
   *   A fully-qualified path representing project_location_collection_data_store_branch resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationCollectionDataStoreBranchName(
    projectLocationCollectionDataStoreBranchName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchPathTemplate.match(
      projectLocationCollectionDataStoreBranchName
    ).branch;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreBranchDocument resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} branch
   * @param {string} document
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreBranchDocumentPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    branch: string,
    document: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        branch: branch,
        document: document,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).branch;
  }

  /**
   * Parse the document from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).document;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreSchema resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} schema
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreSchemaPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    schema: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        schema: schema,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).data_store;
  }

  /**
   * Parse the schema from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the schema.
   */
  matchSchemaFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).schema;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreServingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreServingConfigPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    servingConfig: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        serving_config: servingConfig,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).data_store;
  }

  /**
   * Parse the serving_config from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).serving_config;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreBranch resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} branch
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreBranchPath(
    project: string,
    location: string,
    dataStore: string,
    branch: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        branch: branch,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreBranch resource.
   *
   * @param {string} projectLocationDataStoreBranchName
   *   A fully-qualified path representing project_location_data_store_branch resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreBranchName(
    projectLocationDataStoreBranchName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.match(
      projectLocationDataStoreBranchName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreBranch resource.
   *
   * @param {string} projectLocationDataStoreBranchName
   *   A fully-qualified path representing project_location_data_store_branch resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreBranchName(
    projectLocationDataStoreBranchName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.match(
      projectLocationDataStoreBranchName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreBranch resource.
   *
   * @param {string} projectLocationDataStoreBranchName
   *   A fully-qualified path representing project_location_data_store_branch resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreBranchName(
    projectLocationDataStoreBranchName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.match(
      projectLocationDataStoreBranchName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationDataStoreBranch resource.
   *
   * @param {string} projectLocationDataStoreBranchName
   *   A fully-qualified path representing project_location_data_store_branch resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationDataStoreBranchName(
    projectLocationDataStoreBranchName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchPathTemplate.match(
      projectLocationDataStoreBranchName
    ).branch;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreBranchDocument resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} branch
   * @param {string} document
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreBranchDocumentPath(
    project: string,
    location: string,
    dataStore: string,
    branch: string,
    document: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        branch: branch,
        document: document,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).branch;
  }

  /**
   * Parse the document from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).document;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreSchema resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} schema
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreSchemaPath(
    project: string,
    location: string,
    dataStore: string,
    schema: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        schema: schema,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).data_store;
  }

  /**
   * Parse the schema from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the schema.
   */
  matchSchemaFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).schema;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreServingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreServingConfigPath(
    project: string,
    location: string,
    dataStore: string,
    servingConfig: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        serving_config: servingConfig,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).data_store;
  }

  /**
   * Parse the serving_config from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).serving_config;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.searchServiceStub && !this._terminated) {
      return this.searchServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
