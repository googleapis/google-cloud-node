// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha/serving_config_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './serving_config_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for operations related to
 *  {@link protos.google.cloud.discoveryengine.v1alpha.ServingConfig|ServingConfig}.
 * @class
 * @memberof v1alpha
 */
export class ServingConfigServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  servingConfigServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ServingConfigServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ServingConfigServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ServingConfigServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'discoveryengine.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      aclConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/aclConfig'
      ),
      enginePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/collections/{collection}/engines/{engine}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationCollectionDataStorePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}'
        ),
      projectLocationCollectionDataStoreBranchDocumentPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}'
        ),
      projectLocationCollectionDataStoreBranchDocumentChunkPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}/chunks/{chunk}'
        ),
      projectLocationCollectionDataStoreConversationPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/conversations/{conversation}'
        ),
      projectLocationCollectionDataStoreDocumentProcessingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/documentProcessingConfig'
        ),
      projectLocationCollectionDataStoreSchemaPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}'
        ),
      projectLocationCollectionDataStoreServingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/servingConfigs/{serving_config}'
        ),
      projectLocationCollectionDataStoreSessionPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/sessions/{session}'
        ),
      projectLocationCollectionDataStoreSessionAnswerPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/sessions/{session}/answers/{answer}'
        ),
      projectLocationCollectionDataStoreSiteSearchEnginePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine'
        ),
      projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}'
        ),
      projectLocationCollectionEngineConversationPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/conversations/{conversation}'
        ),
      projectLocationCollectionEngineServingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/servingConfigs/{serving_config}'
        ),
      projectLocationCollectionEngineSessionPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/sessions/{session}'
        ),
      projectLocationCollectionEngineSessionAnswerPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/sessions/{session}/answers/{answer}'
        ),
      projectLocationDataStorePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataStores/{data_store}'
      ),
      projectLocationDataStoreBranchDocumentPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}/documents/{document}'
        ),
      projectLocationDataStoreBranchDocumentChunkPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/branches/{branch}/documents/{document}/chunks/{chunk}'
        ),
      projectLocationDataStoreConversationPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/conversations/{conversation}'
        ),
      projectLocationDataStoreDocumentProcessingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/documentProcessingConfig'
        ),
      projectLocationDataStoreSchemaPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/schemas/{schema}'
        ),
      projectLocationDataStoreServingConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/servingConfigs/{serving_config}'
        ),
      projectLocationDataStoreSessionPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/sessions/{session}'
        ),
      projectLocationDataStoreSessionAnswerPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/sessions/{session}/answers/{answer}'
        ),
      projectLocationDataStoreSiteSearchEnginePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/siteSearchEngine'
        ),
      projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}'
        ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listServingConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'servingConfigs'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.discoveryengine.v1alpha.ServingConfigService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.servingConfigServiceStub) {
      return this.servingConfigServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.discoveryengine.v1alpha.ServingConfigService.
    this.servingConfigServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.discoveryengine.v1alpha.ServingConfigService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.discoveryengine.v1alpha
            .ServingConfigService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const servingConfigServiceStubMethods = [
      'updateServingConfig',
      'getServingConfig',
      'listServingConfigs',
    ];
    for (const methodName of servingConfigServiceStubMethods) {
      const callPromise = this.servingConfigServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.servingConfigServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'discoveryengine.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'discoveryengine.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Updates a ServingConfig.
   *
   * Returns a NOT_FOUND error if the ServingConfig does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.discoveryengine.v1alpha.ServingConfig} request.servingConfig
   *   Required. The ServingConfig to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Indicates which fields in the provided
   *   {@link protos.google.cloud.discoveryengine.v1alpha.ServingConfig|ServingConfig} to
   *   update. The following are NOT supported:
   *
   *   * {@link protos.google.cloud.discoveryengine.v1alpha.ServingConfig.name|ServingConfig.name}
   *
   *   If not set, all supported fields are updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.ServingConfig|ServingConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/serving_config_service.update_serving_config.js</caption>
   * region_tag:discoveryengine_v1alpha_generated_ServingConfigService_UpdateServingConfig_async
   */
  updateServingConfig(
    request?: protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      (
        | protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateServingConfig(
    request: protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      | protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateServingConfig(
    request: protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      | protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateServingConfig(
    request?: protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
          | protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      | protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      (
        | protos.google.cloud.discoveryengine.v1alpha.IUpdateServingConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'serving_config.name': request.servingConfig!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateServingConfig(request, options, callback);
  }
  /**
   * Gets a ServingConfig.
   *
   * Returns a NotFound error if the ServingConfig does not exist.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the ServingConfig to get. Format:
   *   `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}/servingConfigs/{serving_config_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.ServingConfig|ServingConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/serving_config_service.get_serving_config.js</caption>
   * region_tag:discoveryengine_v1alpha_generated_ServingConfigService_GetServingConfig_async
   */
  getServingConfig(
    request?: protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      (
        | protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getServingConfig(
    request: protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      | protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getServingConfig(
    request: protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest,
    callback: Callback<
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      | protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getServingConfig(
    request?: protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
          | protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      | protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig,
      (
        | protos.google.cloud.discoveryengine.v1alpha.IGetServingConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getServingConfig(request, options, callback);
  }

  /**
   * Lists all ServingConfigs linked to this dataStore.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Full resource name of the parent resource. Format:
   *   `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}`
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of results to return. If unspecified, defaults
   *   to 100. If a value greater than 100 is provided, at most 100 results are
   *   returned.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `ListServingConfigs` call.
   *   Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.discoveryengine.v1alpha.ServingConfig|ServingConfig}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listServingConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listServingConfigs(
    request?: protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig[],
      protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest | null,
      protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsResponse,
    ]
  >;
  listServingConfigs(
    request: protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
      | protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig
    >
  ): void;
  listServingConfigs(
    request: protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
    callback: PaginationCallback<
      protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
      | protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig
    >
  ): void;
  listServingConfigs(
    request?: protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
          | protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsResponse
          | null
          | undefined,
          protos.google.cloud.discoveryengine.v1alpha.IServingConfig
        >,
    callback?: PaginationCallback<
      protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
      | protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsResponse
      | null
      | undefined,
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig
    >
  ): Promise<
    [
      protos.google.cloud.discoveryengine.v1alpha.IServingConfig[],
      protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest | null,
      protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listServingConfigs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Full resource name of the parent resource. Format:
   *   `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}`
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of results to return. If unspecified, defaults
   *   to 100. If a value greater than 100 is provided, at most 100 results are
   *   returned.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `ListServingConfigs` call.
   *   Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.discoveryengine.v1alpha.ServingConfig|ServingConfig} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listServingConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listServingConfigsStream(
    request?: protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listServingConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServingConfigs.createStream(
      this.innerApiCalls.listServingConfigs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listServingConfigs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Full resource name of the parent resource. Format:
   *   `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}`
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of results to return. If unspecified, defaults
   *   to 100. If a value greater than 100 is provided, at most 100 results are
   *   returned.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from a previous `ListServingConfigs` call.
   *   Provide this to retrieve the subsequent page.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.discoveryengine.v1alpha.ServingConfig|ServingConfig}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1alpha/serving_config_service.list_serving_configs.js</caption>
   * region_tag:discoveryengine_v1alpha_generated_ServingConfigService_ListServingConfigs_async
   */
  listServingConfigsAsync(
    request?: protos.google.cloud.discoveryengine.v1alpha.IListServingConfigsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.discoveryengine.v1alpha.IServingConfig> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listServingConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listServingConfigs.asyncIterate(
      this.innerApiCalls['listServingConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.discoveryengine.v1alpha.IServingConfig>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified aclConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  aclConfigPath(project: string, location: string) {
    return this.pathTemplates.aclConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from AclConfig resource.
   *
   * @param {string} aclConfigName
   *   A fully-qualified path representing AclConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAclConfigName(aclConfigName: string) {
    return this.pathTemplates.aclConfigPathTemplate.match(aclConfigName)
      .project;
  }

  /**
   * Parse the location from AclConfig resource.
   *
   * @param {string} aclConfigName
   *   A fully-qualified path representing AclConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAclConfigName(aclConfigName: string) {
    return this.pathTemplates.aclConfigPathTemplate.match(aclConfigName)
      .location;
  }

  /**
   * Return a fully-qualified engine resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} engine
   * @returns {string} Resource name string.
   */
  enginePath(
    project: string,
    location: string,
    collection: string,
    engine: string
  ) {
    return this.pathTemplates.enginePathTemplate.render({
      project: project,
      location: location,
      collection: collection,
      engine: engine,
    });
  }

  /**
   * Parse the project from Engine resource.
   *
   * @param {string} engineName
   *   A fully-qualified path representing Engine resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEngineName(engineName: string) {
    return this.pathTemplates.enginePathTemplate.match(engineName).project;
  }

  /**
   * Parse the location from Engine resource.
   *
   * @param {string} engineName
   *   A fully-qualified path representing Engine resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEngineName(engineName: string) {
    return this.pathTemplates.enginePathTemplate.match(engineName).location;
  }

  /**
   * Parse the collection from Engine resource.
   *
   * @param {string} engineName
   *   A fully-qualified path representing Engine resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromEngineName(engineName: string) {
    return this.pathTemplates.enginePathTemplate.match(engineName).collection;
  }

  /**
   * Parse the engine from Engine resource.
   *
   * @param {string} engineName
   *   A fully-qualified path representing Engine resource.
   * @returns {string} A string representing the engine.
   */
  matchEngineFromEngineName(engineName: string) {
    return this.pathTemplates.enginePathTemplate.match(engineName).engine;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStorePath(
    project: string,
    location: string,
    collection: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStore resource.
   *
   * @param {string} projectLocationCollectionDataStoreName
   *   A fully-qualified path representing project_location_collection_data_store resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreName(
    projectLocationCollectionDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.match(
      projectLocationCollectionDataStoreName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStore resource.
   *
   * @param {string} projectLocationCollectionDataStoreName
   *   A fully-qualified path representing project_location_collection_data_store resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreName(
    projectLocationCollectionDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.match(
      projectLocationCollectionDataStoreName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStore resource.
   *
   * @param {string} projectLocationCollectionDataStoreName
   *   A fully-qualified path representing project_location_collection_data_store resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreName(
    projectLocationCollectionDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.match(
      projectLocationCollectionDataStoreName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStore resource.
   *
   * @param {string} projectLocationCollectionDataStoreName
   *   A fully-qualified path representing project_location_collection_data_store resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreName(
    projectLocationCollectionDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStorePathTemplate.match(
      projectLocationCollectionDataStoreName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreBranchDocument resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} branch
   * @param {string} document
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreBranchDocumentPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    branch: string,
    document: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        branch: branch,
        document: document,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).branch;
  }

  /**
   * Parse the document from ProjectLocationCollectionDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentName(
    projectLocationCollectionDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentName
    ).document;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreBranchDocumentChunk resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} branch
   * @param {string} document
   * @param {string} chunk
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreBranchDocumentChunkPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    branch: string,
    document: string,
    chunk: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentChunkPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        branch: branch,
        document: document,
        chunk: chunk,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreBranchDocumentChunkName(
    projectLocationCollectionDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentChunkName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreBranchDocumentChunkName(
    projectLocationCollectionDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentChunkName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentChunkName(
    projectLocationCollectionDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentChunkName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentChunkName(
    projectLocationCollectionDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentChunkName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationCollectionDataStoreBranchDocumentChunkName(
    projectLocationCollectionDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentChunkName
    ).branch;
  }

  /**
   * Parse the document from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentChunkName(
    projectLocationCollectionDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentChunkName
    ).document;
  }

  /**
   * Parse the chunk from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the chunk.
   */
  matchChunkFromProjectLocationCollectionDataStoreBranchDocumentChunkName(
    projectLocationCollectionDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationCollectionDataStoreBranchDocumentChunkName
    ).chunk;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreConversation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} conversation
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreConversationPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    conversation: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        conversation: conversation,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).data_store;
  }

  /**
   * Parse the conversation from ProjectLocationCollectionDataStoreConversation resource.
   *
   * @param {string} projectLocationCollectionDataStoreConversationName
   *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
   * @returns {string} A string representing the conversation.
   */
  matchConversationFromProjectLocationCollectionDataStoreConversationName(
    projectLocationCollectionDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreConversationPathTemplate.match(
      projectLocationCollectionDataStoreConversationName
    ).conversation;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreDocumentProcessingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreDocumentProcessingConfigPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreDocumentProcessingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreDocumentProcessingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreDocumentProcessingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_documentProcessingConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreDocumentProcessingConfigName(
    projectLocationCollectionDataStoreDocumentProcessingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreDocumentProcessingConfigPathTemplate.match(
      projectLocationCollectionDataStoreDocumentProcessingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreDocumentProcessingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreDocumentProcessingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_documentProcessingConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreDocumentProcessingConfigName(
    projectLocationCollectionDataStoreDocumentProcessingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreDocumentProcessingConfigPathTemplate.match(
      projectLocationCollectionDataStoreDocumentProcessingConfigName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreDocumentProcessingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreDocumentProcessingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_documentProcessingConfig resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreDocumentProcessingConfigName(
    projectLocationCollectionDataStoreDocumentProcessingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreDocumentProcessingConfigPathTemplate.match(
      projectLocationCollectionDataStoreDocumentProcessingConfigName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreDocumentProcessingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreDocumentProcessingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_documentProcessingConfig resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreDocumentProcessingConfigName(
    projectLocationCollectionDataStoreDocumentProcessingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreDocumentProcessingConfigPathTemplate.match(
      projectLocationCollectionDataStoreDocumentProcessingConfigName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreSchema resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} schema
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreSchemaPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    schema: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        schema: schema,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).data_store;
  }

  /**
   * Parse the schema from ProjectLocationCollectionDataStoreSchema resource.
   *
   * @param {string} projectLocationCollectionDataStoreSchemaName
   *   A fully-qualified path representing project_location_collection_data_store_schema resource.
   * @returns {string} A string representing the schema.
   */
  matchSchemaFromProjectLocationCollectionDataStoreSchemaName(
    projectLocationCollectionDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSchemaPathTemplate.match(
      projectLocationCollectionDataStoreSchemaName
    ).schema;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreServingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreServingConfigPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    servingConfig: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        serving_config: servingConfig,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).data_store;
  }

  /**
   * Parse the serving_config from ProjectLocationCollectionDataStoreServingConfig resource.
   *
   * @param {string} projectLocationCollectionDataStoreServingConfigName
   *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromProjectLocationCollectionDataStoreServingConfigName(
    projectLocationCollectionDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreServingConfigPathTemplate.match(
      projectLocationCollectionDataStoreServingConfigName
    ).serving_config;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreSession resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} session
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreSessionPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    session: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        session: session,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreSession resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionName
   *   A fully-qualified path representing project_location_collection_data_store_session resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreSessionName(
    projectLocationCollectionDataStoreSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionPathTemplate.match(
      projectLocationCollectionDataStoreSessionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreSession resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionName
   *   A fully-qualified path representing project_location_collection_data_store_session resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreSessionName(
    projectLocationCollectionDataStoreSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionPathTemplate.match(
      projectLocationCollectionDataStoreSessionName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreSession resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionName
   *   A fully-qualified path representing project_location_collection_data_store_session resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreSessionName(
    projectLocationCollectionDataStoreSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionPathTemplate.match(
      projectLocationCollectionDataStoreSessionName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreSession resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionName
   *   A fully-qualified path representing project_location_collection_data_store_session resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreSessionName(
    projectLocationCollectionDataStoreSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionPathTemplate.match(
      projectLocationCollectionDataStoreSessionName
    ).data_store;
  }

  /**
   * Parse the session from ProjectLocationCollectionDataStoreSession resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionName
   *   A fully-qualified path representing project_location_collection_data_store_session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationCollectionDataStoreSessionName(
    projectLocationCollectionDataStoreSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionPathTemplate.match(
      projectLocationCollectionDataStoreSessionName
    ).session;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreSessionAnswer resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} session
   * @param {string} answer
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreSessionAnswerPath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    session: string,
    answer: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionAnswerPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        session: session,
        answer: answer,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreSessionAnswerName(
    projectLocationCollectionDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionAnswerPathTemplate.match(
      projectLocationCollectionDataStoreSessionAnswerName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreSessionAnswerName(
    projectLocationCollectionDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionAnswerPathTemplate.match(
      projectLocationCollectionDataStoreSessionAnswerName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreSessionAnswerName(
    projectLocationCollectionDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionAnswerPathTemplate.match(
      projectLocationCollectionDataStoreSessionAnswerName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreSessionAnswerName(
    projectLocationCollectionDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionAnswerPathTemplate.match(
      projectLocationCollectionDataStoreSessionAnswerName
    ).data_store;
  }

  /**
   * Parse the session from ProjectLocationCollectionDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationCollectionDataStoreSessionAnswerName(
    projectLocationCollectionDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionAnswerPathTemplate.match(
      projectLocationCollectionDataStoreSessionAnswerName
    ).session;
  }

  /**
   * Parse the answer from ProjectLocationCollectionDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
   * @returns {string} A string representing the answer.
   */
  matchAnswerFromProjectLocationCollectionDataStoreSessionAnswerName(
    projectLocationCollectionDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSessionAnswerPathTemplate.match(
      projectLocationCollectionDataStoreSessionAnswerName
    ).answer;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreSiteSearchEngine resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreSiteSearchEnginePath(
    project: string,
    location: string,
    collection: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreSiteSearchEngineName(
    projectLocationCollectionDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreSiteSearchEngineName(
    projectLocationCollectionDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreSiteSearchEngineName(
    projectLocationCollectionDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreSiteSearchEngineName(
    projectLocationCollectionDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationCollectionDataStoreSiteSearchEngineTargetSite resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} data_store
   * @param {string} target_site
   * @returns {string} Resource name string.
   */
  projectLocationCollectionDataStoreSiteSearchEngineTargetSitePath(
    project: string,
    location: string,
    collection: string,
    dataStore: string,
    targetSite: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        data_store: dataStore,
        target_site: targetSite,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).collection;
  }

  /**
   * Parse the data_store from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).data_store;
  }

  /**
   * Parse the target_site from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the target_site.
   */
  matchTargetSiteFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(
    projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationCollectionDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
    ).target_site;
  }

  /**
   * Return a fully-qualified projectLocationCollectionEngineConversation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} engine
   * @param {string} conversation
   * @returns {string} Resource name string.
   */
  projectLocationCollectionEngineConversationPath(
    project: string,
    location: string,
    collection: string,
    engine: string,
    conversation: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        engine: engine,
        conversation: conversation,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).collection;
  }

  /**
   * Parse the engine from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the engine.
   */
  matchEngineFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).engine;
  }

  /**
   * Parse the conversation from ProjectLocationCollectionEngineConversation resource.
   *
   * @param {string} projectLocationCollectionEngineConversationName
   *   A fully-qualified path representing project_location_collection_engine_conversation resource.
   * @returns {string} A string representing the conversation.
   */
  matchConversationFromProjectLocationCollectionEngineConversationName(
    projectLocationCollectionEngineConversationName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineConversationPathTemplate.match(
      projectLocationCollectionEngineConversationName
    ).conversation;
  }

  /**
   * Return a fully-qualified projectLocationCollectionEngineServingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} engine
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  projectLocationCollectionEngineServingConfigPath(
    project: string,
    location: string,
    collection: string,
    engine: string,
    servingConfig: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        engine: engine,
        serving_config: servingConfig,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).collection;
  }

  /**
   * Parse the engine from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the engine.
   */
  matchEngineFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).engine;
  }

  /**
   * Parse the serving_config from ProjectLocationCollectionEngineServingConfig resource.
   *
   * @param {string} projectLocationCollectionEngineServingConfigName
   *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromProjectLocationCollectionEngineServingConfigName(
    projectLocationCollectionEngineServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineServingConfigPathTemplate.match(
      projectLocationCollectionEngineServingConfigName
    ).serving_config;
  }

  /**
   * Return a fully-qualified projectLocationCollectionEngineSession resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} engine
   * @param {string} session
   * @returns {string} Resource name string.
   */
  projectLocationCollectionEngineSessionPath(
    project: string,
    location: string,
    collection: string,
    engine: string,
    session: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        engine: engine,
        session: session,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionEngineSession resource.
   *
   * @param {string} projectLocationCollectionEngineSessionName
   *   A fully-qualified path representing project_location_collection_engine_session resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionEngineSessionName(
    projectLocationCollectionEngineSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionPathTemplate.match(
      projectLocationCollectionEngineSessionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionEngineSession resource.
   *
   * @param {string} projectLocationCollectionEngineSessionName
   *   A fully-qualified path representing project_location_collection_engine_session resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionEngineSessionName(
    projectLocationCollectionEngineSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionPathTemplate.match(
      projectLocationCollectionEngineSessionName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionEngineSession resource.
   *
   * @param {string} projectLocationCollectionEngineSessionName
   *   A fully-qualified path representing project_location_collection_engine_session resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionEngineSessionName(
    projectLocationCollectionEngineSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionPathTemplate.match(
      projectLocationCollectionEngineSessionName
    ).collection;
  }

  /**
   * Parse the engine from ProjectLocationCollectionEngineSession resource.
   *
   * @param {string} projectLocationCollectionEngineSessionName
   *   A fully-qualified path representing project_location_collection_engine_session resource.
   * @returns {string} A string representing the engine.
   */
  matchEngineFromProjectLocationCollectionEngineSessionName(
    projectLocationCollectionEngineSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionPathTemplate.match(
      projectLocationCollectionEngineSessionName
    ).engine;
  }

  /**
   * Parse the session from ProjectLocationCollectionEngineSession resource.
   *
   * @param {string} projectLocationCollectionEngineSessionName
   *   A fully-qualified path representing project_location_collection_engine_session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationCollectionEngineSessionName(
    projectLocationCollectionEngineSessionName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionPathTemplate.match(
      projectLocationCollectionEngineSessionName
    ).session;
  }

  /**
   * Return a fully-qualified projectLocationCollectionEngineSessionAnswer resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} collection
   * @param {string} engine
   * @param {string} session
   * @param {string} answer
   * @returns {string} Resource name string.
   */
  projectLocationCollectionEngineSessionAnswerPath(
    project: string,
    location: string,
    collection: string,
    engine: string,
    session: string,
    answer: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionAnswerPathTemplate.render(
      {
        project: project,
        location: location,
        collection: collection,
        engine: engine,
        session: session,
        answer: answer,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationCollectionEngineSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionEngineSessionAnswerName
   *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCollectionEngineSessionAnswerName(
    projectLocationCollectionEngineSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionAnswerPathTemplate.match(
      projectLocationCollectionEngineSessionAnswerName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationCollectionEngineSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionEngineSessionAnswerName
   *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCollectionEngineSessionAnswerName(
    projectLocationCollectionEngineSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionAnswerPathTemplate.match(
      projectLocationCollectionEngineSessionAnswerName
    ).location;
  }

  /**
   * Parse the collection from ProjectLocationCollectionEngineSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionEngineSessionAnswerName
   *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
   * @returns {string} A string representing the collection.
   */
  matchCollectionFromProjectLocationCollectionEngineSessionAnswerName(
    projectLocationCollectionEngineSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionAnswerPathTemplate.match(
      projectLocationCollectionEngineSessionAnswerName
    ).collection;
  }

  /**
   * Parse the engine from ProjectLocationCollectionEngineSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionEngineSessionAnswerName
   *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
   * @returns {string} A string representing the engine.
   */
  matchEngineFromProjectLocationCollectionEngineSessionAnswerName(
    projectLocationCollectionEngineSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionAnswerPathTemplate.match(
      projectLocationCollectionEngineSessionAnswerName
    ).engine;
  }

  /**
   * Parse the session from ProjectLocationCollectionEngineSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionEngineSessionAnswerName
   *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationCollectionEngineSessionAnswerName(
    projectLocationCollectionEngineSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionAnswerPathTemplate.match(
      projectLocationCollectionEngineSessionAnswerName
    ).session;
  }

  /**
   * Parse the answer from ProjectLocationCollectionEngineSessionAnswer resource.
   *
   * @param {string} projectLocationCollectionEngineSessionAnswerName
   *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
   * @returns {string} A string representing the answer.
   */
  matchAnswerFromProjectLocationCollectionEngineSessionAnswerName(
    projectLocationCollectionEngineSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationCollectionEngineSessionAnswerPathTemplate.match(
      projectLocationCollectionEngineSessionAnswerName
    ).answer;
  }

  /**
   * Return a fully-qualified projectLocationDataStore resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationDataStorePath(
    project: string,
    location: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationDataStorePathTemplate.render({
      project: project,
      location: location,
      data_store: dataStore,
    });
  }

  /**
   * Parse the project from ProjectLocationDataStore resource.
   *
   * @param {string} projectLocationDataStoreName
   *   A fully-qualified path representing project_location_data_store resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreName(
    projectLocationDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationDataStorePathTemplate.match(
      projectLocationDataStoreName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStore resource.
   *
   * @param {string} projectLocationDataStoreName
   *   A fully-qualified path representing project_location_data_store resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreName(
    projectLocationDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationDataStorePathTemplate.match(
      projectLocationDataStoreName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStore resource.
   *
   * @param {string} projectLocationDataStoreName
   *   A fully-qualified path representing project_location_data_store resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreName(
    projectLocationDataStoreName: string
  ) {
    return this.pathTemplates.projectLocationDataStorePathTemplate.match(
      projectLocationDataStoreName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreBranchDocument resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} branch
   * @param {string} document
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreBranchDocumentPath(
    project: string,
    location: string,
    dataStore: string,
    branch: string,
    document: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        branch: branch,
        document: document,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).branch;
  }

  /**
   * Parse the document from ProjectLocationDataStoreBranchDocument resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentName
   *   A fully-qualified path representing project_location_data_store_branch_document resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromProjectLocationDataStoreBranchDocumentName(
    projectLocationDataStoreBranchDocumentName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentPathTemplate.match(
      projectLocationDataStoreBranchDocumentName
    ).document;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreBranchDocumentChunk resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} branch
   * @param {string} document
   * @param {string} chunk
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreBranchDocumentChunkPath(
    project: string,
    location: string,
    dataStore: string,
    branch: string,
    document: string,
    chunk: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentChunkPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        branch: branch,
        document: document,
        chunk: chunk,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreBranchDocumentChunkName(
    projectLocationDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationDataStoreBranchDocumentChunkName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreBranchDocumentChunkName(
    projectLocationDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationDataStoreBranchDocumentChunkName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreBranchDocumentChunkName(
    projectLocationDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationDataStoreBranchDocumentChunkName
    ).data_store;
  }

  /**
   * Parse the branch from ProjectLocationDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the branch.
   */
  matchBranchFromProjectLocationDataStoreBranchDocumentChunkName(
    projectLocationDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationDataStoreBranchDocumentChunkName
    ).branch;
  }

  /**
   * Parse the document from ProjectLocationDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the document.
   */
  matchDocumentFromProjectLocationDataStoreBranchDocumentChunkName(
    projectLocationDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationDataStoreBranchDocumentChunkName
    ).document;
  }

  /**
   * Parse the chunk from ProjectLocationDataStoreBranchDocumentChunk resource.
   *
   * @param {string} projectLocationDataStoreBranchDocumentChunkName
   *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
   * @returns {string} A string representing the chunk.
   */
  matchChunkFromProjectLocationDataStoreBranchDocumentChunkName(
    projectLocationDataStoreBranchDocumentChunkName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreBranchDocumentChunkPathTemplate.match(
      projectLocationDataStoreBranchDocumentChunkName
    ).chunk;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreConversation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} conversation
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreConversationPath(
    project: string,
    location: string,
    dataStore: string,
    conversation: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        conversation: conversation,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreConversation resource.
   *
   * @param {string} projectLocationDataStoreConversationName
   *   A fully-qualified path representing project_location_data_store_conversation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreConversationName(
    projectLocationDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(
      projectLocationDataStoreConversationName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreConversation resource.
   *
   * @param {string} projectLocationDataStoreConversationName
   *   A fully-qualified path representing project_location_data_store_conversation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreConversationName(
    projectLocationDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(
      projectLocationDataStoreConversationName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreConversation resource.
   *
   * @param {string} projectLocationDataStoreConversationName
   *   A fully-qualified path representing project_location_data_store_conversation resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreConversationName(
    projectLocationDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(
      projectLocationDataStoreConversationName
    ).data_store;
  }

  /**
   * Parse the conversation from ProjectLocationDataStoreConversation resource.
   *
   * @param {string} projectLocationDataStoreConversationName
   *   A fully-qualified path representing project_location_data_store_conversation resource.
   * @returns {string} A string representing the conversation.
   */
  matchConversationFromProjectLocationDataStoreConversationName(
    projectLocationDataStoreConversationName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreConversationPathTemplate.match(
      projectLocationDataStoreConversationName
    ).conversation;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreDocumentProcessingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreDocumentProcessingConfigPath(
    project: string,
    location: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationDataStoreDocumentProcessingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreDocumentProcessingConfig resource.
   *
   * @param {string} projectLocationDataStoreDocumentProcessingConfigName
   *   A fully-qualified path representing project_location_data_store_documentProcessingConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreDocumentProcessingConfigName(
    projectLocationDataStoreDocumentProcessingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreDocumentProcessingConfigPathTemplate.match(
      projectLocationDataStoreDocumentProcessingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreDocumentProcessingConfig resource.
   *
   * @param {string} projectLocationDataStoreDocumentProcessingConfigName
   *   A fully-qualified path representing project_location_data_store_documentProcessingConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreDocumentProcessingConfigName(
    projectLocationDataStoreDocumentProcessingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreDocumentProcessingConfigPathTemplate.match(
      projectLocationDataStoreDocumentProcessingConfigName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreDocumentProcessingConfig resource.
   *
   * @param {string} projectLocationDataStoreDocumentProcessingConfigName
   *   A fully-qualified path representing project_location_data_store_documentProcessingConfig resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreDocumentProcessingConfigName(
    projectLocationDataStoreDocumentProcessingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreDocumentProcessingConfigPathTemplate.match(
      projectLocationDataStoreDocumentProcessingConfigName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreSchema resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} schema
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreSchemaPath(
    project: string,
    location: string,
    dataStore: string,
    schema: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        schema: schema,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).data_store;
  }

  /**
   * Parse the schema from ProjectLocationDataStoreSchema resource.
   *
   * @param {string} projectLocationDataStoreSchemaName
   *   A fully-qualified path representing project_location_data_store_schema resource.
   * @returns {string} A string representing the schema.
   */
  matchSchemaFromProjectLocationDataStoreSchemaName(
    projectLocationDataStoreSchemaName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSchemaPathTemplate.match(
      projectLocationDataStoreSchemaName
    ).schema;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreServingConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} serving_config
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreServingConfigPath(
    project: string,
    location: string,
    dataStore: string,
    servingConfig: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        serving_config: servingConfig,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).data_store;
  }

  /**
   * Parse the serving_config from ProjectLocationDataStoreServingConfig resource.
   *
   * @param {string} projectLocationDataStoreServingConfigName
   *   A fully-qualified path representing project_location_data_store_serving_config resource.
   * @returns {string} A string representing the serving_config.
   */
  matchServingConfigFromProjectLocationDataStoreServingConfigName(
    projectLocationDataStoreServingConfigName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreServingConfigPathTemplate.match(
      projectLocationDataStoreServingConfigName
    ).serving_config;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreSession resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} session
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreSessionPath(
    project: string,
    location: string,
    dataStore: string,
    session: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        session: session,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreSession resource.
   *
   * @param {string} projectLocationDataStoreSessionName
   *   A fully-qualified path representing project_location_data_store_session resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreSessionName(
    projectLocationDataStoreSessionName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionPathTemplate.match(
      projectLocationDataStoreSessionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreSession resource.
   *
   * @param {string} projectLocationDataStoreSessionName
   *   A fully-qualified path representing project_location_data_store_session resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreSessionName(
    projectLocationDataStoreSessionName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionPathTemplate.match(
      projectLocationDataStoreSessionName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreSession resource.
   *
   * @param {string} projectLocationDataStoreSessionName
   *   A fully-qualified path representing project_location_data_store_session resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreSessionName(
    projectLocationDataStoreSessionName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionPathTemplate.match(
      projectLocationDataStoreSessionName
    ).data_store;
  }

  /**
   * Parse the session from ProjectLocationDataStoreSession resource.
   *
   * @param {string} projectLocationDataStoreSessionName
   *   A fully-qualified path representing project_location_data_store_session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationDataStoreSessionName(
    projectLocationDataStoreSessionName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionPathTemplate.match(
      projectLocationDataStoreSessionName
    ).session;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreSessionAnswer resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} session
   * @param {string} answer
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreSessionAnswerPath(
    project: string,
    location: string,
    dataStore: string,
    session: string,
    answer: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionAnswerPathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        session: session,
        answer: answer,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_data_store_session_answer resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreSessionAnswerName(
    projectLocationDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionAnswerPathTemplate.match(
      projectLocationDataStoreSessionAnswerName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_data_store_session_answer resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreSessionAnswerName(
    projectLocationDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionAnswerPathTemplate.match(
      projectLocationDataStoreSessionAnswerName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_data_store_session_answer resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreSessionAnswerName(
    projectLocationDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionAnswerPathTemplate.match(
      projectLocationDataStoreSessionAnswerName
    ).data_store;
  }

  /**
   * Parse the session from ProjectLocationDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_data_store_session_answer resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromProjectLocationDataStoreSessionAnswerName(
    projectLocationDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionAnswerPathTemplate.match(
      projectLocationDataStoreSessionAnswerName
    ).session;
  }

  /**
   * Parse the answer from ProjectLocationDataStoreSessionAnswer resource.
   *
   * @param {string} projectLocationDataStoreSessionAnswerName
   *   A fully-qualified path representing project_location_data_store_session_answer resource.
   * @returns {string} A string representing the answer.
   */
  matchAnswerFromProjectLocationDataStoreSessionAnswerName(
    projectLocationDataStoreSessionAnswerName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSessionAnswerPathTemplate.match(
      projectLocationDataStoreSessionAnswerName
    ).answer;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreSiteSearchEngine resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreSiteSearchEnginePath(
    project: string,
    location: string,
    dataStore: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreSiteSearchEngineName(
    projectLocationDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreSiteSearchEngineName(
    projectLocationDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreSiteSearchEngine resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreSiteSearchEngineName(
    projectLocationDataStoreSiteSearchEngineName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEnginePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineName
    ).data_store;
  }

  /**
   * Return a fully-qualified projectLocationDataStoreSiteSearchEngineTargetSite resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_store
   * @param {string} target_site
   * @returns {string} Resource name string.
   */
  projectLocationDataStoreSiteSearchEngineTargetSitePath(
    project: string,
    location: string,
    dataStore: string,
    targetSite: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.render(
      {
        project: project,
        location: location,
        data_store: dataStore,
        target_site: targetSite,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(
    projectLocationDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineTargetSiteName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(
    projectLocationDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineTargetSiteName
    ).location;
  }

  /**
   * Parse the data_store from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the data_store.
   */
  matchDataStoreFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(
    projectLocationDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineTargetSiteName
    ).data_store;
  }

  /**
   * Parse the target_site from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
   *
   * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
   *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
   * @returns {string} A string representing the target_site.
   */
  matchTargetSiteFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(
    projectLocationDataStoreSiteSearchEngineTargetSiteName: string
  ) {
    return this.pathTemplates.projectLocationDataStoreSiteSearchEngineTargetSitePathTemplate.match(
      projectLocationDataStoreSiteSearchEngineTargetSiteName
    ).target_site;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.servingConfigServiceStub && !this._terminated) {
      return this.servingConfigServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
