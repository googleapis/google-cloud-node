// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/config_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './config_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Infrastructure Manager is a managed service that automates the deployment and
 *  management of Google Cloud infrastructure resources.
 * @class
 * @memberof v1
 */
export class ConfigClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  configStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ConfigClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ConfigClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ConfigClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      deploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deployments/{deployment}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      previewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/previews/{preview}'
      ),
      resourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deployments/{deployment}/revisions/{revision}/resources/{resource}'
      ),
      revisionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/deployments/{deployment}/revisions/{revision}'
      ),
      serviceAccountPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/serviceAccounts/{service_account}'
      ),
      workerPoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workerPools/{worker_pool}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listDeployments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'deployments'
      ),
      listRevisions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'revisions'
      ),
      listResources: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'resources'
      ),
      listPreviews: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'previews'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/deployments/*}:getIamPolicy',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/deployments/*}:setIamPolicy',
          body: '*',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/deployments/*}:testIamPermissions',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createDeploymentResponse = protoFilesRoot.lookup(
      '.google.cloud.config.v1.Deployment'
    ) as gax.protobuf.Type;
    const createDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.config.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateDeploymentResponse = protoFilesRoot.lookup(
      '.google.cloud.config.v1.Deployment'
    ) as gax.protobuf.Type;
    const updateDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.config.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteDeploymentResponse = protoFilesRoot.lookup(
      '.google.cloud.config.v1.Deployment'
    ) as gax.protobuf.Type;
    const deleteDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.config.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const lockDeploymentResponse = protoFilesRoot.lookup(
      '.google.cloud.config.v1.Deployment'
    ) as gax.protobuf.Type;
    const lockDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.config.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const unlockDeploymentResponse = protoFilesRoot.lookup(
      '.google.cloud.config.v1.Deployment'
    ) as gax.protobuf.Type;
    const unlockDeploymentMetadata = protoFilesRoot.lookup(
      '.google.cloud.config.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createPreviewResponse = protoFilesRoot.lookup(
      '.google.cloud.config.v1.Preview'
    ) as gax.protobuf.Type;
    const createPreviewMetadata = protoFilesRoot.lookup(
      '.google.cloud.config.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deletePreviewResponse = protoFilesRoot.lookup(
      '.google.cloud.config.v1.Preview'
    ) as gax.protobuf.Type;
    const deletePreviewMetadata = protoFilesRoot.lookup(
      '.google.cloud.config.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createDeploymentResponse.decode.bind(createDeploymentResponse),
        createDeploymentMetadata.decode.bind(createDeploymentMetadata)
      ),
      updateDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateDeploymentResponse.decode.bind(updateDeploymentResponse),
        updateDeploymentMetadata.decode.bind(updateDeploymentMetadata)
      ),
      deleteDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteDeploymentResponse.decode.bind(deleteDeploymentResponse),
        deleteDeploymentMetadata.decode.bind(deleteDeploymentMetadata)
      ),
      lockDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        lockDeploymentResponse.decode.bind(lockDeploymentResponse),
        lockDeploymentMetadata.decode.bind(lockDeploymentMetadata)
      ),
      unlockDeployment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        unlockDeploymentResponse.decode.bind(unlockDeploymentResponse),
        unlockDeploymentMetadata.decode.bind(unlockDeploymentMetadata)
      ),
      createPreview: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createPreviewResponse.decode.bind(createPreviewResponse),
        createPreviewMetadata.decode.bind(createPreviewMetadata)
      ),
      deletePreview: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deletePreviewResponse.decode.bind(deletePreviewResponse),
        deletePreviewMetadata.decode.bind(deletePreviewMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.config.v1.Config',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.configStub) {
      return this.configStub;
    }

    // Put together the "service stub" for
    // google.cloud.config.v1.Config.
    this.configStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.config.v1.Config'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.config.v1.Config,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const configStubMethods = [
      'listDeployments',
      'getDeployment',
      'createDeployment',
      'updateDeployment',
      'deleteDeployment',
      'listRevisions',
      'getRevision',
      'getResource',
      'listResources',
      'exportDeploymentStatefile',
      'exportRevisionStatefile',
      'importStatefile',
      'deleteStatefile',
      'lockDeployment',
      'unlockDeployment',
      'exportLockInfo',
      'createPreview',
      'getPreview',
      'listPreviews',
      'deletePreview',
      'exportPreviewResult',
    ];
    for (const methodName of configStubMethods) {
      const callPromise = this.configStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.configStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'config.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'config.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details about a {@link protos.google.cloud.config.v1.Deployment|Deployment}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment. Format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.config.v1.Deployment|Deployment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.get_deployment.js</caption>
   * region_tag:config_v1_generated_Config_GetDeployment_async
   */
  getDeployment(
    request?: protos.google.cloud.config.v1.IGetDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IDeployment,
      protos.google.cloud.config.v1.IGetDeploymentRequest | undefined,
      {} | undefined,
    ]
  >;
  getDeployment(
    request: protos.google.cloud.config.v1.IGetDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.config.v1.IDeployment,
      protos.google.cloud.config.v1.IGetDeploymentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDeployment(
    request: protos.google.cloud.config.v1.IGetDeploymentRequest,
    callback: Callback<
      protos.google.cloud.config.v1.IDeployment,
      protos.google.cloud.config.v1.IGetDeploymentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getDeployment(
    request?: protos.google.cloud.config.v1.IGetDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.config.v1.IDeployment,
          | protos.google.cloud.config.v1.IGetDeploymentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.config.v1.IDeployment,
      protos.google.cloud.config.v1.IGetDeploymentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IDeployment,
      protos.google.cloud.config.v1.IGetDeploymentRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDeployment(request, options, callback);
  }
  /**
   * Gets details about a {@link protos.google.cloud.config.v1.Revision|Revision}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Revision in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.config.v1.Revision|Revision}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.get_revision.js</caption>
   * region_tag:config_v1_generated_Config_GetRevision_async
   */
  getRevision(
    request?: protos.google.cloud.config.v1.IGetRevisionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IRevision,
      protos.google.cloud.config.v1.IGetRevisionRequest | undefined,
      {} | undefined,
    ]
  >;
  getRevision(
    request: protos.google.cloud.config.v1.IGetRevisionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.config.v1.IRevision,
      protos.google.cloud.config.v1.IGetRevisionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRevision(
    request: protos.google.cloud.config.v1.IGetRevisionRequest,
    callback: Callback<
      protos.google.cloud.config.v1.IRevision,
      protos.google.cloud.config.v1.IGetRevisionRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getRevision(
    request?: protos.google.cloud.config.v1.IGetRevisionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.config.v1.IRevision,
          protos.google.cloud.config.v1.IGetRevisionRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.config.v1.IRevision,
      protos.google.cloud.config.v1.IGetRevisionRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IRevision,
      protos.google.cloud.config.v1.IGetRevisionRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRevision(request, options, callback);
  }
  /**
   * Gets details about a {@link protos.google.cloud.config.v1.Resource|Resource} deployed
   * by Infra Manager.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Resource in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}/resource/{resource}'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.config.v1.Resource|Resource}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.get_resource.js</caption>
   * region_tag:config_v1_generated_Config_GetResource_async
   */
  getResource(
    request?: protos.google.cloud.config.v1.IGetResourceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IResource,
      protos.google.cloud.config.v1.IGetResourceRequest | undefined,
      {} | undefined,
    ]
  >;
  getResource(
    request: protos.google.cloud.config.v1.IGetResourceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.config.v1.IResource,
      protos.google.cloud.config.v1.IGetResourceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getResource(
    request: protos.google.cloud.config.v1.IGetResourceRequest,
    callback: Callback<
      protos.google.cloud.config.v1.IResource,
      protos.google.cloud.config.v1.IGetResourceRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getResource(
    request?: protos.google.cloud.config.v1.IGetResourceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.config.v1.IResource,
          protos.google.cloud.config.v1.IGetResourceRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.config.v1.IResource,
      protos.google.cloud.config.v1.IGetResourceRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IResource,
      protos.google.cloud.config.v1.IGetResourceRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getResource(request, options, callback);
  }
  /**
   * Exports Terraform state file from a given deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the statefile is listed. The parent
   *   value is in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {boolean} [request.draft]
   *   Optional. If this flag is set to true, the exported deployment state file
   *   will be the draft state. This will enable the draft file to be validated
   *   before copying it over to the working state on unlock.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.config.v1.Statefile|Statefile}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.export_deployment_statefile.js</caption>
   * region_tag:config_v1_generated_Config_ExportDeploymentStatefile_async
   */
  exportDeploymentStatefile(
    request?: protos.google.cloud.config.v1.IExportDeploymentStatefileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IStatefile,
      (
        | protos.google.cloud.config.v1.IExportDeploymentStatefileRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  exportDeploymentStatefile(
    request: protos.google.cloud.config.v1.IExportDeploymentStatefileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.config.v1.IStatefile,
      | protos.google.cloud.config.v1.IExportDeploymentStatefileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  exportDeploymentStatefile(
    request: protos.google.cloud.config.v1.IExportDeploymentStatefileRequest,
    callback: Callback<
      protos.google.cloud.config.v1.IStatefile,
      | protos.google.cloud.config.v1.IExportDeploymentStatefileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  exportDeploymentStatefile(
    request?: protos.google.cloud.config.v1.IExportDeploymentStatefileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.config.v1.IStatefile,
          | protos.google.cloud.config.v1.IExportDeploymentStatefileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.config.v1.IStatefile,
      | protos.google.cloud.config.v1.IExportDeploymentStatefileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IStatefile,
      (
        | protos.google.cloud.config.v1.IExportDeploymentStatefileRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.exportDeploymentStatefile(
      request,
      options,
      callback
    );
  }
  /**
   * Exports Terraform state file from a given revision.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the statefile is listed. The parent
   *   value is in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.config.v1.Statefile|Statefile}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.export_revision_statefile.js</caption>
   * region_tag:config_v1_generated_Config_ExportRevisionStatefile_async
   */
  exportRevisionStatefile(
    request?: protos.google.cloud.config.v1.IExportRevisionStatefileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IStatefile,
      protos.google.cloud.config.v1.IExportRevisionStatefileRequest | undefined,
      {} | undefined,
    ]
  >;
  exportRevisionStatefile(
    request: protos.google.cloud.config.v1.IExportRevisionStatefileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.config.v1.IStatefile,
      | protos.google.cloud.config.v1.IExportRevisionStatefileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  exportRevisionStatefile(
    request: protos.google.cloud.config.v1.IExportRevisionStatefileRequest,
    callback: Callback<
      protos.google.cloud.config.v1.IStatefile,
      | protos.google.cloud.config.v1.IExportRevisionStatefileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  exportRevisionStatefile(
    request?: protos.google.cloud.config.v1.IExportRevisionStatefileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.config.v1.IStatefile,
          | protos.google.cloud.config.v1.IExportRevisionStatefileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.config.v1.IStatefile,
      | protos.google.cloud.config.v1.IExportRevisionStatefileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IStatefile,
      protos.google.cloud.config.v1.IExportRevisionStatefileRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.exportRevisionStatefile(
      request,
      options,
      callback
    );
  }
  /**
   * Imports Terraform state file in a given deployment. The state file does not
   * take effect until the Deployment has been unlocked.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the statefile is listed. The parent
   *   value is in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {number} request.lockId
   *   Required. Lock ID of the lock file to verify that the user who is importing
   *   the state file previously locked the Deployment.
   * @param {boolean} [request.skipDraft]
   *   Optional.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.config.v1.Statefile|Statefile}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.import_statefile.js</caption>
   * region_tag:config_v1_generated_Config_ImportStatefile_async
   */
  importStatefile(
    request?: protos.google.cloud.config.v1.IImportStatefileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IStatefile,
      protos.google.cloud.config.v1.IImportStatefileRequest | undefined,
      {} | undefined,
    ]
  >;
  importStatefile(
    request: protos.google.cloud.config.v1.IImportStatefileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.config.v1.IStatefile,
      protos.google.cloud.config.v1.IImportStatefileRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  importStatefile(
    request: protos.google.cloud.config.v1.IImportStatefileRequest,
    callback: Callback<
      protos.google.cloud.config.v1.IStatefile,
      protos.google.cloud.config.v1.IImportStatefileRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  importStatefile(
    request?: protos.google.cloud.config.v1.IImportStatefileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.config.v1.IStatefile,
          | protos.google.cloud.config.v1.IImportStatefileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.config.v1.IStatefile,
      protos.google.cloud.config.v1.IImportStatefileRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IStatefile,
      protos.google.cloud.config.v1.IImportStatefileRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importStatefile(request, options, callback);
  }
  /**
   * Deletes Terraform state file in a given deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {number} request.lockId
   *   Required. Lock ID of the lock file to verify that the user who is deleting
   *   the state file previously locked the Deployment.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.delete_statefile.js</caption>
   * region_tag:config_v1_generated_Config_DeleteStatefile_async
   */
  deleteStatefile(
    request?: protos.google.cloud.config.v1.IDeleteStatefileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.config.v1.IDeleteStatefileRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteStatefile(
    request: protos.google.cloud.config.v1.IDeleteStatefileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.config.v1.IDeleteStatefileRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteStatefile(
    request: protos.google.cloud.config.v1.IDeleteStatefileRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.config.v1.IDeleteStatefileRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteStatefile(
    request?: protos.google.cloud.config.v1.IDeleteStatefileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.config.v1.IDeleteStatefileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.config.v1.IDeleteStatefileRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.config.v1.IDeleteStatefileRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteStatefile(request, options, callback);
  }
  /**
   * Exports the lock info on a locked deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.config.v1.LockInfo|LockInfo}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.export_lock_info.js</caption>
   * region_tag:config_v1_generated_Config_ExportLockInfo_async
   */
  exportLockInfo(
    request?: protos.google.cloud.config.v1.IExportLockInfoRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.ILockInfo,
      protos.google.cloud.config.v1.IExportLockInfoRequest | undefined,
      {} | undefined,
    ]
  >;
  exportLockInfo(
    request: protos.google.cloud.config.v1.IExportLockInfoRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.config.v1.ILockInfo,
      protos.google.cloud.config.v1.IExportLockInfoRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  exportLockInfo(
    request: protos.google.cloud.config.v1.IExportLockInfoRequest,
    callback: Callback<
      protos.google.cloud.config.v1.ILockInfo,
      protos.google.cloud.config.v1.IExportLockInfoRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  exportLockInfo(
    request?: protos.google.cloud.config.v1.IExportLockInfoRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.config.v1.ILockInfo,
          | protos.google.cloud.config.v1.IExportLockInfoRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.config.v1.ILockInfo,
      protos.google.cloud.config.v1.IExportLockInfoRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.ILockInfo,
      protos.google.cloud.config.v1.IExportLockInfoRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.exportLockInfo(request, options, callback);
  }
  /**
   * Gets details about a {@link protos.google.cloud.config.v1.Preview|Preview}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the preview. Format:
   *   'projects/{project_id}/locations/{location}/previews/{preview}'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.config.v1.Preview|Preview}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.get_preview.js</caption>
   * region_tag:config_v1_generated_Config_GetPreview_async
   */
  getPreview(
    request?: protos.google.cloud.config.v1.IGetPreviewRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IPreview,
      protos.google.cloud.config.v1.IGetPreviewRequest | undefined,
      {} | undefined,
    ]
  >;
  getPreview(
    request: protos.google.cloud.config.v1.IGetPreviewRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.config.v1.IPreview,
      protos.google.cloud.config.v1.IGetPreviewRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getPreview(
    request: protos.google.cloud.config.v1.IGetPreviewRequest,
    callback: Callback<
      protos.google.cloud.config.v1.IPreview,
      protos.google.cloud.config.v1.IGetPreviewRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getPreview(
    request?: protos.google.cloud.config.v1.IGetPreviewRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.config.v1.IPreview,
          protos.google.cloud.config.v1.IGetPreviewRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.config.v1.IPreview,
      protos.google.cloud.config.v1.IGetPreviewRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IPreview,
      protos.google.cloud.config.v1.IGetPreviewRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPreview(request, options, callback);
  }
  /**
   * Export {@link protos.google.cloud.config.v1.Preview|Preview} results.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The preview whose results should be exported. The preview value
   *   is in the format:
   *   'projects/{project_id}/locations/{location}/previews/{preview}'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.config.v1.ExportPreviewResultResponse|ExportPreviewResultResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.export_preview_result.js</caption>
   * region_tag:config_v1_generated_Config_ExportPreviewResult_async
   */
  exportPreviewResult(
    request?: protos.google.cloud.config.v1.IExportPreviewResultRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IExportPreviewResultResponse,
      protos.google.cloud.config.v1.IExportPreviewResultRequest | undefined,
      {} | undefined,
    ]
  >;
  exportPreviewResult(
    request: protos.google.cloud.config.v1.IExportPreviewResultRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.config.v1.IExportPreviewResultResponse,
      | protos.google.cloud.config.v1.IExportPreviewResultRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  exportPreviewResult(
    request: protos.google.cloud.config.v1.IExportPreviewResultRequest,
    callback: Callback<
      protos.google.cloud.config.v1.IExportPreviewResultResponse,
      | protos.google.cloud.config.v1.IExportPreviewResultRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  exportPreviewResult(
    request?: protos.google.cloud.config.v1.IExportPreviewResultRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.config.v1.IExportPreviewResultResponse,
          | protos.google.cloud.config.v1.IExportPreviewResultRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.config.v1.IExportPreviewResultResponse,
      | protos.google.cloud.config.v1.IExportPreviewResultRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IExportPreviewResultResponse,
      protos.google.cloud.config.v1.IExportPreviewResultRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.exportPreviewResult(request, options, callback);
  }

  /**
   * Creates a {@link protos.google.cloud.config.v1.Deployment|Deployment}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Deployment is created. The parent
   *   value is in the format: 'projects/{project_id}/locations/{location}'.
   * @param {string} request.deploymentId
   *   Required. The Deployment ID.
   * @param {google.cloud.config.v1.Deployment} request.deployment
   *   Required. {@link protos.google.cloud.config.v1.Deployment|Deployment} resource to be
   *   created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.create_deployment.js</caption>
   * region_tag:config_v1_generated_Config_CreateDeployment_async
   */
  createDeployment(
    request?: protos.google.cloud.config.v1.ICreateDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createDeployment(
    request: protos.google.cloud.config.v1.ICreateDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDeployment(
    request: protos.google.cloud.config.v1.ICreateDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDeployment(
    request?: protos.google.cloud.config.v1.ICreateDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.config.v1.IDeployment,
            protos.google.cloud.config.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createDeployment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.create_deployment.js</caption>
   * region_tag:config_v1_generated_Config_CreateDeployment_async
   */
  async checkCreateDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >;
  }
  /**
   * Updates a {@link protos.google.cloud.config.v1.Deployment|Deployment}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Field mask used to specify the fields to be overwritten in the
   *   Deployment resource by the update.
   *
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.config.v1.Deployment} request.deployment
   *   Required. {@link protos.google.cloud.config.v1.Deployment|Deployment} to update.
   *
   *   The deployment's `name` field is used to identify the resource to be
   *   updated. Format:
   *   `projects/{project}/locations/{location}/deployments/{deployment}`
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.update_deployment.js</caption>
   * region_tag:config_v1_generated_Config_UpdateDeployment_async
   */
  updateDeployment(
    request?: protos.google.cloud.config.v1.IUpdateDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateDeployment(
    request: protos.google.cloud.config.v1.IUpdateDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDeployment(
    request: protos.google.cloud.config.v1.IUpdateDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDeployment(
    request?: protos.google.cloud.config.v1.IUpdateDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.config.v1.IDeployment,
            protos.google.cloud.config.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'deployment.name': request.deployment!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateDeployment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.update_deployment.js</caption>
   * region_tag:config_v1_generated_Config_UpdateDeployment_async
   */
  async checkUpdateDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a {@link protos.google.cloud.config.v1.Deployment|Deployment}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Deployment in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.force]
   *   Optional. If set to true, any revisions for this deployment will also be
   *   deleted. (Otherwise, the request will only work if the deployment has no
   *   revisions.)
   * @param {google.cloud.config.v1.DeleteDeploymentRequest.DeletePolicy} [request.deletePolicy]
   *   Optional. Policy on how resources actuated by the deployment should be
   *   deleted. If unspecified, the default behavior is to delete the underlying
   *   resources.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.delete_deployment.js</caption>
   * region_tag:config_v1_generated_Config_DeleteDeployment_async
   */
  deleteDeployment(
    request?: protos.google.cloud.config.v1.IDeleteDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteDeployment(
    request: protos.google.cloud.config.v1.IDeleteDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDeployment(
    request: protos.google.cloud.config.v1.IDeleteDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDeployment(
    request?: protos.google.cloud.config.v1.IDeleteDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.config.v1.IDeployment,
            protos.google.cloud.config.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteDeployment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.delete_deployment.js</caption>
   * region_tag:config_v1_generated_Config_DeleteDeployment_async
   */
  async checkDeleteDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >;
  }
  /**
   * Locks a deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.lock_deployment.js</caption>
   * region_tag:config_v1_generated_Config_LockDeployment_async
   */
  lockDeployment(
    request?: protos.google.cloud.config.v1.ILockDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  lockDeployment(
    request: protos.google.cloud.config.v1.ILockDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  lockDeployment(
    request: protos.google.cloud.config.v1.ILockDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  lockDeployment(
    request?: protos.google.cloud.config.v1.ILockDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.config.v1.IDeployment,
            protos.google.cloud.config.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.lockDeployment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `lockDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.lock_deployment.js</caption>
   * region_tag:config_v1_generated_Config_LockDeployment_async
   */
  async checkLockDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.lockDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >;
  }
  /**
   * Unlocks a locked deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the deployment in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {number} request.lockId
   *   Required. Lock ID of the lock file to be unlocked.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.unlock_deployment.js</caption>
   * region_tag:config_v1_generated_Config_UnlockDeployment_async
   */
  unlockDeployment(
    request?: protos.google.cloud.config.v1.IUnlockDeploymentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  unlockDeployment(
    request: protos.google.cloud.config.v1.IUnlockDeploymentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  unlockDeployment(
    request: protos.google.cloud.config.v1.IUnlockDeploymentRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  unlockDeployment(
    request?: protos.google.cloud.config.v1.IUnlockDeploymentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.config.v1.IDeployment,
            protos.google.cloud.config.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IDeployment,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.unlockDeployment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `unlockDeployment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.unlock_deployment.js</caption>
   * region_tag:config_v1_generated_Config_UnlockDeployment_async
   */
  async checkUnlockDeploymentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.unlockDeployment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.config.v1.Deployment,
      protos.google.cloud.config.v1.OperationMetadata
    >;
  }
  /**
   * Creates a {@link protos.google.cloud.config.v1.Preview|Preview}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Preview is created. The parent
   *   value is in the format: 'projects/{project_id}/locations/{location}'.
   * @param {string} [request.previewId]
   *   Optional. The preview ID.
   * @param {google.cloud.config.v1.Preview} request.preview
   *   Required. {@link protos.google.cloud.config.v1.Preview|Preview} resource to be created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.create_preview.js</caption>
   * region_tag:config_v1_generated_Config_CreatePreview_async
   */
  createPreview(
    request?: protos.google.cloud.config.v1.ICreatePreviewRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createPreview(
    request: protos.google.cloud.config.v1.ICreatePreviewRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPreview(
    request: protos.google.cloud.config.v1.ICreatePreviewRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createPreview(
    request?: protos.google.cloud.config.v1.ICreatePreviewRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.config.v1.IPreview,
            protos.google.cloud.config.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createPreview(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createPreview()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.create_preview.js</caption>
   * region_tag:config_v1_generated_Config_CreatePreview_async
   */
  async checkCreatePreviewProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.config.v1.Preview,
      protos.google.cloud.config.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createPreview,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.config.v1.Preview,
      protos.google.cloud.config.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a {@link protos.google.cloud.config.v1.Preview|Preview}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Preview in the format:
   *   'projects/{project_id}/locations/{location}/previews/{preview}'.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request ID,
   *   the server can check if original operation with the same request ID was
   *   received, and if so, will ignore the second request. This prevents clients
   *   from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.delete_preview.js</caption>
   * region_tag:config_v1_generated_Config_DeletePreview_async
   */
  deletePreview(
    request?: protos.google.cloud.config.v1.IDeletePreviewRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deletePreview(
    request: protos.google.cloud.config.v1.IDeletePreviewRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePreview(
    request: protos.google.cloud.config.v1.IDeletePreviewRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePreview(
    request?: protos.google.cloud.config.v1.IDeletePreviewRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.config.v1.IPreview,
            protos.google.cloud.config.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.config.v1.IPreview,
        protos.google.cloud.config.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePreview(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deletePreview()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.delete_preview.js</caption>
   * region_tag:config_v1_generated_Config_DeletePreview_async
   */
  async checkDeletePreviewProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.config.v1.Preview,
      protos.google.cloud.config.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deletePreview,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.config.v1.Preview,
      protos.google.cloud.config.v1.OperationMetadata
    >;
  }
  /**
   * Lists {@link protos.google.cloud.config.v1.Deployment|Deployment}s in a given project
   * and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Deployments are listed. The
   *   parent value is in the format:
   *   'projects/{project_id}/locations/{location}'.
   * @param {number} request.pageSize
   *   When requesting a page of resources, 'page_size' specifies number of
   *   resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} request.pageToken
   *   Token returned by previous call to 'ListDeployments' which specifies the
   *   position in the list from where to continue listing the resources.
   * @param {string} request.filter
   *   Lists the Deployments that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   *   operator which is roughly synonymous with equality). {field} can refer to a
   *   proto or JSON field, or a synthetic field. Field names can be camelCase or
   *   snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/foo/locations/us-central1/deployments/bar
   *
   *   - Filter by labels:
   *     - Resources that have a key called 'foo'
   *       labels.foo:*
   *     - Resources that have a key called 'foo' whose value is 'bar'
   *       labels.foo = bar
   *
   *   - Filter by state:
   *     - Deployments in CREATING state.
   *       state=CREATING
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.config.v1.Deployment|Deployment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDeployments(
    request?: protos.google.cloud.config.v1.IListDeploymentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IDeployment[],
      protos.google.cloud.config.v1.IListDeploymentsRequest | null,
      protos.google.cloud.config.v1.IListDeploymentsResponse,
    ]
  >;
  listDeployments(
    request: protos.google.cloud.config.v1.IListDeploymentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.config.v1.IListDeploymentsRequest,
      protos.google.cloud.config.v1.IListDeploymentsResponse | null | undefined,
      protos.google.cloud.config.v1.IDeployment
    >
  ): void;
  listDeployments(
    request: protos.google.cloud.config.v1.IListDeploymentsRequest,
    callback: PaginationCallback<
      protos.google.cloud.config.v1.IListDeploymentsRequest,
      protos.google.cloud.config.v1.IListDeploymentsResponse | null | undefined,
      protos.google.cloud.config.v1.IDeployment
    >
  ): void;
  listDeployments(
    request?: protos.google.cloud.config.v1.IListDeploymentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.config.v1.IListDeploymentsRequest,
          | protos.google.cloud.config.v1.IListDeploymentsResponse
          | null
          | undefined,
          protos.google.cloud.config.v1.IDeployment
        >,
    callback?: PaginationCallback<
      protos.google.cloud.config.v1.IListDeploymentsRequest,
      protos.google.cloud.config.v1.IListDeploymentsResponse | null | undefined,
      protos.google.cloud.config.v1.IDeployment
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IDeployment[],
      protos.google.cloud.config.v1.IListDeploymentsRequest | null,
      protos.google.cloud.config.v1.IListDeploymentsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDeployments(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Deployments are listed. The
   *   parent value is in the format:
   *   'projects/{project_id}/locations/{location}'.
   * @param {number} request.pageSize
   *   When requesting a page of resources, 'page_size' specifies number of
   *   resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} request.pageToken
   *   Token returned by previous call to 'ListDeployments' which specifies the
   *   position in the list from where to continue listing the resources.
   * @param {string} request.filter
   *   Lists the Deployments that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   *   operator which is roughly synonymous with equality). {field} can refer to a
   *   proto or JSON field, or a synthetic field. Field names can be camelCase or
   *   snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/foo/locations/us-central1/deployments/bar
   *
   *   - Filter by labels:
   *     - Resources that have a key called 'foo'
   *       labels.foo:*
   *     - Resources that have a key called 'foo' whose value is 'bar'
   *       labels.foo = bar
   *
   *   - Filter by state:
   *     - Deployments in CREATING state.
   *       state=CREATING
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.config.v1.Deployment|Deployment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDeploymentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDeploymentsStream(
    request?: protos.google.cloud.config.v1.IListDeploymentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeployments.createStream(
      this.innerApiCalls.listDeployments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDeployments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Deployments are listed. The
   *   parent value is in the format:
   *   'projects/{project_id}/locations/{location}'.
   * @param {number} request.pageSize
   *   When requesting a page of resources, 'page_size' specifies number of
   *   resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} request.pageToken
   *   Token returned by previous call to 'ListDeployments' which specifies the
   *   position in the list from where to continue listing the resources.
   * @param {string} request.filter
   *   Lists the Deployments that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   *   operator which is roughly synonymous with equality). {field} can refer to a
   *   proto or JSON field, or a synthetic field. Field names can be camelCase or
   *   snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/foo/locations/us-central1/deployments/bar
   *
   *   - Filter by labels:
   *     - Resources that have a key called 'foo'
   *       labels.foo:*
   *     - Resources that have a key called 'foo' whose value is 'bar'
   *       labels.foo = bar
   *
   *   - Filter by state:
   *     - Deployments in CREATING state.
   *       state=CREATING
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.config.v1.Deployment|Deployment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.list_deployments.js</caption>
   * region_tag:config_v1_generated_Config_ListDeployments_async
   */
  listDeploymentsAsync(
    request?: protos.google.cloud.config.v1.IListDeploymentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.config.v1.IDeployment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDeployments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDeployments.asyncIterate(
      this.innerApiCalls['listDeployments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.config.v1.IDeployment>;
  }
  /**
   * Lists {@link protos.google.cloud.config.v1.Revision|Revision}s of a deployment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Revisions are listed. The parent
   *   value is in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {number} request.pageSize
   *   When requesting a page of resources, `page_size` specifies number of
   *   resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} request.pageToken
   *   Token returned by previous call to 'ListRevisions' which specifies the
   *   position in the list from where to continue listing the resources.
   * @param {string} request.filter
   *   Lists the Revisions that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   *   operator which is roughly synonymous with equality). {field} can refer to a
   *   proto or JSON field, or a synthetic field. Field names can be camelCase or
   *   snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/foo/locations/us-central1/deployments/dep/revisions/bar
   *
   *   - Filter by labels:
   *     - Resources that have a key called 'foo'
   *       labels.foo:*
   *     - Resources that have a key called 'foo' whose value is 'bar'
   *       labels.foo = bar
   *
   *   - Filter by state:
   *     - Revisions in CREATING state.
   *       state=CREATING
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.config.v1.Revision|Revision}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRevisions(
    request?: protos.google.cloud.config.v1.IListRevisionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IRevision[],
      protos.google.cloud.config.v1.IListRevisionsRequest | null,
      protos.google.cloud.config.v1.IListRevisionsResponse,
    ]
  >;
  listRevisions(
    request: protos.google.cloud.config.v1.IListRevisionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.config.v1.IListRevisionsRequest,
      protos.google.cloud.config.v1.IListRevisionsResponse | null | undefined,
      protos.google.cloud.config.v1.IRevision
    >
  ): void;
  listRevisions(
    request: protos.google.cloud.config.v1.IListRevisionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.config.v1.IListRevisionsRequest,
      protos.google.cloud.config.v1.IListRevisionsResponse | null | undefined,
      protos.google.cloud.config.v1.IRevision
    >
  ): void;
  listRevisions(
    request?: protos.google.cloud.config.v1.IListRevisionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.config.v1.IListRevisionsRequest,
          | protos.google.cloud.config.v1.IListRevisionsResponse
          | null
          | undefined,
          protos.google.cloud.config.v1.IRevision
        >,
    callback?: PaginationCallback<
      protos.google.cloud.config.v1.IListRevisionsRequest,
      protos.google.cloud.config.v1.IListRevisionsResponse | null | undefined,
      protos.google.cloud.config.v1.IRevision
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IRevision[],
      protos.google.cloud.config.v1.IListRevisionsRequest | null,
      protos.google.cloud.config.v1.IListRevisionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRevisions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Revisions are listed. The parent
   *   value is in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {number} request.pageSize
   *   When requesting a page of resources, `page_size` specifies number of
   *   resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} request.pageToken
   *   Token returned by previous call to 'ListRevisions' which specifies the
   *   position in the list from where to continue listing the resources.
   * @param {string} request.filter
   *   Lists the Revisions that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   *   operator which is roughly synonymous with equality). {field} can refer to a
   *   proto or JSON field, or a synthetic field. Field names can be camelCase or
   *   snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/foo/locations/us-central1/deployments/dep/revisions/bar
   *
   *   - Filter by labels:
   *     - Resources that have a key called 'foo'
   *       labels.foo:*
   *     - Resources that have a key called 'foo' whose value is 'bar'
   *       labels.foo = bar
   *
   *   - Filter by state:
   *     - Revisions in CREATING state.
   *       state=CREATING
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.config.v1.Revision|Revision} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRevisionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRevisionsStream(
    request?: protos.google.cloud.config.v1.IListRevisionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRevisions.createStream(
      this.innerApiCalls.listRevisions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRevisions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Revisions are listed. The parent
   *   value is in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}'.
   * @param {number} request.pageSize
   *   When requesting a page of resources, `page_size` specifies number of
   *   resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} request.pageToken
   *   Token returned by previous call to 'ListRevisions' which specifies the
   *   position in the list from where to continue listing the resources.
   * @param {string} request.filter
   *   Lists the Revisions that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   *   operator which is roughly synonymous with equality). {field} can refer to a
   *   proto or JSON field, or a synthetic field. Field names can be camelCase or
   *   snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/foo/locations/us-central1/deployments/dep/revisions/bar
   *
   *   - Filter by labels:
   *     - Resources that have a key called 'foo'
   *       labels.foo:*
   *     - Resources that have a key called 'foo' whose value is 'bar'
   *       labels.foo = bar
   *
   *   - Filter by state:
   *     - Revisions in CREATING state.
   *       state=CREATING
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.config.v1.Revision|Revision}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.list_revisions.js</caption>
   * region_tag:config_v1_generated_Config_ListRevisions_async
   */
  listRevisionsAsync(
    request?: protos.google.cloud.config.v1.IListRevisionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.config.v1.IRevision> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRevisions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRevisions.asyncIterate(
      this.innerApiCalls['listRevisions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.config.v1.IRevision>;
  }
  /**
   * Lists {@link protos.google.cloud.config.v1.Resource|Resource}s in a given revision.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Resources are listed. The parent
   *   value is in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
   * @param {number} request.pageSize
   *   When requesting a page of resources, 'page_size' specifies number of
   *   resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} request.pageToken
   *   Token returned by previous call to 'ListResources' which specifies the
   *   position in the list from where to continue listing the resources.
   * @param {string} request.filter
   *   Lists the Resources that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=',
   *   '>=',
   *   '!=', '=', ':' are supported (colon ':' represents a HAS operator which is
   *   roughly synonymous with equality). {field} can refer to a proto or JSON
   *   field, or a synthetic field. Field names can be camelCase or snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name =
   *     "projects/foo/locations/us-central1/deployments/dep/revisions/bar/resources/baz
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.config.v1.Resource|Resource}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listResourcesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listResources(
    request?: protos.google.cloud.config.v1.IListResourcesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IResource[],
      protos.google.cloud.config.v1.IListResourcesRequest | null,
      protos.google.cloud.config.v1.IListResourcesResponse,
    ]
  >;
  listResources(
    request: protos.google.cloud.config.v1.IListResourcesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.config.v1.IListResourcesRequest,
      protos.google.cloud.config.v1.IListResourcesResponse | null | undefined,
      protos.google.cloud.config.v1.IResource
    >
  ): void;
  listResources(
    request: protos.google.cloud.config.v1.IListResourcesRequest,
    callback: PaginationCallback<
      protos.google.cloud.config.v1.IListResourcesRequest,
      protos.google.cloud.config.v1.IListResourcesResponse | null | undefined,
      protos.google.cloud.config.v1.IResource
    >
  ): void;
  listResources(
    request?: protos.google.cloud.config.v1.IListResourcesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.config.v1.IListResourcesRequest,
          | protos.google.cloud.config.v1.IListResourcesResponse
          | null
          | undefined,
          protos.google.cloud.config.v1.IResource
        >,
    callback?: PaginationCallback<
      protos.google.cloud.config.v1.IListResourcesRequest,
      protos.google.cloud.config.v1.IListResourcesResponse | null | undefined,
      protos.google.cloud.config.v1.IResource
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IResource[],
      protos.google.cloud.config.v1.IListResourcesRequest | null,
      protos.google.cloud.config.v1.IListResourcesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listResources(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Resources are listed. The parent
   *   value is in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
   * @param {number} request.pageSize
   *   When requesting a page of resources, 'page_size' specifies number of
   *   resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} request.pageToken
   *   Token returned by previous call to 'ListResources' which specifies the
   *   position in the list from where to continue listing the resources.
   * @param {string} request.filter
   *   Lists the Resources that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=',
   *   '>=',
   *   '!=', '=', ':' are supported (colon ':' represents a HAS operator which is
   *   roughly synonymous with equality). {field} can refer to a proto or JSON
   *   field, or a synthetic field. Field names can be camelCase or snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name =
   *     "projects/foo/locations/us-central1/deployments/dep/revisions/bar/resources/baz
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.config.v1.Resource|Resource} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listResourcesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listResourcesStream(
    request?: protos.google.cloud.config.v1.IListResourcesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listResources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listResources.createStream(
      this.innerApiCalls.listResources as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listResources`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Resources are listed. The parent
   *   value is in the format:
   *   'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
   * @param {number} request.pageSize
   *   When requesting a page of resources, 'page_size' specifies number of
   *   resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} request.pageToken
   *   Token returned by previous call to 'ListResources' which specifies the
   *   position in the list from where to continue listing the resources.
   * @param {string} request.filter
   *   Lists the Resources that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=',
   *   '>=',
   *   '!=', '=', ':' are supported (colon ':' represents a HAS operator which is
   *   roughly synonymous with equality). {field} can refer to a proto or JSON
   *   field, or a synthetic field. Field names can be camelCase or snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name =
   *     "projects/foo/locations/us-central1/deployments/dep/revisions/bar/resources/baz
   * @param {string} request.orderBy
   *   Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.config.v1.Resource|Resource}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.list_resources.js</caption>
   * region_tag:config_v1_generated_Config_ListResources_async
   */
  listResourcesAsync(
    request?: protos.google.cloud.config.v1.IListResourcesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.config.v1.IResource> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listResources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listResources.asyncIterate(
      this.innerApiCalls['listResources'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.config.v1.IResource>;
  }
  /**
   * Lists {@link protos.google.cloud.config.v1.Preview|Preview}s in a given project and
   * location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Previews are listed. The parent
   *   value is in the format: 'projects/{project_id}/locations/{location}'.
   * @param {number} [request.pageSize]
   *   Optional. When requesting a page of resources, 'page_size' specifies number
   *   of resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} [request.pageToken]
   *   Optional. Token returned by previous call to 'ListDeployments' which
   *   specifies the position in the list from where to continue listing the
   *   resources.
   * @param {string} [request.filter]
   *   Optional. Lists the Deployments that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   *   operator which is roughly synonymous with equality). {field} can refer to a
   *   proto or JSON field, or a synthetic field. Field names can be camelCase or
   *   snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/foo/locations/us-central1/deployments/bar
   *
   *   - Filter by labels:
   *     - Resources that have a key called 'foo'
   *       labels.foo:*
   *     - Resources that have a key called 'foo' whose value is 'bar'
   *       labels.foo = bar
   *
   *   - Filter by state:
   *     - Deployments in CREATING state.
   *       state=CREATING
   * @param {string} [request.orderBy]
   *   Optional. Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.config.v1.Preview|Preview}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPreviewsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPreviews(
    request?: protos.google.cloud.config.v1.IListPreviewsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.config.v1.IPreview[],
      protos.google.cloud.config.v1.IListPreviewsRequest | null,
      protos.google.cloud.config.v1.IListPreviewsResponse,
    ]
  >;
  listPreviews(
    request: protos.google.cloud.config.v1.IListPreviewsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.config.v1.IListPreviewsRequest,
      protos.google.cloud.config.v1.IListPreviewsResponse | null | undefined,
      protos.google.cloud.config.v1.IPreview
    >
  ): void;
  listPreviews(
    request: protos.google.cloud.config.v1.IListPreviewsRequest,
    callback: PaginationCallback<
      protos.google.cloud.config.v1.IListPreviewsRequest,
      protos.google.cloud.config.v1.IListPreviewsResponse | null | undefined,
      protos.google.cloud.config.v1.IPreview
    >
  ): void;
  listPreviews(
    request?: protos.google.cloud.config.v1.IListPreviewsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.config.v1.IListPreviewsRequest,
          | protos.google.cloud.config.v1.IListPreviewsResponse
          | null
          | undefined,
          protos.google.cloud.config.v1.IPreview
        >,
    callback?: PaginationCallback<
      protos.google.cloud.config.v1.IListPreviewsRequest,
      protos.google.cloud.config.v1.IListPreviewsResponse | null | undefined,
      protos.google.cloud.config.v1.IPreview
    >
  ): Promise<
    [
      protos.google.cloud.config.v1.IPreview[],
      protos.google.cloud.config.v1.IListPreviewsRequest | null,
      protos.google.cloud.config.v1.IListPreviewsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPreviews(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Previews are listed. The parent
   *   value is in the format: 'projects/{project_id}/locations/{location}'.
   * @param {number} [request.pageSize]
   *   Optional. When requesting a page of resources, 'page_size' specifies number
   *   of resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} [request.pageToken]
   *   Optional. Token returned by previous call to 'ListDeployments' which
   *   specifies the position in the list from where to continue listing the
   *   resources.
   * @param {string} [request.filter]
   *   Optional. Lists the Deployments that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   *   operator which is roughly synonymous with equality). {field} can refer to a
   *   proto or JSON field, or a synthetic field. Field names can be camelCase or
   *   snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/foo/locations/us-central1/deployments/bar
   *
   *   - Filter by labels:
   *     - Resources that have a key called 'foo'
   *       labels.foo:*
   *     - Resources that have a key called 'foo' whose value is 'bar'
   *       labels.foo = bar
   *
   *   - Filter by state:
   *     - Deployments in CREATING state.
   *       state=CREATING
   * @param {string} [request.orderBy]
   *   Optional. Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.config.v1.Preview|Preview} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPreviewsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPreviewsStream(
    request?: protos.google.cloud.config.v1.IListPreviewsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPreviews'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPreviews.createStream(
      this.innerApiCalls.listPreviews as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPreviews`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent in whose context the Previews are listed. The parent
   *   value is in the format: 'projects/{project_id}/locations/{location}'.
   * @param {number} [request.pageSize]
   *   Optional. When requesting a page of resources, 'page_size' specifies number
   *   of resources to return. If unspecified or set to 0, all resources will be
   *   returned.
   * @param {string} [request.pageToken]
   *   Optional. Token returned by previous call to 'ListDeployments' which
   *   specifies the position in the list from where to continue listing the
   *   resources.
   * @param {string} [request.filter]
   *   Optional. Lists the Deployments that match the filter expression. A filter
   *   expression filters the resources listed in the response. The expression
   *   must be of the form '{field} {operator} {value}' where operators: '<', '>',
   *   '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
   *   operator which is roughly synonymous with equality). {field} can refer to a
   *   proto or JSON field, or a synthetic field. Field names can be camelCase or
   *   snake_case.
   *
   *   Examples:
   *   - Filter by name:
   *     name = "projects/foo/locations/us-central1/deployments/bar
   *
   *   - Filter by labels:
   *     - Resources that have a key called 'foo'
   *       labels.foo:*
   *     - Resources that have a key called 'foo' whose value is 'bar'
   *       labels.foo = bar
   *
   *   - Filter by state:
   *     - Deployments in CREATING state.
   *       state=CREATING
   * @param {string} [request.orderBy]
   *   Optional. Field to use to sort the list.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.config.v1.Preview|Preview}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/config.list_previews.js</caption>
   * region_tag:config_v1_generated_Config_ListPreviews_async
   */
  listPreviewsAsync(
    request?: protos.google.cloud.config.v1.IListPreviewsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.config.v1.IPreview> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPreviews'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPreviews.asyncIterate(
      this.innerApiCalls['listPreviews'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.config.v1.IPreview>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified deployment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment
   * @returns {string} Resource name string.
   */
  deploymentPath(project: string, location: string, deployment: string) {
    return this.pathTemplates.deploymentPathTemplate.render({
      project: project,
      location: location,
      deployment: deployment,
    });
  }

  /**
   * Parse the project from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .project;
  }

  /**
   * Parse the location from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .location;
  }

  /**
   * Parse the deployment from Deployment resource.
   *
   * @param {string} deploymentName
   *   A fully-qualified path representing Deployment resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromDeploymentName(deploymentName: string) {
    return this.pathTemplates.deploymentPathTemplate.match(deploymentName)
      .deployment;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified preview resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} preview
   * @returns {string} Resource name string.
   */
  previewPath(project: string, location: string, preview: string) {
    return this.pathTemplates.previewPathTemplate.render({
      project: project,
      location: location,
      preview: preview,
    });
  }

  /**
   * Parse the project from Preview resource.
   *
   * @param {string} previewName
   *   A fully-qualified path representing Preview resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPreviewName(previewName: string) {
    return this.pathTemplates.previewPathTemplate.match(previewName).project;
  }

  /**
   * Parse the location from Preview resource.
   *
   * @param {string} previewName
   *   A fully-qualified path representing Preview resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPreviewName(previewName: string) {
    return this.pathTemplates.previewPathTemplate.match(previewName).location;
  }

  /**
   * Parse the preview from Preview resource.
   *
   * @param {string} previewName
   *   A fully-qualified path representing Preview resource.
   * @returns {string} A string representing the preview.
   */
  matchPreviewFromPreviewName(previewName: string) {
    return this.pathTemplates.previewPathTemplate.match(previewName).preview;
  }

  /**
   * Return a fully-qualified resource resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment
   * @param {string} revision
   * @param {string} resource
   * @returns {string} Resource name string.
   */
  resourcePath(
    project: string,
    location: string,
    deployment: string,
    revision: string,
    resource: string
  ) {
    return this.pathTemplates.resourcePathTemplate.render({
      project: project,
      location: location,
      deployment: deployment,
      revision: revision,
      resource: resource,
    });
  }

  /**
   * Parse the project from Resource resource.
   *
   * @param {string} resourceName
   *   A fully-qualified path representing Resource resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromResourceName(resourceName: string) {
    return this.pathTemplates.resourcePathTemplate.match(resourceName).project;
  }

  /**
   * Parse the location from Resource resource.
   *
   * @param {string} resourceName
   *   A fully-qualified path representing Resource resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromResourceName(resourceName: string) {
    return this.pathTemplates.resourcePathTemplate.match(resourceName).location;
  }

  /**
   * Parse the deployment from Resource resource.
   *
   * @param {string} resourceName
   *   A fully-qualified path representing Resource resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromResourceName(resourceName: string) {
    return this.pathTemplates.resourcePathTemplate.match(resourceName)
      .deployment;
  }

  /**
   * Parse the revision from Resource resource.
   *
   * @param {string} resourceName
   *   A fully-qualified path representing Resource resource.
   * @returns {string} A string representing the revision.
   */
  matchRevisionFromResourceName(resourceName: string) {
    return this.pathTemplates.resourcePathTemplate.match(resourceName).revision;
  }

  /**
   * Parse the resource from Resource resource.
   *
   * @param {string} resourceName
   *   A fully-qualified path representing Resource resource.
   * @returns {string} A string representing the resource.
   */
  matchResourceFromResourceName(resourceName: string) {
    return this.pathTemplates.resourcePathTemplate.match(resourceName).resource;
  }

  /**
   * Return a fully-qualified revision resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} deployment
   * @param {string} revision
   * @returns {string} Resource name string.
   */
  revisionPath(
    project: string,
    location: string,
    deployment: string,
    revision: string
  ) {
    return this.pathTemplates.revisionPathTemplate.render({
      project: project,
      location: location,
      deployment: deployment,
      revision: revision,
    });
  }

  /**
   * Parse the project from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).project;
  }

  /**
   * Parse the location from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).location;
  }

  /**
   * Parse the deployment from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the deployment.
   */
  matchDeploymentFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName)
      .deployment;
  }

  /**
   * Parse the revision from Revision resource.
   *
   * @param {string} revisionName
   *   A fully-qualified path representing Revision resource.
   * @returns {string} A string representing the revision.
   */
  matchRevisionFromRevisionName(revisionName: string) {
    return this.pathTemplates.revisionPathTemplate.match(revisionName).revision;
  }

  /**
   * Return a fully-qualified serviceAccount resource name string.
   *
   * @param {string} project
   * @param {string} service_account
   * @returns {string} Resource name string.
   */
  serviceAccountPath(project: string, serviceAccount: string) {
    return this.pathTemplates.serviceAccountPathTemplate.render({
      project: project,
      service_account: serviceAccount,
    });
  }

  /**
   * Parse the project from ServiceAccount resource.
   *
   * @param {string} serviceAccountName
   *   A fully-qualified path representing ServiceAccount resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceAccountName(serviceAccountName: string) {
    return this.pathTemplates.serviceAccountPathTemplate.match(
      serviceAccountName
    ).project;
  }

  /**
   * Parse the service_account from ServiceAccount resource.
   *
   * @param {string} serviceAccountName
   *   A fully-qualified path representing ServiceAccount resource.
   * @returns {string} A string representing the service_account.
   */
  matchServiceAccountFromServiceAccountName(serviceAccountName: string) {
    return this.pathTemplates.serviceAccountPathTemplate.match(
      serviceAccountName
    ).service_account;
  }

  /**
   * Return a fully-qualified workerPool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} worker_pool
   * @returns {string} Resource name string.
   */
  workerPoolPath(project: string, location: string, workerPool: string) {
    return this.pathTemplates.workerPoolPathTemplate.render({
      project: project,
      location: location,
      worker_pool: workerPool,
    });
  }

  /**
   * Parse the project from WorkerPool resource.
   *
   * @param {string} workerPoolName
   *   A fully-qualified path representing WorkerPool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWorkerPoolName(workerPoolName: string) {
    return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
      .project;
  }

  /**
   * Parse the location from WorkerPool resource.
   *
   * @param {string} workerPoolName
   *   A fully-qualified path representing WorkerPool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWorkerPoolName(workerPoolName: string) {
    return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
      .location;
  }

  /**
   * Parse the worker_pool from WorkerPool resource.
   *
   * @param {string} workerPoolName
   *   A fully-qualified path representing WorkerPool resource.
   * @returns {string} A string representing the worker_pool.
   */
  matchWorkerPoolFromWorkerPoolName(workerPoolName: string) {
    return this.pathTemplates.workerPoolPathTemplate.match(workerPoolName)
      .worker_pool;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.configStub && !this._terminated) {
      return this.configStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
