// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  IamClient,
  IamProtos,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/workstations_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './workstations_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for interacting with Cloud Workstations.
 * @class
 * @memberof v1
 */
export class WorkstationsClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  workstationsStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of WorkstationsClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new WorkstationsClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof WorkstationsClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);

    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      workstationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workstationClusters/{workstation_cluster}/workstationConfigs/{workstation_config}/workstations/{workstation}'
      ),
      workstationClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workstationClusters/{workstation_cluster}'
      ),
      workstationConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workstationClusters/{workstation_cluster}/workstationConfigs/{workstation_config}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listWorkstationClusters: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'workstationClusters'
      ),
      listWorkstationConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'workstationConfigs'
      ),
      listUsableWorkstationConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'workstationConfigs'
      ),
      listWorkstations: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'workstations'
      ),
      listUsableWorkstations: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'workstations'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*}:getIamPolicy',
          additional_bindings: [
            {
              get: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*/workstations/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*/workstations/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*/workstations/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createWorkstationClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.WorkstationCluster'
    ) as gax.protobuf.Type;
    const createWorkstationClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateWorkstationClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.WorkstationCluster'
    ) as gax.protobuf.Type;
    const updateWorkstationClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteWorkstationClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.WorkstationCluster'
    ) as gax.protobuf.Type;
    const deleteWorkstationClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createWorkstationConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.WorkstationConfig'
    ) as gax.protobuf.Type;
    const createWorkstationConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateWorkstationConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.WorkstationConfig'
    ) as gax.protobuf.Type;
    const updateWorkstationConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteWorkstationConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.WorkstationConfig'
    ) as gax.protobuf.Type;
    const deleteWorkstationConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createWorkstationResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.Workstation'
    ) as gax.protobuf.Type;
    const createWorkstationMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateWorkstationResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.Workstation'
    ) as gax.protobuf.Type;
    const updateWorkstationMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteWorkstationResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.Workstation'
    ) as gax.protobuf.Type;
    const deleteWorkstationMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const startWorkstationResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.Workstation'
    ) as gax.protobuf.Type;
    const startWorkstationMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const stopWorkstationResponse = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.Workstation'
    ) as gax.protobuf.Type;
    const stopWorkstationMetadata = protoFilesRoot.lookup(
      '.google.cloud.workstations.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createWorkstationCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createWorkstationClusterResponse.decode.bind(
          createWorkstationClusterResponse
        ),
        createWorkstationClusterMetadata.decode.bind(
          createWorkstationClusterMetadata
        )
      ),
      updateWorkstationCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateWorkstationClusterResponse.decode.bind(
          updateWorkstationClusterResponse
        ),
        updateWorkstationClusterMetadata.decode.bind(
          updateWorkstationClusterMetadata
        )
      ),
      deleteWorkstationCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteWorkstationClusterResponse.decode.bind(
          deleteWorkstationClusterResponse
        ),
        deleteWorkstationClusterMetadata.decode.bind(
          deleteWorkstationClusterMetadata
        )
      ),
      createWorkstationConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createWorkstationConfigResponse.decode.bind(
          createWorkstationConfigResponse
        ),
        createWorkstationConfigMetadata.decode.bind(
          createWorkstationConfigMetadata
        )
      ),
      updateWorkstationConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateWorkstationConfigResponse.decode.bind(
          updateWorkstationConfigResponse
        ),
        updateWorkstationConfigMetadata.decode.bind(
          updateWorkstationConfigMetadata
        )
      ),
      deleteWorkstationConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteWorkstationConfigResponse.decode.bind(
          deleteWorkstationConfigResponse
        ),
        deleteWorkstationConfigMetadata.decode.bind(
          deleteWorkstationConfigMetadata
        )
      ),
      createWorkstation: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createWorkstationResponse.decode.bind(createWorkstationResponse),
        createWorkstationMetadata.decode.bind(createWorkstationMetadata)
      ),
      updateWorkstation: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateWorkstationResponse.decode.bind(updateWorkstationResponse),
        updateWorkstationMetadata.decode.bind(updateWorkstationMetadata)
      ),
      deleteWorkstation: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteWorkstationResponse.decode.bind(deleteWorkstationResponse),
        deleteWorkstationMetadata.decode.bind(deleteWorkstationMetadata)
      ),
      startWorkstation: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        startWorkstationResponse.decode.bind(startWorkstationResponse),
        startWorkstationMetadata.decode.bind(startWorkstationMetadata)
      ),
      stopWorkstation: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        stopWorkstationResponse.decode.bind(stopWorkstationResponse),
        stopWorkstationMetadata.decode.bind(stopWorkstationMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.workstations.v1.Workstations',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.workstationsStub) {
      return this.workstationsStub;
    }

    // Put together the "service stub" for
    // google.cloud.workstations.v1.Workstations.
    this.workstationsStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.workstations.v1.Workstations'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.workstations.v1.Workstations,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const workstationsStubMethods = [
      'getWorkstationCluster',
      'listWorkstationClusters',
      'createWorkstationCluster',
      'updateWorkstationCluster',
      'deleteWorkstationCluster',
      'getWorkstationConfig',
      'listWorkstationConfigs',
      'listUsableWorkstationConfigs',
      'createWorkstationConfig',
      'updateWorkstationConfig',
      'deleteWorkstationConfig',
      'getWorkstation',
      'listWorkstations',
      'listUsableWorkstations',
      'createWorkstation',
      'updateWorkstation',
      'deleteWorkstation',
      'startWorkstation',
      'stopWorkstation',
      'generateAccessToken',
    ];
    for (const methodName of workstationsStubMethods) {
      const callPromise = this.workstationsStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.workstationsStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'workstations.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'workstations.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Returns the requested workstation cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the requested resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.workstations.v1.WorkstationCluster | WorkstationCluster}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.get_workstation_cluster.js</caption>
   * region_tag:workstations_v1_generated_Workstations_GetWorkstationCluster_async
   */
  getWorkstationCluster(
    request?: protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationCluster,
      (
        | protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getWorkstationCluster(
    request: protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.workstations.v1.IWorkstationCluster,
      | protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkstationCluster(
    request: protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest,
    callback: Callback<
      protos.google.cloud.workstations.v1.IWorkstationCluster,
      | protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkstationCluster(
    request?: protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.workstations.v1.IWorkstationCluster,
          | protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.workstations.v1.IWorkstationCluster,
      | protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationCluster,
      (
        | protos.google.cloud.workstations.v1.IGetWorkstationClusterRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getWorkstationCluster(request, options, callback);
  }
  /**
   * Returns the requested workstation configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the requested resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.workstations.v1.WorkstationConfig | WorkstationConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.get_workstation_config.js</caption>
   * region_tag:workstations_v1_generated_Workstations_GetWorkstationConfig_async
   */
  getWorkstationConfig(
    request?: protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationConfig,
      (
        | protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getWorkstationConfig(
    request: protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.workstations.v1.IWorkstationConfig,
      | protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkstationConfig(
    request: protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest,
    callback: Callback<
      protos.google.cloud.workstations.v1.IWorkstationConfig,
      | protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkstationConfig(
    request?: protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.workstations.v1.IWorkstationConfig,
          | protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.workstations.v1.IWorkstationConfig,
      | protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationConfig,
      (
        | protos.google.cloud.workstations.v1.IGetWorkstationConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getWorkstationConfig(request, options, callback);
  }
  /**
   * Returns the requested workstation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the requested resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.workstations.v1.Workstation | Workstation}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.get_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_GetWorkstation_async
   */
  getWorkstation(
    request?: protos.google.cloud.workstations.v1.IGetWorkstationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstation,
      protos.google.cloud.workstations.v1.IGetWorkstationRequest | undefined,
      {} | undefined
    ]
  >;
  getWorkstation(
    request: protos.google.cloud.workstations.v1.IGetWorkstationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.workstations.v1.IWorkstation,
      | protos.google.cloud.workstations.v1.IGetWorkstationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkstation(
    request: protos.google.cloud.workstations.v1.IGetWorkstationRequest,
    callback: Callback<
      protos.google.cloud.workstations.v1.IWorkstation,
      | protos.google.cloud.workstations.v1.IGetWorkstationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkstation(
    request?: protos.google.cloud.workstations.v1.IGetWorkstationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.workstations.v1.IWorkstation,
          | protos.google.cloud.workstations.v1.IGetWorkstationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.workstations.v1.IWorkstation,
      | protos.google.cloud.workstations.v1.IGetWorkstationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstation,
      protos.google.cloud.workstations.v1.IGetWorkstationRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getWorkstation(request, options, callback);
  }
  /**
   * Returns a short-lived credential that can be used to send authenticated and
   * authorized traffic to a workstation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.Timestamp} request.expireTime
   *   Desired expiration time of the access token. This value must
   *   be at most 24 hours in the future. If a value is not specified, the
   *   token's expiration time will be set to a default value of 1 hour in the
   *   future.
   * @param {google.protobuf.Duration} request.ttl
   *   Desired lifetime duration of the access token. This value must
   *   be at most 24 hours. If a value is not specified, the token's lifetime
   *   will be set to a default value of 1 hour.
   * @param {string} request.workstation
   *   Required. Name of the workstation for which the access token should be
   *   generated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.workstations.v1.GenerateAccessTokenResponse | GenerateAccessTokenResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.generate_access_token.js</caption>
   * region_tag:workstations_v1_generated_Workstations_GenerateAccessToken_async
   */
  generateAccessToken(
    request?: protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IGenerateAccessTokenResponse,
      (
        | protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  generateAccessToken(
    request: protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.workstations.v1.IGenerateAccessTokenResponse,
      | protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateAccessToken(
    request: protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest,
    callback: Callback<
      protos.google.cloud.workstations.v1.IGenerateAccessTokenResponse,
      | protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateAccessToken(
    request?: protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.workstations.v1.IGenerateAccessTokenResponse,
          | protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.workstations.v1.IGenerateAccessTokenResponse,
      | protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IGenerateAccessTokenResponse,
      (
        | protos.google.cloud.workstations.v1.IGenerateAccessTokenRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        workstation: request.workstation ?? '',
      });
    this.initialize();
    return this.innerApiCalls.generateAccessToken(request, options, callback);
  }

  /**
   * Creates a new workstation cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {string} request.workstationClusterId
   *   Required. ID to use for the workstation cluster.
   * @param {google.cloud.workstations.v1.WorkstationCluster} request.workstationCluster
   *   Required. Workstation cluster to create.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.create_workstation_cluster.js</caption>
   * region_tag:workstations_v1_generated_Workstations_CreateWorkstationCluster_async
   */
  createWorkstationCluster(
    request?: protos.google.cloud.workstations.v1.ICreateWorkstationClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createWorkstationCluster(
    request: protos.google.cloud.workstations.v1.ICreateWorkstationClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createWorkstationCluster(
    request: protos.google.cloud.workstations.v1.ICreateWorkstationClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createWorkstationCluster(
    request?: protos.google.cloud.workstations.v1.ICreateWorkstationClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstationCluster,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createWorkstationCluster(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createWorkstationCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.create_workstation_cluster.js</caption>
   * region_tag:workstations_v1_generated_Workstations_CreateWorkstationCluster_async
   */
  async checkCreateWorkstationClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.WorkstationCluster,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createWorkstationCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.WorkstationCluster,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Updates an existing workstation cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.workstations.v1.WorkstationCluster} request.workstationCluster
   *   Required. Workstation cluster to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask that specifies which fields in the workstation cluster
   *   should be updated.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {boolean} request.allowMissing
   *   If set, and the workstation cluster is not found, a new workstation
   *   cluster will be created. In this situation, update_mask is ignored.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.update_workstation_cluster.js</caption>
   * region_tag:workstations_v1_generated_Workstations_UpdateWorkstationCluster_async
   */
  updateWorkstationCluster(
    request?: protos.google.cloud.workstations.v1.IUpdateWorkstationClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateWorkstationCluster(
    request: protos.google.cloud.workstations.v1.IUpdateWorkstationClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateWorkstationCluster(
    request: protos.google.cloud.workstations.v1.IUpdateWorkstationClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateWorkstationCluster(
    request?: protos.google.cloud.workstations.v1.IUpdateWorkstationClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstationCluster,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'workstation_cluster.name': request.workstationCluster!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateWorkstationCluster(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateWorkstationCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.update_workstation_cluster.js</caption>
   * region_tag:workstations_v1_generated_Workstations_UpdateWorkstationCluster_async
   */
  async checkUpdateWorkstationClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.WorkstationCluster,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateWorkstationCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.WorkstationCluster,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Deletes the specified workstation cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the workstation cluster to delete.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not apply it.
   * @param {string} request.etag
   *   If set, the request will be rejected if the latest version of the
   *   workstation cluster on the server does not have this etag.
   * @param {boolean} request.force
   *   If set, any workstation configurations and workstations in the
   *   workstation cluster are also deleted. Otherwise, the request only
   *   works if the workstation cluster has no configurations or workstations.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.delete_workstation_cluster.js</caption>
   * region_tag:workstations_v1_generated_Workstations_DeleteWorkstationCluster_async
   */
  deleteWorkstationCluster(
    request?: protos.google.cloud.workstations.v1.IDeleteWorkstationClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteWorkstationCluster(
    request: protos.google.cloud.workstations.v1.IDeleteWorkstationClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWorkstationCluster(
    request: protos.google.cloud.workstations.v1.IDeleteWorkstationClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWorkstationCluster(
    request?: protos.google.cloud.workstations.v1.IDeleteWorkstationClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstationCluster,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteWorkstationCluster(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteWorkstationCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.delete_workstation_cluster.js</caption>
   * region_tag:workstations_v1_generated_Workstations_DeleteWorkstationCluster_async
   */
  async checkDeleteWorkstationClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.WorkstationCluster,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteWorkstationCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.WorkstationCluster,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new workstation configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {string} request.workstationConfigId
   *   Required. ID to use for the config.
   * @param {google.cloud.workstations.v1.WorkstationConfig} request.workstationConfig
   *   Required. Config to create.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.create_workstation_config.js</caption>
   * region_tag:workstations_v1_generated_Workstations_CreateWorkstationConfig_async
   */
  createWorkstationConfig(
    request?: protos.google.cloud.workstations.v1.ICreateWorkstationConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createWorkstationConfig(
    request: protos.google.cloud.workstations.v1.ICreateWorkstationConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createWorkstationConfig(
    request: protos.google.cloud.workstations.v1.ICreateWorkstationConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createWorkstationConfig(
    request?: protos.google.cloud.workstations.v1.ICreateWorkstationConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstationConfig,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createWorkstationConfig(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createWorkstationConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.create_workstation_config.js</caption>
   * region_tag:workstations_v1_generated_Workstations_CreateWorkstationConfig_async
   */
  async checkCreateWorkstationConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.WorkstationConfig,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createWorkstationConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.WorkstationConfig,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Updates an existing workstation configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.workstations.v1.WorkstationConfig} request.workstationConfig
   *   Required. Config to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask specifying which fields in the config should be updated.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {boolean} request.allowMissing
   *   If set, and the config is not found, a new config will be created.
   *   In this situation, update_mask is ignored.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.update_workstation_config.js</caption>
   * region_tag:workstations_v1_generated_Workstations_UpdateWorkstationConfig_async
   */
  updateWorkstationConfig(
    request?: protos.google.cloud.workstations.v1.IUpdateWorkstationConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateWorkstationConfig(
    request: protos.google.cloud.workstations.v1.IUpdateWorkstationConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateWorkstationConfig(
    request: protos.google.cloud.workstations.v1.IUpdateWorkstationConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateWorkstationConfig(
    request?: protos.google.cloud.workstations.v1.IUpdateWorkstationConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstationConfig,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'workstation_config.name': request.workstationConfig!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateWorkstationConfig(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateWorkstationConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.update_workstation_config.js</caption>
   * region_tag:workstations_v1_generated_Workstations_UpdateWorkstationConfig_async
   */
  async checkUpdateWorkstationConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.WorkstationConfig,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateWorkstationConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.WorkstationConfig,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Deletes the specified workstation configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the config to delete.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {string} request.etag
   *   If set, the request will be rejected if the latest version of the config on
   *   the server does not have this etag.
   * @param {boolean} request.force
   *   If set, any Workstations in the config will also be deleted. Otherwise,
   *   the request will work only if the config has no workstations.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.delete_workstation_config.js</caption>
   * region_tag:workstations_v1_generated_Workstations_DeleteWorkstationConfig_async
   */
  deleteWorkstationConfig(
    request?: protos.google.cloud.workstations.v1.IDeleteWorkstationConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteWorkstationConfig(
    request: protos.google.cloud.workstations.v1.IDeleteWorkstationConfigRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWorkstationConfig(
    request: protos.google.cloud.workstations.v1.IDeleteWorkstationConfigRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWorkstationConfig(
    request?: protos.google.cloud.workstations.v1.IDeleteWorkstationConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstationConfig,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteWorkstationConfig(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteWorkstationConfig()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.delete_workstation_config.js</caption>
   * region_tag:workstations_v1_generated_Workstations_DeleteWorkstationConfig_async
   */
  async checkDeleteWorkstationConfigProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.WorkstationConfig,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteWorkstationConfig,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.WorkstationConfig,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new workstation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {string} request.workstationId
   *   Required. ID to use for the workstation.
   * @param {google.cloud.workstations.v1.Workstation} request.workstation
   *   Required. Workstation to create.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.create_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_CreateWorkstation_async
   */
  createWorkstation(
    request?: protos.google.cloud.workstations.v1.ICreateWorkstationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createWorkstation(
    request: protos.google.cloud.workstations.v1.ICreateWorkstationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createWorkstation(
    request: protos.google.cloud.workstations.v1.ICreateWorkstationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createWorkstation(
    request?: protos.google.cloud.workstations.v1.ICreateWorkstationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstation,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createWorkstation(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createWorkstation()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.create_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_CreateWorkstation_async
   */
  async checkCreateWorkstationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createWorkstation,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Updates an existing workstation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.workstations.v1.Workstation} request.workstation
   *   Required. Workstation to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask specifying which fields in the config should be updated.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {boolean} request.allowMissing
   *   If set, and the config is not found, a new config will be created.
   *   In this situation, update_mask is ignored.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.update_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_UpdateWorkstation_async
   */
  updateWorkstation(
    request?: protos.google.cloud.workstations.v1.IUpdateWorkstationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateWorkstation(
    request: protos.google.cloud.workstations.v1.IUpdateWorkstationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateWorkstation(
    request: protos.google.cloud.workstations.v1.IUpdateWorkstationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateWorkstation(
    request?: protos.google.cloud.workstations.v1.IUpdateWorkstationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstation,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'workstation.name': request.workstation!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateWorkstation(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateWorkstation()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.update_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_UpdateWorkstation_async
   */
  async checkUpdateWorkstationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateWorkstation,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Deletes the specified workstation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the workstation to delete.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {string} request.etag
   *   If set, the request will be rejected if the latest version of the
   *   workstation on the server does not have this etag.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.delete_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_DeleteWorkstation_async
   */
  deleteWorkstation(
    request?: protos.google.cloud.workstations.v1.IDeleteWorkstationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteWorkstation(
    request: protos.google.cloud.workstations.v1.IDeleteWorkstationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWorkstation(
    request: protos.google.cloud.workstations.v1.IDeleteWorkstationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWorkstation(
    request?: protos.google.cloud.workstations.v1.IDeleteWorkstationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstation,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteWorkstation(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteWorkstation()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.delete_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_DeleteWorkstation_async
   */
  async checkDeleteWorkstationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteWorkstation,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Starts running a workstation so that users can connect to it.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the workstation to start.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {string} request.etag
   *   If set, the request will be rejected if the latest version of the
   *   workstation on the server does not have this etag.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.start_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_StartWorkstation_async
   */
  startWorkstation(
    request?: protos.google.cloud.workstations.v1.IStartWorkstationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  startWorkstation(
    request: protos.google.cloud.workstations.v1.IStartWorkstationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  startWorkstation(
    request: protos.google.cloud.workstations.v1.IStartWorkstationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  startWorkstation(
    request?: protos.google.cloud.workstations.v1.IStartWorkstationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstation,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.startWorkstation(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `startWorkstation()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.start_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_StartWorkstation_async
   */
  async checkStartWorkstationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.startWorkstation,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Stops running a workstation, reducing costs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the workstation to stop.
   * @param {boolean} request.validateOnly
   *   If set, validate the request and preview the review, but do not actually
   *   apply it.
   * @param {string} request.etag
   *   If set, the request will be rejected if the latest version of the
   *   workstation on the server does not have this etag.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.stop_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_StopWorkstation_async
   */
  stopWorkstation(
    request?: protos.google.cloud.workstations.v1.IStopWorkstationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  stopWorkstation(
    request: protos.google.cloud.workstations.v1.IStopWorkstationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  stopWorkstation(
    request: protos.google.cloud.workstations.v1.IStopWorkstationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  stopWorkstation(
    request?: protos.google.cloud.workstations.v1.IStopWorkstationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.workstations.v1.IWorkstation,
            protos.google.cloud.workstations.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.stopWorkstation(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `stopWorkstation()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.stop_workstation.js</caption>
   * region_tag:workstations_v1_generated_Workstations_StopWorkstation_async
   */
  async checkStopWorkstationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.stopWorkstation,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.workstations.v1.Workstation,
      protos.google.cloud.workstations.v1.OperationMetadata
    >;
  }
  /**
   * Returns all workstation clusters in the specified location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link google.cloud.workstations.v1.WorkstationCluster | WorkstationCluster}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listWorkstationClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkstationClusters(
    request?: protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationCluster[],
      protos.google.cloud.workstations.v1.IListWorkstationClustersRequest | null,
      protos.google.cloud.workstations.v1.IListWorkstationClustersResponse
    ]
  >;
  listWorkstationClusters(
    request: protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
      | protos.google.cloud.workstations.v1.IListWorkstationClustersResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstationCluster
    >
  ): void;
  listWorkstationClusters(
    request: protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
      | protos.google.cloud.workstations.v1.IListWorkstationClustersResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstationCluster
    >
  ): void;
  listWorkstationClusters(
    request?: protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
          | protos.google.cloud.workstations.v1.IListWorkstationClustersResponse
          | null
          | undefined,
          protos.google.cloud.workstations.v1.IWorkstationCluster
        >,
    callback?: PaginationCallback<
      protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
      | protos.google.cloud.workstations.v1.IListWorkstationClustersResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstationCluster
    >
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationCluster[],
      protos.google.cloud.workstations.v1.IListWorkstationClustersRequest | null,
      protos.google.cloud.workstations.v1.IListWorkstationClustersResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listWorkstationClusters(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link google.cloud.workstations.v1.WorkstationCluster | WorkstationCluster} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listWorkstationClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkstationClustersStream(
    request?: protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWorkstationClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkstationClusters.createStream(
      this.innerApiCalls.listWorkstationClusters as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listWorkstationClusters`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.workstations.v1.WorkstationCluster | WorkstationCluster}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.list_workstation_clusters.js</caption>
   * region_tag:workstations_v1_generated_Workstations_ListWorkstationClusters_async
   */
  listWorkstationClustersAsync(
    request?: protos.google.cloud.workstations.v1.IListWorkstationClustersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.workstations.v1.IWorkstationCluster> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWorkstationClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkstationClusters.asyncIterate(
      this.innerApiCalls['listWorkstationClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.workstations.v1.IWorkstationCluster>;
  }
  /**
   * Returns all WorkstationConfigs in the specified cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link google.cloud.workstations.v1.WorkstationConfig | WorkstationConfig}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listWorkstationConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkstationConfigs(
    request?: protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationConfig[],
      protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest | null,
      protos.google.cloud.workstations.v1.IListWorkstationConfigsResponse
    ]
  >;
  listWorkstationConfigs(
    request: protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
      | protos.google.cloud.workstations.v1.IListWorkstationConfigsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstationConfig
    >
  ): void;
  listWorkstationConfigs(
    request: protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
      | protos.google.cloud.workstations.v1.IListWorkstationConfigsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstationConfig
    >
  ): void;
  listWorkstationConfigs(
    request?: protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
          | protos.google.cloud.workstations.v1.IListWorkstationConfigsResponse
          | null
          | undefined,
          protos.google.cloud.workstations.v1.IWorkstationConfig
        >,
    callback?: PaginationCallback<
      protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
      | protos.google.cloud.workstations.v1.IListWorkstationConfigsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstationConfig
    >
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationConfig[],
      protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest | null,
      protos.google.cloud.workstations.v1.IListWorkstationConfigsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listWorkstationConfigs(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link google.cloud.workstations.v1.WorkstationConfig | WorkstationConfig} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listWorkstationConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkstationConfigsStream(
    request?: protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWorkstationConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkstationConfigs.createStream(
      this.innerApiCalls.listWorkstationConfigs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listWorkstationConfigs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.workstations.v1.WorkstationConfig | WorkstationConfig}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.list_workstation_configs.js</caption>
   * region_tag:workstations_v1_generated_Workstations_ListWorkstationConfigs_async
   */
  listWorkstationConfigsAsync(
    request?: protos.google.cloud.workstations.v1.IListWorkstationConfigsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.workstations.v1.IWorkstationConfig> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWorkstationConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkstationConfigs.asyncIterate(
      this.innerApiCalls['listWorkstationConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.workstations.v1.IWorkstationConfig>;
  }
  /**
   * Returns all workstation configurations in the specified cluster on which
   * the caller has the "workstations.workstation.create" permission.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link google.cloud.workstations.v1.WorkstationConfig | WorkstationConfig}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listUsableWorkstationConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listUsableWorkstationConfigs(
    request?: protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationConfig[],
      protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest | null,
      protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsResponse
    ]
  >;
  listUsableWorkstationConfigs(
    request: protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
      | protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstationConfig
    >
  ): void;
  listUsableWorkstationConfigs(
    request: protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
      | protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstationConfig
    >
  ): void;
  listUsableWorkstationConfigs(
    request?: protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
          | protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsResponse
          | null
          | undefined,
          protos.google.cloud.workstations.v1.IWorkstationConfig
        >,
    callback?: PaginationCallback<
      protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
      | protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstationConfig
    >
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstationConfig[],
      protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest | null,
      protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listUsableWorkstationConfigs(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link google.cloud.workstations.v1.WorkstationConfig | WorkstationConfig} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listUsableWorkstationConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listUsableWorkstationConfigsStream(
    request?: protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listUsableWorkstationConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUsableWorkstationConfigs.createStream(
      this.innerApiCalls.listUsableWorkstationConfigs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listUsableWorkstationConfigs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.workstations.v1.WorkstationConfig | WorkstationConfig}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.list_usable_workstation_configs.js</caption>
   * region_tag:workstations_v1_generated_Workstations_ListUsableWorkstationConfigs_async
   */
  listUsableWorkstationConfigsAsync(
    request?: protos.google.cloud.workstations.v1.IListUsableWorkstationConfigsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.workstations.v1.IWorkstationConfig> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listUsableWorkstationConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUsableWorkstationConfigs.asyncIterate(
      this.innerApiCalls['listUsableWorkstationConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.workstations.v1.IWorkstationConfig>;
  }
  /**
   * Returns all Workstations using the specified config.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link google.cloud.workstations.v1.Workstation | Workstation}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listWorkstationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkstations(
    request?: protos.google.cloud.workstations.v1.IListWorkstationsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstation[],
      protos.google.cloud.workstations.v1.IListWorkstationsRequest | null,
      protos.google.cloud.workstations.v1.IListWorkstationsResponse
    ]
  >;
  listWorkstations(
    request: protos.google.cloud.workstations.v1.IListWorkstationsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListWorkstationsRequest,
      | protos.google.cloud.workstations.v1.IListWorkstationsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstation
    >
  ): void;
  listWorkstations(
    request: protos.google.cloud.workstations.v1.IListWorkstationsRequest,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListWorkstationsRequest,
      | protos.google.cloud.workstations.v1.IListWorkstationsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstation
    >
  ): void;
  listWorkstations(
    request?: protos.google.cloud.workstations.v1.IListWorkstationsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.workstations.v1.IListWorkstationsRequest,
          | protos.google.cloud.workstations.v1.IListWorkstationsResponse
          | null
          | undefined,
          protos.google.cloud.workstations.v1.IWorkstation
        >,
    callback?: PaginationCallback<
      protos.google.cloud.workstations.v1.IListWorkstationsRequest,
      | protos.google.cloud.workstations.v1.IListWorkstationsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstation
    >
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstation[],
      protos.google.cloud.workstations.v1.IListWorkstationsRequest | null,
      protos.google.cloud.workstations.v1.IListWorkstationsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listWorkstations(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link google.cloud.workstations.v1.Workstation | Workstation} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listWorkstationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkstationsStream(
    request?: protos.google.cloud.workstations.v1.IListWorkstationsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWorkstations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkstations.createStream(
      this.innerApiCalls.listWorkstations as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listWorkstations`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.workstations.v1.Workstation | Workstation}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.list_workstations.js</caption>
   * region_tag:workstations_v1_generated_Workstations_ListWorkstations_async
   */
  listWorkstationsAsync(
    request?: protos.google.cloud.workstations.v1.IListWorkstationsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.workstations.v1.IWorkstation> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWorkstations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkstations.asyncIterate(
      this.innerApiCalls['listWorkstations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.workstations.v1.IWorkstation>;
  }
  /**
   * Returns all Workstations using the specified config on which the caller has
   * the "workstations.workstations.use" permission.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link google.cloud.workstations.v1.Workstation | Workstation}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listUsableWorkstationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listUsableWorkstations(
    request?: protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstation[],
      protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest | null,
      protos.google.cloud.workstations.v1.IListUsableWorkstationsResponse
    ]
  >;
  listUsableWorkstations(
    request: protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
      | protos.google.cloud.workstations.v1.IListUsableWorkstationsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstation
    >
  ): void;
  listUsableWorkstations(
    request: protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
    callback: PaginationCallback<
      protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
      | protos.google.cloud.workstations.v1.IListUsableWorkstationsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstation
    >
  ): void;
  listUsableWorkstations(
    request?: protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
          | protos.google.cloud.workstations.v1.IListUsableWorkstationsResponse
          | null
          | undefined,
          protos.google.cloud.workstations.v1.IWorkstation
        >,
    callback?: PaginationCallback<
      protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
      | protos.google.cloud.workstations.v1.IListUsableWorkstationsResponse
      | null
      | undefined,
      protos.google.cloud.workstations.v1.IWorkstation
    >
  ): Promise<
    [
      protos.google.cloud.workstations.v1.IWorkstation[],
      protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest | null,
      protos.google.cloud.workstations.v1.IListUsableWorkstationsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listUsableWorkstations(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link google.cloud.workstations.v1.Workstation | Workstation} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listUsableWorkstationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listUsableWorkstationsStream(
    request?: protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listUsableWorkstations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUsableWorkstations.createStream(
      this.innerApiCalls.listUsableWorkstations as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listUsableWorkstations`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   * @param {number} request.pageSize
   *   Maximum number of items to return.
   * @param {string} request.pageToken
   *   next_page_token value returned from a previous List request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.workstations.v1.Workstation | Workstation}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/workstations.list_usable_workstations.js</caption>
   * region_tag:workstations_v1_generated_Workstations_ListUsableWorkstations_async
   */
  listUsableWorkstationsAsync(
    request?: protos.google.cloud.workstations.v1.IListUsableWorkstationsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.workstations.v1.IWorkstation> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listUsableWorkstations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listUsableWorkstations.asyncIterate(
      this.innerApiCalls['listUsableWorkstations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.workstations.v1.IWorkstation>;
  }
  /**
   * Gets the access control policy for a resource. Returns an empty policy
   * if the resource exists and does not have a policy set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {Object} [request.options]
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   *
   *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.Policy> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the
   * resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * Note: This operation is designed to be used for building
   * permission-aware UIs and command-line tools, not for authorization
   * checking. This operation may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<IamProtos.google.iam.v1.TestIamPermissionsResponse> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified workstation resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} workstation_cluster
   * @param {string} workstation_config
   * @param {string} workstation
   * @returns {string} Resource name string.
   */
  workstationPath(
    project: string,
    location: string,
    workstationCluster: string,
    workstationConfig: string,
    workstation: string
  ) {
    return this.pathTemplates.workstationPathTemplate.render({
      project: project,
      location: location,
      workstation_cluster: workstationCluster,
      workstation_config: workstationConfig,
      workstation: workstation,
    });
  }

  /**
   * Parse the project from Workstation resource.
   *
   * @param {string} workstationName
   *   A fully-qualified path representing Workstation resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWorkstationName(workstationName: string) {
    return this.pathTemplates.workstationPathTemplate.match(workstationName)
      .project;
  }

  /**
   * Parse the location from Workstation resource.
   *
   * @param {string} workstationName
   *   A fully-qualified path representing Workstation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWorkstationName(workstationName: string) {
    return this.pathTemplates.workstationPathTemplate.match(workstationName)
      .location;
  }

  /**
   * Parse the workstation_cluster from Workstation resource.
   *
   * @param {string} workstationName
   *   A fully-qualified path representing Workstation resource.
   * @returns {string} A string representing the workstation_cluster.
   */
  matchWorkstationClusterFromWorkstationName(workstationName: string) {
    return this.pathTemplates.workstationPathTemplate.match(workstationName)
      .workstation_cluster;
  }

  /**
   * Parse the workstation_config from Workstation resource.
   *
   * @param {string} workstationName
   *   A fully-qualified path representing Workstation resource.
   * @returns {string} A string representing the workstation_config.
   */
  matchWorkstationConfigFromWorkstationName(workstationName: string) {
    return this.pathTemplates.workstationPathTemplate.match(workstationName)
      .workstation_config;
  }

  /**
   * Parse the workstation from Workstation resource.
   *
   * @param {string} workstationName
   *   A fully-qualified path representing Workstation resource.
   * @returns {string} A string representing the workstation.
   */
  matchWorkstationFromWorkstationName(workstationName: string) {
    return this.pathTemplates.workstationPathTemplate.match(workstationName)
      .workstation;
  }

  /**
   * Return a fully-qualified workstationCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} workstation_cluster
   * @returns {string} Resource name string.
   */
  workstationClusterPath(
    project: string,
    location: string,
    workstationCluster: string
  ) {
    return this.pathTemplates.workstationClusterPathTemplate.render({
      project: project,
      location: location,
      workstation_cluster: workstationCluster,
    });
  }

  /**
   * Parse the project from WorkstationCluster resource.
   *
   * @param {string} workstationClusterName
   *   A fully-qualified path representing WorkstationCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWorkstationClusterName(workstationClusterName: string) {
    return this.pathTemplates.workstationClusterPathTemplate.match(
      workstationClusterName
    ).project;
  }

  /**
   * Parse the location from WorkstationCluster resource.
   *
   * @param {string} workstationClusterName
   *   A fully-qualified path representing WorkstationCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWorkstationClusterName(workstationClusterName: string) {
    return this.pathTemplates.workstationClusterPathTemplate.match(
      workstationClusterName
    ).location;
  }

  /**
   * Parse the workstation_cluster from WorkstationCluster resource.
   *
   * @param {string} workstationClusterName
   *   A fully-qualified path representing WorkstationCluster resource.
   * @returns {string} A string representing the workstation_cluster.
   */
  matchWorkstationClusterFromWorkstationClusterName(
    workstationClusterName: string
  ) {
    return this.pathTemplates.workstationClusterPathTemplate.match(
      workstationClusterName
    ).workstation_cluster;
  }

  /**
   * Return a fully-qualified workstationConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} workstation_cluster
   * @param {string} workstation_config
   * @returns {string} Resource name string.
   */
  workstationConfigPath(
    project: string,
    location: string,
    workstationCluster: string,
    workstationConfig: string
  ) {
    return this.pathTemplates.workstationConfigPathTemplate.render({
      project: project,
      location: location,
      workstation_cluster: workstationCluster,
      workstation_config: workstationConfig,
    });
  }

  /**
   * Parse the project from WorkstationConfig resource.
   *
   * @param {string} workstationConfigName
   *   A fully-qualified path representing WorkstationConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWorkstationConfigName(workstationConfigName: string) {
    return this.pathTemplates.workstationConfigPathTemplate.match(
      workstationConfigName
    ).project;
  }

  /**
   * Parse the location from WorkstationConfig resource.
   *
   * @param {string} workstationConfigName
   *   A fully-qualified path representing WorkstationConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWorkstationConfigName(workstationConfigName: string) {
    return this.pathTemplates.workstationConfigPathTemplate.match(
      workstationConfigName
    ).location;
  }

  /**
   * Parse the workstation_cluster from WorkstationConfig resource.
   *
   * @param {string} workstationConfigName
   *   A fully-qualified path representing WorkstationConfig resource.
   * @returns {string} A string representing the workstation_cluster.
   */
  matchWorkstationClusterFromWorkstationConfigName(
    workstationConfigName: string
  ) {
    return this.pathTemplates.workstationConfigPathTemplate.match(
      workstationConfigName
    ).workstation_cluster;
  }

  /**
   * Parse the workstation_config from WorkstationConfig resource.
   *
   * @param {string} workstationConfigName
   *   A fully-qualified path representing WorkstationConfig resource.
   * @returns {string} A string representing the workstation_config.
   */
  matchWorkstationConfigFromWorkstationConfigName(
    workstationConfigName: string
  ) {
    return this.pathTemplates.workstationConfigPathTemplate.match(
      workstationConfigName
    ).workstation_config;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.workstationsStub && !this._terminated) {
      return this.workstationsStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.iamClient.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
