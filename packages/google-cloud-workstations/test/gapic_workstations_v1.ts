// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as workstationsModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.WorkstationsClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new workstationsModule.v1.WorkstationsClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'workstations.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new workstationsModule.v1.WorkstationsClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          workstationsModule.v1.WorkstationsClient.servicePath;
        assert.strictEqual(servicePath, 'workstations.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          workstationsModule.v1.WorkstationsClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'workstations.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'workstations.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'workstations.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new workstationsModule.v1.WorkstationsClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'workstations.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new workstationsModule.v1.WorkstationsClient({
            universeDomain: 'configured.example.com',
          });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'workstations.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new workstationsModule.v1.WorkstationsClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = workstationsModule.v1.WorkstationsClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new workstationsModule.v1.WorkstationsClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.workstationsStub, undefined);
      await client.initialize();
      assert(client.workstationsStub);
    });

    it('has close method for the initialized client', done => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.workstationsStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.workstationsStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getWorkstationCluster', () => {
    it('invokes getWorkstationCluster without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.workstations.v1.WorkstationCluster()
      );
      client.innerApiCalls.getWorkstationCluster =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getWorkstationCluster(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkstationCluster without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.workstations.v1.WorkstationCluster()
      );
      client.innerApiCalls.getWorkstationCluster =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getWorkstationCluster(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.workstations.v1.IWorkstationCluster | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkstationCluster with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getWorkstationCluster = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getWorkstationCluster(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkstationCluster with closed client', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getWorkstationCluster(request),
        expectedError
      );
    });
  });

  describe('getWorkstationConfig', () => {
    it('invokes getWorkstationConfig without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.workstations.v1.WorkstationConfig()
      );
      client.innerApiCalls.getWorkstationConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getWorkstationConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkstationConfig without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.workstations.v1.WorkstationConfig()
      );
      client.innerApiCalls.getWorkstationConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getWorkstationConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.workstations.v1.IWorkstationConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkstationConfig with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getWorkstationConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getWorkstationConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkstationConfig with closed client', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getWorkstationConfig(request), expectedError);
    });
  });

  describe('getWorkstation', () => {
    it('invokes getWorkstation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.workstations.v1.Workstation()
      );
      client.innerApiCalls.getWorkstation = stubSimpleCall(expectedResponse);
      const [response] = await client.getWorkstation(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkstation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.workstations.v1.Workstation()
      );
      client.innerApiCalls.getWorkstation =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getWorkstation(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.workstations.v1.IWorkstation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkstation with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getWorkstation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getWorkstation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getWorkstation with closed client', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GetWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GetWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getWorkstation(request), expectedError);
    });
  });

  describe('generateAccessToken', () => {
    it('invokes generateAccessToken without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GenerateAccessTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GenerateAccessTokenRequest',
        ['workstation']
      );
      request.workstation = defaultValue1;
      const expectedHeaderRequestParams = `workstation=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GenerateAccessTokenResponse()
      );
      client.innerApiCalls.generateAccessToken =
        stubSimpleCall(expectedResponse);
      const [response] = await client.generateAccessToken(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateAccessToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAccessToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAccessToken without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GenerateAccessTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GenerateAccessTokenRequest',
        ['workstation']
      );
      request.workstation = defaultValue1;
      const expectedHeaderRequestParams = `workstation=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GenerateAccessTokenResponse()
      );
      client.innerApiCalls.generateAccessToken =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.generateAccessToken(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.workstations.v1.IGenerateAccessTokenResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateAccessToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAccessToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAccessToken with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GenerateAccessTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GenerateAccessTokenRequest',
        ['workstation']
      );
      request.workstation = defaultValue1;
      const expectedHeaderRequestParams = `workstation=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.generateAccessToken = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.generateAccessToken(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.generateAccessToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAccessToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAccessToken with closed client', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.GenerateAccessTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.GenerateAccessTokenRequest',
        ['workstation']
      );
      request.workstation = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.generateAccessToken(request), expectedError);
    });
  });

  describe('createWorkstationCluster', () => {
    it('invokes createWorkstationCluster without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createWorkstationCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createWorkstationCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkstationCluster without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createWorkstationCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createWorkstationCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstationCluster,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkstationCluster with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createWorkstationCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createWorkstationCluster(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkstationCluster with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createWorkstationCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createWorkstationCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateWorkstationClusterProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateWorkstationClusterProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateWorkstationClusterProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateWorkstationClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateWorkstationCluster', () => {
    it('invokes updateWorkstationCluster without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationClusterRequest()
      );
      request.workstationCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationClusterRequest',
        ['workstationCluster', 'name']
      );
      request.workstationCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation_cluster.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateWorkstationCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateWorkstationCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkstationCluster without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationClusterRequest()
      );
      request.workstationCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationClusterRequest',
        ['workstationCluster', 'name']
      );
      request.workstationCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation_cluster.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateWorkstationCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateWorkstationCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstationCluster,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkstationCluster with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationClusterRequest()
      );
      request.workstationCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationClusterRequest',
        ['workstationCluster', 'name']
      );
      request.workstationCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation_cluster.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateWorkstationCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateWorkstationCluster(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkstationCluster with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationClusterRequest()
      );
      request.workstationCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationClusterRequest',
        ['workstationCluster', 'name']
      );
      request.workstationCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation_cluster.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateWorkstationCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateWorkstationCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateWorkstationClusterProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdateWorkstationClusterProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateWorkstationClusterProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateWorkstationClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteWorkstationCluster', () => {
    it('invokes deleteWorkstationCluster without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteWorkstationCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteWorkstationCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkstationCluster without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteWorkstationCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteWorkstationCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstationCluster,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstationCluster,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkstationCluster with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteWorkstationCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteWorkstationCluster(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkstationCluster with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteWorkstationCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteWorkstationCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstationCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstationCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteWorkstationClusterProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteWorkstationClusterProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteWorkstationClusterProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteWorkstationClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createWorkstationConfig', () => {
    it('invokes createWorkstationConfig without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createWorkstationConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createWorkstationConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkstationConfig without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createWorkstationConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createWorkstationConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstationConfig,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkstationConfig with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createWorkstationConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createWorkstationConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkstationConfig with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationConfigRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createWorkstationConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createWorkstationConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateWorkstationConfigProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateWorkstationConfigProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateWorkstationConfigProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateWorkstationConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateWorkstationConfig', () => {
    it('invokes updateWorkstationConfig without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationConfigRequest()
      );
      request.workstationConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationConfigRequest',
        ['workstationConfig', 'name']
      );
      request.workstationConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateWorkstationConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateWorkstationConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkstationConfig without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationConfigRequest()
      );
      request.workstationConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationConfigRequest',
        ['workstationConfig', 'name']
      );
      request.workstationConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation_config.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateWorkstationConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateWorkstationConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstationConfig,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkstationConfig with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationConfigRequest()
      );
      request.workstationConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationConfigRequest',
        ['workstationConfig', 'name']
      );
      request.workstationConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateWorkstationConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateWorkstationConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkstationConfig with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationConfigRequest()
      );
      request.workstationConfig ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationConfigRequest',
        ['workstationConfig', 'name']
      );
      request.workstationConfig.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation_config.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateWorkstationConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateWorkstationConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateWorkstationConfigProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdateWorkstationConfigProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateWorkstationConfigProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateWorkstationConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteWorkstationConfig', () => {
    it('invokes deleteWorkstationConfig without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteWorkstationConfig =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteWorkstationConfig(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkstationConfig without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteWorkstationConfig =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteWorkstationConfig(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstationConfig,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstationConfig,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkstationConfig with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteWorkstationConfig = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteWorkstationConfig(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkstationConfig with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteWorkstationConfig = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteWorkstationConfig(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstationConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstationConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteWorkstationConfigProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteWorkstationConfigProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteWorkstationConfigProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteWorkstationConfigProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createWorkstation', () => {
    it('invokes createWorkstation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createWorkstation =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createWorkstation(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkstation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createWorkstation =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createWorkstation(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstation,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkstation with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createWorkstation = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createWorkstation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createWorkstation with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.CreateWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.CreateWorkstationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createWorkstation = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createWorkstation(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateWorkstationProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateWorkstationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateWorkstationProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateWorkstationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateWorkstation', () => {
    it('invokes updateWorkstation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationRequest()
      );
      request.workstation ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationRequest',
        ['workstation', 'name']
      );
      request.workstation.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateWorkstation =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateWorkstation(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkstation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationRequest()
      );
      request.workstation ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationRequest',
        ['workstation', 'name']
      );
      request.workstation.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateWorkstation =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateWorkstation(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstation,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkstation with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationRequest()
      );
      request.workstation ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationRequest',
        ['workstation', 'name']
      );
      request.workstation.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateWorkstation = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateWorkstation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateWorkstation with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.UpdateWorkstationRequest()
      );
      request.workstation ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.UpdateWorkstationRequest',
        ['workstation', 'name']
      );
      request.workstation.name = defaultValue1;
      const expectedHeaderRequestParams = `workstation.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateWorkstation = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateWorkstation(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateWorkstationProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateWorkstationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateWorkstationProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateWorkstationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteWorkstation', () => {
    it('invokes deleteWorkstation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteWorkstation =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteWorkstation(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkstation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteWorkstation =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteWorkstation(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstation,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkstation with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteWorkstation = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteWorkstation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteWorkstation with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.DeleteWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.DeleteWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteWorkstation = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteWorkstation(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteWorkstationProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteWorkstationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteWorkstationProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteWorkstationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('startWorkstation', () => {
    it('invokes startWorkstation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.StartWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.StartWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startWorkstation =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.startWorkstation(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startWorkstation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.StartWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.StartWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startWorkstation =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.startWorkstation(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstation,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startWorkstation with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.StartWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.StartWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startWorkstation = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.startWorkstation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.startWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startWorkstation with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.StartWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.StartWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startWorkstation = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.startWorkstation(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.startWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkStartWorkstationProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkStartWorkstationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkStartWorkstationProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkStartWorkstationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('stopWorkstation', () => {
    it('invokes stopWorkstation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.StopWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.StopWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.stopWorkstation =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.stopWorkstation(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopWorkstation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.StopWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.StopWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.stopWorkstation =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.stopWorkstation(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.workstations.v1.IWorkstation,
              protos.google.cloud.workstations.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.workstations.v1.IWorkstation,
        protos.google.cloud.workstations.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopWorkstation with call error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.StopWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.StopWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.stopWorkstation = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.stopWorkstation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.stopWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopWorkstation with LRO error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.StopWorkstationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.StopWorkstationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.stopWorkstation = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.stopWorkstation(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.stopWorkstation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopWorkstation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkStopWorkstationProgress without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkStopWorkstationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkStopWorkstationProgress with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkStopWorkstationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listWorkstationClusters', () => {
    it('invokes listWorkstationClusters without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
      ];
      client.innerApiCalls.listWorkstationClusters =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listWorkstationClusters(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listWorkstationClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkstationClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkstationClusters without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
      ];
      client.innerApiCalls.listWorkstationClusters =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listWorkstationClusters(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.workstations.v1.IWorkstationCluster[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listWorkstationClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkstationClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkstationClusters with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listWorkstationClusters = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listWorkstationClusters(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listWorkstationClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkstationClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkstationClustersStream without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
      ];
      client.descriptors.page.listWorkstationClusters.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listWorkstationClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.WorkstationCluster[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.workstations.v1.WorkstationCluster
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listWorkstationClusters
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listWorkstationClusters, request)
      );
      assert(
        (
          client.descriptors.page.listWorkstationClusters
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listWorkstationClustersStream with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listWorkstationClusters.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listWorkstationClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.WorkstationCluster[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.workstations.v1.WorkstationCluster
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listWorkstationClusters
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listWorkstationClusters, request)
      );
      assert(
        (
          client.descriptors.page.listWorkstationClusters
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listWorkstationClusters without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationCluster()
        ),
      ];
      client.descriptors.page.listWorkstationClusters.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.workstations.v1.IWorkstationCluster[] =
        [];
      const iterable = client.listWorkstationClustersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listWorkstationClusters
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listWorkstationClusters
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listWorkstationClusters with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listWorkstationClusters.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listWorkstationClustersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.workstations.v1.IWorkstationCluster[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listWorkstationClusters
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listWorkstationClusters
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listWorkstationConfigs', () => {
    it('invokes listWorkstationConfigs without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
      ];
      client.innerApiCalls.listWorkstationConfigs =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listWorkstationConfigs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listWorkstationConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkstationConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkstationConfigs without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
      ];
      client.innerApiCalls.listWorkstationConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listWorkstationConfigs(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.workstations.v1.IWorkstationConfig[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listWorkstationConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkstationConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkstationConfigs with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listWorkstationConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listWorkstationConfigs(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listWorkstationConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkstationConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkstationConfigsStream without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
      ];
      client.descriptors.page.listWorkstationConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listWorkstationConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.WorkstationConfig[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.workstations.v1.WorkstationConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listWorkstationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listWorkstationConfigs, request)
      );
      assert(
        (
          client.descriptors.page.listWorkstationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listWorkstationConfigsStream with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listWorkstationConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listWorkstationConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.WorkstationConfig[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.workstations.v1.WorkstationConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listWorkstationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listWorkstationConfigs, request)
      );
      assert(
        (
          client.descriptors.page.listWorkstationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listWorkstationConfigs without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
      ];
      client.descriptors.page.listWorkstationConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.workstations.v1.IWorkstationConfig[] =
        [];
      const iterable = client.listWorkstationConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listWorkstationConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listWorkstationConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listWorkstationConfigs with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listWorkstationConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listWorkstationConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.workstations.v1.IWorkstationConfig[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listWorkstationConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listWorkstationConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listUsableWorkstationConfigs', () => {
    it('invokes listUsableWorkstationConfigs without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
      ];
      client.innerApiCalls.listUsableWorkstationConfigs =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listUsableWorkstationConfigs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listUsableWorkstationConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUsableWorkstationConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUsableWorkstationConfigs without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
      ];
      client.innerApiCalls.listUsableWorkstationConfigs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listUsableWorkstationConfigs(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.workstations.v1.IWorkstationConfig[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listUsableWorkstationConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUsableWorkstationConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUsableWorkstationConfigs with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listUsableWorkstationConfigs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listUsableWorkstationConfigs(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listUsableWorkstationConfigs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUsableWorkstationConfigs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUsableWorkstationConfigsStream without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
      ];
      client.descriptors.page.listUsableWorkstationConfigs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listUsableWorkstationConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.WorkstationConfig[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.workstations.v1.WorkstationConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listUsableWorkstationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listUsableWorkstationConfigs,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listUsableWorkstationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listUsableWorkstationConfigsStream with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listUsableWorkstationConfigs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listUsableWorkstationConfigsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.WorkstationConfig[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.workstations.v1.WorkstationConfig) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listUsableWorkstationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listUsableWorkstationConfigs,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listUsableWorkstationConfigs
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listUsableWorkstationConfigs without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.WorkstationConfig()
        ),
      ];
      client.descriptors.page.listUsableWorkstationConfigs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.workstations.v1.IWorkstationConfig[] =
        [];
      const iterable = client.listUsableWorkstationConfigsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listUsableWorkstationConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listUsableWorkstationConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listUsableWorkstationConfigs with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationConfigsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listUsableWorkstationConfigs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listUsableWorkstationConfigsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.workstations.v1.IWorkstationConfig[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listUsableWorkstationConfigs
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listUsableWorkstationConfigs
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listWorkstations', () => {
    it('invokes listWorkstations without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
      ];
      client.innerApiCalls.listWorkstations = stubSimpleCall(expectedResponse);
      const [response] = await client.listWorkstations(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listWorkstations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkstations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkstations without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
      ];
      client.innerApiCalls.listWorkstations =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listWorkstations(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.workstations.v1.IWorkstation[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listWorkstations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkstations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkstations with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listWorkstations = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listWorkstations(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listWorkstations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listWorkstations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listWorkstationsStream without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
      ];
      client.descriptors.page.listWorkstations.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listWorkstationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.Workstation[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.workstations.v1.Workstation) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listWorkstations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listWorkstations, request)
      );
      assert(
        (client.descriptors.page.listWorkstations.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listWorkstationsStream with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listWorkstations.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listWorkstationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.Workstation[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.workstations.v1.Workstation) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listWorkstations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listWorkstations, request)
      );
      assert(
        (client.descriptors.page.listWorkstations.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listWorkstations without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
      ];
      client.descriptors.page.listWorkstations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.workstations.v1.IWorkstation[] = [];
      const iterable = client.listWorkstationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listWorkstations.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listWorkstations.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listWorkstations with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listWorkstations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listWorkstationsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.workstations.v1.IWorkstation[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listWorkstations.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listWorkstations.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listUsableWorkstations', () => {
    it('invokes listUsableWorkstations without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
      ];
      client.innerApiCalls.listUsableWorkstations =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listUsableWorkstations(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listUsableWorkstations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUsableWorkstations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUsableWorkstations without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
      ];
      client.innerApiCalls.listUsableWorkstations =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listUsableWorkstations(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.workstations.v1.IWorkstation[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listUsableWorkstations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUsableWorkstations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUsableWorkstations with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listUsableWorkstations = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listUsableWorkstations(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listUsableWorkstations as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUsableWorkstations as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUsableWorkstationsStream without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
      ];
      client.descriptors.page.listUsableWorkstations.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listUsableWorkstationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.Workstation[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.workstations.v1.Workstation) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listUsableWorkstations
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listUsableWorkstations, request)
      );
      assert(
        (
          client.descriptors.page.listUsableWorkstations
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listUsableWorkstationsStream with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listUsableWorkstations.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listUsableWorkstationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.workstations.v1.Workstation[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.workstations.v1.Workstation) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listUsableWorkstations
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listUsableWorkstations, request)
      );
      assert(
        (
          client.descriptors.page.listUsableWorkstations
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listUsableWorkstations without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
        generateSampleMessage(
          new protos.google.cloud.workstations.v1.Workstation()
        ),
      ];
      client.descriptors.page.listUsableWorkstations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.workstations.v1.IWorkstation[] = [];
      const iterable = client.listUsableWorkstationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listUsableWorkstations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listUsableWorkstations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listUsableWorkstations with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.workstations.v1.ListUsableWorkstationsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.workstations.v1.ListUsableWorkstationsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listUsableWorkstations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listUsableWorkstationsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.workstations.v1.IWorkstation[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listUsableWorkstations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listUsableWorkstations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('workstation', () => {
      const fakePath = '/rendered/path/workstation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        workstation_cluster: 'workstationClusterValue',
        workstation_config: 'workstationConfigValue',
        workstation: 'workstationValue',
      };
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.workstationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.workstationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('workstationPath', () => {
        const result = client.workstationPath(
          'projectValue',
          'locationValue',
          'workstationClusterValue',
          'workstationConfigValue',
          'workstationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.workstationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromWorkstationName', () => {
        const result = client.matchProjectFromWorkstationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.workstationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromWorkstationName', () => {
        const result = client.matchLocationFromWorkstationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.workstationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWorkstationClusterFromWorkstationName', () => {
        const result =
          client.matchWorkstationClusterFromWorkstationName(fakePath);
        assert.strictEqual(result, 'workstationClusterValue');
        assert(
          (client.pathTemplates.workstationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWorkstationConfigFromWorkstationName', () => {
        const result =
          client.matchWorkstationConfigFromWorkstationName(fakePath);
        assert.strictEqual(result, 'workstationConfigValue');
        assert(
          (client.pathTemplates.workstationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWorkstationFromWorkstationName', () => {
        const result = client.matchWorkstationFromWorkstationName(fakePath);
        assert.strictEqual(result, 'workstationValue');
        assert(
          (client.pathTemplates.workstationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('workstationCluster', () => {
      const fakePath = '/rendered/path/workstationCluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        workstation_cluster: 'workstationClusterValue',
      };
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.workstationClusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.workstationClusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('workstationClusterPath', () => {
        const result = client.workstationClusterPath(
          'projectValue',
          'locationValue',
          'workstationClusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.workstationClusterPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromWorkstationClusterName', () => {
        const result = client.matchProjectFromWorkstationClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.workstationClusterPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromWorkstationClusterName', () => {
        const result = client.matchLocationFromWorkstationClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.workstationClusterPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWorkstationClusterFromWorkstationClusterName', () => {
        const result =
          client.matchWorkstationClusterFromWorkstationClusterName(fakePath);
        assert.strictEqual(result, 'workstationClusterValue');
        assert(
          (
            client.pathTemplates.workstationClusterPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('workstationConfig', () => {
      const fakePath = '/rendered/path/workstationConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        workstation_cluster: 'workstationClusterValue',
        workstation_config: 'workstationConfigValue',
      };
      const client = new workstationsModule.v1.WorkstationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.workstationConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.workstationConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('workstationConfigPath', () => {
        const result = client.workstationConfigPath(
          'projectValue',
          'locationValue',
          'workstationClusterValue',
          'workstationConfigValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.workstationConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromWorkstationConfigName', () => {
        const result = client.matchProjectFromWorkstationConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.workstationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromWorkstationConfigName', () => {
        const result = client.matchLocationFromWorkstationConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.workstationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWorkstationClusterFromWorkstationConfigName', () => {
        const result =
          client.matchWorkstationClusterFromWorkstationConfigName(fakePath);
        assert.strictEqual(result, 'workstationClusterValue');
        assert(
          (
            client.pathTemplates.workstationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchWorkstationConfigFromWorkstationConfigName', () => {
        const result =
          client.matchWorkstationConfigFromWorkstationConfigName(fakePath);
        assert.strictEqual(result, 'workstationConfigValue');
        assert(
          (
            client.pathTemplates.workstationConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
