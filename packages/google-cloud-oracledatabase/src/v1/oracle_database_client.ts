// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/oracle_database_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './oracle_database_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service describing handlers for resources
 * @class
 * @memberof v1
 */
export class OracleDatabaseClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  oracleDatabaseStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of OracleDatabaseClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new OracleDatabaseClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof OracleDatabaseClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'oracledatabase.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    // Implicitly enable HTTP transport for the APIs that use REST as transport (e.g. Google Cloud Compute).
    if (!opts) {
      opts = {fallback: true};
    } else {
      opts.fallback = opts.fallback ?? true;
    }
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      autonomousDatabasePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}'
      ),
      autonomousDatabaseBackupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/autonomousDatabaseBackups/{autonomous_database_backup}'
      ),
      autonomousDatabaseCharacterSetPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/autonomousDatabaseCharacterSets/{autonomous_database_character_set}'
        ),
      autonomousDbVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/autonomousDbVersions/{autonomous_db_version}'
      ),
      cloudExadataInfrastructurePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}'
      ),
      cloudVmClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}'
      ),
      dbNodePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}/dbNodes/{db_node}'
      ),
      dbServerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}/dbServers/{db_server}'
      ),
      dbSystemShapePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dbSystemShapes/{db_system_shape}'
      ),
      entitlementPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entitlements/{entitlement}'
      ),
      giVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/giVersions/{gi_version}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listCloudExadataInfrastructures: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'cloudExadataInfrastructures'
      ),
      listCloudVmClusters: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'cloudVmClusters'
      ),
      listEntitlements: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'entitlements'
      ),
      listDbServers: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'dbServers'
      ),
      listDbNodes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'dbNodes'
      ),
      listGiVersions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'giVersions'
      ),
      listDbSystemShapes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'dbSystemShapes'
      ),
      listAutonomousDatabases: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'autonomousDatabases'
      ),
      listAutonomousDbVersions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'autonomousDbVersions'
      ),
      listAutonomousDatabaseCharacterSets: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'autonomousDatabaseCharacterSets'
      ),
      listAutonomousDatabaseBackups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'autonomousDatabaseBackups'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createCloudExadataInfrastructureResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.CloudExadataInfrastructure'
    ) as gax.protobuf.Type;
    const createCloudExadataInfrastructureMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteCloudExadataInfrastructureResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteCloudExadataInfrastructureMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createCloudVmClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.CloudVmCluster'
    ) as gax.protobuf.Type;
    const createCloudVmClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteCloudVmClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteCloudVmClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase'
    ) as gax.protobuf.Type;
    const createAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const restoreAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase'
    ) as gax.protobuf.Type;
    const restoreAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createCloudExadataInfrastructure:
        new this._gaxModule.LongrunningDescriptor(
          this.operationsClient,
          createCloudExadataInfrastructureResponse.decode.bind(
            createCloudExadataInfrastructureResponse
          ),
          createCloudExadataInfrastructureMetadata.decode.bind(
            createCloudExadataInfrastructureMetadata
          )
        ),
      deleteCloudExadataInfrastructure:
        new this._gaxModule.LongrunningDescriptor(
          this.operationsClient,
          deleteCloudExadataInfrastructureResponse.decode.bind(
            deleteCloudExadataInfrastructureResponse
          ),
          deleteCloudExadataInfrastructureMetadata.decode.bind(
            deleteCloudExadataInfrastructureMetadata
          )
        ),
      createCloudVmCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCloudVmClusterResponse.decode.bind(createCloudVmClusterResponse),
        createCloudVmClusterMetadata.decode.bind(createCloudVmClusterMetadata)
      ),
      deleteCloudVmCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteCloudVmClusterResponse.decode.bind(deleteCloudVmClusterResponse),
        deleteCloudVmClusterMetadata.decode.bind(deleteCloudVmClusterMetadata)
      ),
      createAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAutonomousDatabaseResponse.decode.bind(
          createAutonomousDatabaseResponse
        ),
        createAutonomousDatabaseMetadata.decode.bind(
          createAutonomousDatabaseMetadata
        )
      ),
      deleteAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAutonomousDatabaseResponse.decode.bind(
          deleteAutonomousDatabaseResponse
        ),
        deleteAutonomousDatabaseMetadata.decode.bind(
          deleteAutonomousDatabaseMetadata
        )
      ),
      restoreAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restoreAutonomousDatabaseResponse.decode.bind(
          restoreAutonomousDatabaseResponse
        ),
        restoreAutonomousDatabaseMetadata.decode.bind(
          restoreAutonomousDatabaseMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.oracledatabase.v1.OracleDatabase',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.oracleDatabaseStub) {
      return this.oracleDatabaseStub;
    }

    // Put together the "service stub" for
    // google.cloud.oracledatabase.v1.OracleDatabase.
    this.oracleDatabaseStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.oracledatabase.v1.OracleDatabase'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.oracledatabase.v1.OracleDatabase,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const oracleDatabaseStubMethods = [
      'listCloudExadataInfrastructures',
      'getCloudExadataInfrastructure',
      'createCloudExadataInfrastructure',
      'deleteCloudExadataInfrastructure',
      'listCloudVmClusters',
      'getCloudVmCluster',
      'createCloudVmCluster',
      'deleteCloudVmCluster',
      'listEntitlements',
      'listDbServers',
      'listDbNodes',
      'listGiVersions',
      'listDbSystemShapes',
      'listAutonomousDatabases',
      'getAutonomousDatabase',
      'createAutonomousDatabase',
      'deleteAutonomousDatabase',
      'restoreAutonomousDatabase',
      'generateAutonomousDatabaseWallet',
      'listAutonomousDbVersions',
      'listAutonomousDatabaseCharacterSets',
      'listAutonomousDatabaseBackups',
    ];
    for (const methodName of oracleDatabaseStubMethods) {
      const callPromise = this.oracleDatabaseStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.oracleDatabaseStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'oracledatabase.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'oracledatabase.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of a single Exadata Infrastructure.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Cloud Exadata Infrastructure in the following
   *   format:
   *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure|CloudExadataInfrastructure}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.get_cloud_exadata_infrastructure.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_GetCloudExadataInfrastructure_async
   */
  getCloudExadataInfrastructure(
    request?: protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
      (
        | protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getCloudExadataInfrastructure(
    request: protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
      | protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCloudExadataInfrastructure(
    request: protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest,
    callback: Callback<
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
      | protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCloudExadataInfrastructure(
    request?: protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
          | protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
      | protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
      (
        | protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getCloudExadataInfrastructure(
      request,
      options,
      callback
    );
  }
  /**
   * Gets details of a single VM Cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Cloud VM Cluster in the following format:
   *   projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.CloudVmCluster|CloudVmCluster}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.get_cloud_vm_cluster.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_GetCloudVmCluster_async
   */
  getCloudVmCluster(
    request?: protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
      (
        | protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getCloudVmCluster(
    request: protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
      | protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCloudVmCluster(
    request: protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest,
    callback: Callback<
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
      | protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCloudVmCluster(
    request?: protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
          | protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
      | protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
      (
        | protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getCloudVmCluster(request, options, callback);
  }
  /**
   * Gets the details of a single Autonomous Database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Autonomous Database in the following format:
   *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabase|AutonomousDatabase}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.get_autonomous_database.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_GetAutonomousDatabase_async
   */
  getAutonomousDatabase(
    request?: protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
      (
        | protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getAutonomousDatabase(
    request: protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
      | protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAutonomousDatabase(
    request: protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest,
    callback: Callback<
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
      | protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAutonomousDatabase(
    request?: protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
          | protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
      | protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
      (
        | protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAutonomousDatabase(request, options, callback);
  }
  /**
   * Generates a wallet for an Autonomous Database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Autonomous Database in the following format:
   *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
   * @param {google.cloud.oracledatabase.v1.GenerateType} [request.type]
   *   Optional. The type of wallet generation for the Autonomous Database. The
   *   default value is SINGLE.
   * @param {boolean} [request.isRegional]
   *   Optional. True when requesting regional connection strings in PDB connect
   *   info, applicable to cross-region Data Guard only.
   * @param {string} request.password
   *   Required. The password used to encrypt the keys inside the wallet. The
   *   password must be a minimum of 8 characters.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletResponse|GenerateAutonomousDatabaseWalletResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.generate_autonomous_database_wallet.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_GenerateAutonomousDatabaseWallet_async
   */
  generateAutonomousDatabaseWallet(
    request?: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
      (
        | protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  generateAutonomousDatabaseWallet(
    request: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
      | protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateAutonomousDatabaseWallet(
    request: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest,
    callback: Callback<
      protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
      | protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateAutonomousDatabaseWallet(
    request?: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
          | protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
      | protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
      (
        | protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.generateAutonomousDatabaseWallet(
      request,
      options,
      callback
    );
  }

  /**
   * Creates a new Exadata Infrastructure in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for CloudExadataInfrastructure in the following
   *   format: projects/{project}/locations/{location}.
   * @param {string} request.cloudExadataInfrastructureId
   *   Required. The ID of the Exadata Infrastructure to create. This value is
   *   restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
   *   63 characters in length. The value must start with a letter and end with a
   *   letter or a number.
   * @param {google.cloud.oracledatabase.v1.CloudExadataInfrastructure} request.cloudExadataInfrastructure
   *   Required. Details of the Exadata Infrastructure instance to create.
   * @param {string} [request.requestId]
   *   Optional. An optional ID to identify the request. This value is used to
   *   identify duplicate requests. If you make a request with the same request ID
   *   and the original request is still in progress or completed, the server
   *   ignores the second request. This prevents clients from
   *   accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.create_cloud_exadata_infrastructure.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateCloudExadataInfrastructure_async
   */
  createCloudExadataInfrastructure(
    request?: protos.google.cloud.oracledatabase.v1.ICreateCloudExadataInfrastructureRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createCloudExadataInfrastructure(
    request: protos.google.cloud.oracledatabase.v1.ICreateCloudExadataInfrastructureRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCloudExadataInfrastructure(
    request: protos.google.cloud.oracledatabase.v1.ICreateCloudExadataInfrastructureRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCloudExadataInfrastructure(
    request?: protos.google.cloud.oracledatabase.v1.ICreateCloudExadataInfrastructureRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
            protos.google.cloud.oracledatabase.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createCloudExadataInfrastructure(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createCloudExadataInfrastructure()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.create_cloud_exadata_infrastructure.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateCloudExadataInfrastructure_async
   */
  async checkCreateCloudExadataInfrastructureProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createCloudExadataInfrastructure,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Exadata Infrastructure.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Cloud Exadata Infrastructure in the following
   *   format:
   *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}.
   * @param {string} [request.requestId]
   *   Optional. An optional ID to identify the request. This value is used to
   *   identify duplicate requests. If you make a request with the same request ID
   *   and the original request is still in progress or completed, the server
   *   ignores the second request. This prevents clients from
   *   accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.force]
   *   Optional. If set to true, all VM clusters for this Exadata Infrastructure
   *   will be deleted. An Exadata Infrastructure can only be deleted once all its
   *   VM clusters have been deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.delete_cloud_exadata_infrastructure.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteCloudExadataInfrastructure_async
   */
  deleteCloudExadataInfrastructure(
    request?: protos.google.cloud.oracledatabase.v1.IDeleteCloudExadataInfrastructureRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteCloudExadataInfrastructure(
    request: protos.google.cloud.oracledatabase.v1.IDeleteCloudExadataInfrastructureRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCloudExadataInfrastructure(
    request: protos.google.cloud.oracledatabase.v1.IDeleteCloudExadataInfrastructureRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCloudExadataInfrastructure(
    request?: protos.google.cloud.oracledatabase.v1.IDeleteCloudExadataInfrastructureRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.oracledatabase.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteCloudExadataInfrastructure(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteCloudExadataInfrastructure()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.delete_cloud_exadata_infrastructure.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteCloudExadataInfrastructure_async
   */
  async checkDeleteCloudExadataInfrastructureProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteCloudExadataInfrastructure,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new VM Cluster in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent in the following format:
   *   projects/{project}/locations/{location}.
   * @param {string} request.cloudVmClusterId
   *   Required. The ID of the VM Cluster to create. This value is restricted
   *   to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of 63
   *   characters in length. The value must start with a letter and end with
   *   a letter or a number.
   * @param {google.cloud.oracledatabase.v1.CloudVmCluster} request.cloudVmCluster
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional ID to identify the request. This value is used to
   *   identify duplicate requests. If you make a request with the same request ID
   *   and the original request is still in progress or completed, the server
   *   ignores the second request. This prevents clients from
   *   accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.create_cloud_vm_cluster.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateCloudVmCluster_async
   */
  createCloudVmCluster(
    request?: protos.google.cloud.oracledatabase.v1.ICreateCloudVmClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createCloudVmCluster(
    request: protos.google.cloud.oracledatabase.v1.ICreateCloudVmClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCloudVmCluster(
    request: protos.google.cloud.oracledatabase.v1.ICreateCloudVmClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCloudVmCluster(
    request?: protos.google.cloud.oracledatabase.v1.ICreateCloudVmClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
            protos.google.cloud.oracledatabase.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createCloudVmCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createCloudVmCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.create_cloud_vm_cluster.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateCloudVmCluster_async
   */
  async checkCreateCloudVmClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.oracledatabase.v1.CloudVmCluster,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createCloudVmCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.oracledatabase.v1.CloudVmCluster,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single VM Cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Cloud VM Cluster in the following format:
   *   projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}.
   * @param {string} [request.requestId]
   *   Optional. An optional ID to identify the request. This value is used to
   *   identify duplicate requests. If you make a request with the same request ID
   *   and the original request is still in progress or completed, the server
   *   ignores the second request. This prevents clients from
   *   accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.force]
   *   Optional. If set to true, all child resources for the VM Cluster will be
   *   deleted. A VM Cluster can only be deleted once all its child resources have
   *   been deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.delete_cloud_vm_cluster.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteCloudVmCluster_async
   */
  deleteCloudVmCluster(
    request?: protos.google.cloud.oracledatabase.v1.IDeleteCloudVmClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteCloudVmCluster(
    request: protos.google.cloud.oracledatabase.v1.IDeleteCloudVmClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCloudVmCluster(
    request: protos.google.cloud.oracledatabase.v1.IDeleteCloudVmClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCloudVmCluster(
    request?: protos.google.cloud.oracledatabase.v1.IDeleteCloudVmClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.oracledatabase.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteCloudVmCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteCloudVmCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.delete_cloud_vm_cluster.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteCloudVmCluster_async
   */
  async checkDeleteCloudVmClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteCloudVmCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new Autonomous Database in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent in the following format:
   *   projects/{project}/locations/{location}.
   * @param {string} request.autonomousDatabaseId
   *   Required. The ID of the Autonomous Database to create. This value is
   *   restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
   *   63 characters in length. The value must start with a letter and end with a
   *   letter or a number.
   * @param {google.cloud.oracledatabase.v1.AutonomousDatabase} request.autonomousDatabase
   *   Required. The Autonomous Database being created.
   * @param {string} [request.requestId]
   *   Optional. An optional ID to identify the request. This value is used to
   *   identify duplicate requests. If you make a request with the same request ID
   *   and the original request is still in progress or completed, the server
   *   ignores the second request. This prevents clients from
   *   accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.create_autonomous_database.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateAutonomousDatabase_async
   */
  createAutonomousDatabase(
    request?: protos.google.cloud.oracledatabase.v1.ICreateAutonomousDatabaseRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createAutonomousDatabase(
    request: protos.google.cloud.oracledatabase.v1.ICreateAutonomousDatabaseRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAutonomousDatabase(
    request: protos.google.cloud.oracledatabase.v1.ICreateAutonomousDatabaseRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAutonomousDatabase(
    request?: protos.google.cloud.oracledatabase.v1.ICreateAutonomousDatabaseRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
            protos.google.cloud.oracledatabase.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAutonomousDatabase(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createAutonomousDatabase()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.create_autonomous_database.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateAutonomousDatabase_async
   */
  async checkCreateAutonomousDatabaseProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.oracledatabase.v1.AutonomousDatabase,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createAutonomousDatabase,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.oracledatabase.v1.AutonomousDatabase,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Autonomous Database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the resource in the following format:
   *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
   * @param {string} [request.requestId]
   *   Optional. An optional ID to identify the request. This value is used to
   *   identify duplicate requests. If you make a request with the same request ID
   *   and the original request is still in progress or completed, the server
   *   ignores the second request. This prevents clients from
   *   accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.delete_autonomous_database.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteAutonomousDatabase_async
   */
  deleteAutonomousDatabase(
    request?: protos.google.cloud.oracledatabase.v1.IDeleteAutonomousDatabaseRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteAutonomousDatabase(
    request: protos.google.cloud.oracledatabase.v1.IDeleteAutonomousDatabaseRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAutonomousDatabase(
    request: protos.google.cloud.oracledatabase.v1.IDeleteAutonomousDatabaseRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAutonomousDatabase(
    request?: protos.google.cloud.oracledatabase.v1.IDeleteAutonomousDatabaseRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.oracledatabase.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAutonomousDatabase(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteAutonomousDatabase()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.delete_autonomous_database.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteAutonomousDatabase_async
   */
  async checkDeleteAutonomousDatabaseProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteAutonomousDatabase,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >;
  }
  /**
   * Restores a single Autonomous Database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the Autonomous Database in the following format:
   *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
   * @param {google.protobuf.Timestamp} request.restoreTime
   *   Required. The time and date to restore the database to.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.restore_autonomous_database.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_RestoreAutonomousDatabase_async
   */
  restoreAutonomousDatabase(
    request?: protos.google.cloud.oracledatabase.v1.IRestoreAutonomousDatabaseRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  restoreAutonomousDatabase(
    request: protos.google.cloud.oracledatabase.v1.IRestoreAutonomousDatabaseRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreAutonomousDatabase(
    request: protos.google.cloud.oracledatabase.v1.IRestoreAutonomousDatabaseRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  restoreAutonomousDatabase(
    request?: protos.google.cloud.oracledatabase.v1.IRestoreAutonomousDatabaseRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
            protos.google.cloud.oracledatabase.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.restoreAutonomousDatabase(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `restoreAutonomousDatabase()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.restore_autonomous_database.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_RestoreAutonomousDatabase_async
   */
  async checkRestoreAutonomousDatabaseProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.oracledatabase.v1.AutonomousDatabase,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.restoreAutonomousDatabase,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.oracledatabase.v1.AutonomousDatabase,
      protos.google.cloud.oracledatabase.v1.OperationMetadata
    >;
  }
  /**
   * Lists Exadata Infrastructures in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for CloudExadataInfrastructure in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Exadata infrastructures will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure|CloudExadataInfrastructure}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listCloudExadataInfrastructuresAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listCloudExadataInfrastructures(
    request?: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[],
      protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest | null,
      protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse,
    ]
  >;
  listCloudExadataInfrastructures(
    request: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      | protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure
    >
  ): void;
  listCloudExadataInfrastructures(
    request: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      | protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure
    >
  ): void;
  listCloudExadataInfrastructures(
    request?: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
          | protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      | protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[],
      protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest | null,
      protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listCloudExadataInfrastructures(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for CloudExadataInfrastructure in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Exadata infrastructures will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure|CloudExadataInfrastructure} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listCloudExadataInfrastructuresAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listCloudExadataInfrastructuresStream(
    request?: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings =
      this._defaults['listCloudExadataInfrastructures'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCloudExadataInfrastructures.createStream(
      this.innerApiCalls.listCloudExadataInfrastructures as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listCloudExadataInfrastructures`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for CloudExadataInfrastructure in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Exadata infrastructures will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure|CloudExadataInfrastructure}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_cloud_exadata_infrastructures.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListCloudExadataInfrastructures_async
   */
  listCloudExadataInfrastructuresAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings =
      this._defaults['listCloudExadataInfrastructures'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCloudExadataInfrastructures.asyncIterate(
      this.innerApiCalls['listCloudExadataInfrastructures'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure>;
  }
  /**
   * Lists the VM Clusters in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent in the following format:
   *   projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The number of VM clusters to return.
   *   If unspecified, at most 50 VM clusters will be returned.
   *   The maximum value is 1,000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying the page of results the server returns.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.CloudVmCluster|CloudVmCluster}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listCloudVmClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listCloudVmClusters(
    request?: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster[],
      protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest | null,
      protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse,
    ]
  >;
  listCloudVmClusters(
    request: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      | protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster
    >
  ): void;
  listCloudVmClusters(
    request: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      | protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster
    >
  ): void;
  listCloudVmClusters(
    request?: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
          | protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      | protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster[],
      protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest | null,
      protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listCloudVmClusters(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent in the following format:
   *   projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The number of VM clusters to return.
   *   If unspecified, at most 50 VM clusters will be returned.
   *   The maximum value is 1,000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying the page of results the server returns.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.CloudVmCluster|CloudVmCluster} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listCloudVmClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listCloudVmClustersStream(
    request?: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listCloudVmClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCloudVmClusters.createStream(
      this.innerApiCalls.listCloudVmClusters as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listCloudVmClusters`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent in the following format:
   *   projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The number of VM clusters to return.
   *   If unspecified, at most 50 VM clusters will be returned.
   *   The maximum value is 1,000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying the page of results the server returns.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.CloudVmCluster|CloudVmCluster}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_cloud_vm_clusters.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListCloudVmClusters_async
   */
  listCloudVmClustersAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.ICloudVmCluster> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listCloudVmClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCloudVmClusters.asyncIterate(
      this.innerApiCalls['listCloudVmClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.ICloudVmCluster>;
  }
  /**
   * Lists the entitlements in a given project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the entitlement in the following format:
   *   projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, a maximum of 50 entitlements will be returned.
   *   The maximum value is 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.Entitlement|Entitlement}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listEntitlementsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntitlements(
    request?: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IEntitlement[],
      protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse,
    ]
  >;
  listEntitlements(
    request: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      | protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IEntitlement
    >
  ): void;
  listEntitlements(
    request: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      | protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IEntitlement
    >
  ): void;
  listEntitlements(
    request?: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
          | protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.IEntitlement
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      | protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IEntitlement
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IEntitlement[],
      protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listEntitlements(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the entitlement in the following format:
   *   projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, a maximum of 50 entitlements will be returned.
   *   The maximum value is 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.Entitlement|Entitlement} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listEntitlementsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntitlementsStream(
    request?: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntitlements'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntitlements.createStream(
      this.innerApiCalls.listEntitlements as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listEntitlements`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the entitlement in the following format:
   *   projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, a maximum of 50 entitlements will be returned.
   *   The maximum value is 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.Entitlement|Entitlement}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_entitlements.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListEntitlements_async
   */
  listEntitlementsAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.IEntitlement> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntitlements'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntitlements.asyncIterate(
      this.innerApiCalls['listEntitlements'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IEntitlement>;
  }
  /**
   * Lists the database servers of an Exadata Infrastructure instance.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for database server in the following format:
   *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloudExadataInfrastructure}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, a maximum of 50 db servers will be returned.
   *   The maximum value is 1000; values above 1000 will be reset to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DbServer|DbServer}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDbServersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDbServers(
    request?: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IDbServer[],
      protos.google.cloud.oracledatabase.v1.IListDbServersRequest | null,
      protos.google.cloud.oracledatabase.v1.IListDbServersResponse,
    ]
  >;
  listDbServers(
    request: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      | protos.google.cloud.oracledatabase.v1.IListDbServersResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IDbServer
    >
  ): void;
  listDbServers(
    request: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      | protos.google.cloud.oracledatabase.v1.IListDbServersResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IDbServer
    >
  ): void;
  listDbServers(
    request?: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
          | protos.google.cloud.oracledatabase.v1.IListDbServersResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.IDbServer
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      | protos.google.cloud.oracledatabase.v1.IListDbServersResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IDbServer
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IDbServer[],
      protos.google.cloud.oracledatabase.v1.IListDbServersRequest | null,
      protos.google.cloud.oracledatabase.v1.IListDbServersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDbServers(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for database server in the following format:
   *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloudExadataInfrastructure}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, a maximum of 50 db servers will be returned.
   *   The maximum value is 1000; values above 1000 will be reset to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DbServer|DbServer} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDbServersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDbServersStream(
    request?: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDbServers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDbServers.createStream(
      this.innerApiCalls.listDbServers as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDbServers`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for database server in the following format:
   *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloudExadataInfrastructure}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, a maximum of 50 db servers will be returned.
   *   The maximum value is 1000; values above 1000 will be reset to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.DbServer|DbServer}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_db_servers.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDbServers_async
   */
  listDbServersAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbServer> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDbServers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDbServers.asyncIterate(
      this.innerApiCalls['listDbServers'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbServer>;
  }
  /**
   * Lists the database nodes of a VM Cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for database node in the following format:
   *   projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 db nodes will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the node should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DbNode|DbNode}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDbNodesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDbNodes(
    request?: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IDbNode[],
      protos.google.cloud.oracledatabase.v1.IListDbNodesRequest | null,
      protos.google.cloud.oracledatabase.v1.IListDbNodesResponse,
    ]
  >;
  listDbNodes(
    request: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      | protos.google.cloud.oracledatabase.v1.IListDbNodesResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IDbNode
    >
  ): void;
  listDbNodes(
    request: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      | protos.google.cloud.oracledatabase.v1.IListDbNodesResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IDbNode
    >
  ): void;
  listDbNodes(
    request?: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
          | protos.google.cloud.oracledatabase.v1.IListDbNodesResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.IDbNode
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      | protos.google.cloud.oracledatabase.v1.IListDbNodesResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IDbNode
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IDbNode[],
      protos.google.cloud.oracledatabase.v1.IListDbNodesRequest | null,
      protos.google.cloud.oracledatabase.v1.IListDbNodesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDbNodes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for database node in the following format:
   *   projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 db nodes will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the node should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DbNode|DbNode} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDbNodesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDbNodesStream(
    request?: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDbNodes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDbNodes.createStream(
      this.innerApiCalls.listDbNodes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDbNodes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for database node in the following format:
   *   projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 db nodes will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the node should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.DbNode|DbNode}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_db_nodes.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDbNodes_async
   */
  listDbNodesAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbNode> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDbNodes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDbNodes.asyncIterate(
      this.innerApiCalls['listDbNodes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbNode>;
  }
  /**
   * Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
   * project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for Grid Infrastructure Version in the following
   *   format: Format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, a maximum of 50 Oracle Grid Infrastructure (GI) versions
   *   will be returned. The maximum value is 1000; values above 1000 will be
   *   reset to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.GiVersion|GiVersion}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listGiVersionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGiVersions(
    request?: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IGiVersion[],
      protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse,
    ]
  >;
  listGiVersions(
    request: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      | protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IGiVersion
    >
  ): void;
  listGiVersions(
    request: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      | protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IGiVersion
    >
  ): void;
  listGiVersions(
    request?: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
          | protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.IGiVersion
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      | protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IGiVersion
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IGiVersion[],
      protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listGiVersions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for Grid Infrastructure Version in the following
   *   format: Format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, a maximum of 50 Oracle Grid Infrastructure (GI) versions
   *   will be returned. The maximum value is 1000; values above 1000 will be
   *   reset to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.GiVersion|GiVersion} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listGiVersionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGiVersionsStream(
    request?: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGiVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGiVersions.createStream(
      this.innerApiCalls.listGiVersions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listGiVersions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for Grid Infrastructure Version in the following
   *   format: Format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, a maximum of 50 Oracle Grid Infrastructure (GI) versions
   *   will be returned. The maximum value is 1000; values above 1000 will be
   *   reset to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.GiVersion|GiVersion}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_gi_versions.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListGiVersions_async
   */
  listGiVersionsAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.IGiVersion> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGiVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGiVersions.asyncIterate(
      this.innerApiCalls['listGiVersions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IGiVersion>;
  }
  /**
   * Lists the database system shapes available for the project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for Database System Shapes in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 database system shapes will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DbSystemShape|DbSystemShape}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDbSystemShapesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDbSystemShapes(
    request?: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IDbSystemShape[],
      protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest | null,
      protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse,
    ]
  >;
  listDbSystemShapes(
    request: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      | protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IDbSystemShape
    >
  ): void;
  listDbSystemShapes(
    request: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      | protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IDbSystemShape
    >
  ): void;
  listDbSystemShapes(
    request?: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
          | protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystemShape
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      | protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IDbSystemShape
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IDbSystemShape[],
      protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest | null,
      protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDbSystemShapes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for Database System Shapes in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 database system shapes will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DbSystemShape|DbSystemShape} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDbSystemShapesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDbSystemShapesStream(
    request?: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDbSystemShapes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDbSystemShapes.createStream(
      this.innerApiCalls.listDbSystemShapes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDbSystemShapes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for Database System Shapes in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 database system shapes will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.DbSystemShape|DbSystemShape}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_db_system_shapes.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDbSystemShapes_async
   */
  listDbSystemShapesAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbSystemShape> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDbSystemShapes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDbSystemShapes.asyncIterate(
      this.innerApiCalls['listDbSystemShapes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbSystemShape>;
  }
  /**
   * Lists the Autonomous Databases in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the Autonomous Database in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous Database will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request.
   * @param {string} [request.orderBy]
   *   Optional. An expression for ordering the results of the request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabase|AutonomousDatabase}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAutonomousDatabasesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAutonomousDatabases(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[],
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest | null,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse,
    ]
  >;
  listAutonomousDatabases(
    request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase
    >
  ): void;
  listAutonomousDatabases(
    request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase
    >
  ): void;
  listAutonomousDatabases(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
          | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[],
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest | null,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAutonomousDatabases(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the Autonomous Database in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous Database will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request.
   * @param {string} [request.orderBy]
   *   Optional. An expression for ordering the results of the request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabase|AutonomousDatabase} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAutonomousDatabasesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAutonomousDatabasesStream(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAutonomousDatabases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAutonomousDatabases.createStream(
      this.innerApiCalls.listAutonomousDatabases as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAutonomousDatabases`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the Autonomous Database in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous Database will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request.
   * @param {string} [request.orderBy]
   *   Optional. An expression for ordering the results of the request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabase|AutonomousDatabase}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_autonomous_databases.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListAutonomousDatabases_async
   */
  listAutonomousDatabasesAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAutonomousDatabases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAutonomousDatabases.asyncIterate(
      this.innerApiCalls['listAutonomousDatabases'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase>;
  }
  /**
   * Lists all the available Autonomous Database versions for a project and
   * location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the Autonomous Database in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous DB Versions will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.AutonomousDbVersion|AutonomousDbVersion}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAutonomousDbVersionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAutonomousDbVersions(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[],
      protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse,
    ]
  >;
  listAutonomousDbVersions(
    request: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion
    >
  ): void;
  listAutonomousDbVersions(
    request: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion
    >
  ): void;
  listAutonomousDbVersions(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
          | protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[],
      protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAutonomousDbVersions(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the Autonomous Database in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous DB Versions will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDbVersion|AutonomousDbVersion} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAutonomousDbVersionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAutonomousDbVersionsStream(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAutonomousDbVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAutonomousDbVersions.createStream(
      this.innerApiCalls.listAutonomousDbVersions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAutonomousDbVersions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the Autonomous Database in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous DB Versions will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.AutonomousDbVersion|AutonomousDbVersion}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_autonomous_db_versions.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListAutonomousDbVersions_async
   */
  listAutonomousDbVersionsAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAutonomousDbVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAutonomousDbVersions.asyncIterate(
      this.innerApiCalls['listAutonomousDbVersions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion>;
  }
  /**
   * Lists Autonomous Database Character Sets in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the Autonomous Database in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous DB Character Sets will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Only the
   *   **character_set_type** field is supported in the following format:
   *   `character_set_type="{characterSetType}"`. Accepted values include
   *   `DATABASE` and `NATIONAL`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet|AutonomousDatabaseCharacterSet}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAutonomousDatabaseCharacterSetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAutonomousDatabaseCharacterSets(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[],
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse,
    ]
  >;
  listAutonomousDatabaseCharacterSets(
    request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet
    >
  ): void;
  listAutonomousDatabaseCharacterSets(
    request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet
    >
  ): void;
  listAutonomousDatabaseCharacterSets(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
          | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[],
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAutonomousDatabaseCharacterSets(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the Autonomous Database in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous DB Character Sets will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Only the
   *   **character_set_type** field is supported in the following format:
   *   `character_set_type="{characterSetType}"`. Accepted values include
   *   `DATABASE` and `NATIONAL`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet|AutonomousDatabaseCharacterSet} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAutonomousDatabaseCharacterSetsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAutonomousDatabaseCharacterSetsStream(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings =
      this._defaults['listAutonomousDatabaseCharacterSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAutonomousDatabaseCharacterSets.createStream(
      this.innerApiCalls.listAutonomousDatabaseCharacterSets as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAutonomousDatabaseCharacterSets`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for the Autonomous Database in the following
   *   format: projects/{project}/locations/{location}.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous DB Character Sets will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Only the
   *   **character_set_type** field is supported in the following format:
   *   `character_set_type="{characterSetType}"`. Accepted values include
   *   `DATABASE` and `NATIONAL`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet|AutonomousDatabaseCharacterSet}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_autonomous_database_character_sets.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListAutonomousDatabaseCharacterSets_async
   */
  listAutonomousDatabaseCharacterSetsAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings =
      this._defaults['listAutonomousDatabaseCharacterSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate(
      this.innerApiCalls['listAutonomousDatabaseCharacterSets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet>;
  }
  /**
   * Lists the long-term and automatic backups of an Autonomous Database.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for ListAutonomousDatabaseBackups in the
   *   following format: projects/{project}/locations/{location}.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Only the
   *   **autonomous_database_id** field is supported in the following format:
   *   `autonomous_database_id="{autonomous_database_id}"`. The accepted values
   *   must be a valid Autonomous Database ID, limited to the naming
   *   restrictions of the ID: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
   *   The ID must start with a letter, end with a letter or a number, and be
   *   a maximum of 63 characters.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous DB Backups will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup|AutonomousDatabaseBackup}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAutonomousDatabaseBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAutonomousDatabaseBackups(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[],
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse,
    ]
  >;
  listAutonomousDatabaseBackups(
    request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup
    >
  ): void;
  listAutonomousDatabaseBackups(
    request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
    callback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup
    >
  ): void;
  listAutonomousDatabaseBackups(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
          | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse
          | null
          | undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup
        >,
    callback?: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      | protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse
      | null
      | undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup
    >
  ): Promise<
    [
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[],
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest | null,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAutonomousDatabaseBackups(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for ListAutonomousDatabaseBackups in the
   *   following format: projects/{project}/locations/{location}.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Only the
   *   **autonomous_database_id** field is supported in the following format:
   *   `autonomous_database_id="{autonomous_database_id}"`. The accepted values
   *   must be a valid Autonomous Database ID, limited to the naming
   *   restrictions of the ID: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
   *   The ID must start with a letter, end with a letter or a number, and be
   *   a maximum of 63 characters.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous DB Backups will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup|AutonomousDatabaseBackup} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAutonomousDatabaseBackupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAutonomousDatabaseBackupsStream(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAutonomousDatabaseBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAutonomousDatabaseBackups.createStream(
      this.innerApiCalls.listAutonomousDatabaseBackups as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAutonomousDatabaseBackups`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent value for ListAutonomousDatabaseBackups in the
   *   following format: projects/{project}/locations/{location}.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Only the
   *   **autonomous_database_id** field is supported in the following format:
   *   `autonomous_database_id="{autonomous_database_id}"`. The accepted values
   *   must be a valid Autonomous Database ID, limited to the naming
   *   restrictions of the ID: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
   *   The ID must start with a letter, end with a letter or a number, and be
   *   a maximum of 63 characters.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return.
   *   If unspecified, at most 50 Autonomous DB Backups will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup|AutonomousDatabaseBackup}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/oracle_database.list_autonomous_database_backups.js</caption>
   * region_tag:oracledatabase_v1_generated_OracleDatabase_ListAutonomousDatabaseBackups_async
   */
  listAutonomousDatabaseBackupsAsync(
    request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAutonomousDatabaseBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAutonomousDatabaseBackups.asyncIterate(
      this.innerApiCalls['listAutonomousDatabaseBackups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified autonomousDatabase resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autonomous_database
   * @returns {string} Resource name string.
   */
  autonomousDatabasePath(
    project: string,
    location: string,
    autonomousDatabase: string
  ) {
    return this.pathTemplates.autonomousDatabasePathTemplate.render({
      project: project,
      location: location,
      autonomous_database: autonomousDatabase,
    });
  }

  /**
   * Parse the project from AutonomousDatabase resource.
   *
   * @param {string} autonomousDatabaseName
   *   A fully-qualified path representing AutonomousDatabase resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAutonomousDatabaseName(autonomousDatabaseName: string) {
    return this.pathTemplates.autonomousDatabasePathTemplate.match(
      autonomousDatabaseName
    ).project;
  }

  /**
   * Parse the location from AutonomousDatabase resource.
   *
   * @param {string} autonomousDatabaseName
   *   A fully-qualified path representing AutonomousDatabase resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAutonomousDatabaseName(autonomousDatabaseName: string) {
    return this.pathTemplates.autonomousDatabasePathTemplate.match(
      autonomousDatabaseName
    ).location;
  }

  /**
   * Parse the autonomous_database from AutonomousDatabase resource.
   *
   * @param {string} autonomousDatabaseName
   *   A fully-qualified path representing AutonomousDatabase resource.
   * @returns {string} A string representing the autonomous_database.
   */
  matchAutonomousDatabaseFromAutonomousDatabaseName(
    autonomousDatabaseName: string
  ) {
    return this.pathTemplates.autonomousDatabasePathTemplate.match(
      autonomousDatabaseName
    ).autonomous_database;
  }

  /**
   * Return a fully-qualified autonomousDatabaseBackup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autonomous_database_backup
   * @returns {string} Resource name string.
   */
  autonomousDatabaseBackupPath(
    project: string,
    location: string,
    autonomousDatabaseBackup: string
  ) {
    return this.pathTemplates.autonomousDatabaseBackupPathTemplate.render({
      project: project,
      location: location,
      autonomous_database_backup: autonomousDatabaseBackup,
    });
  }

  /**
   * Parse the project from AutonomousDatabaseBackup resource.
   *
   * @param {string} autonomousDatabaseBackupName
   *   A fully-qualified path representing AutonomousDatabaseBackup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAutonomousDatabaseBackupName(
    autonomousDatabaseBackupName: string
  ) {
    return this.pathTemplates.autonomousDatabaseBackupPathTemplate.match(
      autonomousDatabaseBackupName
    ).project;
  }

  /**
   * Parse the location from AutonomousDatabaseBackup resource.
   *
   * @param {string} autonomousDatabaseBackupName
   *   A fully-qualified path representing AutonomousDatabaseBackup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAutonomousDatabaseBackupName(
    autonomousDatabaseBackupName: string
  ) {
    return this.pathTemplates.autonomousDatabaseBackupPathTemplate.match(
      autonomousDatabaseBackupName
    ).location;
  }

  /**
   * Parse the autonomous_database_backup from AutonomousDatabaseBackup resource.
   *
   * @param {string} autonomousDatabaseBackupName
   *   A fully-qualified path representing AutonomousDatabaseBackup resource.
   * @returns {string} A string representing the autonomous_database_backup.
   */
  matchAutonomousDatabaseBackupFromAutonomousDatabaseBackupName(
    autonomousDatabaseBackupName: string
  ) {
    return this.pathTemplates.autonomousDatabaseBackupPathTemplate.match(
      autonomousDatabaseBackupName
    ).autonomous_database_backup;
  }

  /**
   * Return a fully-qualified autonomousDatabaseCharacterSet resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autonomous_database_character_set
   * @returns {string} Resource name string.
   */
  autonomousDatabaseCharacterSetPath(
    project: string,
    location: string,
    autonomousDatabaseCharacterSet: string
  ) {
    return this.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.render(
      {
        project: project,
        location: location,
        autonomous_database_character_set: autonomousDatabaseCharacterSet,
      }
    );
  }

  /**
   * Parse the project from AutonomousDatabaseCharacterSet resource.
   *
   * @param {string} autonomousDatabaseCharacterSetName
   *   A fully-qualified path representing AutonomousDatabaseCharacterSet resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAutonomousDatabaseCharacterSetName(
    autonomousDatabaseCharacterSetName: string
  ) {
    return this.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match(
      autonomousDatabaseCharacterSetName
    ).project;
  }

  /**
   * Parse the location from AutonomousDatabaseCharacterSet resource.
   *
   * @param {string} autonomousDatabaseCharacterSetName
   *   A fully-qualified path representing AutonomousDatabaseCharacterSet resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAutonomousDatabaseCharacterSetName(
    autonomousDatabaseCharacterSetName: string
  ) {
    return this.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match(
      autonomousDatabaseCharacterSetName
    ).location;
  }

  /**
   * Parse the autonomous_database_character_set from AutonomousDatabaseCharacterSet resource.
   *
   * @param {string} autonomousDatabaseCharacterSetName
   *   A fully-qualified path representing AutonomousDatabaseCharacterSet resource.
   * @returns {string} A string representing the autonomous_database_character_set.
   */
  matchAutonomousDatabaseCharacterSetFromAutonomousDatabaseCharacterSetName(
    autonomousDatabaseCharacterSetName: string
  ) {
    return this.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match(
      autonomousDatabaseCharacterSetName
    ).autonomous_database_character_set;
  }

  /**
   * Return a fully-qualified autonomousDbVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autonomous_db_version
   * @returns {string} Resource name string.
   */
  autonomousDbVersionPath(
    project: string,
    location: string,
    autonomousDbVersion: string
  ) {
    return this.pathTemplates.autonomousDbVersionPathTemplate.render({
      project: project,
      location: location,
      autonomous_db_version: autonomousDbVersion,
    });
  }

  /**
   * Parse the project from AutonomousDbVersion resource.
   *
   * @param {string} autonomousDbVersionName
   *   A fully-qualified path representing AutonomousDbVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAutonomousDbVersionName(autonomousDbVersionName: string) {
    return this.pathTemplates.autonomousDbVersionPathTemplate.match(
      autonomousDbVersionName
    ).project;
  }

  /**
   * Parse the location from AutonomousDbVersion resource.
   *
   * @param {string} autonomousDbVersionName
   *   A fully-qualified path representing AutonomousDbVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAutonomousDbVersionName(autonomousDbVersionName: string) {
    return this.pathTemplates.autonomousDbVersionPathTemplate.match(
      autonomousDbVersionName
    ).location;
  }

  /**
   * Parse the autonomous_db_version from AutonomousDbVersion resource.
   *
   * @param {string} autonomousDbVersionName
   *   A fully-qualified path representing AutonomousDbVersion resource.
   * @returns {string} A string representing the autonomous_db_version.
   */
  matchAutonomousDbVersionFromAutonomousDbVersionName(
    autonomousDbVersionName: string
  ) {
    return this.pathTemplates.autonomousDbVersionPathTemplate.match(
      autonomousDbVersionName
    ).autonomous_db_version;
  }

  /**
   * Return a fully-qualified cloudExadataInfrastructure resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cloud_exadata_infrastructure
   * @returns {string} Resource name string.
   */
  cloudExadataInfrastructurePath(
    project: string,
    location: string,
    cloudExadataInfrastructure: string
  ) {
    return this.pathTemplates.cloudExadataInfrastructurePathTemplate.render({
      project: project,
      location: location,
      cloud_exadata_infrastructure: cloudExadataInfrastructure,
    });
  }

  /**
   * Parse the project from CloudExadataInfrastructure resource.
   *
   * @param {string} cloudExadataInfrastructureName
   *   A fully-qualified path representing CloudExadataInfrastructure resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCloudExadataInfrastructureName(
    cloudExadataInfrastructureName: string
  ) {
    return this.pathTemplates.cloudExadataInfrastructurePathTemplate.match(
      cloudExadataInfrastructureName
    ).project;
  }

  /**
   * Parse the location from CloudExadataInfrastructure resource.
   *
   * @param {string} cloudExadataInfrastructureName
   *   A fully-qualified path representing CloudExadataInfrastructure resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCloudExadataInfrastructureName(
    cloudExadataInfrastructureName: string
  ) {
    return this.pathTemplates.cloudExadataInfrastructurePathTemplate.match(
      cloudExadataInfrastructureName
    ).location;
  }

  /**
   * Parse the cloud_exadata_infrastructure from CloudExadataInfrastructure resource.
   *
   * @param {string} cloudExadataInfrastructureName
   *   A fully-qualified path representing CloudExadataInfrastructure resource.
   * @returns {string} A string representing the cloud_exadata_infrastructure.
   */
  matchCloudExadataInfrastructureFromCloudExadataInfrastructureName(
    cloudExadataInfrastructureName: string
  ) {
    return this.pathTemplates.cloudExadataInfrastructurePathTemplate.match(
      cloudExadataInfrastructureName
    ).cloud_exadata_infrastructure;
  }

  /**
   * Return a fully-qualified cloudVmCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cloud_vm_cluster
   * @returns {string} Resource name string.
   */
  cloudVmClusterPath(
    project: string,
    location: string,
    cloudVmCluster: string
  ) {
    return this.pathTemplates.cloudVmClusterPathTemplate.render({
      project: project,
      location: location,
      cloud_vm_cluster: cloudVmCluster,
    });
  }

  /**
   * Parse the project from CloudVmCluster resource.
   *
   * @param {string} cloudVmClusterName
   *   A fully-qualified path representing CloudVmCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCloudVmClusterName(cloudVmClusterName: string) {
    return this.pathTemplates.cloudVmClusterPathTemplate.match(
      cloudVmClusterName
    ).project;
  }

  /**
   * Parse the location from CloudVmCluster resource.
   *
   * @param {string} cloudVmClusterName
   *   A fully-qualified path representing CloudVmCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCloudVmClusterName(cloudVmClusterName: string) {
    return this.pathTemplates.cloudVmClusterPathTemplate.match(
      cloudVmClusterName
    ).location;
  }

  /**
   * Parse the cloud_vm_cluster from CloudVmCluster resource.
   *
   * @param {string} cloudVmClusterName
   *   A fully-qualified path representing CloudVmCluster resource.
   * @returns {string} A string representing the cloud_vm_cluster.
   */
  matchCloudVmClusterFromCloudVmClusterName(cloudVmClusterName: string) {
    return this.pathTemplates.cloudVmClusterPathTemplate.match(
      cloudVmClusterName
    ).cloud_vm_cluster;
  }

  /**
   * Return a fully-qualified dbNode resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cloud_vm_cluster
   * @param {string} db_node
   * @returns {string} Resource name string.
   */
  dbNodePath(
    project: string,
    location: string,
    cloudVmCluster: string,
    dbNode: string
  ) {
    return this.pathTemplates.dbNodePathTemplate.render({
      project: project,
      location: location,
      cloud_vm_cluster: cloudVmCluster,
      db_node: dbNode,
    });
  }

  /**
   * Parse the project from DbNode resource.
   *
   * @param {string} dbNodeName
   *   A fully-qualified path representing DbNode resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDbNodeName(dbNodeName: string) {
    return this.pathTemplates.dbNodePathTemplate.match(dbNodeName).project;
  }

  /**
   * Parse the location from DbNode resource.
   *
   * @param {string} dbNodeName
   *   A fully-qualified path representing DbNode resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDbNodeName(dbNodeName: string) {
    return this.pathTemplates.dbNodePathTemplate.match(dbNodeName).location;
  }

  /**
   * Parse the cloud_vm_cluster from DbNode resource.
   *
   * @param {string} dbNodeName
   *   A fully-qualified path representing DbNode resource.
   * @returns {string} A string representing the cloud_vm_cluster.
   */
  matchCloudVmClusterFromDbNodeName(dbNodeName: string) {
    return this.pathTemplates.dbNodePathTemplate.match(dbNodeName)
      .cloud_vm_cluster;
  }

  /**
   * Parse the db_node from DbNode resource.
   *
   * @param {string} dbNodeName
   *   A fully-qualified path representing DbNode resource.
   * @returns {string} A string representing the db_node.
   */
  matchDbNodeFromDbNodeName(dbNodeName: string) {
    return this.pathTemplates.dbNodePathTemplate.match(dbNodeName).db_node;
  }

  /**
   * Return a fully-qualified dbServer resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cloud_exadata_infrastructure
   * @param {string} db_server
   * @returns {string} Resource name string.
   */
  dbServerPath(
    project: string,
    location: string,
    cloudExadataInfrastructure: string,
    dbServer: string
  ) {
    return this.pathTemplates.dbServerPathTemplate.render({
      project: project,
      location: location,
      cloud_exadata_infrastructure: cloudExadataInfrastructure,
      db_server: dbServer,
    });
  }

  /**
   * Parse the project from DbServer resource.
   *
   * @param {string} dbServerName
   *   A fully-qualified path representing DbServer resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDbServerName(dbServerName: string) {
    return this.pathTemplates.dbServerPathTemplate.match(dbServerName).project;
  }

  /**
   * Parse the location from DbServer resource.
   *
   * @param {string} dbServerName
   *   A fully-qualified path representing DbServer resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDbServerName(dbServerName: string) {
    return this.pathTemplates.dbServerPathTemplate.match(dbServerName).location;
  }

  /**
   * Parse the cloud_exadata_infrastructure from DbServer resource.
   *
   * @param {string} dbServerName
   *   A fully-qualified path representing DbServer resource.
   * @returns {string} A string representing the cloud_exadata_infrastructure.
   */
  matchCloudExadataInfrastructureFromDbServerName(dbServerName: string) {
    return this.pathTemplates.dbServerPathTemplate.match(dbServerName)
      .cloud_exadata_infrastructure;
  }

  /**
   * Parse the db_server from DbServer resource.
   *
   * @param {string} dbServerName
   *   A fully-qualified path representing DbServer resource.
   * @returns {string} A string representing the db_server.
   */
  matchDbServerFromDbServerName(dbServerName: string) {
    return this.pathTemplates.dbServerPathTemplate.match(dbServerName)
      .db_server;
  }

  /**
   * Return a fully-qualified dbSystemShape resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} db_system_shape
   * @returns {string} Resource name string.
   */
  dbSystemShapePath(project: string, location: string, dbSystemShape: string) {
    return this.pathTemplates.dbSystemShapePathTemplate.render({
      project: project,
      location: location,
      db_system_shape: dbSystemShape,
    });
  }

  /**
   * Parse the project from DbSystemShape resource.
   *
   * @param {string} dbSystemShapeName
   *   A fully-qualified path representing DbSystemShape resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDbSystemShapeName(dbSystemShapeName: string) {
    return this.pathTemplates.dbSystemShapePathTemplate.match(dbSystemShapeName)
      .project;
  }

  /**
   * Parse the location from DbSystemShape resource.
   *
   * @param {string} dbSystemShapeName
   *   A fully-qualified path representing DbSystemShape resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDbSystemShapeName(dbSystemShapeName: string) {
    return this.pathTemplates.dbSystemShapePathTemplate.match(dbSystemShapeName)
      .location;
  }

  /**
   * Parse the db_system_shape from DbSystemShape resource.
   *
   * @param {string} dbSystemShapeName
   *   A fully-qualified path representing DbSystemShape resource.
   * @returns {string} A string representing the db_system_shape.
   */
  matchDbSystemShapeFromDbSystemShapeName(dbSystemShapeName: string) {
    return this.pathTemplates.dbSystemShapePathTemplate.match(dbSystemShapeName)
      .db_system_shape;
  }

  /**
   * Return a fully-qualified entitlement resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entitlement
   * @returns {string} Resource name string.
   */
  entitlementPath(project: string, location: string, entitlement: string) {
    return this.pathTemplates.entitlementPathTemplate.render({
      project: project,
      location: location,
      entitlement: entitlement,
    });
  }

  /**
   * Parse the project from Entitlement resource.
   *
   * @param {string} entitlementName
   *   A fully-qualified path representing Entitlement resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntitlementName(entitlementName: string) {
    return this.pathTemplates.entitlementPathTemplate.match(entitlementName)
      .project;
  }

  /**
   * Parse the location from Entitlement resource.
   *
   * @param {string} entitlementName
   *   A fully-qualified path representing Entitlement resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntitlementName(entitlementName: string) {
    return this.pathTemplates.entitlementPathTemplate.match(entitlementName)
      .location;
  }

  /**
   * Parse the entitlement from Entitlement resource.
   *
   * @param {string} entitlementName
   *   A fully-qualified path representing Entitlement resource.
   * @returns {string} A string representing the entitlement.
   */
  matchEntitlementFromEntitlementName(entitlementName: string) {
    return this.pathTemplates.entitlementPathTemplate.match(entitlementName)
      .entitlement;
  }

  /**
   * Return a fully-qualified giVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} gi_version
   * @returns {string} Resource name string.
   */
  giVersionPath(project: string, location: string, giVersion: string) {
    return this.pathTemplates.giVersionPathTemplate.render({
      project: project,
      location: location,
      gi_version: giVersion,
    });
  }

  /**
   * Parse the project from GiVersion resource.
   *
   * @param {string} giVersionName
   *   A fully-qualified path representing GiVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGiVersionName(giVersionName: string) {
    return this.pathTemplates.giVersionPathTemplate.match(giVersionName)
      .project;
  }

  /**
   * Parse the location from GiVersion resource.
   *
   * @param {string} giVersionName
   *   A fully-qualified path representing GiVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGiVersionName(giVersionName: string) {
    return this.pathTemplates.giVersionPathTemplate.match(giVersionName)
      .location;
  }

  /**
   * Parse the gi_version from GiVersion resource.
   *
   * @param {string} giVersionName
   *   A fully-qualified path representing GiVersion resource.
   * @returns {string} A string representing the gi_version.
   */
  matchGiVersionFromGiVersionName(giVersionName: string) {
    return this.pathTemplates.giVersionPathTemplate.match(giVersionName)
      .gi_version;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.oracleDatabaseStub && !this._terminated) {
      return this.oracleDatabaseStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
