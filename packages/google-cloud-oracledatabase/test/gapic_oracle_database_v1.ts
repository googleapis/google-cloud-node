// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it, beforeEach, afterEach} from 'mocha';
import * as oracledatabaseModule from '../src';

import {PassThrough} from 'stream';

import {
  GoogleAuth,
  protobuf,
  LROperation,
  operationsProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.OracleDatabaseClient', () => {
  let googleAuth: GoogleAuth;
  beforeEach(() => {
    googleAuth = {
      getClient: sinon.stub().resolves({
        getRequestHeaders: sinon
          .stub()
          .resolves({Authorization: 'Bearer SOME_TOKEN'}),
      }),
    } as unknown as GoogleAuth;
  });
  afterEach(() => {
    sinon.restore();
  });
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'oracledatabase.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          oracledatabaseModule.v1.OracleDatabaseClient.servicePath;
        assert.strictEqual(servicePath, 'oracledatabase.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          oracledatabaseModule.v1.OracleDatabaseClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'oracledatabase.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'oracledatabase.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'oracledatabase.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new oracledatabaseModule.v1.OracleDatabaseClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'oracledatabase.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new oracledatabaseModule.v1.OracleDatabaseClient({
            universeDomain: 'configured.example.com',
          });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'oracledatabase.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new oracledatabaseModule.v1.OracleDatabaseClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = oracledatabaseModule.v1.OracleDatabaseClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      assert.strictEqual(client.oracleDatabaseStub, undefined);
      await client.initialize();
      assert(client.oracleDatabaseStub);
    });

    it('has close method for the initialized client', done => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.oracleDatabaseStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      assert.strictEqual(client.oracleDatabaseStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getCloudExadataInfrastructure', () => {
    it('invokes getCloudExadataInfrastructure without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
      );
      client.innerApiCalls.getCloudExadataInfrastructure =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getCloudExadataInfrastructure(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCloudExadataInfrastructure without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
      );
      client.innerApiCalls.getCloudExadataInfrastructure =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCloudExadataInfrastructure(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCloudExadataInfrastructure with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCloudExadataInfrastructure = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getCloudExadataInfrastructure(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCloudExadataInfrastructure with closed client', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getCloudExadataInfrastructure(request),
        expectedError
      );
    });
  });

  describe('getCloudVmCluster', () => {
    it('invokes getCloudVmCluster without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
      );
      client.innerApiCalls.getCloudVmCluster = stubSimpleCall(expectedResponse);
      const [response] = await client.getCloudVmCluster(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCloudVmCluster without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
      );
      client.innerApiCalls.getCloudVmCluster =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCloudVmCluster(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.oracledatabase.v1.ICloudVmCluster | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCloudVmCluster with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCloudVmCluster = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCloudVmCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCloudVmCluster with closed client', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCloudVmCluster(request), expectedError);
    });
  });

  describe('getAutonomousDatabase', () => {
    it('invokes getAutonomousDatabase without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
      );
      client.innerApiCalls.getAutonomousDatabase =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getAutonomousDatabase(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAutonomousDatabase without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
      );
      client.innerApiCalls.getAutonomousDatabase =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAutonomousDatabase(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.oracledatabase.v1.IAutonomousDatabase | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAutonomousDatabase with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAutonomousDatabase = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getAutonomousDatabase(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAutonomousDatabase with closed client', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getAutonomousDatabase(request),
        expectedError
      );
    });
  });

  describe('generateAutonomousDatabaseWallet', () => {
    it('invokes generateAutonomousDatabaseWallet without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletResponse()
      );
      client.innerApiCalls.generateAutonomousDatabaseWallet =
        stubSimpleCall(expectedResponse);
      const [response] = await client.generateAutonomousDatabaseWallet(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAutonomousDatabaseWallet without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletResponse()
      );
      client.innerApiCalls.generateAutonomousDatabaseWallet =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.generateAutonomousDatabaseWallet(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAutonomousDatabaseWallet with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.generateAutonomousDatabaseWallet = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.generateAutonomousDatabaseWallet(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAutonomousDatabaseWallet with closed client', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.generateAutonomousDatabaseWallet(request),
        expectedError
      );
    });
  });

  describe('createCloudExadataInfrastructure', () => {
    it('invokes createCloudExadataInfrastructure without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCloudExadataInfrastructure =
        stubLongRunningCall(expectedResponse);
      const [operation] =
        await client.createCloudExadataInfrastructure(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCloudExadataInfrastructure without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCloudExadataInfrastructure =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCloudExadataInfrastructure(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
              protos.google.cloud.oracledatabase.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCloudExadataInfrastructure with call error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCloudExadataInfrastructure =
        stubLongRunningCall(undefined, expectedError);
      await assert.rejects(
        client.createCloudExadataInfrastructure(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCloudExadataInfrastructure with LRO error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCloudExadataInfrastructure =
        stubLongRunningCall(undefined, undefined, expectedError);
      const [operation] =
        await client.createCloudExadataInfrastructure(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateCloudExadataInfrastructureProgress without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateCloudExadataInfrastructureProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateCloudExadataInfrastructureProgress with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateCloudExadataInfrastructureProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteCloudExadataInfrastructure', () => {
    it('invokes deleteCloudExadataInfrastructure without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteCloudExadataInfrastructure =
        stubLongRunningCall(expectedResponse);
      const [operation] =
        await client.deleteCloudExadataInfrastructure(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCloudExadataInfrastructure without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteCloudExadataInfrastructure =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteCloudExadataInfrastructure(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.oracledatabase.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCloudExadataInfrastructure with call error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCloudExadataInfrastructure =
        stubLongRunningCall(undefined, expectedError);
      await assert.rejects(
        client.deleteCloudExadataInfrastructure(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCloudExadataInfrastructure with LRO error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCloudExadataInfrastructure =
        stubLongRunningCall(undefined, undefined, expectedError);
      const [operation] =
        await client.deleteCloudExadataInfrastructure(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteCloudExadataInfrastructureProgress without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteCloudExadataInfrastructureProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteCloudExadataInfrastructureProgress with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteCloudExadataInfrastructureProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createCloudVmCluster', () => {
    it('invokes createCloudVmCluster without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCloudVmCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createCloudVmCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCloudVmCluster without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCloudVmCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCloudVmCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
              protos.google.cloud.oracledatabase.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCloudVmCluster with call error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCloudVmCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createCloudVmCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCloudVmCluster with LRO error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCloudVmCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createCloudVmCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateCloudVmClusterProgress without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateCloudVmClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateCloudVmClusterProgress with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateCloudVmClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteCloudVmCluster', () => {
    it('invokes deleteCloudVmCluster without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteCloudVmCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteCloudVmCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCloudVmCluster without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteCloudVmCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteCloudVmCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.oracledatabase.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCloudVmCluster with call error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCloudVmCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteCloudVmCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCloudVmCluster with LRO error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCloudVmCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteCloudVmCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteCloudVmCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCloudVmCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteCloudVmClusterProgress without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteCloudVmClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteCloudVmClusterProgress with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteCloudVmClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createAutonomousDatabase', () => {
    it('invokes createAutonomousDatabase without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAutonomousDatabase =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAutonomousDatabase(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAutonomousDatabase without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAutonomousDatabase =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAutonomousDatabase(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
              protos.google.cloud.oracledatabase.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAutonomousDatabase with call error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAutonomousDatabase = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createAutonomousDatabase(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAutonomousDatabase with LRO error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAutonomousDatabase = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAutonomousDatabase(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateAutonomousDatabaseProgress without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateAutonomousDatabaseProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAutonomousDatabaseProgress with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAutonomousDatabaseProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteAutonomousDatabase', () => {
    it('invokes deleteAutonomousDatabase without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAutonomousDatabase =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteAutonomousDatabase(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAutonomousDatabase without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAutonomousDatabase =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAutonomousDatabase(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.oracledatabase.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAutonomousDatabase with call error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAutonomousDatabase = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteAutonomousDatabase(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAutonomousDatabase with LRO error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAutonomousDatabase = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteAutonomousDatabase(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteAutonomousDatabaseProgress without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteAutonomousDatabaseProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteAutonomousDatabaseProgress with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteAutonomousDatabaseProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('restoreAutonomousDatabase', () => {
    it('invokes restoreAutonomousDatabase without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.restoreAutonomousDatabase =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.restoreAutonomousDatabase(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restoreAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreAutonomousDatabase without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.restoreAutonomousDatabase =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.restoreAutonomousDatabase(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
              protos.google.cloud.oracledatabase.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restoreAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreAutonomousDatabase with call error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restoreAutonomousDatabase = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.restoreAutonomousDatabase(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.restoreAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restoreAutonomousDatabase with LRO error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restoreAutonomousDatabase = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.restoreAutonomousDatabase(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.restoreAutonomousDatabase as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restoreAutonomousDatabase as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRestoreAutonomousDatabaseProgress without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkRestoreAutonomousDatabaseProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRestoreAutonomousDatabaseProgress with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkRestoreAutonomousDatabaseProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listCloudExadataInfrastructures', () => {
    it('invokes listCloudExadataInfrastructures without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
      ];
      client.innerApiCalls.listCloudExadataInfrastructures =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listCloudExadataInfrastructures(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCloudExadataInfrastructures as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCloudExadataInfrastructures as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCloudExadataInfrastructures without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
      ];
      client.innerApiCalls.listCloudExadataInfrastructures =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCloudExadataInfrastructures(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCloudExadataInfrastructures as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCloudExadataInfrastructures as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCloudExadataInfrastructures with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCloudExadataInfrastructures = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listCloudExadataInfrastructures(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listCloudExadataInfrastructures as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCloudExadataInfrastructures as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCloudExadataInfrastructuresStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
      ];
      client.descriptors.page.listCloudExadataInfrastructures.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCloudExadataInfrastructuresStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listCloudExadataInfrastructures
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listCloudExadataInfrastructures,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listCloudExadataInfrastructures
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCloudExadataInfrastructuresStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCloudExadataInfrastructures.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCloudExadataInfrastructuresStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listCloudExadataInfrastructures
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listCloudExadataInfrastructures,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listCloudExadataInfrastructures
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCloudExadataInfrastructures without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
        ),
      ];
      client.descriptors.page.listCloudExadataInfrastructures.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[] =
        [];
      const iterable = client.listCloudExadataInfrastructuresAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCloudExadataInfrastructures
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listCloudExadataInfrastructures
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCloudExadataInfrastructures with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCloudExadataInfrastructures.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCloudExadataInfrastructuresAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCloudExadataInfrastructures
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listCloudExadataInfrastructures
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listCloudVmClusters', () => {
    it('invokes listCloudVmClusters without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
      ];
      client.innerApiCalls.listCloudVmClusters =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listCloudVmClusters(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCloudVmClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCloudVmClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCloudVmClusters without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
      ];
      client.innerApiCalls.listCloudVmClusters =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCloudVmClusters(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.oracledatabase.v1.ICloudVmCluster[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCloudVmClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCloudVmClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCloudVmClusters with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCloudVmClusters = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCloudVmClusters(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listCloudVmClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCloudVmClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCloudVmClustersStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
      ];
      client.descriptors.page.listCloudVmClusters.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCloudVmClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.CloudVmCluster[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.CloudVmCluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCloudVmClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCloudVmClusters, request)
      );
      assert(
        (client.descriptors.page.listCloudVmClusters.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listCloudVmClustersStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCloudVmClusters.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCloudVmClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.CloudVmCluster[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.CloudVmCluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCloudVmClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCloudVmClusters, request)
      );
      assert(
        (client.descriptors.page.listCloudVmClusters.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listCloudVmClusters without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
        ),
      ];
      client.descriptors.page.listCloudVmClusters.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.ICloudVmCluster[] =
        [];
      const iterable = client.listCloudVmClustersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCloudVmClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCloudVmClusters.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listCloudVmClusters with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCloudVmClusters.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCloudVmClustersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.ICloudVmCluster[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCloudVmClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCloudVmClusters.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listEntitlements', () => {
    it('invokes listEntitlements without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
      ];
      client.innerApiCalls.listEntitlements = stubSimpleCall(expectedResponse);
      const [response] = await client.listEntitlements(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntitlements without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
      ];
      client.innerApiCalls.listEntitlements =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEntitlements(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.oracledatabase.v1.IEntitlement[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntitlements with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEntitlements = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listEntitlements(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntitlements as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntitlementsStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
      ];
      client.descriptors.page.listEntitlements.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listEntitlementsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.Entitlement[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.Entitlement) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listEntitlements.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntitlements, request)
      );
      assert(
        (client.descriptors.page.listEntitlements.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listEntitlementsStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntitlements.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listEntitlementsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.Entitlement[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.Entitlement) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listEntitlements.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntitlements, request)
      );
      assert(
        (client.descriptors.page.listEntitlements.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listEntitlements without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.Entitlement()
        ),
      ];
      client.descriptors.page.listEntitlements.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.IEntitlement[] =
        [];
      const iterable = client.listEntitlementsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntitlements.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listEntitlements with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListEntitlementsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntitlements.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listEntitlementsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.IEntitlement[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntitlements.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listDbServers', () => {
    it('invokes listDbServers without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbServersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
      ];
      client.innerApiCalls.listDbServers = stubSimpleCall(expectedResponse);
      const [response] = await client.listDbServers(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDbServers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDbServers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDbServers without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbServersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
      ];
      client.innerApiCalls.listDbServers =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDbServers(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.oracledatabase.v1.IDbServer[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDbServers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDbServers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDbServers with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbServersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDbServers = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listDbServers(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listDbServers as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDbServers as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDbServersStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbServersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
      ];
      client.descriptors.page.listDbServers.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDbServersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.DbServer[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.DbServer) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listDbServers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDbServers, request)
      );
      assert(
        (client.descriptors.page.listDbServers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listDbServersStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbServersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDbServers.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDbServersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.DbServer[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.DbServer) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listDbServers.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDbServers, request)
      );
      assert(
        (client.descriptors.page.listDbServers.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listDbServers without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbServersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbServer()
        ),
      ];
      client.descriptors.page.listDbServers.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.IDbServer[] = [];
      const iterable = client.listDbServersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDbServers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDbServers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listDbServers with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbServersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDbServers.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDbServersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.IDbServer[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDbServers.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDbServers.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listDbNodes', () => {
    it('invokes listDbNodes without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbNodesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
      ];
      client.innerApiCalls.listDbNodes = stubSimpleCall(expectedResponse);
      const [response] = await client.listDbNodes(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDbNodes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDbNodes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDbNodes without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbNodesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
      ];
      client.innerApiCalls.listDbNodes =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDbNodes(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.oracledatabase.v1.IDbNode[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDbNodes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDbNodes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDbNodes with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbNodesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDbNodes = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listDbNodes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listDbNodes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDbNodes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDbNodesStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbNodesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
      ];
      client.descriptors.page.listDbNodes.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDbNodesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.DbNode[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.DbNode) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listDbNodes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDbNodes, request)
      );
      assert(
        (client.descriptors.page.listDbNodes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listDbNodesStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbNodesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDbNodes.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listDbNodesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.DbNode[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.DbNode) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listDbNodes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDbNodes, request)
      );
      assert(
        (client.descriptors.page.listDbNodes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listDbNodes without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbNodesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbNode()
        ),
      ];
      client.descriptors.page.listDbNodes.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.IDbNode[] = [];
      const iterable = client.listDbNodesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listDbNodes.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDbNodes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listDbNodes with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbNodesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDbNodes.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listDbNodesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.IDbNode[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listDbNodes.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDbNodes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listGiVersions', () => {
    it('invokes listGiVersions without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListGiVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
      ];
      client.innerApiCalls.listGiVersions = stubSimpleCall(expectedResponse);
      const [response] = await client.listGiVersions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGiVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGiVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGiVersions without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListGiVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
      ];
      client.innerApiCalls.listGiVersions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listGiVersions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.oracledatabase.v1.IGiVersion[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGiVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGiVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGiVersions with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListGiVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listGiVersions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listGiVersions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listGiVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGiVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGiVersionsStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListGiVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
      ];
      client.descriptors.page.listGiVersions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listGiVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.GiVersion[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.GiVersion) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listGiVersions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGiVersions, request)
      );
      assert(
        (client.descriptors.page.listGiVersions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listGiVersionsStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListGiVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGiVersions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listGiVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.GiVersion[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.GiVersion) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listGiVersions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGiVersions, request)
      );
      assert(
        (client.descriptors.page.listGiVersions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listGiVersions without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListGiVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.GiVersion()
        ),
      ];
      client.descriptors.page.listGiVersions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.IGiVersion[] = [];
      const iterable = client.listGiVersionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGiVersions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGiVersions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listGiVersions with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListGiVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGiVersions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listGiVersionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.IGiVersion[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGiVersions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGiVersions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listDbSystemShapes', () => {
    it('invokes listDbSystemShapes without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
      ];
      client.innerApiCalls.listDbSystemShapes =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listDbSystemShapes(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDbSystemShapes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDbSystemShapes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDbSystemShapes without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
      ];
      client.innerApiCalls.listDbSystemShapes =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDbSystemShapes(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.oracledatabase.v1.IDbSystemShape[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDbSystemShapes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDbSystemShapes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDbSystemShapes with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDbSystemShapes = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listDbSystemShapes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listDbSystemShapes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDbSystemShapes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDbSystemShapesStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
      ];
      client.descriptors.page.listDbSystemShapes.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDbSystemShapesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.DbSystemShape[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.DbSystemShape) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listDbSystemShapes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDbSystemShapes, request)
      );
      assert(
        (client.descriptors.page.listDbSystemShapes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listDbSystemShapesStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDbSystemShapes.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDbSystemShapesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.DbSystemShape[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.oracledatabase.v1.DbSystemShape) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listDbSystemShapes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDbSystemShapes, request)
      );
      assert(
        (client.descriptors.page.listDbSystemShapes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listDbSystemShapes without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.DbSystemShape()
        ),
      ];
      client.descriptors.page.listDbSystemShapes.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.IDbSystemShape[] =
        [];
      const iterable = client.listDbSystemShapesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDbSystemShapes.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDbSystemShapes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listDbSystemShapes with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDbSystemShapes.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDbSystemShapesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.IDbSystemShape[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDbSystemShapes.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDbSystemShapes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listAutonomousDatabases', () => {
    it('invokes listAutonomousDatabases without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
      ];
      client.innerApiCalls.listAutonomousDatabases =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAutonomousDatabases(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAutonomousDatabases as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDatabases as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDatabases without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
      ];
      client.innerApiCalls.listAutonomousDatabases =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAutonomousDatabases(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAutonomousDatabases as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDatabases as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDatabases with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAutonomousDatabases = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAutonomousDatabases(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAutonomousDatabases as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDatabases as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDatabasesStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
      ];
      client.descriptors.page.listAutonomousDatabases.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAutonomousDatabasesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabase[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.AutonomousDatabase
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAutonomousDatabases
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAutonomousDatabases, request)
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabases
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAutonomousDatabasesStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAutonomousDatabases.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAutonomousDatabasesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabase[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.AutonomousDatabase
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAutonomousDatabases
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAutonomousDatabases, request)
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabases
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAutonomousDatabases without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
        ),
      ];
      client.descriptors.page.listAutonomousDatabases.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[] =
        [];
      const iterable = client.listAutonomousDatabasesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAutonomousDatabases
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabases
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAutonomousDatabases with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAutonomousDatabases.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAutonomousDatabasesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAutonomousDatabases
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabases
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAutonomousDbVersions', () => {
    it('invokes listAutonomousDbVersions without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
      ];
      client.innerApiCalls.listAutonomousDbVersions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAutonomousDbVersions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAutonomousDbVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDbVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDbVersions without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
      ];
      client.innerApiCalls.listAutonomousDbVersions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAutonomousDbVersions(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAutonomousDbVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDbVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDbVersions with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAutonomousDbVersions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAutonomousDbVersions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAutonomousDbVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDbVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDbVersionsStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
      ];
      client.descriptors.page.listAutonomousDbVersions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAutonomousDbVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.AutonomousDbVersion[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.AutonomousDbVersion
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAutonomousDbVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAutonomousDbVersions, request)
      );
      assert(
        (
          client.descriptors.page.listAutonomousDbVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAutonomousDbVersionsStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAutonomousDbVersions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAutonomousDbVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.AutonomousDbVersion[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.AutonomousDbVersion
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAutonomousDbVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAutonomousDbVersions, request)
      );
      assert(
        (
          client.descriptors.page.listAutonomousDbVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAutonomousDbVersions without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()
        ),
      ];
      client.descriptors.page.listAutonomousDbVersions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[] =
        [];
      const iterable = client.listAutonomousDbVersionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAutonomousDbVersions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAutonomousDbVersions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAutonomousDbVersions with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAutonomousDbVersions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAutonomousDbVersionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAutonomousDbVersions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAutonomousDbVersions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAutonomousDatabaseCharacterSets', () => {
    it('invokes listAutonomousDatabaseCharacterSets without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
      ];
      client.innerApiCalls.listAutonomousDatabaseCharacterSets =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.listAutonomousDatabaseCharacterSets(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDatabaseCharacterSets without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
      ];
      client.innerApiCalls.listAutonomousDatabaseCharacterSets =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAutonomousDatabaseCharacterSets(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDatabaseCharacterSets with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAutonomousDatabaseCharacterSets = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAutonomousDatabaseCharacterSets(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDatabaseCharacterSetsStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
      ];
      client.descriptors.page.listAutonomousDatabaseCharacterSets.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAutonomousDatabaseCharacterSetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseCharacterSets
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listAutonomousDatabaseCharacterSets,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseCharacterSets
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAutonomousDatabaseCharacterSetsStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAutonomousDatabaseCharacterSets.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAutonomousDatabaseCharacterSetsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseCharacterSets
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listAutonomousDatabaseCharacterSets,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseCharacterSets
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAutonomousDatabaseCharacterSets without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()
        ),
      ];
      client.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[] =
        [];
      const iterable = client.listAutonomousDatabaseCharacterSetsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAutonomousDatabaseCharacterSets
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseCharacterSets
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAutonomousDatabaseCharacterSets with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAutonomousDatabaseCharacterSetsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAutonomousDatabaseCharacterSets
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseCharacterSets
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAutonomousDatabaseBackups', () => {
    it('invokes listAutonomousDatabaseBackups without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
      ];
      client.innerApiCalls.listAutonomousDatabaseBackups =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAutonomousDatabaseBackups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDatabaseBackups without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
      ];
      client.innerApiCalls.listAutonomousDatabaseBackups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAutonomousDatabaseBackups(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDatabaseBackups with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAutonomousDatabaseBackups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAutonomousDatabaseBackups(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAutonomousDatabaseBackupsStream without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
      ];
      client.descriptors.page.listAutonomousDatabaseBackups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAutonomousDatabaseBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseBackups
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listAutonomousDatabaseBackups,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseBackups
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAutonomousDatabaseBackupsStream with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAutonomousDatabaseBackups.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAutonomousDatabaseBackupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseBackups
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listAutonomousDatabaseBackups,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseBackups
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAutonomousDatabaseBackups without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
        generateSampleMessage(
          new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()
        ),
      ];
      client.descriptors.page.listAutonomousDatabaseBackups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[] =
        [];
      const iterable = client.listAutonomousDatabaseBackupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAutonomousDatabaseBackups
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseBackups
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAutonomousDatabaseBackups with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAutonomousDatabaseBackups.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAutonomousDatabaseBackupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAutonomousDatabaseBackups
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAutonomousDatabaseBackups
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        auth: googleAuth,
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('autonomousDatabase', () => {
      const fakePath = '/rendered/path/autonomousDatabase';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        autonomous_database: 'autonomousDatabaseValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.autonomousDatabasePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.autonomousDatabasePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('autonomousDatabasePath', () => {
        const result = client.autonomousDatabasePath(
          'projectValue',
          'locationValue',
          'autonomousDatabaseValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.autonomousDatabasePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAutonomousDatabaseName', () => {
        const result = client.matchProjectFromAutonomousDatabaseName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.autonomousDatabasePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAutonomousDatabaseName', () => {
        const result = client.matchLocationFromAutonomousDatabaseName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.autonomousDatabasePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAutonomousDatabaseFromAutonomousDatabaseName', () => {
        const result =
          client.matchAutonomousDatabaseFromAutonomousDatabaseName(fakePath);
        assert.strictEqual(result, 'autonomousDatabaseValue');
        assert(
          (
            client.pathTemplates.autonomousDatabasePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('autonomousDatabaseBackup', () => {
      const fakePath = '/rendered/path/autonomousDatabaseBackup';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        autonomous_database_backup: 'autonomousDatabaseBackupValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.autonomousDatabaseBackupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.autonomousDatabaseBackupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('autonomousDatabaseBackupPath', () => {
        const result = client.autonomousDatabaseBackupPath(
          'projectValue',
          'locationValue',
          'autonomousDatabaseBackupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.autonomousDatabaseBackupPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAutonomousDatabaseBackupName', () => {
        const result =
          client.matchProjectFromAutonomousDatabaseBackupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.autonomousDatabaseBackupPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAutonomousDatabaseBackupName', () => {
        const result =
          client.matchLocationFromAutonomousDatabaseBackupName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.autonomousDatabaseBackupPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAutonomousDatabaseBackupFromAutonomousDatabaseBackupName', () => {
        const result =
          client.matchAutonomousDatabaseBackupFromAutonomousDatabaseBackupName(
            fakePath
          );
        assert.strictEqual(result, 'autonomousDatabaseBackupValue');
        assert(
          (
            client.pathTemplates.autonomousDatabaseBackupPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('autonomousDatabaseCharacterSet', () => {
      const fakePath = '/rendered/path/autonomousDatabaseCharacterSet';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        autonomous_database_character_set:
          'autonomousDatabaseCharacterSetValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('autonomousDatabaseCharacterSetPath', () => {
        const result = client.autonomousDatabaseCharacterSetPath(
          'projectValue',
          'locationValue',
          'autonomousDatabaseCharacterSetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAutonomousDatabaseCharacterSetName', () => {
        const result =
          client.matchProjectFromAutonomousDatabaseCharacterSetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAutonomousDatabaseCharacterSetName', () => {
        const result =
          client.matchLocationFromAutonomousDatabaseCharacterSetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAutonomousDatabaseCharacterSetFromAutonomousDatabaseCharacterSetName', () => {
        const result =
          client.matchAutonomousDatabaseCharacterSetFromAutonomousDatabaseCharacterSetName(
            fakePath
          );
        assert.strictEqual(result, 'autonomousDatabaseCharacterSetValue');
        assert(
          (
            client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('autonomousDbVersion', () => {
      const fakePath = '/rendered/path/autonomousDbVersion';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        autonomous_db_version: 'autonomousDbVersionValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.autonomousDbVersionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.autonomousDbVersionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('autonomousDbVersionPath', () => {
        const result = client.autonomousDbVersionPath(
          'projectValue',
          'locationValue',
          'autonomousDbVersionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.autonomousDbVersionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAutonomousDbVersionName', () => {
        const result = client.matchProjectFromAutonomousDbVersionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.autonomousDbVersionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAutonomousDbVersionName', () => {
        const result =
          client.matchLocationFromAutonomousDbVersionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.autonomousDbVersionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAutonomousDbVersionFromAutonomousDbVersionName', () => {
        const result =
          client.matchAutonomousDbVersionFromAutonomousDbVersionName(fakePath);
        assert.strictEqual(result, 'autonomousDbVersionValue');
        assert(
          (
            client.pathTemplates.autonomousDbVersionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('cloudExadataInfrastructure', () => {
      const fakePath = '/rendered/path/cloudExadataInfrastructure';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        cloud_exadata_infrastructure: 'cloudExadataInfrastructureValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.cloudExadataInfrastructurePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cloudExadataInfrastructurePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cloudExadataInfrastructurePath', () => {
        const result = client.cloudExadataInfrastructurePath(
          'projectValue',
          'locationValue',
          'cloudExadataInfrastructureValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.cloudExadataInfrastructurePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCloudExadataInfrastructureName', () => {
        const result =
          client.matchProjectFromCloudExadataInfrastructureName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.cloudExadataInfrastructurePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCloudExadataInfrastructureName', () => {
        const result =
          client.matchLocationFromCloudExadataInfrastructureName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.cloudExadataInfrastructurePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCloudExadataInfrastructureFromCloudExadataInfrastructureName', () => {
        const result =
          client.matchCloudExadataInfrastructureFromCloudExadataInfrastructureName(
            fakePath
          );
        assert.strictEqual(result, 'cloudExadataInfrastructureValue');
        assert(
          (
            client.pathTemplates.cloudExadataInfrastructurePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('cloudVmCluster', () => {
      const fakePath = '/rendered/path/cloudVmCluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        cloud_vm_cluster: 'cloudVmClusterValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.cloudVmClusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.cloudVmClusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('cloudVmClusterPath', () => {
        const result = client.cloudVmClusterPath(
          'projectValue',
          'locationValue',
          'cloudVmClusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.cloudVmClusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCloudVmClusterName', () => {
        const result = client.matchProjectFromCloudVmClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.cloudVmClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCloudVmClusterName', () => {
        const result = client.matchLocationFromCloudVmClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.cloudVmClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCloudVmClusterFromCloudVmClusterName', () => {
        const result =
          client.matchCloudVmClusterFromCloudVmClusterName(fakePath);
        assert.strictEqual(result, 'cloudVmClusterValue');
        assert(
          (client.pathTemplates.cloudVmClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dbNode', () => {
      const fakePath = '/rendered/path/dbNode';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        cloud_vm_cluster: 'cloudVmClusterValue',
        db_node: 'dbNodeValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dbNodePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dbNodePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dbNodePath', () => {
        const result = client.dbNodePath(
          'projectValue',
          'locationValue',
          'cloudVmClusterValue',
          'dbNodeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dbNodePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDbNodeName', () => {
        const result = client.matchProjectFromDbNodeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dbNodePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDbNodeName', () => {
        const result = client.matchLocationFromDbNodeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dbNodePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCloudVmClusterFromDbNodeName', () => {
        const result = client.matchCloudVmClusterFromDbNodeName(fakePath);
        assert.strictEqual(result, 'cloudVmClusterValue');
        assert(
          (client.pathTemplates.dbNodePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDbNodeFromDbNodeName', () => {
        const result = client.matchDbNodeFromDbNodeName(fakePath);
        assert.strictEqual(result, 'dbNodeValue');
        assert(
          (client.pathTemplates.dbNodePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dbServer', () => {
      const fakePath = '/rendered/path/dbServer';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        cloud_exadata_infrastructure: 'cloudExadataInfrastructureValue',
        db_server: 'dbServerValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dbServerPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dbServerPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dbServerPath', () => {
        const result = client.dbServerPath(
          'projectValue',
          'locationValue',
          'cloudExadataInfrastructureValue',
          'dbServerValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dbServerPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDbServerName', () => {
        const result = client.matchProjectFromDbServerName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dbServerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDbServerName', () => {
        const result = client.matchLocationFromDbServerName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dbServerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCloudExadataInfrastructureFromDbServerName', () => {
        const result =
          client.matchCloudExadataInfrastructureFromDbServerName(fakePath);
        assert.strictEqual(result, 'cloudExadataInfrastructureValue');
        assert(
          (client.pathTemplates.dbServerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDbServerFromDbServerName', () => {
        const result = client.matchDbServerFromDbServerName(fakePath);
        assert.strictEqual(result, 'dbServerValue');
        assert(
          (client.pathTemplates.dbServerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dbSystemShape', () => {
      const fakePath = '/rendered/path/dbSystemShape';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        db_system_shape: 'dbSystemShapeValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dbSystemShapePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dbSystemShapePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dbSystemShapePath', () => {
        const result = client.dbSystemShapePath(
          'projectValue',
          'locationValue',
          'dbSystemShapeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dbSystemShapePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDbSystemShapeName', () => {
        const result = client.matchProjectFromDbSystemShapeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dbSystemShapePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDbSystemShapeName', () => {
        const result = client.matchLocationFromDbSystemShapeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dbSystemShapePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDbSystemShapeFromDbSystemShapeName', () => {
        const result = client.matchDbSystemShapeFromDbSystemShapeName(fakePath);
        assert.strictEqual(result, 'dbSystemShapeValue');
        assert(
          (client.pathTemplates.dbSystemShapePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entitlement', () => {
      const fakePath = '/rendered/path/entitlement';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        entitlement: 'entitlementValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entitlementPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entitlementPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entitlementPath', () => {
        const result = client.entitlementPath(
          'projectValue',
          'locationValue',
          'entitlementValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entitlementPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntitlementName', () => {
        const result = client.matchProjectFromEntitlementName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entitlementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntitlementName', () => {
        const result = client.matchLocationFromEntitlementName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entitlementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntitlementFromEntitlementName', () => {
        const result = client.matchEntitlementFromEntitlementName(fakePath);
        assert.strictEqual(result, 'entitlementValue');
        assert(
          (client.pathTemplates.entitlementPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('giVersion', () => {
      const fakePath = '/rendered/path/giVersion';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        gi_version: 'giVersionValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.giVersionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.giVersionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('giVersionPath', () => {
        const result = client.giVersionPath(
          'projectValue',
          'locationValue',
          'giVersionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.giVersionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromGiVersionName', () => {
        const result = client.matchProjectFromGiVersionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.giVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromGiVersionName', () => {
        const result = client.matchLocationFromGiVersionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.giVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchGiVersionFromGiVersionName', () => {
        const result = client.matchGiVersionFromGiVersionName(fakePath);
        assert.strictEqual(result, 'giVersionValue');
        assert(
          (client.pathTemplates.giVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new oracledatabaseModule.v1.OracleDatabaseClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
