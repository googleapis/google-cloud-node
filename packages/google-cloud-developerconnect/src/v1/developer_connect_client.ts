// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/developer_connect_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './developer_connect_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service describing handlers for resources
 * @class
 * @memberof v1
 */
export class DeveloperConnectClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  developerConnectStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DeveloperConnectClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DeveloperConnectClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DeveloperConnectClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'developerconnect.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      connectionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/connections/{connection}'
      ),
      gitRepositoryLinkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{git_repository_link}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      secretVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/secrets/{secret}/versions/{secret_version}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listConnections: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'connections'
      ),
      listGitRepositoryLinks: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'gitRepositoryLinks'
      ),
      fetchLinkableGitRepositories: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'linkableGitRepositories'
      ),
      fetchGitRefs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'refNames'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createConnectionResponse = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.Connection'
    ) as gax.protobuf.Type;
    const createConnectionMetadata = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateConnectionResponse = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.Connection'
    ) as gax.protobuf.Type;
    const updateConnectionMetadata = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteConnectionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteConnectionMetadata = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createGitRepositoryLinkResponse = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.GitRepositoryLink'
    ) as gax.protobuf.Type;
    const createGitRepositoryLinkMetadata = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteGitRepositoryLinkResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteGitRepositoryLinkMetadata = protoFilesRoot.lookup(
      '.google.cloud.developerconnect.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createConnectionResponse.decode.bind(createConnectionResponse),
        createConnectionMetadata.decode.bind(createConnectionMetadata)
      ),
      updateConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateConnectionResponse.decode.bind(updateConnectionResponse),
        updateConnectionMetadata.decode.bind(updateConnectionMetadata)
      ),
      deleteConnection: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteConnectionResponse.decode.bind(deleteConnectionResponse),
        deleteConnectionMetadata.decode.bind(deleteConnectionMetadata)
      ),
      createGitRepositoryLink: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createGitRepositoryLinkResponse.decode.bind(
          createGitRepositoryLinkResponse
        ),
        createGitRepositoryLinkMetadata.decode.bind(
          createGitRepositoryLinkMetadata
        )
      ),
      deleteGitRepositoryLink: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteGitRepositoryLinkResponse.decode.bind(
          deleteGitRepositoryLinkResponse
        ),
        deleteGitRepositoryLinkMetadata.decode.bind(
          deleteGitRepositoryLinkMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.developerconnect.v1.DeveloperConnect',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.developerConnectStub) {
      return this.developerConnectStub;
    }

    // Put together the "service stub" for
    // google.cloud.developerconnect.v1.DeveloperConnect.
    this.developerConnectStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.developerconnect.v1.DeveloperConnect'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.developerconnect.v1
            .DeveloperConnect,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const developerConnectStubMethods = [
      'listConnections',
      'getConnection',
      'createConnection',
      'updateConnection',
      'deleteConnection',
      'createGitRepositoryLink',
      'deleteGitRepositoryLink',
      'listGitRepositoryLinks',
      'getGitRepositoryLink',
      'fetchReadWriteToken',
      'fetchReadToken',
      'fetchLinkableGitRepositories',
      'fetchGitHubInstallations',
      'fetchGitRefs',
    ];
    for (const methodName of developerConnectStubMethods) {
      const callPromise = this.developerConnectStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.developerConnectStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'developerconnect.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'developerconnect.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of a single Connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.developerconnect.v1.Connection|Connection}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.get_connection.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_GetConnection_async
   */
  getConnection(
    request?: protos.google.cloud.developerconnect.v1.IGetConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IConnection,
      protos.google.cloud.developerconnect.v1.IGetConnectionRequest | undefined,
      {} | undefined,
    ]
  >;
  getConnection(
    request: protos.google.cloud.developerconnect.v1.IGetConnectionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IConnection,
      | protos.google.cloud.developerconnect.v1.IGetConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnection(
    request: protos.google.cloud.developerconnect.v1.IGetConnectionRequest,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IConnection,
      | protos.google.cloud.developerconnect.v1.IGetConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnection(
    request?: protos.google.cloud.developerconnect.v1.IGetConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.developerconnect.v1.IConnection,
          | protos.google.cloud.developerconnect.v1.IGetConnectionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.developerconnect.v1.IConnection,
      | protos.google.cloud.developerconnect.v1.IGetConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IConnection,
      protos.google.cloud.developerconnect.v1.IGetConnectionRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getConnection(request, options, callback);
  }
  /**
   * Gets details of a single GitRepositoryLink.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.developerconnect.v1.GitRepositoryLink|GitRepositoryLink}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.get_git_repository_link.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_GetGitRepositoryLink_async
   */
  getGitRepositoryLink(
    request?: protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
      (
        | protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getGitRepositoryLink(
    request: protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
      | protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGitRepositoryLink(
    request: protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
      | protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGitRepositoryLink(
    request?: protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
          | protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
      | protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
      (
        | protos.google.cloud.developerconnect.v1.IGetGitRepositoryLinkRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGitRepositoryLink(request, options, callback);
  }
  /**
   * Fetches read/write token of a given gitRepositoryLink.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.gitRepositoryLink
   *   Required. The resource name of the gitRepositoryLink in the format
   *   `projects/* /locations/* /connections/* /gitRepositoryLinks/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.developerconnect.v1.FetchReadWriteTokenResponse|FetchReadWriteTokenResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.fetch_read_write_token.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_FetchReadWriteToken_async
   */
  fetchReadWriteToken(
    request?: protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenResponse,
      (
        | protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  fetchReadWriteToken(
    request: protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenResponse,
      | protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchReadWriteToken(
    request: protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenResponse,
      | protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchReadWriteToken(
    request?: protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenResponse,
          | protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenResponse,
      | protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenResponse,
      (
        | protos.google.cloud.developerconnect.v1.IFetchReadWriteTokenRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        git_repository_link: request.gitRepositoryLink ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchReadWriteToken(request, options, callback);
  }
  /**
   * Fetches read token of a given gitRepositoryLink.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.gitRepositoryLink
   *   Required. The resource name of the gitRepositoryLink in the format
   *   `projects/* /locations/* /connections/* /gitRepositoryLinks/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.developerconnect.v1.FetchReadTokenResponse|FetchReadTokenResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.fetch_read_token.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_FetchReadToken_async
   */
  fetchReadToken(
    request?: protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IFetchReadTokenResponse,
      (
        | protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  fetchReadToken(
    request: protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IFetchReadTokenResponse,
      | protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchReadToken(
    request: protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IFetchReadTokenResponse,
      | protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchReadToken(
    request?: protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.developerconnect.v1.IFetchReadTokenResponse,
          | protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.developerconnect.v1.IFetchReadTokenResponse,
      | protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IFetchReadTokenResponse,
      (
        | protos.google.cloud.developerconnect.v1.IFetchReadTokenRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        git_repository_link: request.gitRepositoryLink ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchReadToken(request, options, callback);
  }
  /**
   * FetchGitHubInstallations returns the list of GitHub Installations that
   * are available to be added to a Connection.
   * For github.com, only installations accessible to the authorizer token
   * are returned. For GitHub Enterprise, all installations are returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.connection
   *   Required. The resource name of the connection in the format
   *   `projects/* /locations/* /connections/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.developerconnect.v1.FetchGitHubInstallationsResponse|FetchGitHubInstallationsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.fetch_git_hub_installations.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_FetchGitHubInstallations_async
   */
  fetchGitHubInstallations(
    request?: protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsResponse,
      (
        | protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  fetchGitHubInstallations(
    request: protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsResponse,
      | protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchGitHubInstallations(
    request: protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest,
    callback: Callback<
      protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsResponse,
      | protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  fetchGitHubInstallations(
    request?: protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsResponse,
          | protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsResponse,
      | protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsResponse,
      (
        | protos.google.cloud.developerconnect.v1.IFetchGitHubInstallationsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        connection: request.connection ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchGitHubInstallations(
      request,
      options,
      callback
    );
  }

  /**
   * Creates a new Connection in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {string} request.connectionId
   *   Required. Id of the requesting object
   *   If auto-generating Id server-side, remove this field and
   *   connection_id from the method_signature of Create RPC
   * @param {google.cloud.developerconnect.v1.Connection} request.connection
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, validate the request, but do not actually post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.create_connection.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_CreateConnection_async
   */
  createConnection(
    request?: protos.google.cloud.developerconnect.v1.ICreateConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createConnection(
    request: protos.google.cloud.developerconnect.v1.ICreateConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConnection(
    request: protos.google.cloud.developerconnect.v1.ICreateConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConnection(
    request?: protos.google.cloud.developerconnect.v1.ICreateConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.developerconnect.v1.IConnection,
            protos.google.cloud.developerconnect.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createConnection(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.create_connection.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_CreateConnection_async
   */
  async checkCreateConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.developerconnect.v1.Connection,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.developerconnect.v1.Connection,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >;
  }
  /**
   * Updates the parameters of a single Connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Field mask is used to specify the fields to be overwritten in the
   *   Connection resource by the update.
   *   The fields specified in the update_mask are relative to the resource, not
   *   the full request. A field will be overwritten if it is in the mask. If the
   *   user does not provide a mask then all fields will be overwritten.
   * @param {google.cloud.developerconnect.v1.Connection} request.connection
   *   Required. The resource being updated
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.allowMissing]
   *   Optional. If set to true, and the connection is not found a new connection
   *   will be created. In this situation `update_mask` is ignored.
   *   The creation will succeed only if the input connection has all the
   *   necessary information (e.g a github_config with both  user_oauth_token and
   *   installation_id properties).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, validate the request, but do not actually post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.update_connection.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_UpdateConnection_async
   */
  updateConnection(
    request?: protos.google.cloud.developerconnect.v1.IUpdateConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateConnection(
    request: protos.google.cloud.developerconnect.v1.IUpdateConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConnection(
    request: protos.google.cloud.developerconnect.v1.IUpdateConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConnection(
    request?: protos.google.cloud.developerconnect.v1.IUpdateConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.developerconnect.v1.IConnection,
            protos.google.cloud.developerconnect.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.developerconnect.v1.IConnection,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'connection.name': request.connection!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateConnection(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.update_connection.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_UpdateConnection_async
   */
  async checkUpdateConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.developerconnect.v1.Connection,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.developerconnect.v1.Connection,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, validate the request, but do not actually post it.
   * @param {string} [request.etag]
   *   Optional. The current etag of the Connection.
   *   If an etag is provided and does not match the current etag of the
   *   Connection, deletion will be blocked and an ABORTED error will be returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.delete_connection.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_DeleteConnection_async
   */
  deleteConnection(
    request?: protos.google.cloud.developerconnect.v1.IDeleteConnectionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteConnection(
    request: protos.google.cloud.developerconnect.v1.IDeleteConnectionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConnection(
    request: protos.google.cloud.developerconnect.v1.IDeleteConnectionRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConnection(
    request?: protos.google.cloud.developerconnect.v1.IDeleteConnectionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.developerconnect.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteConnection(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteConnection()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.delete_connection.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_DeleteConnection_async
   */
  async checkDeleteConnectionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteConnection,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >;
  }
  /**
   * Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
   * Connect will configure the Git Repository to send webhook events to
   * Developer Connect. Connections that use Firebase GitHub Application will
   * have events forwarded to the Firebase service. All other Connections will
   * have events forwarded to Cloud Build.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Value for parent.
   * @param {google.cloud.developerconnect.v1.GitRepositoryLink} request.gitRepositoryLink
   *   Required. The resource being created
   * @param {string} request.gitRepositoryLinkId
   *   Required. The ID to use for the repository, which will become the final
   *   component of the repository's resource name. This ID should be unique in
   *   the connection. Allows alphanumeric characters and any of
   *   -._~%!$&'()*+,;=@.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes since the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, validate the request, but do not actually post it.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.create_git_repository_link.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_CreateGitRepositoryLink_async
   */
  createGitRepositoryLink(
    request?: protos.google.cloud.developerconnect.v1.ICreateGitRepositoryLinkRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createGitRepositoryLink(
    request: protos.google.cloud.developerconnect.v1.ICreateGitRepositoryLinkRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGitRepositoryLink(
    request: protos.google.cloud.developerconnect.v1.ICreateGitRepositoryLinkRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createGitRepositoryLink(
    request?: protos.google.cloud.developerconnect.v1.ICreateGitRepositoryLinkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
            protos.google.cloud.developerconnect.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.developerconnect.v1.IGitRepositoryLink,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createGitRepositoryLink(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createGitRepositoryLink()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.create_git_repository_link.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_CreateGitRepositoryLink_async
   */
  async checkCreateGitRepositoryLinkProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.developerconnect.v1.GitRepositoryLink,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createGitRepositoryLink,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.developerconnect.v1.GitRepositoryLink,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single GitRepositoryLink.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server will know to
   *   ignore the request if it has already been completed. The server will
   *   guarantee that for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, will ignore the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.validateOnly]
   *   Optional. If set, validate the request, but do not actually post it.
   * @param {string} [request.etag]
   *   Optional. This checksum is computed by the server based on the value of
   *   other fields, and may be sent on update and delete requests to ensure the
   *   client has an up-to-date value before proceeding.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.delete_git_repository_link.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_DeleteGitRepositoryLink_async
   */
  deleteGitRepositoryLink(
    request?: protos.google.cloud.developerconnect.v1.IDeleteGitRepositoryLinkRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteGitRepositoryLink(
    request: protos.google.cloud.developerconnect.v1.IDeleteGitRepositoryLinkRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGitRepositoryLink(
    request: protos.google.cloud.developerconnect.v1.IDeleteGitRepositoryLinkRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteGitRepositoryLink(
    request?: protos.google.cloud.developerconnect.v1.IDeleteGitRepositoryLinkRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.developerconnect.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.developerconnect.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteGitRepositoryLink(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteGitRepositoryLink()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.delete_git_repository_link.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_DeleteGitRepositoryLink_async
   */
  async checkDeleteGitRepositoryLinkProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteGitRepositoryLink,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.developerconnect.v1.OperationMetadata
    >;
  }
  /**
   * Lists Connections in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListConnectionsRequest
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.developerconnect.v1.Connection|Connection}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listConnectionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listConnections(
    request?: protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IConnection[],
      protos.google.cloud.developerconnect.v1.IListConnectionsRequest | null,
      protos.google.cloud.developerconnect.v1.IListConnectionsResponse,
    ]
  >;
  listConnections(
    request: protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
      | protos.google.cloud.developerconnect.v1.IListConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.developerconnect.v1.IConnection
    >
  ): void;
  listConnections(
    request: protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
      | protos.google.cloud.developerconnect.v1.IListConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.developerconnect.v1.IConnection
    >
  ): void;
  listConnections(
    request?: protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
          | protos.google.cloud.developerconnect.v1.IListConnectionsResponse
          | null
          | undefined,
          protos.google.cloud.developerconnect.v1.IConnection
        >,
    callback?: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
      | protos.google.cloud.developerconnect.v1.IListConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.developerconnect.v1.IConnection
    >
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IConnection[],
      protos.google.cloud.developerconnect.v1.IListConnectionsRequest | null,
      protos.google.cloud.developerconnect.v1.IListConnectionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listConnections(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListConnectionsRequest
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.developerconnect.v1.Connection|Connection} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listConnectionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listConnectionsStream(
    request?: protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConnections'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConnections.createStream(
      this.innerApiCalls.listConnections as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listConnections`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListConnectionsRequest
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.developerconnect.v1.Connection|Connection}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.list_connections.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_ListConnections_async
   */
  listConnectionsAsync(
    request?: protos.google.cloud.developerconnect.v1.IListConnectionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.developerconnect.v1.IConnection> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConnections'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConnections.asyncIterate(
      this.innerApiCalls['listConnections'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.developerconnect.v1.IConnection>;
  }
  /**
   * Lists GitRepositoryLinks in a given project, location, and connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListGitRepositoryLinksRequest
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.developerconnect.v1.GitRepositoryLink|GitRepositoryLink}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listGitRepositoryLinksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGitRepositoryLinks(
    request?: protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink[],
      protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest | null,
      protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksResponse,
    ]
  >;
  listGitRepositoryLinks(
    request: protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
      | protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksResponse
      | null
      | undefined,
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink
    >
  ): void;
  listGitRepositoryLinks(
    request: protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
    callback: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
      | protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksResponse
      | null
      | undefined,
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink
    >
  ): void;
  listGitRepositoryLinks(
    request?: protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
          | protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksResponse
          | null
          | undefined,
          protos.google.cloud.developerconnect.v1.IGitRepositoryLink
        >,
    callback?: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
      | protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksResponse
      | null
      | undefined,
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink
    >
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.IGitRepositoryLink[],
      protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest | null,
      protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listGitRepositoryLinks(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListGitRepositoryLinksRequest
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.developerconnect.v1.GitRepositoryLink|GitRepositoryLink} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listGitRepositoryLinksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGitRepositoryLinksStream(
    request?: protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGitRepositoryLinks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGitRepositoryLinks.createStream(
      this.innerApiCalls.listGitRepositoryLinks as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listGitRepositoryLinks`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent value for ListGitRepositoryLinksRequest
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, server will pick an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.developerconnect.v1.GitRepositoryLink|GitRepositoryLink}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.list_git_repository_links.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_ListGitRepositoryLinks_async
   */
  listGitRepositoryLinksAsync(
    request?: protos.google.cloud.developerconnect.v1.IListGitRepositoryLinksRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.developerconnect.v1.IGitRepositoryLink> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGitRepositoryLinks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGitRepositoryLinks.asyncIterate(
      this.innerApiCalls['listGitRepositoryLinks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.developerconnect.v1.IGitRepositoryLink>;
  }
  /**
   * FetchLinkableGitRepositories returns a list of git repositories from an SCM
   * that are available to be added to a Connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.connection
   *   Required. The name of the Connection.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {number} [request.pageSize]
   *   Optional. Number of results to return in the list. Defaults to 20.
   * @param {string} [request.pageToken]
   *   Optional. Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.developerconnect.v1.LinkableGitRepository|LinkableGitRepository}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `fetchLinkableGitRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  fetchLinkableGitRepositories(
    request?: protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.ILinkableGitRepository[],
      protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest | null,
      protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesResponse,
    ]
  >;
  fetchLinkableGitRepositories(
    request: protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
      | protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesResponse
      | null
      | undefined,
      protos.google.cloud.developerconnect.v1.ILinkableGitRepository
    >
  ): void;
  fetchLinkableGitRepositories(
    request: protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
    callback: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
      | protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesResponse
      | null
      | undefined,
      protos.google.cloud.developerconnect.v1.ILinkableGitRepository
    >
  ): void;
  fetchLinkableGitRepositories(
    request?: protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
          | protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesResponse
          | null
          | undefined,
          protos.google.cloud.developerconnect.v1.ILinkableGitRepository
        >,
    callback?: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
      | protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesResponse
      | null
      | undefined,
      protos.google.cloud.developerconnect.v1.ILinkableGitRepository
    >
  ): Promise<
    [
      protos.google.cloud.developerconnect.v1.ILinkableGitRepository[],
      protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest | null,
      protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        connection: request.connection ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchLinkableGitRepositories(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.connection
   *   Required. The name of the Connection.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {number} [request.pageSize]
   *   Optional. Number of results to return in the list. Defaults to 20.
   * @param {string} [request.pageToken]
   *   Optional. Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.developerconnect.v1.LinkableGitRepository|LinkableGitRepository} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `fetchLinkableGitRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  fetchLinkableGitRepositoriesStream(
    request?: protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        connection: request.connection ?? '',
      });
    const defaultCallSettings = this._defaults['fetchLinkableGitRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchLinkableGitRepositories.createStream(
      this.innerApiCalls.fetchLinkableGitRepositories as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `fetchLinkableGitRepositories`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.connection
   *   Required. The name of the Connection.
   *   Format: `projects/* /locations/* /connections/*`.
   * @param {number} [request.pageSize]
   *   Optional. Number of results to return in the list. Defaults to 20.
   * @param {string} [request.pageToken]
   *   Optional. Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.developerconnect.v1.LinkableGitRepository|LinkableGitRepository}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.fetch_linkable_git_repositories.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_FetchLinkableGitRepositories_async
   */
  fetchLinkableGitRepositoriesAsync(
    request?: protos.google.cloud.developerconnect.v1.IFetchLinkableGitRepositoriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.developerconnect.v1.ILinkableGitRepository> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        connection: request.connection ?? '',
      });
    const defaultCallSettings = this._defaults['fetchLinkableGitRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchLinkableGitRepositories.asyncIterate(
      this.innerApiCalls['fetchLinkableGitRepositories'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.developerconnect.v1.ILinkableGitRepository>;
  }
  /**
   * Fetch the list of branches or tags for a given repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.gitRepositoryLink
   *   Required. The resource name of GitRepositoryLink in the format
   *   `projects/* /locations/* /connections/* /gitRepositoryLinks/*`.
   * @param {google.cloud.developerconnect.v1.FetchGitRefsRequest.RefType} request.refType
   *   Required. Type of refs to fetch.
   * @param {number} [request.pageSize]
   *   Optional. Number of results to return in the list. Default to 20.
   * @param {string} [request.pageToken]
   *   Optional. Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of string.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `fetchGitRefsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  fetchGitRefs(
    request?: protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
    options?: CallOptions
  ): Promise<
    [
      string[],
      protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest | null,
      protos.google.cloud.developerconnect.v1.IFetchGitRefsResponse,
    ]
  >;
  fetchGitRefs(
    request: protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
      | protos.google.cloud.developerconnect.v1.IFetchGitRefsResponse
      | null
      | undefined,
      string
    >
  ): void;
  fetchGitRefs(
    request: protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
    callback: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
      | protos.google.cloud.developerconnect.v1.IFetchGitRefsResponse
      | null
      | undefined,
      string
    >
  ): void;
  fetchGitRefs(
    request?: protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
          | protos.google.cloud.developerconnect.v1.IFetchGitRefsResponse
          | null
          | undefined,
          string
        >,
    callback?: PaginationCallback<
      protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
      | protos.google.cloud.developerconnect.v1.IFetchGitRefsResponse
      | null
      | undefined,
      string
    >
  ): Promise<
    [
      string[],
      protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest | null,
      protos.google.cloud.developerconnect.v1.IFetchGitRefsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        git_repository_link: request.gitRepositoryLink ?? '',
      });
    this.initialize();
    return this.innerApiCalls.fetchGitRefs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.gitRepositoryLink
   *   Required. The resource name of GitRepositoryLink in the format
   *   `projects/* /locations/* /connections/* /gitRepositoryLinks/*`.
   * @param {google.cloud.developerconnect.v1.FetchGitRefsRequest.RefType} request.refType
   *   Required. Type of refs to fetch.
   * @param {number} [request.pageSize]
   *   Optional. Number of results to return in the list. Default to 20.
   * @param {string} [request.pageToken]
   *   Optional. Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing string on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `fetchGitRefsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  fetchGitRefsStream(
    request?: protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        git_repository_link: request.gitRepositoryLink ?? '',
      });
    const defaultCallSettings = this._defaults['fetchGitRefs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchGitRefs.createStream(
      this.innerApiCalls.fetchGitRefs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `fetchGitRefs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.gitRepositoryLink
   *   Required. The resource name of GitRepositoryLink in the format
   *   `projects/* /locations/* /connections/* /gitRepositoryLinks/*`.
   * @param {google.cloud.developerconnect.v1.FetchGitRefsRequest.RefType} request.refType
   *   Required. Type of refs to fetch.
   * @param {number} [request.pageSize]
   *   Optional. Number of results to return in the list. Default to 20.
   * @param {string} [request.pageToken]
   *   Optional. Page start.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   string. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/developer_connect.fetch_git_refs.js</caption>
   * region_tag:developerconnect_v1_generated_DeveloperConnect_FetchGitRefs_async
   */
  fetchGitRefsAsync(
    request?: protos.google.cloud.developerconnect.v1.IFetchGitRefsRequest,
    options?: CallOptions
  ): AsyncIterable<string> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        git_repository_link: request.gitRepositoryLink ?? '',
      });
    const defaultCallSettings = this._defaults['fetchGitRefs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.fetchGitRefs.asyncIterate(
      this.innerApiCalls['fetchGitRefs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<string>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified connection resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} connection
   * @returns {string} Resource name string.
   */
  connectionPath(project: string, location: string, connection: string) {
    return this.pathTemplates.connectionPathTemplate.render({
      project: project,
      location: location,
      connection: connection,
    });
  }

  /**
   * Parse the project from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName)
      .project;
  }

  /**
   * Parse the location from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName)
      .location;
  }

  /**
   * Parse the connection from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the connection.
   */
  matchConnectionFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName)
      .connection;
  }

  /**
   * Return a fully-qualified gitRepositoryLink resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} connection
   * @param {string} git_repository_link
   * @returns {string} Resource name string.
   */
  gitRepositoryLinkPath(
    project: string,
    location: string,
    connection: string,
    gitRepositoryLink: string
  ) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.render({
      project: project,
      location: location,
      connection: connection,
      git_repository_link: gitRepositoryLink,
    });
  }

  /**
   * Parse the project from GitRepositoryLink resource.
   *
   * @param {string} gitRepositoryLinkName
   *   A fully-qualified path representing GitRepositoryLink resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGitRepositoryLinkName(gitRepositoryLinkName: string) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.match(
      gitRepositoryLinkName
    ).project;
  }

  /**
   * Parse the location from GitRepositoryLink resource.
   *
   * @param {string} gitRepositoryLinkName
   *   A fully-qualified path representing GitRepositoryLink resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGitRepositoryLinkName(gitRepositoryLinkName: string) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.match(
      gitRepositoryLinkName
    ).location;
  }

  /**
   * Parse the connection from GitRepositoryLink resource.
   *
   * @param {string} gitRepositoryLinkName
   *   A fully-qualified path representing GitRepositoryLink resource.
   * @returns {string} A string representing the connection.
   */
  matchConnectionFromGitRepositoryLinkName(gitRepositoryLinkName: string) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.match(
      gitRepositoryLinkName
    ).connection;
  }

  /**
   * Parse the git_repository_link from GitRepositoryLink resource.
   *
   * @param {string} gitRepositoryLinkName
   *   A fully-qualified path representing GitRepositoryLink resource.
   * @returns {string} A string representing the git_repository_link.
   */
  matchGitRepositoryLinkFromGitRepositoryLinkName(
    gitRepositoryLinkName: string
  ) {
    return this.pathTemplates.gitRepositoryLinkPathTemplate.match(
      gitRepositoryLinkName
    ).git_repository_link;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified secretVersion resource name string.
   *
   * @param {string} project
   * @param {string} secret
   * @param {string} secret_version
   * @returns {string} Resource name string.
   */
  secretVersionPath(project: string, secret: string, secretVersion: string) {
    return this.pathTemplates.secretVersionPathTemplate.render({
      project: project,
      secret: secret,
      secret_version: secretVersion,
    });
  }

  /**
   * Parse the project from SecretVersion resource.
   *
   * @param {string} secretVersionName
   *   A fully-qualified path representing SecretVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSecretVersionName(secretVersionName: string) {
    return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName)
      .project;
  }

  /**
   * Parse the secret from SecretVersion resource.
   *
   * @param {string} secretVersionName
   *   A fully-qualified path representing SecretVersion resource.
   * @returns {string} A string representing the secret.
   */
  matchSecretFromSecretVersionName(secretVersionName: string) {
    return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName)
      .secret;
  }

  /**
   * Parse the secret_version from SecretVersion resource.
   *
   * @param {string} secretVersionName
   *   A fully-qualified path representing SecretVersion resource.
   * @returns {string} A string representing the secret_version.
   */
  matchSecretVersionFromSecretVersionName(secretVersionName: string) {
    return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName)
      .secret_version;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.developerConnectStub && !this._terminated) {
      return this.developerConnectStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
