// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
} from 'google-gax';
import {PassThrough} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta2/big_query_write_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './big_query_write_client_config.json';
const version = require('../../../package.json').version;

/**
 *  BigQuery Write API.
 *
 *  The Write API can be used to write data to BigQuery.
 * @class
 * @memberof v1beta2
 */
export class BigQueryWriteClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  bigQueryWriteStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BigQueryWriteClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new BigQueryWriteClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof BigQueryWriteClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      readSessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/sessions/{session}'
      ),
      readStreamPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/sessions/{session}/streams/{stream}'
      ),
      tablePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/datasets/{dataset}/tables/{table}'
      ),
      writeStreamPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/datasets/{dataset}/tables/{table}/streams/{stream}'
      ),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      appendRows: new this._gaxModule.StreamDescriptor(
        this._gaxModule.StreamType.BIDI_STREAMING,
        opts.fallback === 'rest'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.bigquery.storage.v1beta2.BigQueryWrite',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.bigQueryWriteStub) {
      return this.bigQueryWriteStub;
    }

    // Put together the "service stub" for
    // google.cloud.bigquery.storage.v1beta2.BigQueryWrite.
    this.bigQueryWriteStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.bigquery.storage.v1beta2.BigQueryWrite'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.bigquery.storage.v1beta2
            .BigQueryWrite,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const bigQueryWriteStubMethods = [
      'createWriteStream',
      'appendRows',
      'getWriteStream',
      'finalizeWriteStream',
      'batchCommitWriteStreams',
      'flushRows',
    ];
    for (const methodName of bigQueryWriteStubMethods) {
      const callPromise = this.bigQueryWriteStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              if (methodName in this.descriptors.stream) {
                const stream = new PassThrough();
                setImmediate(() => {
                  stream.emit(
                    'error',
                    new this._gaxModule.GoogleError(
                      'The client has already been closed.'
                    )
                  );
                });
                return stream;
              }
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.stream[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.bigQueryWriteStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'bigquerystorage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'bigquerystorage.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/bigquery',
      'https://www.googleapis.com/auth/bigquery.insertdata',
      'https://www.googleapis.com/auth/cloud-platform',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a write stream to the given table.
   * Additionally, every table has a special COMMITTED stream named '_default'
   * to which data can be written. This stream doesn't need to be created using
   * CreateWriteStream. It is a stream that can be used simultaneously by any
   * number of clients. Data written to this stream is considered committed as
   * soon as an acknowledgement is received.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Reference to the table to which the stream belongs, in the format
   *   of `projects/{project}/datasets/{dataset}/tables/{table}`.
   * @param {google.cloud.bigquery.storage.v1beta2.WriteStream} request.writeStream
   *   Required. Stream to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [WriteStream]{@link google.cloud.bigquery.storage.v1beta2.WriteStream}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/big_query_write.create_write_stream.js</caption>
   * region_tag:bigquerystorage_v1beta2_generated_BigQueryWrite_CreateWriteStream_async
   */
  createWriteStream(
    request?: protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createWriteStream(
    request: protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      | protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createWriteStream(
    request: protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      | protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createWriteStream(
    request?: protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
          | protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      | protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.ICreateWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createWriteStream(request, options, callback);
  }
  /**
   * Gets a write stream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the stream to get, in the form of
   *   `projects/{project}/datasets/{dataset}/tables/{table}/streams/{stream}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [WriteStream]{@link google.cloud.bigquery.storage.v1beta2.WriteStream}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/big_query_write.get_write_stream.js</caption>
   * region_tag:bigquerystorage_v1beta2_generated_BigQueryWrite_GetWriteStream_async
   */
  getWriteStream(
    request?: protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getWriteStream(
    request: protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      | protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWriteStream(
    request: protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      | protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWriteStream(
    request?: protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
          | protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      | protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IWriteStream,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.IGetWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getWriteStream(request, options, callback);
  }
  /**
   * Finalize a write stream so that no new data can be appended to the
   * stream. Finalize is not supported on the '_default' stream.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the stream to finalize, in the form of
   *   `projects/{project}/datasets/{dataset}/tables/{table}/streams/{stream}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [FinalizeWriteStreamResponse]{@link google.cloud.bigquery.storage.v1beta2.FinalizeWriteStreamResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/big_query_write.finalize_write_stream.js</caption>
   * region_tag:bigquerystorage_v1beta2_generated_BigQueryWrite_FinalizeWriteStream_async
   */
  finalizeWriteStream(
    request?: protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamResponse,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  finalizeWriteStream(
    request: protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamResponse,
      | protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  finalizeWriteStream(
    request: protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamResponse,
      | protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  finalizeWriteStream(
    request?: protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamResponse,
          | protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamResponse,
      | protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamResponse,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.IFinalizeWriteStreamRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.finalizeWriteStream(request, options, callback);
  }
  /**
   * Atomically commits a group of `PENDING` streams that belong to the same
   * `parent` table.
   * Streams must be finalized before commit and cannot be committed multiple
   * times. Once a stream is committed, data in the stream becomes available
   * for read operations.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent table that all the streams should belong to, in the form of
   *   `projects/{project}/datasets/{dataset}/tables/{table}`.
   * @param {string[]} request.writeStreams
   *   Required. The group of streams that will be committed atomically.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BatchCommitWriteStreamsResponse]{@link google.cloud.bigquery.storage.v1beta2.BatchCommitWriteStreamsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/big_query_write.batch_commit_write_streams.js</caption>
   * region_tag:bigquerystorage_v1beta2_generated_BigQueryWrite_BatchCommitWriteStreams_async
   */
  batchCommitWriteStreams(
    request?: protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  batchCommitWriteStreams(
    request: protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsResponse,
      | protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCommitWriteStreams(
    request: protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsResponse,
      | protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  batchCommitWriteStreams(
    request?: protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsResponse,
          | protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsResponse,
      | protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.IBatchCommitWriteStreamsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchCommitWriteStreams(
      request,
      options,
      callback
    );
  }
  /**
   * Flushes rows to a BUFFERED stream.
   * If users are appending rows to BUFFERED stream, flush operation is
   * required in order for the rows to become available for reading. A
   * Flush operation flushes up to any previously flushed offset in a BUFFERED
   * stream, to the offset specified in the request.
   * Flush is not supported on the _default stream, since it is not BUFFERED.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.writeStream
   *   Required. The stream that is the target of the flush operation.
   * @param {google.protobuf.Int64Value} request.offset
   *   Ending offset of the flush operation. Rows before this offset(including
   *   this offset) will be flushed.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [FlushRowsResponse]{@link google.cloud.bigquery.storage.v1beta2.FlushRowsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/big_query_write.flush_rows.js</caption>
   * region_tag:bigquerystorage_v1beta2_generated_BigQueryWrite_FlushRows_async
   */
  flushRows(
    request?: protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  flushRows(
    request: protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsResponse,
      | protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  flushRows(
    request: protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest,
    callback: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsResponse,
      | protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  flushRows(
    request?: protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsResponse,
          | protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsResponse,
      | protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsResponse,
      (
        | protos.google.cloud.bigquery.storage.v1beta2.IFlushRowsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        write_stream: request.writeStream ?? '',
      });
    this.initialize();
    return this.innerApiCalls.flushRows(request, options, callback);
  }

  /**
   * Appends data to the given stream.
   *
   * If `offset` is specified, the `offset` is checked against the end of
   * stream. The server returns `OUT_OF_RANGE` in `AppendRowsResponse` if an
   * attempt is made to append to an offset beyond the current end of the stream
   * or `ALREADY_EXISTS` if user provids an `offset` that has already been
   * written to. User can retry with adjusted offset within the same RPC
   * stream. If `offset` is not specified, append happens at the end of the
   * stream.
   *
   * The response contains the offset at which the append happened. Responses
   * are received in the same order in which requests are sent. There will be
   * one response for each successful request. If the `offset` is not set in
   * response, it means append didn't happen due to some errors. If one request
   * fails, all the subsequent requests will also fail until a success request
   * is made again.
   *
   * If the stream is of `PENDING` type, data will only be available for read
   * operations after the stream is committed.
   *
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which is both readable and writable. It accepts objects
   *   representing [AppendRowsRequest]{@link google.cloud.bigquery.storage.v1beta2.AppendRowsRequest} for write() method, and
   *   will emit objects representing [AppendRowsResponse]{@link google.cloud.bigquery.storage.v1beta2.AppendRowsResponse} on 'data' event asynchronously.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/big_query_write.append_rows.js</caption>
   * region_tag:bigquerystorage_v1beta2_generated_BigQueryWrite_AppendRows_async
   */
  appendRows(options?: CallOptions): gax.CancellableStream {
    this.initialize();
    return this.innerApiCalls.appendRows(null, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified readSession resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} session
   * @returns {string} Resource name string.
   */
  readSessionPath(project: string, location: string, session: string) {
    return this.pathTemplates.readSessionPathTemplate.render({
      project: project,
      location: location,
      session: session,
    });
  }

  /**
   * Parse the project from ReadSession resource.
   *
   * @param {string} readSessionName
   *   A fully-qualified path representing ReadSession resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReadSessionName(readSessionName: string) {
    return this.pathTemplates.readSessionPathTemplate.match(readSessionName)
      .project;
  }

  /**
   * Parse the location from ReadSession resource.
   *
   * @param {string} readSessionName
   *   A fully-qualified path representing ReadSession resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReadSessionName(readSessionName: string) {
    return this.pathTemplates.readSessionPathTemplate.match(readSessionName)
      .location;
  }

  /**
   * Parse the session from ReadSession resource.
   *
   * @param {string} readSessionName
   *   A fully-qualified path representing ReadSession resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromReadSessionName(readSessionName: string) {
    return this.pathTemplates.readSessionPathTemplate.match(readSessionName)
      .session;
  }

  /**
   * Return a fully-qualified readStream resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} session
   * @param {string} stream
   * @returns {string} Resource name string.
   */
  readStreamPath(
    project: string,
    location: string,
    session: string,
    stream: string
  ) {
    return this.pathTemplates.readStreamPathTemplate.render({
      project: project,
      location: location,
      session: session,
      stream: stream,
    });
  }

  /**
   * Parse the project from ReadStream resource.
   *
   * @param {string} readStreamName
   *   A fully-qualified path representing ReadStream resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReadStreamName(readStreamName: string) {
    return this.pathTemplates.readStreamPathTemplate.match(readStreamName)
      .project;
  }

  /**
   * Parse the location from ReadStream resource.
   *
   * @param {string} readStreamName
   *   A fully-qualified path representing ReadStream resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReadStreamName(readStreamName: string) {
    return this.pathTemplates.readStreamPathTemplate.match(readStreamName)
      .location;
  }

  /**
   * Parse the session from ReadStream resource.
   *
   * @param {string} readStreamName
   *   A fully-qualified path representing ReadStream resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromReadStreamName(readStreamName: string) {
    return this.pathTemplates.readStreamPathTemplate.match(readStreamName)
      .session;
  }

  /**
   * Parse the stream from ReadStream resource.
   *
   * @param {string} readStreamName
   *   A fully-qualified path representing ReadStream resource.
   * @returns {string} A string representing the stream.
   */
  matchStreamFromReadStreamName(readStreamName: string) {
    return this.pathTemplates.readStreamPathTemplate.match(readStreamName)
      .stream;
  }

  /**
   * Return a fully-qualified table resource name string.
   *
   * @param {string} project
   * @param {string} dataset
   * @param {string} table
   * @returns {string} Resource name string.
   */
  tablePath(project: string, dataset: string, table: string) {
    return this.pathTemplates.tablePathTemplate.render({
      project: project,
      dataset: dataset,
      table: table,
    });
  }

  /**
   * Parse the project from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).project;
  }

  /**
   * Parse the dataset from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).dataset;
  }

  /**
   * Parse the table from Table resource.
   *
   * @param {string} tableName
   *   A fully-qualified path representing Table resource.
   * @returns {string} A string representing the table.
   */
  matchTableFromTableName(tableName: string) {
    return this.pathTemplates.tablePathTemplate.match(tableName).table;
  }

  /**
   * Return a fully-qualified writeStream resource name string.
   *
   * @param {string} project
   * @param {string} dataset
   * @param {string} table
   * @param {string} stream
   * @returns {string} Resource name string.
   */
  writeStreamPath(
    project: string,
    dataset: string,
    table: string,
    stream: string
  ) {
    return this.pathTemplates.writeStreamPathTemplate.render({
      project: project,
      dataset: dataset,
      table: table,
      stream: stream,
    });
  }

  /**
   * Parse the project from WriteStream resource.
   *
   * @param {string} writeStreamName
   *   A fully-qualified path representing WriteStream resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWriteStreamName(writeStreamName: string) {
    return this.pathTemplates.writeStreamPathTemplate.match(writeStreamName)
      .project;
  }

  /**
   * Parse the dataset from WriteStream resource.
   *
   * @param {string} writeStreamName
   *   A fully-qualified path representing WriteStream resource.
   * @returns {string} A string representing the dataset.
   */
  matchDatasetFromWriteStreamName(writeStreamName: string) {
    return this.pathTemplates.writeStreamPathTemplate.match(writeStreamName)
      .dataset;
  }

  /**
   * Parse the table from WriteStream resource.
   *
   * @param {string} writeStreamName
   *   A fully-qualified path representing WriteStream resource.
   * @returns {string} A string representing the table.
   */
  matchTableFromWriteStreamName(writeStreamName: string) {
    return this.pathTemplates.writeStreamPathTemplate.match(writeStreamName)
      .table;
  }

  /**
   * Parse the stream from WriteStream resource.
   *
   * @param {string} writeStreamName
   *   A fully-qualified path representing WriteStream resource.
   * @returns {string} A string representing the stream.
   */
  matchStreamFromWriteStreamName(writeStreamName: string) {
    return this.pathTemplates.writeStreamPathTemplate.match(writeStreamName)
      .stream;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.bigQueryWriteStub && !this._terminated) {
      return this.bigQueryWriteStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
