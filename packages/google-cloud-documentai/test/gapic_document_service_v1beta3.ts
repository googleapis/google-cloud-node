// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as documentserviceModule from '../src';

import {
  protobuf,
  LROperation,
  operationsProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta3.DocumentServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        documentserviceModule.v1beta3.DocumentServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        documentserviceModule.v1beta3.DocumentServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = documentserviceModule.v1beta3.DocumentServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.documentServiceStub, undefined);
      await client.initialize();
      assert(client.documentServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.documentServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.documentServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getDatasetSchema', () => {
    it('invokes getDatasetSchema without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.GetDatasetSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.GetDatasetSchemaRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.DatasetSchema()
      );
      client.innerApiCalls.getDatasetSchema = stubSimpleCall(expectedResponse);
      const [response] = await client.getDatasetSchema(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDatasetSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDatasetSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDatasetSchema without error using callback', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.GetDatasetSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.GetDatasetSchemaRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.DatasetSchema()
      );
      client.innerApiCalls.getDatasetSchema =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDatasetSchema(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.documentai.v1beta3.IDatasetSchema | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDatasetSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDatasetSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDatasetSchema with error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.GetDatasetSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.GetDatasetSchemaRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDatasetSchema = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getDatasetSchema(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getDatasetSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDatasetSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDatasetSchema with closed client', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.GetDatasetSchemaRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.GetDatasetSchemaRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getDatasetSchema(request), expectedError);
    });
  });

  describe('updateDatasetSchema', () => {
    it('invokes updateDatasetSchema without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.UpdateDatasetSchemaRequest()
      );
      request.datasetSchema ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.UpdateDatasetSchemaRequest',
        ['datasetSchema', 'name']
      );
      request.datasetSchema.name = defaultValue1;
      const expectedHeaderRequestParams = `dataset_schema.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.DatasetSchema()
      );
      client.innerApiCalls.updateDatasetSchema =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateDatasetSchema(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDatasetSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDatasetSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDatasetSchema without error using callback', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.UpdateDatasetSchemaRequest()
      );
      request.datasetSchema ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.UpdateDatasetSchemaRequest',
        ['datasetSchema', 'name']
      );
      request.datasetSchema.name = defaultValue1;
      const expectedHeaderRequestParams = `dataset_schema.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.DatasetSchema()
      );
      client.innerApiCalls.updateDatasetSchema =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateDatasetSchema(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.documentai.v1beta3.IDatasetSchema | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDatasetSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDatasetSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDatasetSchema with error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.UpdateDatasetSchemaRequest()
      );
      request.datasetSchema ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.UpdateDatasetSchemaRequest',
        ['datasetSchema', 'name']
      );
      request.datasetSchema.name = defaultValue1;
      const expectedHeaderRequestParams = `dataset_schema.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDatasetSchema = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateDatasetSchema(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateDatasetSchema as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDatasetSchema as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDatasetSchema with closed client', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.UpdateDatasetSchemaRequest()
      );
      request.datasetSchema ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.UpdateDatasetSchemaRequest',
        ['datasetSchema', 'name']
      );
      request.datasetSchema.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateDatasetSchema(request), expectedError);
    });
  });

  describe('updateDataset', () => {
    it('invokes updateDataset without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.UpdateDatasetRequest()
      );
      request.dataset ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.UpdateDatasetRequest',
        ['dataset', 'name']
      );
      request.dataset.name = defaultValue1;
      const expectedHeaderRequestParams = `dataset.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateDataset =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateDataset(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataset without error using callback', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.UpdateDatasetRequest()
      );
      request.dataset ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.UpdateDatasetRequest',
        ['dataset', 'name']
      );
      request.dataset.name = defaultValue1;
      const expectedHeaderRequestParams = `dataset.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateDataset =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateDataset(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.documentai.v1beta3.IDataset,
              protos.google.cloud.documentai.v1beta3.IUpdateDatasetOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.documentai.v1beta3.IDataset,
        protos.google.cloud.documentai.v1beta3.IUpdateDatasetOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataset with call error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.UpdateDatasetRequest()
      );
      request.dataset ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.UpdateDatasetRequest',
        ['dataset', 'name']
      );
      request.dataset.name = defaultValue1;
      const expectedHeaderRequestParams = `dataset.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDataset = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateDataset(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataset with LRO error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.documentai.v1beta3.UpdateDatasetRequest()
      );
      request.dataset ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.documentai.v1beta3.UpdateDatasetRequest',
        ['dataset', 'name']
      );
      request.dataset.name = defaultValue1;
      const expectedHeaderRequestParams = `dataset.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDataset = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateDataset(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateDataset as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataset as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateDatasetProgress without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateDatasetProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateDatasetProgress with error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateDatasetProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('dataset', () => {
      const fakePath = '/rendered/path/dataset';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        processor: 'processorValue',
      };
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.datasetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.datasetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('datasetPath', () => {
        const result = client.datasetPath(
          'projectValue',
          'locationValue',
          'processorValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.datasetPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDatasetName', () => {
        const result = client.matchProjectFromDatasetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDatasetName', () => {
        const result = client.matchLocationFromDatasetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProcessorFromDatasetName', () => {
        const result = client.matchProcessorFromDatasetName(fakePath);
        assert.strictEqual(result, 'processorValue');
        assert(
          (client.pathTemplates.datasetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('datasetSchema', () => {
      const fakePath = '/rendered/path/datasetSchema';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        processor: 'processorValue',
      };
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.datasetSchemaPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.datasetSchemaPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('datasetSchemaPath', () => {
        const result = client.datasetSchemaPath(
          'projectValue',
          'locationValue',
          'processorValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.datasetSchemaPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDatasetSchemaName', () => {
        const result = client.matchProjectFromDatasetSchemaName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.datasetSchemaPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDatasetSchemaName', () => {
        const result = client.matchLocationFromDatasetSchemaName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.datasetSchemaPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProcessorFromDatasetSchemaName', () => {
        const result = client.matchProcessorFromDatasetSchemaName(fakePath);
        assert.strictEqual(result, 'processorValue');
        assert(
          (client.pathTemplates.datasetSchemaPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('evaluation', () => {
      const fakePath = '/rendered/path/evaluation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        processor: 'processorValue',
        processor_version: 'processorVersionValue',
        evaluation: 'evaluationValue',
      };
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.evaluationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.evaluationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('evaluationPath', () => {
        const result = client.evaluationPath(
          'projectValue',
          'locationValue',
          'processorValue',
          'processorVersionValue',
          'evaluationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.evaluationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEvaluationName', () => {
        const result = client.matchProjectFromEvaluationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.evaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEvaluationName', () => {
        const result = client.matchLocationFromEvaluationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.evaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProcessorFromEvaluationName', () => {
        const result = client.matchProcessorFromEvaluationName(fakePath);
        assert.strictEqual(result, 'processorValue');
        assert(
          (client.pathTemplates.evaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProcessorVersionFromEvaluationName', () => {
        const result = client.matchProcessorVersionFromEvaluationName(fakePath);
        assert.strictEqual(result, 'processorVersionValue');
        assert(
          (client.pathTemplates.evaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEvaluationFromEvaluationName', () => {
        const result = client.matchEvaluationFromEvaluationName(fakePath);
        assert.strictEqual(result, 'evaluationValue');
        assert(
          (client.pathTemplates.evaluationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('processor', () => {
      const fakePath = '/rendered/path/processor';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        processor: 'processorValue',
      };
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.processorPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.processorPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('processorPath', () => {
        const result = client.processorPath(
          'projectValue',
          'locationValue',
          'processorValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.processorPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProcessorName', () => {
        const result = client.matchProjectFromProcessorName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.processorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProcessorName', () => {
        const result = client.matchLocationFromProcessorName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.processorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProcessorFromProcessorName', () => {
        const result = client.matchProcessorFromProcessorName(fakePath);
        assert.strictEqual(result, 'processorValue');
        assert(
          (client.pathTemplates.processorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('processorType', () => {
      const fakePath = '/rendered/path/processorType';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        processor_type: 'processorTypeValue',
      };
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.processorTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.processorTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('processorTypePath', () => {
        const result = client.processorTypePath(
          'projectValue',
          'locationValue',
          'processorTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.processorTypePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProcessorTypeName', () => {
        const result = client.matchProjectFromProcessorTypeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.processorTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProcessorTypeName', () => {
        const result = client.matchLocationFromProcessorTypeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.processorTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProcessorTypeFromProcessorTypeName', () => {
        const result = client.matchProcessorTypeFromProcessorTypeName(fakePath);
        assert.strictEqual(result, 'processorTypeValue');
        assert(
          (client.pathTemplates.processorTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('processorVersion', () => {
      const fakePath = '/rendered/path/processorVersion';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        processor: 'processorValue',
        processor_version: 'processorVersionValue',
      };
      const client = new documentserviceModule.v1beta3.DocumentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.processorVersionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.processorVersionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('processorVersionPath', () => {
        const result = client.processorVersionPath(
          'projectValue',
          'locationValue',
          'processorValue',
          'processorVersionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.processorVersionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProcessorVersionName', () => {
        const result = client.matchProjectFromProcessorVersionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.processorVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProcessorVersionName', () => {
        const result = client.matchLocationFromProcessorVersionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.processorVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProcessorFromProcessorVersionName', () => {
        const result = client.matchProcessorFromProcessorVersionName(fakePath);
        assert.strictEqual(result, 'processorValue');
        assert(
          (client.pathTemplates.processorVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProcessorVersionFromProcessorVersionName', () => {
        const result =
          client.matchProcessorVersionFromProcessorVersionName(fakePath);
        assert.strictEqual(result, 'processorVersionValue');
        assert(
          (client.pathTemplates.processorVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
