// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(dataset) {
  // [START documentai_v1beta3_generated_DocumentService_ListDocuments_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name of the dataset to be listed.
   *  Format:
   *  projects/{project}/locations/{location}/processors/{processor}/dataset
   */
  // const dataset = 'abc123'
  /**
   *  The maximum number of documents to return. The service may return
   *  fewer than this value.
   *  If unspecified, at most 20 documents will be returned.
   *  The maximum value is 100; values above 100 will be coerced to 100.
   */
  // const pageSize = 1234
  /**
   *  A page token, received from a previous `ListDocuments` call.
   *  Provide this to retrieve the subsequent page.
   *  When paginating, all other parameters provided to `ListDocuments`
   *  must match the call that provided the page token.
   */
  // const pageToken = 'abc123'
  /**
   *  Optional. Query to filter the documents based on
   *  https://google.aip.dev/160.
   *  ## Currently support query strings are:
   *  `SplitType=DATASET_SPLIT_TEST|DATASET_SPLIT_TRAIN|DATASET_SPLIT_UNASSIGNED`
   *  - `LabelingState=DOCUMENT_LABELED|DOCUMENT_UNLABELED|DOCUMENT_AUTO_LABELED`
   *  - `DisplayName=\"file_name.pdf\"`
   *  - `EntityType=abc/def`
   *  - `TagName=\"auto-labeling-running\"|\"sampled\"`
   *  Note:
   *  - Only `AND`, `=` and `!=` are supported.
   *      e.g. `DisplayName=file_name AND EntityType!=abc` IS supported.
   *  - Wildcard `*` is supported only in `DisplayName` filter
   *  - No duplicate filter keys are allowed,
   *      e.g. `EntityType=a AND EntityType=b` is NOT supported.
   *  - String match is case sensitive (for filter `DisplayName` & `EntityType`).
   */
  // const filter = 'abc123'
  /**
   *  Optional. Controls if the ListDocuments request requires a total size
   *  of matched documents. See ListDocumentsResponse.total_size.
   *  Enabling this flag may adversely impact performance.
   *  Defaults to false.
   */
  // const returnTotalSize = true
  /**
   *  Optional. Number of results to skip beginning from the `page_token` if
   *  provided. https://google.aip.dev/158#skipping-results. It must be a
   *  non-negative integer. Negative values wil be rejected. Note that this is
   *  not the number of pages to skip. If this value causes the cursor to move
   *  past the end of results, `ListDocumentsResponse.document_metadata` and
   *  `ListDocumentsResponse.next_page_token` will be empty.
   */
  // const skip = 1234

  // Imports the Documentai library
  const {DocumentServiceClient} = require('@google-cloud/documentai').v1beta3;

  // Instantiates a client
  const documentaiClient = new DocumentServiceClient();

  async function callListDocuments() {
    // Construct request
    const request = {
      dataset,
    };

    // Run request
    const iterable = await documentaiClient.listDocumentsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListDocuments();
  // [END documentai_v1beta3_generated_DocumentService_ListDocuments_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
