// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(challenge, tpmAttestation) {
  // [START confidentialcomputing_v1alpha1_generated_ConfidentialComputing_VerifyAttestation_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the Challenge whose nonce was used to generate the
   *  attestation, in the format `projects/* /locations/* /challenges/*`. The
   *  provided Challenge will be consumed, and cannot be used again.
   */
  // const challenge = 'abc123'
  /**
   *  Optional. Credentials used to populate the "emails" claim in the
   *  claims_token.
   */
  // const gcpCredentials = {}
  /**
   *  Required. The TPM-specific data provided by the attesting platform, used to
   *  populate any of the claims regarding platform state.
   */
  // const tpmAttestation = {}

  // Imports the Confidentialcomputing library
  const {ConfidentialComputingClient} = require('@google-cloud/confidentialcomputing').v1alpha1;

  // Instantiates a client
  const confidentialcomputingClient = new ConfidentialComputingClient();

  async function callVerifyAttestation() {
    // Construct request
    const request = {
      challenge,
      tpmAttestation,
    };

    // Run request
    const response = await confidentialcomputingClient.verifyAttestation(request);
    console.log(response);
  }

  callVerifyAttestation();
  // [END confidentialcomputing_v1alpha1_generated_ConfidentialComputing_VerifyAttestation_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
