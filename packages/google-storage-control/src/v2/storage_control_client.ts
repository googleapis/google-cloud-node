// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v2/storage_control_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './storage_control_client_config.json';
const version = require('../../../package.json').version;

/**
 *  StorageControl service includes selected control plane operations.
 * @class
 * @memberof v2
 */
export class StorageControlClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  storageControlStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of StorageControlClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new StorageControlClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof StorageControlClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'storage.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      bucketPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/buckets/{bucket}'
      ),
      folderPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/buckets/{bucket}/folders/{folder=**}'
      ),
      managedFolderPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/buckets/{bucket}/managedFolders/{managed_folder=**}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      storageLayoutPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/buckets/{bucket}/storageLayout'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listFolders: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'folders'
      ),
      listManagedFolders: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'managedFolders'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const renameFolderResponse = protoFilesRoot.lookup(
      '.google.storage.control.v2.Folder'
    ) as gax.protobuf.Type;
    const renameFolderMetadata = protoFilesRoot.lookup(
      '.google.storage.control.v2.RenameFolderMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      renameFolder: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        renameFolderResponse.decode.bind(renameFolderResponse),
        renameFolderMetadata.decode.bind(renameFolderMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.storage.control.v2.StorageControl',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.storageControlStub) {
      return this.storageControlStub;
    }

    // Put together the "service stub" for
    // google.storage.control.v2.StorageControl.
    this.storageControlStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.storage.control.v2.StorageControl'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.storage.control.v2.StorageControl,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const storageControlStubMethods = [
      'createFolder',
      'deleteFolder',
      'getFolder',
      'listFolders',
      'renameFolder',
      'getStorageLayout',
      'createManagedFolder',
      'deleteManagedFolder',
      'getManagedFolder',
      'listManagedFolders',
    ];
    for (const methodName of storageControlStubMethods) {
      const callPromise = this.storageControlStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.storageControlStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'storage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'storage.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/devstorage.full_control',
      'https://www.googleapis.com/auth/devstorage.read_only',
      'https://www.googleapis.com/auth/devstorage.read_write',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a new folder. This operation is only applicable to a hierarchical
   * namespace enabled bucket.
   * Hierarchical namespace buckets are in allowlist preview.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the bucket in which the folder will reside. The bucket
   *   must be a hierarchical namespace enabled bucket.
   * @param {google.storage.control.v2.Folder} request.folder
   *   Required. Properties of the new folder being created.
   *   The bucket and name of the folder are specified in the parent and folder_id
   *   fields, respectively. Populating those fields in `folder` will result in an
   *   error.
   * @param {string} request.folderId
   *   Required. The full name of a folder, including all its parent folders.
   *   Folders use single '/' characters as a delimiter.
   *   The folder_id must end with a slash.
   *   For example, the folder_id of "books/biographies/" would create a new
   *   "biographies/" folder under the "books/" folder.
   * @param {boolean} [request.recursive]
   *   Optional. If true, parent folder doesn't have to be present and all missing
   *   ancestor folders will be created atomically.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.storage.control.v2.Folder|Folder}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.create_folder.js</caption>
   * region_tag:storage_v2_generated_StorageControl_CreateFolder_async
   */
  createFolder(
    request?: protos.google.storage.control.v2.ICreateFolderRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.ICreateFolderRequest | undefined,
      {} | undefined,
    ]
  >;
  createFolder(
    request: protos.google.storage.control.v2.ICreateFolderRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.ICreateFolderRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createFolder(
    request: protos.google.storage.control.v2.ICreateFolderRequest,
    callback: Callback<
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.ICreateFolderRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createFolder(
    request?: protos.google.storage.control.v2.ICreateFolderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storage.control.v2.IFolder,
          | protos.google.storage.control.v2.ICreateFolderRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.ICreateFolderRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.ICreateFolderRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.createFolder(request, options, callback);
  }
  /**
   * Permanently deletes an empty folder. This operation is only applicable to a
   * hierarchical namespace enabled bucket.
   * Hierarchical namespace buckets are in allowlist preview.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the folder.
   *   Format: `projects/{project}/buckets/{bucket}/folders/{folder}`
   * @param {number} request.ifMetagenerationMatch
   *   Makes the operation only succeed conditional on whether the folder's
   *   current metageneration matches the given value.
   * @param {number} request.ifMetagenerationNotMatch
   *   Makes the operation only succeed conditional on whether the folder's
   *   current metageneration does not match the given value.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.delete_folder.js</caption>
   * region_tag:storage_v2_generated_StorageControl_DeleteFolder_async
   */
  deleteFolder(
    request?: protos.google.storage.control.v2.IDeleteFolderRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.storage.control.v2.IDeleteFolderRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteFolder(
    request: protos.google.storage.control.v2.IDeleteFolderRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.storage.control.v2.IDeleteFolderRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteFolder(
    request: protos.google.storage.control.v2.IDeleteFolderRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.storage.control.v2.IDeleteFolderRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteFolder(
    request?: protos.google.storage.control.v2.IDeleteFolderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.storage.control.v2.IDeleteFolderRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.storage.control.v2.IDeleteFolderRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.storage.control.v2.IDeleteFolderRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue
          .toString()
          .match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.deleteFolder(request, options, callback);
  }
  /**
   * Returns metadata for the specified folder. This operation is only
   * applicable to a hierarchical namespace enabled bucket.
   * Hierarchical namespace buckets are in allowlist preview.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the folder.
   *   Format: `projects/{project}/buckets/{bucket}/folders/{folder}`
   * @param {number} request.ifMetagenerationMatch
   *   Makes the operation only succeed conditional on whether the folder's
   *   current metageneration matches the given value.
   * @param {number} request.ifMetagenerationNotMatch
   *   Makes the operation only succeed conditional on whether the folder's
   *   current metageneration does not match the given value.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.storage.control.v2.Folder|Folder}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.get_folder.js</caption>
   * region_tag:storage_v2_generated_StorageControl_GetFolder_async
   */
  getFolder(
    request?: protos.google.storage.control.v2.IGetFolderRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.IGetFolderRequest | undefined,
      {} | undefined,
    ]
  >;
  getFolder(
    request: protos.google.storage.control.v2.IGetFolderRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.IGetFolderRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getFolder(
    request: protos.google.storage.control.v2.IGetFolderRequest,
    callback: Callback<
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.IGetFolderRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getFolder(
    request?: protos.google.storage.control.v2.IGetFolderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storage.control.v2.IFolder,
          protos.google.storage.control.v2.IGetFolderRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.IGetFolderRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storage.control.v2.IFolder,
      protos.google.storage.control.v2.IGetFolderRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue
          .toString()
          .match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.getFolder(request, options, callback);
  }
  /**
   * Returns the storage layout configuration for a given bucket.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the StorageLayout resource.
   *   Format: `projects/{project}/buckets/{bucket}/storageLayout`
   * @param {string} request.prefix
   *   An optional prefix used for permission check. It is useful when the caller
   *   only has limited permissions under a specific prefix.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.storage.control.v2.StorageLayout|StorageLayout}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.get_storage_layout.js</caption>
   * region_tag:storage_v2_generated_StorageControl_GetStorageLayout_async
   */
  getStorageLayout(
    request?: protos.google.storage.control.v2.IGetStorageLayoutRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storage.control.v2.IStorageLayout,
      protos.google.storage.control.v2.IGetStorageLayoutRequest | undefined,
      {} | undefined,
    ]
  >;
  getStorageLayout(
    request: protos.google.storage.control.v2.IGetStorageLayoutRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storage.control.v2.IStorageLayout,
      | protos.google.storage.control.v2.IGetStorageLayoutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getStorageLayout(
    request: protos.google.storage.control.v2.IGetStorageLayoutRequest,
    callback: Callback<
      protos.google.storage.control.v2.IStorageLayout,
      | protos.google.storage.control.v2.IGetStorageLayoutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getStorageLayout(
    request?: protos.google.storage.control.v2.IGetStorageLayoutRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storage.control.v2.IStorageLayout,
          | protos.google.storage.control.v2.IGetStorageLayoutRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storage.control.v2.IStorageLayout,
      | protos.google.storage.control.v2.IGetStorageLayoutRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storage.control.v2.IStorageLayout,
      protos.google.storage.control.v2.IGetStorageLayoutRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue
          .toString()
          .match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.getStorageLayout(request, options, callback);
  }
  /**
   * Creates a new managed folder.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the bucket this managed folder belongs to.
   * @param {google.storage.control.v2.ManagedFolder} request.managedFolder
   *   Required. Properties of the managed folder being created.
   *   The bucket and managed folder names are specified in the `parent` and
   *   `managed_folder_id` fields. Populating these fields in `managed_folder`
   *   will result in an error.
   * @param {string} request.managedFolderId
   *   Required. The name of the managed folder. It uses a single `/` as delimiter
   *   and leading and trailing `/` are allowed.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.storage.control.v2.ManagedFolder|ManagedFolder}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.create_managed_folder.js</caption>
   * region_tag:storage_v2_generated_StorageControl_CreateManagedFolder_async
   */
  createManagedFolder(
    request?: protos.google.storage.control.v2.ICreateManagedFolderRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storage.control.v2.IManagedFolder,
      protos.google.storage.control.v2.ICreateManagedFolderRequest | undefined,
      {} | undefined,
    ]
  >;
  createManagedFolder(
    request: protos.google.storage.control.v2.ICreateManagedFolderRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storage.control.v2.IManagedFolder,
      | protos.google.storage.control.v2.ICreateManagedFolderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createManagedFolder(
    request: protos.google.storage.control.v2.ICreateManagedFolderRequest,
    callback: Callback<
      protos.google.storage.control.v2.IManagedFolder,
      | protos.google.storage.control.v2.ICreateManagedFolderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createManagedFolder(
    request?: protos.google.storage.control.v2.ICreateManagedFolderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storage.control.v2.IManagedFolder,
          | protos.google.storage.control.v2.ICreateManagedFolderRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storage.control.v2.IManagedFolder,
      | protos.google.storage.control.v2.ICreateManagedFolderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storage.control.v2.IManagedFolder,
      protos.google.storage.control.v2.ICreateManagedFolderRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.createManagedFolder(request, options, callback);
  }
  /**
   * Permanently deletes an empty managed folder.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the managed folder.
   *   Format:
   *   `projects/{project}/buckets/{bucket}/managedFolders/{managedFolder}`
   * @param {number} request.ifMetagenerationMatch
   *   The operation succeeds conditional on the managed folder's current
   *   metageneration matching the value here specified.
   * @param {number} request.ifMetagenerationNotMatch
   *   The operation succeeds conditional on the managed folder's current
   *   metageneration NOT matching the value here specified.
   * @param {boolean} request.allowNonEmpty
   *   Allows deletion of a managed folder even if it is not empty.
   *   A managed folder is empty if it manages no child managed folders or
   *   objects. Caller must have permission for
   *   storage.managedFolders.setIamPolicy.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.delete_managed_folder.js</caption>
   * region_tag:storage_v2_generated_StorageControl_DeleteManagedFolder_async
   */
  deleteManagedFolder(
    request?: protos.google.storage.control.v2.IDeleteManagedFolderRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.storage.control.v2.IDeleteManagedFolderRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteManagedFolder(
    request: protos.google.storage.control.v2.IDeleteManagedFolderRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storage.control.v2.IDeleteManagedFolderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteManagedFolder(
    request: protos.google.storage.control.v2.IDeleteManagedFolderRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storage.control.v2.IDeleteManagedFolderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteManagedFolder(
    request?: protos.google.storage.control.v2.IDeleteManagedFolderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.storage.control.v2.IDeleteManagedFolderRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.storage.control.v2.IDeleteManagedFolderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.storage.control.v2.IDeleteManagedFolderRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue
          .toString()
          .match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.deleteManagedFolder(request, options, callback);
  }
  /**
   * Returns metadata for the specified managed folder.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the managed folder.
   *   Format:
   *   `projects/{project}/buckets/{bucket}/managedFolders/{managedFolder}`
   * @param {number} request.ifMetagenerationMatch
   *   The operation succeeds conditional on the managed folder's current
   *   metageneration matching the value here specified.
   * @param {number} request.ifMetagenerationNotMatch
   *   The operation succeeds conditional on the managed folder's current
   *   metageneration NOT matching the value here specified.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.storage.control.v2.ManagedFolder|ManagedFolder}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.get_managed_folder.js</caption>
   * region_tag:storage_v2_generated_StorageControl_GetManagedFolder_async
   */
  getManagedFolder(
    request?: protos.google.storage.control.v2.IGetManagedFolderRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storage.control.v2.IManagedFolder,
      protos.google.storage.control.v2.IGetManagedFolderRequest | undefined,
      {} | undefined,
    ]
  >;
  getManagedFolder(
    request: protos.google.storage.control.v2.IGetManagedFolderRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.storage.control.v2.IManagedFolder,
      | protos.google.storage.control.v2.IGetManagedFolderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getManagedFolder(
    request: protos.google.storage.control.v2.IGetManagedFolderRequest,
    callback: Callback<
      protos.google.storage.control.v2.IManagedFolder,
      | protos.google.storage.control.v2.IGetManagedFolderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getManagedFolder(
    request?: protos.google.storage.control.v2.IGetManagedFolderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.storage.control.v2.IManagedFolder,
          | protos.google.storage.control.v2.IGetManagedFolderRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.storage.control.v2.IManagedFolder,
      | protos.google.storage.control.v2.IGetManagedFolderRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.storage.control.v2.IManagedFolder,
      protos.google.storage.control.v2.IGetManagedFolderRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue
          .toString()
          .match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.getManagedFolder(request, options, callback);
  }

  /**
   * Renames a source folder to a destination folder. This operation is only
   * applicable to a hierarchical namespace enabled bucket. During a rename, the
   * source and destination folders are locked until the long running operation
   * completes.
   * Hierarchical namespace buckets are in allowlist preview.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the source folder being renamed.
   *   Format: `projects/{project}/buckets/{bucket}/folders/{folder}`
   * @param {string} request.destinationFolderId
   *   Required. The destination folder ID, e.g. `foo/bar/`.
   * @param {number} request.ifMetagenerationMatch
   *   Makes the operation only succeed conditional on whether the source
   *   folder's current metageneration matches the given value.
   * @param {number} request.ifMetagenerationNotMatch
   *   Makes the operation only succeed conditional on whether the source
   *   folder's current metageneration does not match the given value.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted. This request is only
   *   idempotent if a `request_id` is provided.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.rename_folder.js</caption>
   * region_tag:storage_v2_generated_StorageControl_RenameFolder_async
   */
  renameFolder(
    request?: protos.google.storage.control.v2.IRenameFolderRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.storage.control.v2.IFolder,
        protos.google.storage.control.v2.IRenameFolderMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  renameFolder(
    request: protos.google.storage.control.v2.IRenameFolderRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.storage.control.v2.IFolder,
        protos.google.storage.control.v2.IRenameFolderMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  renameFolder(
    request: protos.google.storage.control.v2.IRenameFolderRequest,
    callback: Callback<
      LROperation<
        protos.google.storage.control.v2.IFolder,
        protos.google.storage.control.v2.IRenameFolderMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  renameFolder(
    request?: protos.google.storage.control.v2.IRenameFolderRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.storage.control.v2.IFolder,
            protos.google.storage.control.v2.IRenameFolderMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.storage.control.v2.IFolder,
        protos.google.storage.control.v2.IRenameFolderMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.storage.control.v2.IFolder,
        protos.google.storage.control.v2.IRenameFolderMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.name;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue
          .toString()
          .match(RegExp('(?<bucket>projects/[^/]+/buckets/[^/]+)(?:/.*)?'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.renameFolder(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `renameFolder()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.rename_folder.js</caption>
   * region_tag:storage_v2_generated_StorageControl_RenameFolder_async
   */
  async checkRenameFolderProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.storage.control.v2.Folder,
      protos.google.storage.control.v2.RenameFolderMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.renameFolder,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.storage.control.v2.Folder,
      protos.google.storage.control.v2.RenameFolderMetadata
    >;
  }
  /**
   * Retrieves a list of folders. This operation is only applicable to a
   * hierarchical namespace enabled bucket.
   * Hierarchical namespace buckets are in allowlist preview.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the bucket in which to look for folders. The bucket must
   *   be a hierarchical namespace enabled bucket.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of folders to return in a single response. The
   *   service will use this parameter or 1,000 items, whichever is smaller.
   * @param {string} [request.pageToken]
   *   Optional. A previously-returned page token representing part of the larger
   *   set of results to view.
   * @param {string} [request.prefix]
   *   Optional. Filter results to folders whose names begin with this prefix.
   *   If set, the value must either be an empty string or end with a '/'.
   * @param {string} [request.delimiter]
   *   Optional. If set, returns results in a directory-like mode. The results
   *   will only include folders that either exactly match the above prefix, or
   *   are one level below the prefix. The only supported value is '/'.
   * @param {string} [request.lexicographicStart]
   *   Optional. Filter results to folders whose names are lexicographically equal
   *   to or after lexicographic_start. If lexicographic_end is also set, the
   *   folders listed have names between lexicographic_start (inclusive) and
   *   lexicographic_end (exclusive).
   * @param {string} [request.lexicographicEnd]
   *   Optional. Filter results to folders whose names are lexicographically
   *   before lexicographic_end. If lexicographic_start is also set, the folders
   *   listed have names between lexicographic_start (inclusive) and
   *   lexicographic_end (exclusive).
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.storage.control.v2.Folder|Folder}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listFoldersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listFolders(
    request?: protos.google.storage.control.v2.IListFoldersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storage.control.v2.IFolder[],
      protos.google.storage.control.v2.IListFoldersRequest | null,
      protos.google.storage.control.v2.IListFoldersResponse,
    ]
  >;
  listFolders(
    request: protos.google.storage.control.v2.IListFoldersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.storage.control.v2.IListFoldersRequest,
      protos.google.storage.control.v2.IListFoldersResponse | null | undefined,
      protos.google.storage.control.v2.IFolder
    >
  ): void;
  listFolders(
    request: protos.google.storage.control.v2.IListFoldersRequest,
    callback: PaginationCallback<
      protos.google.storage.control.v2.IListFoldersRequest,
      protos.google.storage.control.v2.IListFoldersResponse | null | undefined,
      protos.google.storage.control.v2.IFolder
    >
  ): void;
  listFolders(
    request?: protos.google.storage.control.v2.IListFoldersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.storage.control.v2.IListFoldersRequest,
          | protos.google.storage.control.v2.IListFoldersResponse
          | null
          | undefined,
          protos.google.storage.control.v2.IFolder
        >,
    callback?: PaginationCallback<
      protos.google.storage.control.v2.IListFoldersRequest,
      protos.google.storage.control.v2.IListFoldersResponse | null | undefined,
      protos.google.storage.control.v2.IFolder
    >
  ): Promise<
    [
      protos.google.storage.control.v2.IFolder[],
      protos.google.storage.control.v2.IListFoldersRequest | null,
      protos.google.storage.control.v2.IListFoldersResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.listFolders(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the bucket in which to look for folders. The bucket must
   *   be a hierarchical namespace enabled bucket.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of folders to return in a single response. The
   *   service will use this parameter or 1,000 items, whichever is smaller.
   * @param {string} [request.pageToken]
   *   Optional. A previously-returned page token representing part of the larger
   *   set of results to view.
   * @param {string} [request.prefix]
   *   Optional. Filter results to folders whose names begin with this prefix.
   *   If set, the value must either be an empty string or end with a '/'.
   * @param {string} [request.delimiter]
   *   Optional. If set, returns results in a directory-like mode. The results
   *   will only include folders that either exactly match the above prefix, or
   *   are one level below the prefix. The only supported value is '/'.
   * @param {string} [request.lexicographicStart]
   *   Optional. Filter results to folders whose names are lexicographically equal
   *   to or after lexicographic_start. If lexicographic_end is also set, the
   *   folders listed have names between lexicographic_start (inclusive) and
   *   lexicographic_end (exclusive).
   * @param {string} [request.lexicographicEnd]
   *   Optional. Filter results to folders whose names are lexicographically
   *   before lexicographic_end. If lexicographic_start is also set, the folders
   *   listed have names between lexicographic_start (inclusive) and
   *   lexicographic_end (exclusive).
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.storage.control.v2.Folder|Folder} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listFoldersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listFoldersStream(
    request?: protos.google.storage.control.v2.IListFoldersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    const defaultCallSettings = this._defaults['listFolders'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFolders.createStream(
      this.innerApiCalls.listFolders as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listFolders`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the bucket in which to look for folders. The bucket must
   *   be a hierarchical namespace enabled bucket.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of folders to return in a single response. The
   *   service will use this parameter or 1,000 items, whichever is smaller.
   * @param {string} [request.pageToken]
   *   Optional. A previously-returned page token representing part of the larger
   *   set of results to view.
   * @param {string} [request.prefix]
   *   Optional. Filter results to folders whose names begin with this prefix.
   *   If set, the value must either be an empty string or end with a '/'.
   * @param {string} [request.delimiter]
   *   Optional. If set, returns results in a directory-like mode. The results
   *   will only include folders that either exactly match the above prefix, or
   *   are one level below the prefix. The only supported value is '/'.
   * @param {string} [request.lexicographicStart]
   *   Optional. Filter results to folders whose names are lexicographically equal
   *   to or after lexicographic_start. If lexicographic_end is also set, the
   *   folders listed have names between lexicographic_start (inclusive) and
   *   lexicographic_end (exclusive).
   * @param {string} [request.lexicographicEnd]
   *   Optional. Filter results to folders whose names are lexicographically
   *   before lexicographic_end. If lexicographic_start is also set, the folders
   *   listed have names between lexicographic_start (inclusive) and
   *   lexicographic_end (exclusive).
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.storage.control.v2.Folder|Folder}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.list_folders.js</caption>
   * region_tag:storage_v2_generated_StorageControl_ListFolders_async
   */
  listFoldersAsync(
    request?: protos.google.storage.control.v2.IListFoldersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.storage.control.v2.IFolder> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    const defaultCallSettings = this._defaults['listFolders'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFolders.asyncIterate(
      this.innerApiCalls['listFolders'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.storage.control.v2.IFolder>;
  }
  /**
   * Retrieves a list of managed folders for a given bucket.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the bucket this managed folder belongs to.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of managed folders to return in a single response.
   *   The service will use this parameter or 1,000 items, whichever is smaller.
   * @param {string} [request.pageToken]
   *   Optional. A previously-returned page token representing part of the larger
   *   set of results to view.
   * @param {string} [request.prefix]
   *   Optional. Filter results to match managed folders with name starting with
   *   this prefix.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.storage.control.v2.ManagedFolder|ManagedFolder}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listManagedFoldersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listManagedFolders(
    request?: protos.google.storage.control.v2.IListManagedFoldersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.storage.control.v2.IManagedFolder[],
      protos.google.storage.control.v2.IListManagedFoldersRequest | null,
      protos.google.storage.control.v2.IListManagedFoldersResponse,
    ]
  >;
  listManagedFolders(
    request: protos.google.storage.control.v2.IListManagedFoldersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.storage.control.v2.IListManagedFoldersRequest,
      | protos.google.storage.control.v2.IListManagedFoldersResponse
      | null
      | undefined,
      protos.google.storage.control.v2.IManagedFolder
    >
  ): void;
  listManagedFolders(
    request: protos.google.storage.control.v2.IListManagedFoldersRequest,
    callback: PaginationCallback<
      protos.google.storage.control.v2.IListManagedFoldersRequest,
      | protos.google.storage.control.v2.IListManagedFoldersResponse
      | null
      | undefined,
      protos.google.storage.control.v2.IManagedFolder
    >
  ): void;
  listManagedFolders(
    request?: protos.google.storage.control.v2.IListManagedFoldersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.storage.control.v2.IListManagedFoldersRequest,
          | protos.google.storage.control.v2.IListManagedFoldersResponse
          | null
          | undefined,
          protos.google.storage.control.v2.IManagedFolder
        >,
    callback?: PaginationCallback<
      protos.google.storage.control.v2.IListManagedFoldersRequest,
      | protos.google.storage.control.v2.IListManagedFoldersResponse
      | null
      | undefined,
      protos.google.storage.control.v2.IManagedFolder
    >
  ): Promise<
    [
      protos.google.storage.control.v2.IManagedFolder[],
      protos.google.storage.control.v2.IListManagedFoldersRequest | null,
      protos.google.storage.control.v2.IListManagedFoldersResponse,
    ]
  > | void {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    this.initialize();
    return this.innerApiCalls.listManagedFolders(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the bucket this managed folder belongs to.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of managed folders to return in a single response.
   *   The service will use this parameter or 1,000 items, whichever is smaller.
   * @param {string} [request.pageToken]
   *   Optional. A previously-returned page token representing part of the larger
   *   set of results to view.
   * @param {string} [request.prefix]
   *   Optional. Filter results to match managed folders with name starting with
   *   this prefix.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.storage.control.v2.ManagedFolder|ManagedFolder} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listManagedFoldersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listManagedFoldersStream(
    request?: protos.google.storage.control.v2.IListManagedFoldersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    const defaultCallSettings = this._defaults['listManagedFolders'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listManagedFolders.createStream(
      this.innerApiCalls.listManagedFolders as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listManagedFolders`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the bucket this managed folder belongs to.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of managed folders to return in a single response.
   *   The service will use this parameter or 1,000 items, whichever is smaller.
   * @param {string} [request.pageToken]
   *   Optional. A previously-returned page token representing part of the larger
   *   set of results to view.
   * @param {string} [request.prefix]
   *   Optional. Filter results to match managed folders with name starting with
   *   this prefix.
   * @param {string} [request.requestId]
   *   Optional. A unique identifier for this request. UUID is the recommended
   *   format, but other formats are still accepted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.storage.control.v2.ManagedFolder|ManagedFolder}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/storage_control.list_managed_folders.js</caption>
   * region_tag:storage_v2_generated_StorageControl_ListManagedFolders_async
   */
  listManagedFoldersAsync(
    request?: protos.google.storage.control.v2.IListManagedFoldersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.storage.control.v2.IManagedFolder> {
    request = request || {};
    if (!request.requestId) {
      request.requestId = gax.makeUUID();
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const routingParameter = {};
    {
      const fieldValue = request.parent;
      if (fieldValue !== undefined && fieldValue !== null) {
        const match = fieldValue.toString().match(RegExp('(?<bucket>(?:.*)?)'));
        if (match) {
          const parameterValue = match.groups?.['bucket'] ?? fieldValue;
          Object.assign(routingParameter, {bucket: parameterValue});
        }
      }
    }
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams(routingParameter);
    const defaultCallSettings = this._defaults['listManagedFolders'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listManagedFolders.asyncIterate(
      this.innerApiCalls['listManagedFolders'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.storage.control.v2.IManagedFolder>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified bucket resource name string.
   *
   * @param {string} project
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  bucketPath(project: string, bucket: string) {
    return this.pathTemplates.bucketPathTemplate.render({
      project: project,
      bucket: bucket,
    });
  }

  /**
   * Parse the project from Bucket resource.
   *
   * @param {string} bucketName
   *   A fully-qualified path representing Bucket resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBucketName(bucketName: string) {
    return this.pathTemplates.bucketPathTemplate.match(bucketName).project;
  }

  /**
   * Parse the bucket from Bucket resource.
   *
   * @param {string} bucketName
   *   A fully-qualified path representing Bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromBucketName(bucketName: string) {
    return this.pathTemplates.bucketPathTemplate.match(bucketName).bucket;
  }

  /**
   * Return a fully-qualified folder resource name string.
   *
   * @param {string} project
   * @param {string} bucket
   * @param {string} folder
   * @returns {string} Resource name string.
   */
  folderPath(project: string, bucket: string, folder: string) {
    return this.pathTemplates.folderPathTemplate.render({
      project: project,
      bucket: bucket,
      folder: folder,
    });
  }

  /**
   * Parse the project from Folder resource.
   *
   * @param {string} folderName
   *   A fully-qualified path representing Folder resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFolderName(folderName: string) {
    return this.pathTemplates.folderPathTemplate.match(folderName).project;
  }

  /**
   * Parse the bucket from Folder resource.
   *
   * @param {string} folderName
   *   A fully-qualified path representing Folder resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromFolderName(folderName: string) {
    return this.pathTemplates.folderPathTemplate.match(folderName).bucket;
  }

  /**
   * Parse the folder from Folder resource.
   *
   * @param {string} folderName
   *   A fully-qualified path representing Folder resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderName(folderName: string) {
    return this.pathTemplates.folderPathTemplate.match(folderName).folder;
  }

  /**
   * Return a fully-qualified managedFolder resource name string.
   *
   * @param {string} project
   * @param {string} bucket
   * @param {string} managed_folder
   * @returns {string} Resource name string.
   */
  managedFolderPath(project: string, bucket: string, managedFolder: string) {
    return this.pathTemplates.managedFolderPathTemplate.render({
      project: project,
      bucket: bucket,
      managed_folder: managedFolder,
    });
  }

  /**
   * Parse the project from ManagedFolder resource.
   *
   * @param {string} managedFolderName
   *   A fully-qualified path representing ManagedFolder resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromManagedFolderName(managedFolderName: string) {
    return this.pathTemplates.managedFolderPathTemplate.match(managedFolderName)
      .project;
  }

  /**
   * Parse the bucket from ManagedFolder resource.
   *
   * @param {string} managedFolderName
   *   A fully-qualified path representing ManagedFolder resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromManagedFolderName(managedFolderName: string) {
    return this.pathTemplates.managedFolderPathTemplate.match(managedFolderName)
      .bucket;
  }

  /**
   * Parse the managed_folder from ManagedFolder resource.
   *
   * @param {string} managedFolderName
   *   A fully-qualified path representing ManagedFolder resource.
   * @returns {string} A string representing the managed_folder.
   */
  matchManagedFolderFromManagedFolderName(managedFolderName: string) {
    return this.pathTemplates.managedFolderPathTemplate.match(managedFolderName)
      .managed_folder;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified storageLayout resource name string.
   *
   * @param {string} project
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  storageLayoutPath(project: string, bucket: string) {
    return this.pathTemplates.storageLayoutPathTemplate.render({
      project: project,
      bucket: bucket,
    });
  }

  /**
   * Parse the project from StorageLayout resource.
   *
   * @param {string} storageLayoutName
   *   A fully-qualified path representing StorageLayout resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromStorageLayoutName(storageLayoutName: string) {
    return this.pathTemplates.storageLayoutPathTemplate.match(storageLayoutName)
      .project;
  }

  /**
   * Parse the bucket from StorageLayout resource.
   *
   * @param {string} storageLayoutName
   *   A fully-qualified path representing StorageLayout resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromStorageLayoutName(storageLayoutName: string) {
    return this.pathTemplates.storageLayoutPathTemplate.match(storageLayoutName)
      .bucket;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.storageControlStub && !this._terminated) {
      return this.storageControlStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
