// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/service_usage_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './service_usage_client_config.json';
const version = require('../../../package.json').version;

/**
 *  [Service Usage API](https://cloud.google.com/service-usage/docs/overview)
 * @class
 * @memberof v1beta1
 */
export class ServiceUsageClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  operationsClient: gax.OperationsClient;
  serviceUsageStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ServiceUsageClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ServiceUsageClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ServiceUsageClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listServices: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'services'
      ),
      listConsumerQuotaMetrics: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'metrics'
      ),
      listAdminOverrides: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'overrides'
      ),
      listConsumerOverrides: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'overrides'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1beta1/{name=operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1beta1/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const enableServiceResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const enableServiceMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const disableServiceResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const disableServiceMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const batchEnableServicesResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const batchEnableServicesMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createAdminOverrideResponse = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.QuotaOverride'
    ) as gax.protobuf.Type;
    const createAdminOverrideMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateAdminOverrideResponse = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.QuotaOverride'
    ) as gax.protobuf.Type;
    const updateAdminOverrideMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteAdminOverrideResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteAdminOverrideMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const importAdminOverridesResponse = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.ImportAdminOverridesResponse'
    ) as gax.protobuf.Type;
    const importAdminOverridesMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.ImportAdminOverridesMetadata'
    ) as gax.protobuf.Type;
    const createConsumerOverrideResponse = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.QuotaOverride'
    ) as gax.protobuf.Type;
    const createConsumerOverrideMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateConsumerOverrideResponse = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.QuotaOverride'
    ) as gax.protobuf.Type;
    const updateConsumerOverrideMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteConsumerOverrideResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteConsumerOverrideMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.OperationMetadata'
    ) as gax.protobuf.Type;
    const importConsumerOverridesResponse = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse'
    ) as gax.protobuf.Type;
    const importConsumerOverridesMetadata = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.ImportConsumerOverridesMetadata'
    ) as gax.protobuf.Type;
    const generateServiceIdentityResponse = protoFilesRoot.lookup(
      '.google.api.serviceusage.v1beta1.ServiceIdentity'
    ) as gax.protobuf.Type;
    const generateServiceIdentityMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      enableService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        enableServiceResponse.decode.bind(enableServiceResponse),
        enableServiceMetadata.decode.bind(enableServiceMetadata)
      ),
      disableService: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        disableServiceResponse.decode.bind(disableServiceResponse),
        disableServiceMetadata.decode.bind(disableServiceMetadata)
      ),
      batchEnableServices: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchEnableServicesResponse.decode.bind(batchEnableServicesResponse),
        batchEnableServicesMetadata.decode.bind(batchEnableServicesMetadata)
      ),
      createAdminOverride: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAdminOverrideResponse.decode.bind(createAdminOverrideResponse),
        createAdminOverrideMetadata.decode.bind(createAdminOverrideMetadata)
      ),
      updateAdminOverride: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateAdminOverrideResponse.decode.bind(updateAdminOverrideResponse),
        updateAdminOverrideMetadata.decode.bind(updateAdminOverrideMetadata)
      ),
      deleteAdminOverride: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAdminOverrideResponse.decode.bind(deleteAdminOverrideResponse),
        deleteAdminOverrideMetadata.decode.bind(deleteAdminOverrideMetadata)
      ),
      importAdminOverrides: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importAdminOverridesResponse.decode.bind(importAdminOverridesResponse),
        importAdminOverridesMetadata.decode.bind(importAdminOverridesMetadata)
      ),
      createConsumerOverride: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createConsumerOverrideResponse.decode.bind(
          createConsumerOverrideResponse
        ),
        createConsumerOverrideMetadata.decode.bind(
          createConsumerOverrideMetadata
        )
      ),
      updateConsumerOverride: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateConsumerOverrideResponse.decode.bind(
          updateConsumerOverrideResponse
        ),
        updateConsumerOverrideMetadata.decode.bind(
          updateConsumerOverrideMetadata
        )
      ),
      deleteConsumerOverride: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteConsumerOverrideResponse.decode.bind(
          deleteConsumerOverrideResponse
        ),
        deleteConsumerOverrideMetadata.decode.bind(
          deleteConsumerOverrideMetadata
        )
      ),
      importConsumerOverrides: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importConsumerOverridesResponse.decode.bind(
          importConsumerOverridesResponse
        ),
        importConsumerOverridesMetadata.decode.bind(
          importConsumerOverridesMetadata
        )
      ),
      generateServiceIdentity: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        generateServiceIdentityResponse.decode.bind(
          generateServiceIdentityResponse
        ),
        generateServiceIdentityMetadata.decode.bind(
          generateServiceIdentityMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.api.serviceusage.v1beta1.ServiceUsage',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.serviceUsageStub) {
      return this.serviceUsageStub;
    }

    // Put together the "service stub" for
    // google.api.serviceusage.v1beta1.ServiceUsage.
    this.serviceUsageStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.api.serviceusage.v1beta1.ServiceUsage'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.api.serviceusage.v1beta1.ServiceUsage,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const serviceUsageStubMethods = [
      'enableService',
      'disableService',
      'getService',
      'listServices',
      'batchEnableServices',
      'listConsumerQuotaMetrics',
      'getConsumerQuotaMetric',
      'getConsumerQuotaLimit',
      'createAdminOverride',
      'updateAdminOverride',
      'deleteAdminOverride',
      'listAdminOverrides',
      'importAdminOverrides',
      'createConsumerOverride',
      'updateConsumerOverride',
      'deleteConsumerOverride',
      'listConsumerOverrides',
      'importConsumerOverrides',
      'generateServiceIdentity',
    ];
    for (const methodName of serviceUsageStubMethods) {
      const callPromise = this.serviceUsageStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.serviceUsageStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'serviceusage.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'serviceusage.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/service.management',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Returns the service configuration and enabled state for a given service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Name of the consumer and service to get the `ConsumerState` for.
   *
   *   An example name would be:
   *   `projects/123/services/serviceusage.googleapis.com`
   *   where `123` is the project number (not project ID).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Service]{@link google.api.serviceusage.v1beta1.Service}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.get_service.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_GetService_async
   * @deprecated GetService is deprecated and may be removed in a future version.
   */
  getService(
    request?: protos.google.api.serviceusage.v1beta1.IGetServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IService,
      protos.google.api.serviceusage.v1beta1.IGetServiceRequest | undefined,
      {} | undefined
    ]
  >;
  getService(
    request: protos.google.api.serviceusage.v1beta1.IGetServiceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.serviceusage.v1beta1.IService,
      | protos.google.api.serviceusage.v1beta1.IGetServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getService(
    request: protos.google.api.serviceusage.v1beta1.IGetServiceRequest,
    callback: Callback<
      protos.google.api.serviceusage.v1beta1.IService,
      | protos.google.api.serviceusage.v1beta1.IGetServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getService(
    request?: protos.google.api.serviceusage.v1beta1.IGetServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.serviceusage.v1beta1.IService,
          | protos.google.api.serviceusage.v1beta1.IGetServiceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.serviceusage.v1beta1.IService,
      | protos.google.api.serviceusage.v1beta1.IGetServiceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IService,
      protos.google.api.serviceusage.v1beta1.IGetServiceRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    this.warn(
      'DEP$ServiceUsage-$GetService',
      'GetService is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    return this.innerApiCalls.getService(request, options, callback);
  }
  /**
   * Retrieves a summary of quota information for a specific quota metric
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource name of the quota limit.
   *
   *   An example name would be:
   *   `projects/123/services/serviceusage.googleapis.com/quotas/metrics/serviceusage.googleapis.com%2Fmutate_requests`
   * @param {google.api.serviceusage.v1beta1.QuotaView} request.view
   *   Specifies the level of detail for quota information in the response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ConsumerQuotaMetric]{@link google.api.serviceusage.v1beta1.ConsumerQuotaMetric}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.get_consumer_quota_metric.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_GetConsumerQuotaMetric_async
   */
  getConsumerQuotaMetric(
    request?: protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric,
      (
        | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getConsumerQuotaMetric(
    request: protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric,
      | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConsumerQuotaMetric(
    request: protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest,
    callback: Callback<
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric,
      | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConsumerQuotaMetric(
    request?: protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric,
          | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric,
      | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric,
      (
        | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaMetricRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getConsumerQuotaMetric(
      request,
      options,
      callback
    );
  }
  /**
   * Retrieves a summary of quota information for a specific quota limit.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource name of the quota limit.
   *
   *   Use the quota limit resource name returned by previous
   *   ListConsumerQuotaMetrics and GetConsumerQuotaMetric API calls.
   * @param {google.api.serviceusage.v1beta1.QuotaView} request.view
   *   Specifies the level of detail for quota information in the response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ConsumerQuotaLimit]{@link google.api.serviceusage.v1beta1.ConsumerQuotaLimit}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.get_consumer_quota_limit.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_GetConsumerQuotaLimit_async
   */
  getConsumerQuotaLimit(
    request?: protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaLimit,
      (
        | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getConsumerQuotaLimit(
    request: protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaLimit,
      | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConsumerQuotaLimit(
    request: protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest,
    callback: Callback<
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaLimit,
      | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConsumerQuotaLimit(
    request?: protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.api.serviceusage.v1beta1.IConsumerQuotaLimit,
          | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaLimit,
      | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaLimit,
      (
        | protos.google.api.serviceusage.v1beta1.IGetConsumerQuotaLimitRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getConsumerQuotaLimit(request, options, callback);
  }

  /**
   * Enables a service so that it can be used with a project.
   *
   * Operation response type: `google.protobuf.Empty`
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Name of the consumer and service to enable the service on.
   *
   *   The `EnableService` and `DisableService` methods currently only support
   *   projects.
   *
   *   Enabling a service requires that the service is public or is shared with
   *   the user enabling the service.
   *
   *   An example name would be:
   *   `projects/123/services/serviceusage.googleapis.com`
   *   where `123` is the project number (not project ID).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.enable_service.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_EnableService_async
   * @deprecated EnableService is deprecated and may be removed in a future version.
   */
  enableService(
    request?: protos.google.api.serviceusage.v1beta1.IEnableServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  enableService(
    request: protos.google.api.serviceusage.v1beta1.IEnableServiceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  enableService(
    request: protos.google.api.serviceusage.v1beta1.IEnableServiceRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  enableService(
    request?: protos.google.api.serviceusage.v1beta1.IEnableServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.api.serviceusage.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    this.warn(
      'DEP$ServiceUsage-$EnableService',
      'EnableService is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    return this.innerApiCalls.enableService(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `enableService()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.enable_service.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_EnableService_async
   * @deprecated EnableService is deprecated and may be removed in a future version.
   */
  async checkEnableServiceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >
  > {
    this.warn(
      'DEP$ServiceUsage-$checkEnableServiceProgress',
      'checkEnableServiceProgress is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.enableService,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >;
  }
  /**
   * Disables a service so that it can no longer be used with a project.
   * This prevents unintended usage that may cause unexpected billing
   * charges or security leaks.
   *
   * It is not valid to call the disable method on a service that is not
   * currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
   * the target service is not currently enabled.
   *
   * Operation response type: `google.protobuf.Empty`
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Name of the consumer and service to disable the service on.
   *
   *   The enable and disable methods currently only support projects.
   *
   *   An example name would be:
   *   `projects/123/services/serviceusage.googleapis.com`
   *   where `123` is the project number (not project ID).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.disable_service.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_DisableService_async
   * @deprecated DisableService is deprecated and may be removed in a future version.
   */
  disableService(
    request?: protos.google.api.serviceusage.v1beta1.IDisableServiceRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  disableService(
    request: protos.google.api.serviceusage.v1beta1.IDisableServiceRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  disableService(
    request: protos.google.api.serviceusage.v1beta1.IDisableServiceRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  disableService(
    request?: protos.google.api.serviceusage.v1beta1.IDisableServiceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.api.serviceusage.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    this.warn(
      'DEP$ServiceUsage-$DisableService',
      'DisableService is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    return this.innerApiCalls.disableService(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `disableService()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.disable_service.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_DisableService_async
   * @deprecated DisableService is deprecated and may be removed in a future version.
   */
  async checkDisableServiceProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >
  > {
    this.warn(
      'DEP$ServiceUsage-$checkDisableServiceProgress',
      'checkDisableServiceProgress is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.disableService,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >;
  }
  /**
   * Enables multiple services on a project. The operation is atomic: if
   * enabling any service fails, then the entire batch fails, and no state
   * changes occur.
   *
   * Operation response type: `google.protobuf.Empty`
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent to enable services on.
   *
   *   An example name would be:
   *   `projects/123`
   *   where `123` is the project number (not project ID).
   *
   *   The `BatchEnableServices` method currently only supports projects.
   * @param {string[]} request.serviceIds
   *   The identifiers of the services to enable on the project.
   *
   *   A valid identifier would be:
   *   serviceusage.googleapis.com
   *
   *   Enabling services requires that each service is public or is shared with
   *   the user enabling the service.
   *
   *   Two or more services must be specified. To enable a single service,
   *   use the `EnableService` method instead.
   *
   *   A single request can enable a maximum of 20 services at a time. If more
   *   than 20 services are specified, the request will fail, and no state changes
   *   will occur.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.batch_enable_services.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_BatchEnableServices_async
   * @deprecated BatchEnableServices is deprecated and may be removed in a future version.
   */
  batchEnableServices(
    request?: protos.google.api.serviceusage.v1beta1.IBatchEnableServicesRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  batchEnableServices(
    request: protos.google.api.serviceusage.v1beta1.IBatchEnableServicesRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchEnableServices(
    request: protos.google.api.serviceusage.v1beta1.IBatchEnableServicesRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchEnableServices(
    request?: protos.google.api.serviceusage.v1beta1.IBatchEnableServicesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.api.serviceusage.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    this.warn(
      'DEP$ServiceUsage-$BatchEnableServices',
      'BatchEnableServices is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    return this.innerApiCalls.batchEnableServices(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `batchEnableServices()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.batch_enable_services.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_BatchEnableServices_async
   * @deprecated BatchEnableServices is deprecated and may be removed in a future version.
   */
  async checkBatchEnableServicesProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >
  > {
    this.warn(
      'DEP$ServiceUsage-$checkBatchEnableServicesProgress',
      'checkBatchEnableServicesProgress is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.batchEnableServices,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >;
  }
  /**
   * Creates an admin override.
   * An admin override is applied by an administrator of a parent folder or
   * parent organization of the consumer receiving the override. An admin
   * override is intended to limit the amount of quota the consumer can use out
   * of the total quota pool allocated to all children of the folder or
   * organization.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the parent quota limit, returned by a
   *   ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   * @param {google.api.serviceusage.v1beta1.QuotaOverride} request.override
   *   The admin override to create.
   * @param {boolean} request.force
   *   Whether to force the creation of the quota override.
   *   Setting the force parameter to 'true' ignores all quota safety checks that
   *   would fail the request. QuotaSafetyCheck lists all such validations.
   * @param {number[]} request.forceOnly
   *   The list of quota safety checks to ignore before the override mutation.
   *   Unlike 'force' field that ignores all the quota safety checks, the
   *   'force_only' field ignores only the specified checks; other checks are
   *   still enforced. The 'force' and 'force_only' fields cannot both be set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.create_admin_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_CreateAdminOverride_async
   */
  createAdminOverride(
    request?: protos.google.api.serviceusage.v1beta1.ICreateAdminOverrideRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createAdminOverride(
    request: protos.google.api.serviceusage.v1beta1.ICreateAdminOverrideRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAdminOverride(
    request: protos.google.api.serviceusage.v1beta1.ICreateAdminOverrideRequest,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAdminOverride(
    request?: protos.google.api.serviceusage.v1beta1.ICreateAdminOverrideRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.serviceusage.v1beta1.IQuotaOverride,
            protos.google.api.serviceusage.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAdminOverride(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createAdminOverride()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.create_admin_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_CreateAdminOverride_async
   */
  async checkCreateAdminOverrideProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.serviceusage.v1beta1.QuotaOverride,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createAdminOverride,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.serviceusage.v1beta1.QuotaOverride,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >;
  }
  /**
   * Updates an admin override.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource name of the override to update.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d`
   * @param {google.api.serviceusage.v1beta1.QuotaOverride} request.override
   *   The new override.
   *   Only the override_value is updated; all other fields are ignored.
   * @param {boolean} request.force
   *   Whether to force the update of the quota override.
   *   Setting the force parameter to 'true' ignores all quota safety checks that
   *   would fail the request. QuotaSafetyCheck lists all such validations.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Update only the specified fields of the override.
   *   If unset, all fields will be updated.
   * @param {number[]} request.forceOnly
   *   The list of quota safety checks to ignore before the override mutation.
   *   Unlike 'force' field that ignores all the quota safety checks, the
   *   'force_only' field ignores only the specified checks; other checks are
   *   still enforced. The 'force' and 'force_only' fields cannot both be set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.update_admin_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_UpdateAdminOverride_async
   */
  updateAdminOverride(
    request?: protos.google.api.serviceusage.v1beta1.IUpdateAdminOverrideRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateAdminOverride(
    request: protos.google.api.serviceusage.v1beta1.IUpdateAdminOverrideRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAdminOverride(
    request: protos.google.api.serviceusage.v1beta1.IUpdateAdminOverrideRequest,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAdminOverride(
    request?: protos.google.api.serviceusage.v1beta1.IUpdateAdminOverrideRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.serviceusage.v1beta1.IQuotaOverride,
            protos.google.api.serviceusage.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateAdminOverride(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateAdminOverride()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.update_admin_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_UpdateAdminOverride_async
   */
  async checkUpdateAdminOverrideProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.serviceusage.v1beta1.QuotaOverride,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateAdminOverride,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.serviceusage.v1beta1.QuotaOverride,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >;
  }
  /**
   * Deletes an admin override.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource name of the override to delete.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d`
   * @param {boolean} request.force
   *   Whether to force the deletion of the quota override.
   *   Setting the force parameter to 'true' ignores all quota safety checks that
   *   would fail the request. QuotaSafetyCheck lists all such validations.
   * @param {number[]} request.forceOnly
   *   The list of quota safety checks to ignore before the override mutation.
   *   Unlike 'force' field that ignores all the quota safety checks, the
   *   'force_only' field ignores only the specified checks; other checks are
   *   still enforced. The 'force' and 'force_only' fields cannot both be set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.delete_admin_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_DeleteAdminOverride_async
   */
  deleteAdminOverride(
    request?: protos.google.api.serviceusage.v1beta1.IDeleteAdminOverrideRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteAdminOverride(
    request: protos.google.api.serviceusage.v1beta1.IDeleteAdminOverrideRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAdminOverride(
    request: protos.google.api.serviceusage.v1beta1.IDeleteAdminOverrideRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAdminOverride(
    request?: protos.google.api.serviceusage.v1beta1.IDeleteAdminOverrideRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.api.serviceusage.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAdminOverride(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteAdminOverride()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.delete_admin_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_DeleteAdminOverride_async
   */
  async checkDeleteAdminOverrideProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteAdminOverride,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >;
  }
  /**
   * Creates or updates multiple admin overrides atomically, all on the
   * same consumer, but on many different metrics or limits.
   * The name field in the quota override message should not be set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the consumer.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com`
   * @param {google.api.serviceusage.v1beta1.OverrideInlineSource} request.inlineSource
   *   The import data is specified in the request message itself
   * @param {boolean} request.force
   *   Whether to force the creation of the quota overrides.
   *   Setting the force parameter to 'true' ignores all quota safety checks that
   *   would fail the request. QuotaSafetyCheck lists all such validations.
   * @param {number[]} request.forceOnly
   *   The list of quota safety checks to ignore before the override mutation.
   *   Unlike 'force' field that ignores all the quota safety checks, the
   *   'force_only' field ignores only the specified checks; other checks are
   *   still enforced. The 'force' and 'force_only' fields cannot both be set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.import_admin_overrides.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_ImportAdminOverrides_async
   */
  importAdminOverrides(
    request?: protos.google.api.serviceusage.v1beta1.IImportAdminOverridesRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  importAdminOverrides(
    request: protos.google.api.serviceusage.v1beta1.IImportAdminOverridesRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importAdminOverrides(
    request: protos.google.api.serviceusage.v1beta1.IImportAdminOverridesRequest,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importAdminOverrides(
    request?: protos.google.api.serviceusage.v1beta1.IImportAdminOverridesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.serviceusage.v1beta1.IImportAdminOverridesResponse,
            protos.google.api.serviceusage.v1beta1.IImportAdminOverridesMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportAdminOverridesMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importAdminOverrides(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `importAdminOverrides()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.import_admin_overrides.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_ImportAdminOverrides_async
   */
  async checkImportAdminOverridesProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.serviceusage.v1beta1.ImportAdminOverridesResponse,
      protos.google.api.serviceusage.v1beta1.ImportAdminOverridesMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.importAdminOverrides,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.serviceusage.v1beta1.ImportAdminOverridesResponse,
      protos.google.api.serviceusage.v1beta1.ImportAdminOverridesMetadata
    >;
  }
  /**
   * Creates a consumer override.
   * A consumer override is applied to the consumer on its own authority to
   * limit its own quota usage. Consumer overrides cannot be used to grant more
   * quota than would be allowed by admin overrides, producer overrides, or the
   * default limit of the service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the parent quota limit, returned by a
   *   ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   * @param {google.api.serviceusage.v1beta1.QuotaOverride} request.override
   *   The override to create.
   * @param {boolean} request.force
   *   Whether to force the creation of the quota override.
   *   Setting the force parameter to 'true' ignores all quota safety checks that
   *   would fail the request. QuotaSafetyCheck lists all such validations.
   * @param {number[]} request.forceOnly
   *   The list of quota safety checks to ignore before the override mutation.
   *   Unlike 'force' field that ignores all the quota safety checks, the
   *   'force_only' field ignores only the specified checks; other checks are
   *   still enforced. The 'force' and 'force_only' fields cannot both be set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.create_consumer_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_CreateConsumerOverride_async
   */
  createConsumerOverride(
    request?: protos.google.api.serviceusage.v1beta1.ICreateConsumerOverrideRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createConsumerOverride(
    request: protos.google.api.serviceusage.v1beta1.ICreateConsumerOverrideRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConsumerOverride(
    request: protos.google.api.serviceusage.v1beta1.ICreateConsumerOverrideRequest,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createConsumerOverride(
    request?: protos.google.api.serviceusage.v1beta1.ICreateConsumerOverrideRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.serviceusage.v1beta1.IQuotaOverride,
            protos.google.api.serviceusage.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createConsumerOverride(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createConsumerOverride()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.create_consumer_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_CreateConsumerOverride_async
   */
  async checkCreateConsumerOverrideProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.serviceusage.v1beta1.QuotaOverride,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createConsumerOverride,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.serviceusage.v1beta1.QuotaOverride,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >;
  }
  /**
   * Updates a consumer override.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource name of the override to update.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d`
   * @param {google.api.serviceusage.v1beta1.QuotaOverride} request.override
   *   The new override.
   *   Only the override_value is updated; all other fields are ignored.
   * @param {boolean} request.force
   *   Whether to force the update of the quota override.
   *   Setting the force parameter to 'true' ignores all quota safety checks that
   *   would fail the request. QuotaSafetyCheck lists all such validations.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Update only the specified fields of the override.
   *   If unset, all fields will be updated.
   * @param {number[]} request.forceOnly
   *   The list of quota safety checks to ignore before the override mutation.
   *   Unlike 'force' field that ignores all the quota safety checks, the
   *   'force_only' field ignores only the specified checks; other checks are
   *   still enforced. The 'force' and 'force_only' fields cannot both be set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.update_consumer_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_UpdateConsumerOverride_async
   */
  updateConsumerOverride(
    request?: protos.google.api.serviceusage.v1beta1.IUpdateConsumerOverrideRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateConsumerOverride(
    request: protos.google.api.serviceusage.v1beta1.IUpdateConsumerOverrideRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConsumerOverride(
    request: protos.google.api.serviceusage.v1beta1.IUpdateConsumerOverrideRequest,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateConsumerOverride(
    request?: protos.google.api.serviceusage.v1beta1.IUpdateConsumerOverrideRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.serviceusage.v1beta1.IQuotaOverride,
            protos.google.api.serviceusage.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IQuotaOverride,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateConsumerOverride(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateConsumerOverride()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.update_consumer_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_UpdateConsumerOverride_async
   */
  async checkUpdateConsumerOverrideProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.serviceusage.v1beta1.QuotaOverride,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateConsumerOverride,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.serviceusage.v1beta1.QuotaOverride,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >;
  }
  /**
   * Deletes a consumer override.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource name of the override to delete.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d`
   * @param {boolean} request.force
   *   Whether to force the deletion of the quota override.
   *   Setting the force parameter to 'true' ignores all quota safety checks that
   *   would fail the request. QuotaSafetyCheck lists all such validations.
   * @param {number[]} request.forceOnly
   *   The list of quota safety checks to ignore before the override mutation.
   *   Unlike 'force' field that ignores all the quota safety checks, the
   *   'force_only' field ignores only the specified checks; other checks are
   *   still enforced. The 'force' and 'force_only' fields cannot both be set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.delete_consumer_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_DeleteConsumerOverride_async
   */
  deleteConsumerOverride(
    request?: protos.google.api.serviceusage.v1beta1.IDeleteConsumerOverrideRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteConsumerOverride(
    request: protos.google.api.serviceusage.v1beta1.IDeleteConsumerOverrideRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConsumerOverride(
    request: protos.google.api.serviceusage.v1beta1.IDeleteConsumerOverrideRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConsumerOverride(
    request?: protos.google.api.serviceusage.v1beta1.IDeleteConsumerOverrideRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.api.serviceusage.v1beta1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.api.serviceusage.v1beta1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteConsumerOverride(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteConsumerOverride()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.delete_consumer_override.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_DeleteConsumerOverride_async
   */
  async checkDeleteConsumerOverrideProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteConsumerOverride,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.api.serviceusage.v1beta1.OperationMetadata
    >;
  }
  /**
   * Creates or updates multiple consumer overrides atomically, all on the
   * same consumer, but on many different metrics or limits.
   * The name field in the quota override message should not be set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the consumer.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com`
   * @param {google.api.serviceusage.v1beta1.OverrideInlineSource} request.inlineSource
   *   The import data is specified in the request message itself
   * @param {boolean} request.force
   *   Whether to force the creation of the quota overrides.
   *   Setting the force parameter to 'true' ignores all quota safety checks that
   *   would fail the request. QuotaSafetyCheck lists all such validations.
   * @param {number[]} request.forceOnly
   *   The list of quota safety checks to ignore before the override mutation.
   *   Unlike 'force' field that ignores all the quota safety checks, the
   *   'force_only' field ignores only the specified checks; other checks are
   *   still enforced. The 'force' and 'force_only' fields cannot both be set.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.import_consumer_overrides.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_ImportConsumerOverrides_async
   */
  importConsumerOverrides(
    request?: protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  importConsumerOverrides(
    request: protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importConsumerOverrides(
    request: protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesRequest,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importConsumerOverrides(
    request?: protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesResponse,
            protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesResponse,
        protos.google.api.serviceusage.v1beta1.IImportConsumerOverridesMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importConsumerOverrides(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `importConsumerOverrides()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.import_consumer_overrides.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_ImportConsumerOverrides_async
   */
  async checkImportConsumerOverridesProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse,
      protos.google.api.serviceusage.v1beta1.ImportConsumerOverridesMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.importConsumerOverrides,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.serviceusage.v1beta1.ImportConsumerOverridesResponse,
      protos.google.api.serviceusage.v1beta1.ImportConsumerOverridesMetadata
    >;
  }
  /**
   * Generates service identity for service.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Name of the consumer and service to generate an identity for.
   *
   *   The `GenerateServiceIdentity` methods currently only support projects.
   *
   *   An example name would be:
   *   `projects/123/services/example.googleapis.com` where `123` is the
   *   project number.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.generate_service_identity.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_GenerateServiceIdentity_async
   */
  generateServiceIdentity(
    request?: protos.google.api.serviceusage.v1beta1.IGenerateServiceIdentityRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IServiceIdentity,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  generateServiceIdentity(
    request: protos.google.api.serviceusage.v1beta1.IGenerateServiceIdentityRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IServiceIdentity,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  generateServiceIdentity(
    request: protos.google.api.serviceusage.v1beta1.IGenerateServiceIdentityRequest,
    callback: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IServiceIdentity,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  generateServiceIdentity(
    request?: protos.google.api.serviceusage.v1beta1.IGenerateServiceIdentityRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.api.serviceusage.v1beta1.IServiceIdentity,
            protos.google.protobuf.IEmpty
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.api.serviceusage.v1beta1.IServiceIdentity,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.api.serviceusage.v1beta1.IServiceIdentity,
        protos.google.protobuf.IEmpty
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.generateServiceIdentity(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `generateServiceIdentity()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.generate_service_identity.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_GenerateServiceIdentity_async
   */
  async checkGenerateServiceIdentityProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.api.serviceusage.v1beta1.ServiceIdentity,
      protos.google.protobuf.Empty
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.generateServiceIdentity,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.api.serviceusage.v1beta1.ServiceIdentity,
      protos.google.protobuf.Empty
    >;
  }
  /**
   * Lists all services available to the specified project, and the current
   * state of those services with respect to the project. The list includes
   * all public services, all services for which the calling user has the
   * `servicemanagement.services.bind` permission, and all services that have
   * already been enabled on the project. The list can be filtered to
   * only include services in a specific state, for example to only include
   * services enabled on the project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent to search for services on.
   *
   *   An example name would be:
   *   `projects/123`
   *   where `123` is the project number (not project ID).
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   *   Requested page size cannot exceed 200.
   *    If not set, the default page size is 50.
   * @param {string} request.pageToken
   *   Token identifying which result to start with, which is returned by a
   *   previous list call.
   * @param {string} request.filter
   *   Only list services that conform to the given filter.
   *   The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Service]{@link google.api.serviceusage.v1beta1.Service}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listServicesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @deprecated ListServices is deprecated and may be removed in a future version.
   */
  listServices(
    request?: protos.google.api.serviceusage.v1beta1.IListServicesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IService[],
      protos.google.api.serviceusage.v1beta1.IListServicesRequest | null,
      protos.google.api.serviceusage.v1beta1.IListServicesResponse
    ]
  >;
  listServices(
    request: protos.google.api.serviceusage.v1beta1.IListServicesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListServicesRequest,
      | protos.google.api.serviceusage.v1beta1.IListServicesResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IService
    >
  ): void;
  listServices(
    request: protos.google.api.serviceusage.v1beta1.IListServicesRequest,
    callback: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListServicesRequest,
      | protos.google.api.serviceusage.v1beta1.IListServicesResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IService
    >
  ): void;
  listServices(
    request?: protos.google.api.serviceusage.v1beta1.IListServicesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.api.serviceusage.v1beta1.IListServicesRequest,
          | protos.google.api.serviceusage.v1beta1.IListServicesResponse
          | null
          | undefined,
          protos.google.api.serviceusage.v1beta1.IService
        >,
    callback?: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListServicesRequest,
      | protos.google.api.serviceusage.v1beta1.IListServicesResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IService
    >
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IService[],
      protos.google.api.serviceusage.v1beta1.IListServicesRequest | null,
      protos.google.api.serviceusage.v1beta1.IListServicesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    this.warn(
      'DEP$ServiceUsage-$ListServices',
      'ListServices is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    return this.innerApiCalls.listServices(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent to search for services on.
   *
   *   An example name would be:
   *   `projects/123`
   *   where `123` is the project number (not project ID).
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   *   Requested page size cannot exceed 200.
   *    If not set, the default page size is 50.
   * @param {string} request.pageToken
   *   Token identifying which result to start with, which is returned by a
   *   previous list call.
   * @param {string} request.filter
   *   Only list services that conform to the given filter.
   *   The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Service]{@link google.api.serviceusage.v1beta1.Service} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listServicesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @deprecated ListServices is deprecated and may be removed in a future version.
   */
  listServicesStream(
    request?: protos.google.api.serviceusage.v1beta1.IListServicesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listServices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    this.warn(
      'DEP$ServiceUsage-$ListServices',
      'ListServices is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    return this.descriptors.page.listServices.createStream(
      this.innerApiCalls.listServices as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listServices`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent to search for services on.
   *
   *   An example name would be:
   *   `projects/123`
   *   where `123` is the project number (not project ID).
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   *   Requested page size cannot exceed 200.
   *    If not set, the default page size is 50.
   * @param {string} request.pageToken
   *   Token identifying which result to start with, which is returned by a
   *   previous list call.
   * @param {string} request.filter
   *   Only list services that conform to the given filter.
   *   The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Service]{@link google.api.serviceusage.v1beta1.Service}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.list_services.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_ListServices_async
   * @deprecated ListServices is deprecated and may be removed in a future version.
   */
  listServicesAsync(
    request?: protos.google.api.serviceusage.v1beta1.IListServicesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.api.serviceusage.v1beta1.IService> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listServices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    this.warn(
      'DEP$ServiceUsage-$ListServices',
      'ListServices is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    return this.descriptors.page.listServices.asyncIterate(
      this.innerApiCalls['listServices'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.api.serviceusage.v1beta1.IService>;
  }
  /**
   * Retrieves a summary of all quota information visible to the service
   * consumer, organized by service metric. Each metric includes information
   * about all of its defined limits. Each limit includes the limit
   * configuration (quota unit, preciseness, default value), the current
   * effective limit value, and all of the overrides applied to the limit.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent of the quotas resource.
   *
   *   Some example names would be:
   *   `projects/123/services/serviceconsumermanagement.googleapis.com`
   *   `folders/345/services/serviceconsumermanagement.googleapis.com`
   *   `organizations/456/services/serviceconsumermanagement.googleapis.com`
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {google.api.serviceusage.v1beta1.QuotaView} request.view
   *   Specifies the level of detail for quota information in the response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [ConsumerQuotaMetric]{@link google.api.serviceusage.v1beta1.ConsumerQuotaMetric}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listConsumerQuotaMetricsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConsumerQuotaMetrics(
    request?: protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric[],
      protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest | null,
      protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsResponse
    ]
  >;
  listConsumerQuotaMetrics(
    request: protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
      | protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric
    >
  ): void;
  listConsumerQuotaMetrics(
    request: protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
    callback: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
      | protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric
    >
  ): void;
  listConsumerQuotaMetrics(
    request?: protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
          | protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsResponse
          | null
          | undefined,
          protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric
        >,
    callback?: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
      | protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric
    >
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric[],
      protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest | null,
      protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listConsumerQuotaMetrics(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent of the quotas resource.
   *
   *   Some example names would be:
   *   `projects/123/services/serviceconsumermanagement.googleapis.com`
   *   `folders/345/services/serviceconsumermanagement.googleapis.com`
   *   `organizations/456/services/serviceconsumermanagement.googleapis.com`
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {google.api.serviceusage.v1beta1.QuotaView} request.view
   *   Specifies the level of detail for quota information in the response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [ConsumerQuotaMetric]{@link google.api.serviceusage.v1beta1.ConsumerQuotaMetric} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listConsumerQuotaMetricsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConsumerQuotaMetricsStream(
    request?: protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConsumerQuotaMetrics'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConsumerQuotaMetrics.createStream(
      this.innerApiCalls.listConsumerQuotaMetrics as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listConsumerQuotaMetrics`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Parent of the quotas resource.
   *
   *   Some example names would be:
   *   `projects/123/services/serviceconsumermanagement.googleapis.com`
   *   `folders/345/services/serviceconsumermanagement.googleapis.com`
   *   `organizations/456/services/serviceconsumermanagement.googleapis.com`
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {google.api.serviceusage.v1beta1.QuotaView} request.view
   *   Specifies the level of detail for quota information in the response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [ConsumerQuotaMetric]{@link google.api.serviceusage.v1beta1.ConsumerQuotaMetric}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.list_consumer_quota_metrics.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_ListConsumerQuotaMetrics_async
   */
  listConsumerQuotaMetricsAsync(
    request?: protos.google.api.serviceusage.v1beta1.IListConsumerQuotaMetricsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConsumerQuotaMetrics'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConsumerQuotaMetrics.asyncIterate(
      this.innerApiCalls['listConsumerQuotaMetrics'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.api.serviceusage.v1beta1.IConsumerQuotaMetric>;
  }
  /**
   * Lists all admin overrides on this limit.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the parent quota limit, returned by a
   *   ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [QuotaOverride]{@link google.api.serviceusage.v1beta1.QuotaOverride}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAdminOverridesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAdminOverrides(
    request?: protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IQuotaOverride[],
      protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest | null,
      protos.google.api.serviceusage.v1beta1.IListAdminOverridesResponse
    ]
  >;
  listAdminOverrides(
    request: protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
      | protos.google.api.serviceusage.v1beta1.IListAdminOverridesResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IQuotaOverride
    >
  ): void;
  listAdminOverrides(
    request: protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
    callback: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
      | protos.google.api.serviceusage.v1beta1.IListAdminOverridesResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IQuotaOverride
    >
  ): void;
  listAdminOverrides(
    request?: protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
          | protos.google.api.serviceusage.v1beta1.IListAdminOverridesResponse
          | null
          | undefined,
          protos.google.api.serviceusage.v1beta1.IQuotaOverride
        >,
    callback?: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
      | protos.google.api.serviceusage.v1beta1.IListAdminOverridesResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IQuotaOverride
    >
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IQuotaOverride[],
      protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest | null,
      protos.google.api.serviceusage.v1beta1.IListAdminOverridesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAdminOverrides(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the parent quota limit, returned by a
   *   ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [QuotaOverride]{@link google.api.serviceusage.v1beta1.QuotaOverride} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAdminOverridesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAdminOverridesStream(
    request?: protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAdminOverrides'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAdminOverrides.createStream(
      this.innerApiCalls.listAdminOverrides as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAdminOverrides`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the parent quota limit, returned by a
   *   ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [QuotaOverride]{@link google.api.serviceusage.v1beta1.QuotaOverride}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.list_admin_overrides.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_ListAdminOverrides_async
   */
  listAdminOverridesAsync(
    request?: protos.google.api.serviceusage.v1beta1.IListAdminOverridesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.api.serviceusage.v1beta1.IQuotaOverride> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAdminOverrides'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAdminOverrides.asyncIterate(
      this.innerApiCalls['listAdminOverrides'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.api.serviceusage.v1beta1.IQuotaOverride>;
  }
  /**
   * Lists all consumer overrides on this limit.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the parent quota limit, returned by a
   *   ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [QuotaOverride]{@link google.api.serviceusage.v1beta1.QuotaOverride}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listConsumerOverridesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConsumerOverrides(
    request?: protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IQuotaOverride[],
      protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest | null,
      protos.google.api.serviceusage.v1beta1.IListConsumerOverridesResponse
    ]
  >;
  listConsumerOverrides(
    request: protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
      | protos.google.api.serviceusage.v1beta1.IListConsumerOverridesResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IQuotaOverride
    >
  ): void;
  listConsumerOverrides(
    request: protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
    callback: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
      | protos.google.api.serviceusage.v1beta1.IListConsumerOverridesResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IQuotaOverride
    >
  ): void;
  listConsumerOverrides(
    request?: protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
          | protos.google.api.serviceusage.v1beta1.IListConsumerOverridesResponse
          | null
          | undefined,
          protos.google.api.serviceusage.v1beta1.IQuotaOverride
        >,
    callback?: PaginationCallback<
      protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
      | protos.google.api.serviceusage.v1beta1.IListConsumerOverridesResponse
      | null
      | undefined,
      protos.google.api.serviceusage.v1beta1.IQuotaOverride
    >
  ): Promise<
    [
      protos.google.api.serviceusage.v1beta1.IQuotaOverride[],
      protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest | null,
      protos.google.api.serviceusage.v1beta1.IListConsumerOverridesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listConsumerOverrides(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the parent quota limit, returned by a
   *   ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [QuotaOverride]{@link google.api.serviceusage.v1beta1.QuotaOverride} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listConsumerOverridesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listConsumerOverridesStream(
    request?: protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConsumerOverrides'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConsumerOverrides.createStream(
      this.innerApiCalls.listConsumerOverrides as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listConsumerOverrides`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The resource name of the parent quota limit, returned by a
   *   ListConsumerQuotaMetrics or GetConsumerQuotaMetric call.
   *
   *   An example name would be:
   *   `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion`
   * @param {number} request.pageSize
   *   Requested size of the next page of data.
   * @param {string} request.pageToken
   *   Token identifying which result to start with; returned by a previous list
   *   call.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [QuotaOverride]{@link google.api.serviceusage.v1beta1.QuotaOverride}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta1/service_usage.list_consumer_overrides.js</caption>
   * region_tag:serviceusage_v1beta1_generated_ServiceUsage_ListConsumerOverrides_async
   */
  listConsumerOverridesAsync(
    request?: protos.google.api.serviceusage.v1beta1.IListConsumerOverridesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.api.serviceusage.v1beta1.IQuotaOverride> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listConsumerOverrides'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listConsumerOverrides.asyncIterate(
      this.innerApiCalls['listConsumerOverrides'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.api.serviceusage.v1beta1.IQuotaOverride>;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.serviceUsageStub && !this._terminated) {
      return this.serviceUsageStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
