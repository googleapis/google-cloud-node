// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/assured_workloads_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './assured_workloads_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service to manage AssuredWorkloads.
 * @class
 * @memberof v1
 */
export class AssuredWorkloadsServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  assuredWorkloadsServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AssuredWorkloadsServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AssuredWorkloadsServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof AssuredWorkloadsServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}'
      ),
      organizationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}'
      ),
      violationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/workloads/{workload}/violations/{violation}'
      ),
      workloadPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/workloads/{workload}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listWorkloads: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'workloads'
      ),
      listViolations: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'violations'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=organizations/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=organizations/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createWorkloadResponse = protoFilesRoot.lookup(
      '.google.cloud.assuredworkloads.v1.Workload'
    ) as gax.protobuf.Type;
    const createWorkloadMetadata = protoFilesRoot.lookup(
      '.google.cloud.assuredworkloads.v1.CreateWorkloadOperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createWorkload: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createWorkloadResponse.decode.bind(createWorkloadResponse),
        createWorkloadMetadata.decode.bind(createWorkloadMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.assuredworkloads.v1.AssuredWorkloadsService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.assuredWorkloadsServiceStub) {
      return this.assuredWorkloadsServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.assuredworkloads.v1.AssuredWorkloadsService.
    this.assuredWorkloadsServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.assuredworkloads.v1.AssuredWorkloadsService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.assuredworkloads.v1
            .AssuredWorkloadsService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const assuredWorkloadsServiceStubMethods = [
      'createWorkload',
      'updateWorkload',
      'restrictAllowedResources',
      'deleteWorkload',
      'getWorkload',
      'listWorkloads',
      'listViolations',
      'getViolation',
      'acknowledgeViolation',
    ];
    for (const methodName of assuredWorkloadsServiceStubMethods) {
      const callPromise = this.assuredWorkloadsServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.assuredWorkloadsServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'assuredworkloads.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'assuredworkloads.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Updates an existing workload.
   * Currently allows updating of workload display_name and labels.
   * For force updates don't set etag field in the Workload.
   * Only one update operation per workload can be in progress.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.assuredworkloads.v1.Workload} request.workload
   *   Required. The workload to update.
   *   The workload's `name` field is used to identify the workload to be updated.
   *   Format:
   *   organizations/{org_id}/locations/{location_id}/workloads/{workload_id}
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The list of fields to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Workload]{@link google.cloud.assuredworkloads.v1.Workload}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.update_workload.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_UpdateWorkload_async
   */
  updateWorkload(
    request?: protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      (
        | protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateWorkload(
    request: protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      | protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateWorkload(
    request: protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      | protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateWorkload(
    request?: protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.assuredworkloads.v1.IWorkload,
          | protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      | protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      (
        | protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'workload.name': request.workload!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateWorkload(request, options, callback);
  }
  /**
   * Restrict the list of resources allowed in the Workload environment.
   * The current list of allowed products can be found at
   * https://cloud.google.com/assured-workloads/docs/supported-products
   * In addition to assuredworkloads.workload.update permission, the user should
   * also have orgpolicy.policy.set permission on the folder resource
   * to use this functionality.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Workload. This is the workloads's
   *   relative path in the API, formatted as
   *   "organizations/{organization_id}/locations/{location_id}/workloads/{workload_id}".
   *   For example,
   *   "organizations/123/locations/us-east1/workloads/assured-workload-1".
   * @param {google.cloud.assuredworkloads.v1.RestrictAllowedResourcesRequest.RestrictionType} request.restrictionType
   *   Required. The type of restriction for using gcp products in the Workload environment.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [RestrictAllowedResourcesResponse]{@link google.cloud.assuredworkloads.v1.RestrictAllowedResourcesResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.restrict_allowed_resources.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_RestrictAllowedResources_async
   */
  restrictAllowedResources(
    request?: protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesResponse,
      (
        | protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  restrictAllowedResources(
    request: protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesResponse,
      | protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  restrictAllowedResources(
    request: protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesResponse,
      | protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  restrictAllowedResources(
    request?: protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesResponse,
          | protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesResponse,
      | protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesResponse,
      (
        | protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.restrictAllowedResources(
      request,
      options,
      callback
    );
  }
  /**
   * Deletes the workload. Make sure that workload's direct children are already
   * in a deleted state, otherwise the request will fail with a
   * FAILED_PRECONDITION error.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The `name` field is used to identify the workload.
   *   Format:
   *   organizations/{org_id}/locations/{location_id}/workloads/{workload_id}
   * @param {string} [request.etag]
   *   Optional. The etag of the workload.
   *   If this is provided, it must match the server's etag.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.delete_workload.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_DeleteWorkload_async
   */
  deleteWorkload(
    request?: protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteWorkload(
    request: protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWorkload(
    request: protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteWorkload(
    request?: protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteWorkload(request, options, callback);
  }
  /**
   * Gets Assured Workload associated with a CRM Node
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Workload to fetch. This is the workload's
   *   relative path in the API, formatted as
   *   "organizations/{organization_id}/locations/{location_id}/workloads/{workload_id}".
   *   For example,
   *   "organizations/123/locations/us-east1/workloads/assured-workload-1".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Workload]{@link google.cloud.assuredworkloads.v1.Workload}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.get_workload.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_GetWorkload_async
   */
  getWorkload(
    request?: protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest | undefined,
      {} | undefined
    ]
  >;
  getWorkload(
    request: protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      | protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkload(
    request: protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      | protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getWorkload(
    request?: protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.assuredworkloads.v1.IWorkload,
          | protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      | protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IWorkload,
      protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getWorkload(request, options, callback);
  }
  /**
   * Retrieves Assured Workload Violation based on ID.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Violation to fetch (ie. Violation.name).
   *   Format:
   *   organizations/{organization}/locations/{location}/workloads/{workload}/violations/{violation}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Violation]{@link google.cloud.assuredworkloads.v1.Violation}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.get_violation.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_GetViolation_async
   */
  getViolation(
    request?: protos.google.cloud.assuredworkloads.v1.IGetViolationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IViolation,
      protos.google.cloud.assuredworkloads.v1.IGetViolationRequest | undefined,
      {} | undefined
    ]
  >;
  getViolation(
    request: protos.google.cloud.assuredworkloads.v1.IGetViolationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IViolation,
      | protos.google.cloud.assuredworkloads.v1.IGetViolationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getViolation(
    request: protos.google.cloud.assuredworkloads.v1.IGetViolationRequest,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IViolation,
      | protos.google.cloud.assuredworkloads.v1.IGetViolationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getViolation(
    request?: protos.google.cloud.assuredworkloads.v1.IGetViolationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.assuredworkloads.v1.IViolation,
          | protos.google.cloud.assuredworkloads.v1.IGetViolationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.assuredworkloads.v1.IViolation,
      | protos.google.cloud.assuredworkloads.v1.IGetViolationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IViolation,
      protos.google.cloud.assuredworkloads.v1.IGetViolationRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.getViolation(request, options, callback);
  }
  /**
   * Acknowledges an existing violation. By acknowledging a violation, users
   * acknowledge the existence of a compliance violation in their workload and
   * decide to ignore it due to a valid business justification. Acknowledgement
   * is a permanent operation and it cannot be reverted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Violation to acknowledge.
   *   Format:
   *   organizations/{organization}/locations/{location}/workloads/{workload}/violations/{violation}
   * @param {string} request.comment
   *   Required. Business justification explaining the need for violation acknowledgement
   * @param {string} [request.nonCompliantOrgPolicy]
   *   Optional. This field is deprecated and will be removed in future version of the API.
   *   Name of the OrgPolicy which was modified with non-compliant change and
   *   resulted in this violation.
   *   Format:
   *   projects/{project_number}/policies/{constraint_name}
   *   folders/{folder_id}/policies/{constraint_name}
   *   organizations/{organization_id}/policies/{constraint_name}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AcknowledgeViolationResponse]{@link google.cloud.assuredworkloads.v1.AcknowledgeViolationResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.acknowledge_violation.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_AcknowledgeViolation_async
   */
  acknowledgeViolation(
    request?: protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationResponse,
      (
        | protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  acknowledgeViolation(
    request: protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationResponse,
      | protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  acknowledgeViolation(
    request: protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest,
    callback: Callback<
      protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationResponse,
      | protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  acknowledgeViolation(
    request?: protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationResponse,
          | protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationResponse,
      | protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationResponse,
      (
        | protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.acknowledgeViolation(request, options, callback);
  }

  /**
   * Creates Assured Workload.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the new Workload's parent.
   *   Must be of the form `organizations/{org_id}/locations/{location_id}`.
   * @param {google.cloud.assuredworkloads.v1.Workload} request.workload
   *   Required. Assured Workload to create
   * @param {string} [request.externalId]
   *   Optional. A identifier associated with the workload and underlying projects which
   *   allows for the break down of billing costs for a workload. The value
   *   provided for the identifier will add a label to the workload and contained
   *   projects with the identifier as the value.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.create_workload.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_CreateWorkload_async
   */
  createWorkload(
    request?: protos.google.cloud.assuredworkloads.v1.ICreateWorkloadRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.assuredworkloads.v1.IWorkload,
        protos.google.cloud.assuredworkloads.v1.ICreateWorkloadOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createWorkload(
    request: protos.google.cloud.assuredworkloads.v1.ICreateWorkloadRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.assuredworkloads.v1.IWorkload,
        protos.google.cloud.assuredworkloads.v1.ICreateWorkloadOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createWorkload(
    request: protos.google.cloud.assuredworkloads.v1.ICreateWorkloadRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.assuredworkloads.v1.IWorkload,
        protos.google.cloud.assuredworkloads.v1.ICreateWorkloadOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createWorkload(
    request?: protos.google.cloud.assuredworkloads.v1.ICreateWorkloadRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.assuredworkloads.v1.IWorkload,
            protos.google.cloud.assuredworkloads.v1.ICreateWorkloadOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.assuredworkloads.v1.IWorkload,
        protos.google.cloud.assuredworkloads.v1.ICreateWorkloadOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.assuredworkloads.v1.IWorkload,
        protos.google.cloud.assuredworkloads.v1.ICreateWorkloadOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createWorkload(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createWorkload()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.create_workload.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_CreateWorkload_async
   */
  async checkCreateWorkloadProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.assuredworkloads.v1.Workload,
      protos.google.cloud.assuredworkloads.v1.CreateWorkloadOperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createWorkload,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.assuredworkloads.v1.Workload,
      protos.google.cloud.assuredworkloads.v1.CreateWorkloadOperationMetadata
    >;
  }
  /**
   * Lists Assured Workloads under a CRM Node.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent Resource to list workloads from.
   *   Must be of the form `organizations/{org_id}/locations/{location}`.
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token returned from previous request. Page token contains context from
   *   previous request. Page token needs to be passed in the second and following
   *   requests.
   * @param {string} request.filter
   *   A custom filter for filtering by properties of a workload. At this time,
   *   only filtering by labels is supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Workload]{@link google.cloud.assuredworkloads.v1.Workload}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listWorkloadsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkloads(
    request?: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IWorkload[],
      protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest | null,
      protos.google.cloud.assuredworkloads.v1.IListWorkloadsResponse
    ]
  >;
  listWorkloads(
    request: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
      | protos.google.cloud.assuredworkloads.v1.IListWorkloadsResponse
      | null
      | undefined,
      protos.google.cloud.assuredworkloads.v1.IWorkload
    >
  ): void;
  listWorkloads(
    request: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
    callback: PaginationCallback<
      protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
      | protos.google.cloud.assuredworkloads.v1.IListWorkloadsResponse
      | null
      | undefined,
      protos.google.cloud.assuredworkloads.v1.IWorkload
    >
  ): void;
  listWorkloads(
    request?: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
          | protos.google.cloud.assuredworkloads.v1.IListWorkloadsResponse
          | null
          | undefined,
          protos.google.cloud.assuredworkloads.v1.IWorkload
        >,
    callback?: PaginationCallback<
      protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
      | protos.google.cloud.assuredworkloads.v1.IListWorkloadsResponse
      | null
      | undefined,
      protos.google.cloud.assuredworkloads.v1.IWorkload
    >
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IWorkload[],
      protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest | null,
      protos.google.cloud.assuredworkloads.v1.IListWorkloadsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listWorkloads(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent Resource to list workloads from.
   *   Must be of the form `organizations/{org_id}/locations/{location}`.
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token returned from previous request. Page token contains context from
   *   previous request. Page token needs to be passed in the second and following
   *   requests.
   * @param {string} request.filter
   *   A custom filter for filtering by properties of a workload. At this time,
   *   only filtering by labels is supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Workload]{@link google.cloud.assuredworkloads.v1.Workload} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listWorkloadsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listWorkloadsStream(
    request?: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWorkloads'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkloads.createStream(
      this.innerApiCalls.listWorkloads as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listWorkloads`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent Resource to list workloads from.
   *   Must be of the form `organizations/{org_id}/locations/{location}`.
   * @param {number} request.pageSize
   *   Page size.
   * @param {string} request.pageToken
   *   Page token returned from previous request. Page token contains context from
   *   previous request. Page token needs to be passed in the second and following
   *   requests.
   * @param {string} request.filter
   *   A custom filter for filtering by properties of a workload. At this time,
   *   only filtering by labels is supported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Workload]{@link google.cloud.assuredworkloads.v1.Workload}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.list_workloads.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_ListWorkloads_async
   */
  listWorkloadsAsync(
    request?: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.assuredworkloads.v1.IWorkload> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listWorkloads'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listWorkloads.asyncIterate(
      this.innerApiCalls['listWorkloads'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.assuredworkloads.v1.IWorkload>;
  }
  /**
   * Lists the Violations in the AssuredWorkload Environment.
   * Callers may also choose to read across multiple Workloads as per
   * [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
   * character) as a wildcard character instead of workload-id in the parent.
   * Format `organizations/{org_id}/locations/{location}/workloads/-`
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Workload name.
   *   Format `organizations/{org_id}/locations/{location}/workloads/{workload}`.
   * @param {google.cloud.assuredworkloads.v1.TimeWindow} [request.interval]
   *   Optional. Specifies the time window for retrieving active Violations.
   *   When specified, retrieves Violations that were active between start_time
   *   and end_time.
   * @param {number} [request.pageSize]
   *   Optional. Page size.
   * @param {string} [request.pageToken]
   *   Optional. Page token returned from previous request.
   * @param {string} [request.filter]
   *   Optional. A custom filter for filtering by the Violations properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Violation]{@link google.cloud.assuredworkloads.v1.Violation}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listViolationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listViolations(
    request?: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IViolation[],
      protos.google.cloud.assuredworkloads.v1.IListViolationsRequest | null,
      protos.google.cloud.assuredworkloads.v1.IListViolationsResponse
    ]
  >;
  listViolations(
    request: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
      | protos.google.cloud.assuredworkloads.v1.IListViolationsResponse
      | null
      | undefined,
      protos.google.cloud.assuredworkloads.v1.IViolation
    >
  ): void;
  listViolations(
    request: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
    callback: PaginationCallback<
      protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
      | protos.google.cloud.assuredworkloads.v1.IListViolationsResponse
      | null
      | undefined,
      protos.google.cloud.assuredworkloads.v1.IViolation
    >
  ): void;
  listViolations(
    request?: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
          | protos.google.cloud.assuredworkloads.v1.IListViolationsResponse
          | null
          | undefined,
          protos.google.cloud.assuredworkloads.v1.IViolation
        >,
    callback?: PaginationCallback<
      protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
      | protos.google.cloud.assuredworkloads.v1.IListViolationsResponse
      | null
      | undefined,
      protos.google.cloud.assuredworkloads.v1.IViolation
    >
  ): Promise<
    [
      protos.google.cloud.assuredworkloads.v1.IViolation[],
      protos.google.cloud.assuredworkloads.v1.IListViolationsRequest | null,
      protos.google.cloud.assuredworkloads.v1.IListViolationsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listViolations(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Workload name.
   *   Format `organizations/{org_id}/locations/{location}/workloads/{workload}`.
   * @param {google.cloud.assuredworkloads.v1.TimeWindow} [request.interval]
   *   Optional. Specifies the time window for retrieving active Violations.
   *   When specified, retrieves Violations that were active between start_time
   *   and end_time.
   * @param {number} [request.pageSize]
   *   Optional. Page size.
   * @param {string} [request.pageToken]
   *   Optional. Page token returned from previous request.
   * @param {string} [request.filter]
   *   Optional. A custom filter for filtering by the Violations properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Violation]{@link google.cloud.assuredworkloads.v1.Violation} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listViolationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listViolationsStream(
    request?: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listViolations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listViolations.createStream(
      this.innerApiCalls.listViolations as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listViolations`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The Workload name.
   *   Format `organizations/{org_id}/locations/{location}/workloads/{workload}`.
   * @param {google.cloud.assuredworkloads.v1.TimeWindow} [request.interval]
   *   Optional. Specifies the time window for retrieving active Violations.
   *   When specified, retrieves Violations that were active between start_time
   *   and end_time.
   * @param {number} [request.pageSize]
   *   Optional. Page size.
   * @param {string} [request.pageToken]
   *   Optional. Page token returned from previous request.
   * @param {string} [request.filter]
   *   Optional. A custom filter for filtering by the Violations properties.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Violation]{@link google.cloud.assuredworkloads.v1.Violation}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/assured_workloads_service.list_violations.js</caption>
   * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_ListViolations_async
   */
  listViolationsAsync(
    request?: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.assuredworkloads.v1.IViolation> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listViolations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listViolations.asyncIterate(
      this.innerApiCalls['listViolations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.assuredworkloads.v1.IViolation>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(organization: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      organization: organization,
      location: location,
    });
  }

  /**
   * Parse the organization from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName)
      .organization;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified organization resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationPath(organization: string) {
    return this.pathTemplates.organizationPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from Organization resource.
   *
   * @param {string} organizationName
   *   A fully-qualified path representing Organization resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationName(organizationName: string) {
    return this.pathTemplates.organizationPathTemplate.match(organizationName)
      .organization;
  }

  /**
   * Return a fully-qualified violation resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} workload
   * @param {string} violation
   * @returns {string} Resource name string.
   */
  violationPath(
    organization: string,
    location: string,
    workload: string,
    violation: string
  ) {
    return this.pathTemplates.violationPathTemplate.render({
      organization: organization,
      location: location,
      workload: workload,
      violation: violation,
    });
  }

  /**
   * Parse the organization from Violation resource.
   *
   * @param {string} violationName
   *   A fully-qualified path representing Violation resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromViolationName(violationName: string) {
    return this.pathTemplates.violationPathTemplate.match(violationName)
      .organization;
  }

  /**
   * Parse the location from Violation resource.
   *
   * @param {string} violationName
   *   A fully-qualified path representing Violation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromViolationName(violationName: string) {
    return this.pathTemplates.violationPathTemplate.match(violationName)
      .location;
  }

  /**
   * Parse the workload from Violation resource.
   *
   * @param {string} violationName
   *   A fully-qualified path representing Violation resource.
   * @returns {string} A string representing the workload.
   */
  matchWorkloadFromViolationName(violationName: string) {
    return this.pathTemplates.violationPathTemplate.match(violationName)
      .workload;
  }

  /**
   * Parse the violation from Violation resource.
   *
   * @param {string} violationName
   *   A fully-qualified path representing Violation resource.
   * @returns {string} A string representing the violation.
   */
  matchViolationFromViolationName(violationName: string) {
    return this.pathTemplates.violationPathTemplate.match(violationName)
      .violation;
  }

  /**
   * Return a fully-qualified workload resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} workload
   * @returns {string} Resource name string.
   */
  workloadPath(organization: string, location: string, workload: string) {
    return this.pathTemplates.workloadPathTemplate.render({
      organization: organization,
      location: location,
      workload: workload,
    });
  }

  /**
   * Parse the organization from Workload resource.
   *
   * @param {string} workloadName
   *   A fully-qualified path representing Workload resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromWorkloadName(workloadName: string) {
    return this.pathTemplates.workloadPathTemplate.match(workloadName)
      .organization;
  }

  /**
   * Parse the location from Workload resource.
   *
   * @param {string} workloadName
   *   A fully-qualified path representing Workload resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWorkloadName(workloadName: string) {
    return this.pathTemplates.workloadPathTemplate.match(workloadName).location;
  }

  /**
   * Parse the workload from Workload resource.
   *
   * @param {string} workloadName
   *   A fully-qualified path representing Workload resource.
   * @returns {string} A string representing the workload.
   */
  matchWorkloadFromWorkloadName(workloadName: string) {
    return this.pathTemplates.workloadPathTemplate.match(workloadName).workload;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.assuredWorkloadsServiceStub && !this._terminated) {
      return this.assuredWorkloadsServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
