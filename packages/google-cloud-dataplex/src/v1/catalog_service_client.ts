// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/catalog_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './catalog_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The primary resources offered by this service are EntryGroups, EntryTypes,
 *  AspectTypes, Entry and Aspect which collectively allow a data administrator
 *  to organize, manage, secure and catalog data across their organization
 *  located across cloud projects in a variety of storage systems including Cloud
 *  Storage and BigQuery.
 * @class
 * @memberof v1
 */
export class CatalogServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  catalogServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of CatalogServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new CatalogServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof CatalogServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'dataplex.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      aspectTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/aspectTypes/{aspect_type}'
      ),
      assetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}'
      ),
      contentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/content/{content}'
      ),
      dataAttributePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}'
      ),
      dataAttributeBindingPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataAttributeBindings/{data_attribute_binding_id}'
      ),
      dataScanPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataScans/{dataScan}'
      ),
      dataScanJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataScans/{dataScan}/jobs/{job}'
      ),
      dataTaxonomyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataTaxonomies/{data_taxonomy_id}'
      ),
      entityPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}'
      ),
      entryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}'
      ),
      entryGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}'
      ),
      entryTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryTypes/{entry_type}'
      ),
      environmentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}'
      ),
      jobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}/jobs/{job}'
      ),
      lakePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      partitionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}/partitions/{partition}'
      ),
      projectLocationLakeActionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/actions/{action}'
      ),
      projectLocationLakeZoneActionPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/actions/{action}'
        ),
      projectLocationLakeZoneAssetActionPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}/actions/{action}'
        ),
      sessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}/sessions/{session}'
      ),
      taskPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}'
      ),
      zonePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listEntryTypes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'entryTypes'
      ),
      listAspectTypes: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'aspectTypes'
      ),
      listEntryGroups: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'entryGroups'
      ),
      listEntries: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'entries'
      ),
      searchEntries: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'results'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/lakes/*}:getIamPolicy',
          additional_bindings: [
            {
              get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/dataScans/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/entryTypes/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/entryGroups/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/governanceRules/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/lakes/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataScans/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/entryTypes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/entryGroups/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/governanceRules/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/lakes/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataScans/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/entryTypes/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/entryGroups/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/governanceRules/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createEntryTypeResponse = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.EntryType'
    ) as gax.protobuf.Type;
    const createEntryTypeMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateEntryTypeResponse = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.EntryType'
    ) as gax.protobuf.Type;
    const updateEntryTypeMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteEntryTypeResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteEntryTypeMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createAspectTypeResponse = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.AspectType'
    ) as gax.protobuf.Type;
    const createAspectTypeMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateAspectTypeResponse = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.AspectType'
    ) as gax.protobuf.Type;
    const updateAspectTypeMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteAspectTypeResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteAspectTypeMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createEntryGroupResponse = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.EntryGroup'
    ) as gax.protobuf.Type;
    const createEntryGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateEntryGroupResponse = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.EntryGroup'
    ) as gax.protobuf.Type;
    const updateEntryGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteEntryGroupResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteEntryGroupMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createEntryType: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createEntryTypeResponse.decode.bind(createEntryTypeResponse),
        createEntryTypeMetadata.decode.bind(createEntryTypeMetadata)
      ),
      updateEntryType: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateEntryTypeResponse.decode.bind(updateEntryTypeResponse),
        updateEntryTypeMetadata.decode.bind(updateEntryTypeMetadata)
      ),
      deleteEntryType: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteEntryTypeResponse.decode.bind(deleteEntryTypeResponse),
        deleteEntryTypeMetadata.decode.bind(deleteEntryTypeMetadata)
      ),
      createAspectType: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAspectTypeResponse.decode.bind(createAspectTypeResponse),
        createAspectTypeMetadata.decode.bind(createAspectTypeMetadata)
      ),
      updateAspectType: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateAspectTypeResponse.decode.bind(updateAspectTypeResponse),
        updateAspectTypeMetadata.decode.bind(updateAspectTypeMetadata)
      ),
      deleteAspectType: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAspectTypeResponse.decode.bind(deleteAspectTypeResponse),
        deleteAspectTypeMetadata.decode.bind(deleteAspectTypeMetadata)
      ),
      createEntryGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createEntryGroupResponse.decode.bind(createEntryGroupResponse),
        createEntryGroupMetadata.decode.bind(createEntryGroupMetadata)
      ),
      updateEntryGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateEntryGroupResponse.decode.bind(updateEntryGroupResponse),
        updateEntryGroupMetadata.decode.bind(updateEntryGroupMetadata)
      ),
      deleteEntryGroup: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteEntryGroupResponse.decode.bind(deleteEntryGroupResponse),
        deleteEntryGroupMetadata.decode.bind(deleteEntryGroupMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.dataplex.v1.CatalogService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.catalogServiceStub) {
      return this.catalogServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.dataplex.v1.CatalogService.
    this.catalogServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.dataplex.v1.CatalogService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.dataplex.v1.CatalogService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const catalogServiceStubMethods = [
      'createEntryType',
      'updateEntryType',
      'deleteEntryType',
      'listEntryTypes',
      'getEntryType',
      'createAspectType',
      'updateAspectType',
      'deleteAspectType',
      'listAspectTypes',
      'getAspectType',
      'createEntryGroup',
      'updateEntryGroup',
      'deleteEntryGroup',
      'listEntryGroups',
      'getEntryGroup',
      'createEntry',
      'updateEntry',
      'deleteEntry',
      'listEntries',
      'getEntry',
      'lookupEntry',
      'searchEntries',
    ];
    for (const methodName of catalogServiceStubMethods) {
      const callPromise = this.catalogServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.catalogServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'dataplex.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'dataplex.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Retrieves a EntryType resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the EntryType:
   *   `projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.EntryType|EntryType}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.get_entry_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_GetEntryType_async
   */
  getEntryType(
    request?: protos.google.cloud.dataplex.v1.IGetEntryTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntryType,
      protos.google.cloud.dataplex.v1.IGetEntryTypeRequest | undefined,
      {} | undefined,
    ]
  >;
  getEntryType(
    request: protos.google.cloud.dataplex.v1.IGetEntryTypeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntryType,
      protos.google.cloud.dataplex.v1.IGetEntryTypeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getEntryType(
    request: protos.google.cloud.dataplex.v1.IGetEntryTypeRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntryType,
      protos.google.cloud.dataplex.v1.IGetEntryTypeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getEntryType(
    request?: protos.google.cloud.dataplex.v1.IGetEntryTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IEntryType,
          | protos.google.cloud.dataplex.v1.IGetEntryTypeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IEntryType,
      protos.google.cloud.dataplex.v1.IGetEntryTypeRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntryType,
      protos.google.cloud.dataplex.v1.IGetEntryTypeRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getEntryType(request, options, callback);
  }
  /**
   * Retrieves a AspectType resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the AspectType:
   *   `projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.AspectType|AspectType}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.get_aspect_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_GetAspectType_async
   */
  getAspectType(
    request?: protos.google.cloud.dataplex.v1.IGetAspectTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IAspectType,
      protos.google.cloud.dataplex.v1.IGetAspectTypeRequest | undefined,
      {} | undefined,
    ]
  >;
  getAspectType(
    request: protos.google.cloud.dataplex.v1.IGetAspectTypeRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IAspectType,
      protos.google.cloud.dataplex.v1.IGetAspectTypeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getAspectType(
    request: protos.google.cloud.dataplex.v1.IGetAspectTypeRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IAspectType,
      protos.google.cloud.dataplex.v1.IGetAspectTypeRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getAspectType(
    request?: protos.google.cloud.dataplex.v1.IGetAspectTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IAspectType,
          | protos.google.cloud.dataplex.v1.IGetAspectTypeRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IAspectType,
      protos.google.cloud.dataplex.v1.IGetAspectTypeRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IAspectType,
      protos.google.cloud.dataplex.v1.IGetAspectTypeRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAspectType(request, options, callback);
  }
  /**
   * Retrieves a EntryGroup resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the EntryGroup:
   *   `projects/{project_number}/locations/{location_id}/entryGroups/{entry_group_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.EntryGroup|EntryGroup}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.get_entry_group.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_GetEntryGroup_async
   */
  getEntryGroup(
    request?: protos.google.cloud.dataplex.v1.IGetEntryGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntryGroup,
      protos.google.cloud.dataplex.v1.IGetEntryGroupRequest | undefined,
      {} | undefined,
    ]
  >;
  getEntryGroup(
    request: protos.google.cloud.dataplex.v1.IGetEntryGroupRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntryGroup,
      protos.google.cloud.dataplex.v1.IGetEntryGroupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getEntryGroup(
    request: protos.google.cloud.dataplex.v1.IGetEntryGroupRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntryGroup,
      protos.google.cloud.dataplex.v1.IGetEntryGroupRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getEntryGroup(
    request?: protos.google.cloud.dataplex.v1.IGetEntryGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IEntryGroup,
          | protos.google.cloud.dataplex.v1.IGetEntryGroupRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IEntryGroup,
      protos.google.cloud.dataplex.v1.IGetEntryGroupRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntryGroup,
      protos.google.cloud.dataplex.v1.IGetEntryGroupRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getEntryGroup(request, options, callback);
  }
  /**
   * Creates an Entry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent Entry Group:
   *   `projects/{project}/locations/{location}/entryGroups/{entry_group}`.
   * @param {string} request.entryId
   *   Required. Entry identifier. It has to be unique within an Entry Group.
   *
   *   Entries corresponding to Google Cloud resources use Entry ID format based
   *   on Full Resource Names
   *   (https://cloud.google.com/apis/design/resource_names#full_resource_name).
   *   The format is a Full Resource Name of the resource without the
   *   prefix double slashes in the API Service Name part of Full Resource Name.
   *   This allows retrieval of entries using their associated resource name.
   *
   *   For example if the Full Resource Name of a resource is
   *   `//library.googleapis.com/shelves/shelf1/books/book2`,
   *   then the suggested entry_id is
   *   `library.googleapis.com/shelves/shelf1/books/book2`.
   *
   *   It is also suggested to follow the same convention for entries
   *   corresponding to resources from other providers or systems than Google
   *   Cloud.
   *
   *   The maximum size of the field is 4000 characters.
   * @param {google.cloud.dataplex.v1.Entry} request.entry
   *   Required. Entry resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Entry|Entry}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.create_entry.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_CreateEntry_async
   */
  createEntry(
    request?: protos.google.cloud.dataplex.v1.ICreateEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ICreateEntryRequest | undefined,
      {} | undefined,
    ]
  >;
  createEntry(
    request: protos.google.cloud.dataplex.v1.ICreateEntryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ICreateEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEntry(
    request: protos.google.cloud.dataplex.v1.ICreateEntryRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ICreateEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEntry(
    request?: protos.google.cloud.dataplex.v1.ICreateEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IEntry,
          | protos.google.cloud.dataplex.v1.ICreateEntryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ICreateEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ICreateEntryRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createEntry(request, options, callback);
  }
  /**
   * Updates an Entry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.dataplex.v1.Entry} request.entry
   *   Required. Entry resource.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. Mask of fields to update. To update Aspects, the update_mask must
   *   contain the value "aspects".
   *
   *   If the update_mask is empty, all modifiable fields present in the request
   *   will be updated.
   * @param {boolean} [request.allowMissing]
   *   Optional. If set to true and the entry does not exist, it will be created.
   * @param {boolean} [request.deleteMissingAspects]
   *   Optional. If set to true and the aspect_keys specify aspect ranges, any
   *   existing aspects from that range not provided in the request will be
   *   deleted.
   * @param {string[]} [request.aspectKeys]
   *   Optional. The map keys of the Aspects which should be modified. Supports
   *   the following syntaxes:
   *   * <aspect_type_reference> - matches aspect on given type and empty path
   *   * <aspect_type_reference>@path - matches aspect on given type and specified
   *   path
   *   * <aspect_type_reference>* - matches aspects on given type for all paths
   *   * *@path - matches aspects of all types on the given path
   *
   *   Existing aspects matching the syntax will not be removed unless
   *   `delete_missing_aspects` is set to true.
   *
   *   If this field is left empty, it will be treated as specifying exactly those
   *   Aspects present in the request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Entry|Entry}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.update_entry.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_UpdateEntry_async
   */
  updateEntry(
    request?: protos.google.cloud.dataplex.v1.IUpdateEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IUpdateEntryRequest | undefined,
      {} | undefined,
    ]
  >;
  updateEntry(
    request: protos.google.cloud.dataplex.v1.IUpdateEntryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IUpdateEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEntry(
    request: protos.google.cloud.dataplex.v1.IUpdateEntryRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IUpdateEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEntry(
    request?: protos.google.cloud.dataplex.v1.IUpdateEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IEntry,
          | protos.google.cloud.dataplex.v1.IUpdateEntryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IUpdateEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IUpdateEntryRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'entry.name': request.entry!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateEntry(request, options, callback);
  }
  /**
   * Deletes an Entry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Entry:
   *   `projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Entry|Entry}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.delete_entry.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_DeleteEntry_async
   */
  deleteEntry(
    request?: protos.google.cloud.dataplex.v1.IDeleteEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IDeleteEntryRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteEntry(
    request: protos.google.cloud.dataplex.v1.IDeleteEntryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IDeleteEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEntry(
    request: protos.google.cloud.dataplex.v1.IDeleteEntryRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IDeleteEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEntry(
    request?: protos.google.cloud.dataplex.v1.IDeleteEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IEntry,
          | protos.google.cloud.dataplex.v1.IDeleteEntryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IDeleteEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IDeleteEntryRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteEntry(request, options, callback);
  }
  /**
   * Gets a single entry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the Entry:
   *   `projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}`.
   * @param {google.cloud.dataplex.v1.EntryView} [request.view]
   *   Optional. View for controlling which parts of an entry are to be returned.
   * @param {string[]} [request.aspectTypes]
   *   Optional. Limits the aspects returned to the provided aspect types.
   *   Only works if the CUSTOM view is selected.
   * @param {string[]} [request.paths]
   *   Optional. Limits the aspects returned to those associated with the provided
   *   paths within the Entry. Only works if the CUSTOM view is selected.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Entry|Entry}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.get_entry.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_GetEntry_async
   */
  getEntry(
    request?: protos.google.cloud.dataplex.v1.IGetEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IGetEntryRequest | undefined,
      {} | undefined,
    ]
  >;
  getEntry(
    request: protos.google.cloud.dataplex.v1.IGetEntryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IGetEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getEntry(
    request: protos.google.cloud.dataplex.v1.IGetEntryRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IGetEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getEntry(
    request?: protos.google.cloud.dataplex.v1.IGetEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IEntry,
          protos.google.cloud.dataplex.v1.IGetEntryRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IGetEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.IGetEntryRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getEntry(request, options, callback);
  }
  /**
   * Looks up a single entry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The project to which the request should be attributed in the
   *   following form: `projects/{project}/locations/{location}`.
   * @param {google.cloud.dataplex.v1.EntryView} [request.view]
   *   Optional. View for controlling which parts of an entry are to be returned.
   * @param {string[]} [request.aspectTypes]
   *   Optional. Limits the aspects returned to the provided aspect types.
   *   Only works if the CUSTOM view is selected.
   * @param {string[]} [request.paths]
   *   Optional. Limits the aspects returned to those associated with the provided
   *   paths within the Entry. Only works if the CUSTOM view is selected.
   * @param {string} request.entry
   *   Required. The resource name of the Entry:
   *   `projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Entry|Entry}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.lookup_entry.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_LookupEntry_async
   */
  lookupEntry(
    request?: protos.google.cloud.dataplex.v1.ILookupEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ILookupEntryRequest | undefined,
      {} | undefined,
    ]
  >;
  lookupEntry(
    request: protos.google.cloud.dataplex.v1.ILookupEntryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ILookupEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  lookupEntry(
    request: protos.google.cloud.dataplex.v1.ILookupEntryRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ILookupEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  lookupEntry(
    request?: protos.google.cloud.dataplex.v1.ILookupEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IEntry,
          | protos.google.cloud.dataplex.v1.ILookupEntryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ILookupEntryRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry,
      protos.google.cloud.dataplex.v1.ILookupEntryRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.lookupEntry(request, options, callback);
  }

  /**
   * Creates an EntryType
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the EntryType, of the form:
   *   projects/{project_number}/locations/{location_id}
   *   where `location_id` refers to a GCP region.
   * @param {string} request.entryTypeId
   *   Required. EntryType identifier.
   * @param {google.cloud.dataplex.v1.EntryType} request.entryType
   *   Required. EntryType Resource
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the request, but do not perform mutations.
   *   The default is false.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.create_entry_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_CreateEntryType_async
   */
  createEntryType(
    request?: protos.google.cloud.dataplex.v1.ICreateEntryTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createEntryType(
    request: protos.google.cloud.dataplex.v1.ICreateEntryTypeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEntryType(
    request: protos.google.cloud.dataplex.v1.ICreateEntryTypeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEntryType(
    request?: protos.google.cloud.dataplex.v1.ICreateEntryTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataplex.v1.IEntryType,
            protos.google.cloud.dataplex.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createEntryType(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createEntryType()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.create_entry_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_CreateEntryType_async
   */
  async checkCreateEntryTypeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataplex.v1.EntryType,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createEntryType,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataplex.v1.EntryType,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >;
  }
  /**
   * Updates a EntryType resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.dataplex.v1.EntryType} request.entryType
   *   Required. EntryType Resource
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update.
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the request, but do not perform mutations.
   *   The default is false.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.update_entry_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_UpdateEntryType_async
   */
  updateEntryType(
    request?: protos.google.cloud.dataplex.v1.IUpdateEntryTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateEntryType(
    request: protos.google.cloud.dataplex.v1.IUpdateEntryTypeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEntryType(
    request: protos.google.cloud.dataplex.v1.IUpdateEntryTypeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEntryType(
    request?: protos.google.cloud.dataplex.v1.IUpdateEntryTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataplex.v1.IEntryType,
            protos.google.cloud.dataplex.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'entry_type.name': request.entryType!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateEntryType(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateEntryType()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.update_entry_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_UpdateEntryType_async
   */
  async checkUpdateEntryTypeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataplex.v1.EntryType,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateEntryType,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataplex.v1.EntryType,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a EntryType resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the EntryType:
   *   `projects/{project_number}/locations/{location_id}/entryTypes/{entry_type_id}`.
   * @param {string} [request.etag]
   *   Optional. If the client provided etag value does not match the current etag
   *   value, the DeleteEntryTypeRequest method returns an ABORTED error response
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.delete_entry_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_DeleteEntryType_async
   */
  deleteEntryType(
    request?: protos.google.cloud.dataplex.v1.IDeleteEntryTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteEntryType(
    request: protos.google.cloud.dataplex.v1.IDeleteEntryTypeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEntryType(
    request: protos.google.cloud.dataplex.v1.IDeleteEntryTypeRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEntryType(
    request?: protos.google.cloud.dataplex.v1.IDeleteEntryTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.dataplex.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteEntryType(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteEntryType()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.delete_entry_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_DeleteEntryType_async
   */
  async checkDeleteEntryTypeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteEntryType,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >;
  }
  /**
   * Creates an AspectType
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the AspectType, of the form:
   *   projects/{project_number}/locations/{location_id}
   *   where `location_id` refers to a GCP region.
   * @param {string} request.aspectTypeId
   *   Required. AspectType identifier.
   * @param {google.cloud.dataplex.v1.AspectType} request.aspectType
   *   Required. AspectType Resource
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the request, but do not perform mutations.
   *   The default is false.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.create_aspect_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_CreateAspectType_async
   */
  createAspectType(
    request?: protos.google.cloud.dataplex.v1.ICreateAspectTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createAspectType(
    request: protos.google.cloud.dataplex.v1.ICreateAspectTypeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAspectType(
    request: protos.google.cloud.dataplex.v1.ICreateAspectTypeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAspectType(
    request?: protos.google.cloud.dataplex.v1.ICreateAspectTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataplex.v1.IAspectType,
            protos.google.cloud.dataplex.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAspectType(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createAspectType()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.create_aspect_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_CreateAspectType_async
   */
  async checkCreateAspectTypeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataplex.v1.AspectType,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createAspectType,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataplex.v1.AspectType,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >;
  }
  /**
   * Updates a AspectType resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.dataplex.v1.AspectType} request.aspectType
   *   Required. AspectType Resource
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update.
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the request, but do not perform mutations.
   *   The default is false.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.update_aspect_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_UpdateAspectType_async
   */
  updateAspectType(
    request?: protos.google.cloud.dataplex.v1.IUpdateAspectTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateAspectType(
    request: protos.google.cloud.dataplex.v1.IUpdateAspectTypeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAspectType(
    request: protos.google.cloud.dataplex.v1.IUpdateAspectTypeRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAspectType(
    request?: protos.google.cloud.dataplex.v1.IUpdateAspectTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataplex.v1.IAspectType,
            protos.google.cloud.dataplex.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'aspect_type.name': request.aspectType!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateAspectType(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateAspectType()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.update_aspect_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_UpdateAspectType_async
   */
  async checkUpdateAspectTypeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataplex.v1.AspectType,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateAspectType,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataplex.v1.AspectType,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a AspectType resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the AspectType:
   *   `projects/{project_number}/locations/{location_id}/aspectTypes/{aspect_type_id}`.
   * @param {string} [request.etag]
   *   Optional. If the client provided etag value does not match the current etag
   *   value, the DeleteAspectTypeRequest method returns an ABORTED error response
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.delete_aspect_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_DeleteAspectType_async
   */
  deleteAspectType(
    request?: protos.google.cloud.dataplex.v1.IDeleteAspectTypeRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteAspectType(
    request: protos.google.cloud.dataplex.v1.IDeleteAspectTypeRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAspectType(
    request: protos.google.cloud.dataplex.v1.IDeleteAspectTypeRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAspectType(
    request?: protos.google.cloud.dataplex.v1.IDeleteAspectTypeRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.dataplex.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAspectType(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteAspectType()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.delete_aspect_type.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_DeleteAspectType_async
   */
  async checkDeleteAspectTypeProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteAspectType,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >;
  }
  /**
   * Creates an EntryGroup
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the entryGroup, of the form:
   *   projects/{project_number}/locations/{location_id}
   *   where `location_id` refers to a GCP region.
   * @param {string} request.entryGroupId
   *   Required. EntryGroup identifier.
   * @param {google.cloud.dataplex.v1.EntryGroup} request.entryGroup
   *   Required. EntryGroup Resource
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the request, but do not perform mutations.
   *   The default is false.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.create_entry_group.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_CreateEntryGroup_async
   */
  createEntryGroup(
    request?: protos.google.cloud.dataplex.v1.ICreateEntryGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createEntryGroup(
    request: protos.google.cloud.dataplex.v1.ICreateEntryGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEntryGroup(
    request: protos.google.cloud.dataplex.v1.ICreateEntryGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEntryGroup(
    request?: protos.google.cloud.dataplex.v1.ICreateEntryGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataplex.v1.IEntryGroup,
            protos.google.cloud.dataplex.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createEntryGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createEntryGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.create_entry_group.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_CreateEntryGroup_async
   */
  async checkCreateEntryGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataplex.v1.EntryGroup,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createEntryGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataplex.v1.EntryGroup,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >;
  }
  /**
   * Updates a EntryGroup resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.dataplex.v1.EntryGroup} request.entryGroup
   *   Required. EntryGroup Resource
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update.
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the request, but do not perform mutations.
   *   The default is false.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.update_entry_group.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_UpdateEntryGroup_async
   */
  updateEntryGroup(
    request?: protos.google.cloud.dataplex.v1.IUpdateEntryGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateEntryGroup(
    request: protos.google.cloud.dataplex.v1.IUpdateEntryGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEntryGroup(
    request: protos.google.cloud.dataplex.v1.IUpdateEntryGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEntryGroup(
    request?: protos.google.cloud.dataplex.v1.IUpdateEntryGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.dataplex.v1.IEntryGroup,
            protos.google.cloud.dataplex.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'entry_group.name': request.entryGroup!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateEntryGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateEntryGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.update_entry_group.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_UpdateEntryGroup_async
   */
  async checkUpdateEntryGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.dataplex.v1.EntryGroup,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateEntryGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.dataplex.v1.EntryGroup,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a EntryGroup resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the EntryGroup:
   *   `projects/{project_number}/locations/{location_id}/entryGroups/{entry_group_id}`.
   * @param {string} [request.etag]
   *   Optional. If the client provided etag value does not match the current etag
   *   value, the DeleteEntryGroupRequest method returns an ABORTED error response
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.delete_entry_group.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_DeleteEntryGroup_async
   */
  deleteEntryGroup(
    request?: protos.google.cloud.dataplex.v1.IDeleteEntryGroupRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteEntryGroup(
    request: protos.google.cloud.dataplex.v1.IDeleteEntryGroupRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEntryGroup(
    request: protos.google.cloud.dataplex.v1.IDeleteEntryGroupRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEntryGroup(
    request?: protos.google.cloud.dataplex.v1.IDeleteEntryGroupRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.dataplex.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteEntryGroup(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteEntryGroup()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.delete_entry_group.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_DeleteEntryGroup_async
   */
  async checkDeleteEntryGroupProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteEntryGroup,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.dataplex.v1.OperationMetadata
    >;
  }
  /**
   * Lists EntryType resources in a project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the EntryType location, of the form:
   *   `projects/{project_number}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of EntryTypes to return. The service may return
   *   fewer than this value. If unspecified, at most 10 EntryTypes will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListEntryTypes` call.
   *   Provide this to retrieve the subsequent page. When paginating, all other
   *   parameters provided to `ListEntryTypes` must match the call that provided
   *   the page token.
   * @param {string} [request.filter]
   *   Optional. Filter request. Filters are case-sensitive.
   *   The following formats are supported:
   *
   *   labels.key1 = "value1"
   *   labels:key1
   *   name = "value"
   *   These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   * @param {string} [request.orderBy]
   *   Optional. Order by fields (`name` or `create_time`) for the result.
   *   If not specified, the ordering is undefined.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.EntryType|EntryType}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listEntryTypesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntryTypes(
    request?: protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntryType[],
      protos.google.cloud.dataplex.v1.IListEntryTypesRequest | null,
      protos.google.cloud.dataplex.v1.IListEntryTypesResponse,
    ]
  >;
  listEntryTypes(
    request: protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
      | protos.google.cloud.dataplex.v1.IListEntryTypesResponse
      | null
      | undefined,
      protos.google.cloud.dataplex.v1.IEntryType
    >
  ): void;
  listEntryTypes(
    request: protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
      | protos.google.cloud.dataplex.v1.IListEntryTypesResponse
      | null
      | undefined,
      protos.google.cloud.dataplex.v1.IEntryType
    >
  ): void;
  listEntryTypes(
    request?: protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
          | protos.google.cloud.dataplex.v1.IListEntryTypesResponse
          | null
          | undefined,
          protos.google.cloud.dataplex.v1.IEntryType
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
      | protos.google.cloud.dataplex.v1.IListEntryTypesResponse
      | null
      | undefined,
      protos.google.cloud.dataplex.v1.IEntryType
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntryType[],
      protos.google.cloud.dataplex.v1.IListEntryTypesRequest | null,
      protos.google.cloud.dataplex.v1.IListEntryTypesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listEntryTypes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the EntryType location, of the form:
   *   `projects/{project_number}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of EntryTypes to return. The service may return
   *   fewer than this value. If unspecified, at most 10 EntryTypes will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListEntryTypes` call.
   *   Provide this to retrieve the subsequent page. When paginating, all other
   *   parameters provided to `ListEntryTypes` must match the call that provided
   *   the page token.
   * @param {string} [request.filter]
   *   Optional. Filter request. Filters are case-sensitive.
   *   The following formats are supported:
   *
   *   labels.key1 = "value1"
   *   labels:key1
   *   name = "value"
   *   These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   * @param {string} [request.orderBy]
   *   Optional. Order by fields (`name` or `create_time`) for the result.
   *   If not specified, the ordering is undefined.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.EntryType|EntryType} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listEntryTypesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntryTypesStream(
    request?: protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntryTypes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntryTypes.createStream(
      this.innerApiCalls.listEntryTypes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listEntryTypes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the EntryType location, of the form:
   *   `projects/{project_number}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of EntryTypes to return. The service may return
   *   fewer than this value. If unspecified, at most 10 EntryTypes will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListEntryTypes` call.
   *   Provide this to retrieve the subsequent page. When paginating, all other
   *   parameters provided to `ListEntryTypes` must match the call that provided
   *   the page token.
   * @param {string} [request.filter]
   *   Optional. Filter request. Filters are case-sensitive.
   *   The following formats are supported:
   *
   *   labels.key1 = "value1"
   *   labels:key1
   *   name = "value"
   *   These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   * @param {string} [request.orderBy]
   *   Optional. Order by fields (`name` or `create_time`) for the result.
   *   If not specified, the ordering is undefined.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.dataplex.v1.EntryType|EntryType}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.list_entry_types.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_ListEntryTypes_async
   */
  listEntryTypesAsync(
    request?: protos.google.cloud.dataplex.v1.IListEntryTypesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.dataplex.v1.IEntryType> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntryTypes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntryTypes.asyncIterate(
      this.innerApiCalls['listEntryTypes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataplex.v1.IEntryType>;
  }
  /**
   * Lists AspectType resources in a project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the AspectType location, of the form:
   *   `projects/{project_number}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of AspectTypes to return. The service may return
   *   fewer than this value. If unspecified, at most 10 AspectTypes will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListAspectTypes` call.
   *   Provide this to retrieve the subsequent page. When paginating, all other
   *   parameters provided to `ListAspectTypes` must match the call that provided
   *   the page token.
   * @param {string} [request.filter]
   *   Optional. Filter request. Filters are case-sensitive.
   *   The following formats are supported:
   *
   *   labels.key1 = "value1"
   *   labels:key1
   *   name = "value"
   *   These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   * @param {string} [request.orderBy]
   *   Optional. Order by fields (`name` or `create_time`) for the result.
   *   If not specified, the ordering is undefined.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.AspectType|AspectType}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAspectTypesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAspectTypes(
    request?: protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IAspectType[],
      protos.google.cloud.dataplex.v1.IListAspectTypesRequest | null,
      protos.google.cloud.dataplex.v1.IListAspectTypesResponse,
    ]
  >;
  listAspectTypes(
    request: protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
      | protos.google.cloud.dataplex.v1.IListAspectTypesResponse
      | null
      | undefined,
      protos.google.cloud.dataplex.v1.IAspectType
    >
  ): void;
  listAspectTypes(
    request: protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
      | protos.google.cloud.dataplex.v1.IListAspectTypesResponse
      | null
      | undefined,
      protos.google.cloud.dataplex.v1.IAspectType
    >
  ): void;
  listAspectTypes(
    request?: protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
          | protos.google.cloud.dataplex.v1.IListAspectTypesResponse
          | null
          | undefined,
          protos.google.cloud.dataplex.v1.IAspectType
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
      | protos.google.cloud.dataplex.v1.IListAspectTypesResponse
      | null
      | undefined,
      protos.google.cloud.dataplex.v1.IAspectType
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IAspectType[],
      protos.google.cloud.dataplex.v1.IListAspectTypesRequest | null,
      protos.google.cloud.dataplex.v1.IListAspectTypesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAspectTypes(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the AspectType location, of the form:
   *   `projects/{project_number}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of AspectTypes to return. The service may return
   *   fewer than this value. If unspecified, at most 10 AspectTypes will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListAspectTypes` call.
   *   Provide this to retrieve the subsequent page. When paginating, all other
   *   parameters provided to `ListAspectTypes` must match the call that provided
   *   the page token.
   * @param {string} [request.filter]
   *   Optional. Filter request. Filters are case-sensitive.
   *   The following formats are supported:
   *
   *   labels.key1 = "value1"
   *   labels:key1
   *   name = "value"
   *   These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   * @param {string} [request.orderBy]
   *   Optional. Order by fields (`name` or `create_time`) for the result.
   *   If not specified, the ordering is undefined.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.AspectType|AspectType} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAspectTypesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAspectTypesStream(
    request?: protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAspectTypes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAspectTypes.createStream(
      this.innerApiCalls.listAspectTypes as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAspectTypes`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the AspectType location, of the form:
   *   `projects/{project_number}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of AspectTypes to return. The service may return
   *   fewer than this value. If unspecified, at most 10 AspectTypes will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListAspectTypes` call.
   *   Provide this to retrieve the subsequent page. When paginating, all other
   *   parameters provided to `ListAspectTypes` must match the call that provided
   *   the page token.
   * @param {string} [request.filter]
   *   Optional. Filter request. Filters are case-sensitive.
   *   The following formats are supported:
   *
   *   labels.key1 = "value1"
   *   labels:key1
   *   name = "value"
   *   These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   * @param {string} [request.orderBy]
   *   Optional. Order by fields (`name` or `create_time`) for the result.
   *   If not specified, the ordering is undefined.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.dataplex.v1.AspectType|AspectType}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.list_aspect_types.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_ListAspectTypes_async
   */
  listAspectTypesAsync(
    request?: protos.google.cloud.dataplex.v1.IListAspectTypesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.dataplex.v1.IAspectType> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAspectTypes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAspectTypes.asyncIterate(
      this.innerApiCalls['listAspectTypes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataplex.v1.IAspectType>;
  }
  /**
   * Lists EntryGroup resources in a project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the entryGroup location, of the form:
   *   `projects/{project_number}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of EntryGroups to return. The service may return
   *   fewer than this value. If unspecified, at most 10 EntryGroups will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListEntryGroups` call.
   *   Provide this to retrieve the subsequent page. When paginating, all other
   *   parameters provided to `ListEntryGroups` must match the call that provided
   *   the page token.
   * @param {string} [request.filter]
   *   Optional. Filter request.
   * @param {string} [request.orderBy]
   *   Optional. Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.EntryGroup|EntryGroup}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listEntryGroupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntryGroups(
    request?: protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntryGroup[],
      protos.google.cloud.dataplex.v1.IListEntryGroupsRequest | null,
      protos.google.cloud.dataplex.v1.IListEntryGroupsResponse,
    ]
  >;
  listEntryGroups(
    request: protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
      | protos.google.cloud.dataplex.v1.IListEntryGroupsResponse
      | null
      | undefined,
      protos.google.cloud.dataplex.v1.IEntryGroup
    >
  ): void;
  listEntryGroups(
    request: protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
      | protos.google.cloud.dataplex.v1.IListEntryGroupsResponse
      | null
      | undefined,
      protos.google.cloud.dataplex.v1.IEntryGroup
    >
  ): void;
  listEntryGroups(
    request?: protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
          | protos.google.cloud.dataplex.v1.IListEntryGroupsResponse
          | null
          | undefined,
          protos.google.cloud.dataplex.v1.IEntryGroup
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
      | protos.google.cloud.dataplex.v1.IListEntryGroupsResponse
      | null
      | undefined,
      protos.google.cloud.dataplex.v1.IEntryGroup
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntryGroup[],
      protos.google.cloud.dataplex.v1.IListEntryGroupsRequest | null,
      protos.google.cloud.dataplex.v1.IListEntryGroupsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listEntryGroups(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the entryGroup location, of the form:
   *   `projects/{project_number}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of EntryGroups to return. The service may return
   *   fewer than this value. If unspecified, at most 10 EntryGroups will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListEntryGroups` call.
   *   Provide this to retrieve the subsequent page. When paginating, all other
   *   parameters provided to `ListEntryGroups` must match the call that provided
   *   the page token.
   * @param {string} [request.filter]
   *   Optional. Filter request.
   * @param {string} [request.orderBy]
   *   Optional. Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.EntryGroup|EntryGroup} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listEntryGroupsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntryGroupsStream(
    request?: protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntryGroups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntryGroups.createStream(
      this.innerApiCalls.listEntryGroups as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listEntryGroups`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the entryGroup location, of the form:
   *   `projects/{project_number}/locations/{location_id}`
   *   where `location_id` refers to a GCP region.
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of EntryGroups to return. The service may return
   *   fewer than this value. If unspecified, at most 10 EntryGroups will be
   *   returned. The maximum value is 1000; values above 1000 will be coerced to
   *   1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListEntryGroups` call.
   *   Provide this to retrieve the subsequent page. When paginating, all other
   *   parameters provided to `ListEntryGroups` must match the call that provided
   *   the page token.
   * @param {string} [request.filter]
   *   Optional. Filter request.
   * @param {string} [request.orderBy]
   *   Optional. Order by fields for the result.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.dataplex.v1.EntryGroup|EntryGroup}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.list_entry_groups.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_ListEntryGroups_async
   */
  listEntryGroupsAsync(
    request?: protos.google.cloud.dataplex.v1.IListEntryGroupsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.dataplex.v1.IEntryGroup> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntryGroups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntryGroups.asyncIterate(
      this.innerApiCalls['listEntryGroups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataplex.v1.IEntryGroup>;
  }
  /**
   * Lists entries within an entry group.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent Entry Group:
   *   `projects/{project}/locations/{location}/entryGroups/{entry_group}`.
   * @param {number} [request.pageSize]
   * @param {string} [request.pageToken]
   *   Optional. The pagination token returned by a previous request.
   * @param {string} [request.filter]
   *   Optional. A filter on the entries to return.
   *   Filters are case-sensitive.
   *   The request can be filtered by the following fields:
   *   entry_type, entry_source.display_name.
   *   The comparison operators are =, !=, <, >, <=, >= (strings are compared
   *   according to lexical order)
   *   The logical operators AND, OR, NOT can be used
   *   in the filter. Wildcard "*" can be used, but for entry_type the full
   *   project id or number needs to be provided. Example filter expressions:
   *   "entry_source.display_name=AnExampleDisplayName"
   *   "entry_type=projects/example-project/locations/global/entryTypes/example-entry_type"
   *   "entry_type=projects/example-project/locations/us/entryTypes/a* OR
   *    entry_type=projects/another-project/locations/*"
   *   "NOT entry_source.display_name=AnotherExampleDisplayName"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Entry|Entry}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listEntriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntries(
    request?: protos.google.cloud.dataplex.v1.IListEntriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry[],
      protos.google.cloud.dataplex.v1.IListEntriesRequest | null,
      protos.google.cloud.dataplex.v1.IListEntriesResponse,
    ]
  >;
  listEntries(
    request: protos.google.cloud.dataplex.v1.IListEntriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListEntriesRequest,
      protos.google.cloud.dataplex.v1.IListEntriesResponse | null | undefined,
      protos.google.cloud.dataplex.v1.IEntry
    >
  ): void;
  listEntries(
    request: protos.google.cloud.dataplex.v1.IListEntriesRequest,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListEntriesRequest,
      protos.google.cloud.dataplex.v1.IListEntriesResponse | null | undefined,
      protos.google.cloud.dataplex.v1.IEntry
    >
  ): void;
  listEntries(
    request?: protos.google.cloud.dataplex.v1.IListEntriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.dataplex.v1.IListEntriesRequest,
          | protos.google.cloud.dataplex.v1.IListEntriesResponse
          | null
          | undefined,
          protos.google.cloud.dataplex.v1.IEntry
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListEntriesRequest,
      protos.google.cloud.dataplex.v1.IListEntriesResponse | null | undefined,
      protos.google.cloud.dataplex.v1.IEntry
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IEntry[],
      protos.google.cloud.dataplex.v1.IListEntriesRequest | null,
      protos.google.cloud.dataplex.v1.IListEntriesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listEntries(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent Entry Group:
   *   `projects/{project}/locations/{location}/entryGroups/{entry_group}`.
   * @param {number} [request.pageSize]
   * @param {string} [request.pageToken]
   *   Optional. The pagination token returned by a previous request.
   * @param {string} [request.filter]
   *   Optional. A filter on the entries to return.
   *   Filters are case-sensitive.
   *   The request can be filtered by the following fields:
   *   entry_type, entry_source.display_name.
   *   The comparison operators are =, !=, <, >, <=, >= (strings are compared
   *   according to lexical order)
   *   The logical operators AND, OR, NOT can be used
   *   in the filter. Wildcard "*" can be used, but for entry_type the full
   *   project id or number needs to be provided. Example filter expressions:
   *   "entry_source.display_name=AnExampleDisplayName"
   *   "entry_type=projects/example-project/locations/global/entryTypes/example-entry_type"
   *   "entry_type=projects/example-project/locations/us/entryTypes/a* OR
   *    entry_type=projects/another-project/locations/*"
   *   "NOT entry_source.display_name=AnotherExampleDisplayName"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Entry|Entry} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listEntriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntriesStream(
    request?: protos.google.cloud.dataplex.v1.IListEntriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntries.createStream(
      this.innerApiCalls.listEntries as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listEntries`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent Entry Group:
   *   `projects/{project}/locations/{location}/entryGroups/{entry_group}`.
   * @param {number} [request.pageSize]
   * @param {string} [request.pageToken]
   *   Optional. The pagination token returned by a previous request.
   * @param {string} [request.filter]
   *   Optional. A filter on the entries to return.
   *   Filters are case-sensitive.
   *   The request can be filtered by the following fields:
   *   entry_type, entry_source.display_name.
   *   The comparison operators are =, !=, <, >, <=, >= (strings are compared
   *   according to lexical order)
   *   The logical operators AND, OR, NOT can be used
   *   in the filter. Wildcard "*" can be used, but for entry_type the full
   *   project id or number needs to be provided. Example filter expressions:
   *   "entry_source.display_name=AnExampleDisplayName"
   *   "entry_type=projects/example-project/locations/global/entryTypes/example-entry_type"
   *   "entry_type=projects/example-project/locations/us/entryTypes/a* OR
   *    entry_type=projects/another-project/locations/*"
   *   "NOT entry_source.display_name=AnotherExampleDisplayName"
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.dataplex.v1.Entry|Entry}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.list_entries.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_ListEntries_async
   */
  listEntriesAsync(
    request?: protos.google.cloud.dataplex.v1.IListEntriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.dataplex.v1.IEntry> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntries.asyncIterate(
      this.innerApiCalls['listEntries'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataplex.v1.IEntry>;
  }
  /**
   * Searches for entries matching given query and scope.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The project to which the request should be attributed in the
   *   following form: `projects/{project}/locations/{location}`.
   * @param {string} request.query
   *   Required. The query against which entries in scope should be matched.
   * @param {number} [request.pageSize]
   *   Optional. Pagination.
   * @param {string} [request.pageToken]
   * @param {string} [request.orderBy]
   *   Optional. Ordering of the results. Supported options to be added later.
   * @param {string} [request.scope]
   *   Optional. The scope under which the search should be operating. Should
   *   either be organizations/<org_id> or projects/<project_ref>. If left
   *   unspecified, it will default to the organization where the project provided
   *   in `name` is located.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.SearchEntriesResult|SearchEntriesResult}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `searchEntriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchEntries(
    request?: protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.ISearchEntriesResult[],
      protos.google.cloud.dataplex.v1.ISearchEntriesRequest | null,
      protos.google.cloud.dataplex.v1.ISearchEntriesResponse,
    ]
  >;
  searchEntries(
    request: protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
      protos.google.cloud.dataplex.v1.ISearchEntriesResponse | null | undefined,
      protos.google.cloud.dataplex.v1.ISearchEntriesResult
    >
  ): void;
  searchEntries(
    request: protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
      protos.google.cloud.dataplex.v1.ISearchEntriesResponse | null | undefined,
      protos.google.cloud.dataplex.v1.ISearchEntriesResult
    >
  ): void;
  searchEntries(
    request?: protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
          | protos.google.cloud.dataplex.v1.ISearchEntriesResponse
          | null
          | undefined,
          protos.google.cloud.dataplex.v1.ISearchEntriesResult
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
      protos.google.cloud.dataplex.v1.ISearchEntriesResponse | null | undefined,
      protos.google.cloud.dataplex.v1.ISearchEntriesResult
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.ISearchEntriesResult[],
      protos.google.cloud.dataplex.v1.ISearchEntriesRequest | null,
      protos.google.cloud.dataplex.v1.ISearchEntriesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.searchEntries(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The project to which the request should be attributed in the
   *   following form: `projects/{project}/locations/{location}`.
   * @param {string} request.query
   *   Required. The query against which entries in scope should be matched.
   * @param {number} [request.pageSize]
   *   Optional. Pagination.
   * @param {string} [request.pageToken]
   * @param {string} [request.orderBy]
   *   Optional. Ordering of the results. Supported options to be added later.
   * @param {string} [request.scope]
   *   Optional. The scope under which the search should be operating. Should
   *   either be organizations/<org_id> or projects/<project_ref>. If left
   *   unspecified, it will default to the organization where the project provided
   *   in `name` is located.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.SearchEntriesResult|SearchEntriesResult} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `searchEntriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchEntriesStream(
    request?: protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['searchEntries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchEntries.createStream(
      this.innerApiCalls.searchEntries as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `searchEntries`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The project to which the request should be attributed in the
   *   following form: `projects/{project}/locations/{location}`.
   * @param {string} request.query
   *   Required. The query against which entries in scope should be matched.
   * @param {number} [request.pageSize]
   *   Optional. Pagination.
   * @param {string} [request.pageToken]
   * @param {string} [request.orderBy]
   *   Optional. Ordering of the results. Supported options to be added later.
   * @param {string} [request.scope]
   *   Optional. The scope under which the search should be operating. Should
   *   either be organizations/<org_id> or projects/<project_ref>. If left
   *   unspecified, it will default to the organization where the project provided
   *   in `name` is located.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.dataplex.v1.SearchEntriesResult|SearchEntriesResult}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/catalog_service.search_entries.js</caption>
   * region_tag:dataplex_v1_generated_CatalogService_SearchEntries_async
   */
  searchEntriesAsync(
    request?: protos.google.cloud.dataplex.v1.ISearchEntriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.dataplex.v1.ISearchEntriesResult> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    const defaultCallSettings = this._defaults['searchEntries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchEntries.asyncIterate(
      this.innerApiCalls['searchEntries'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataplex.v1.ISearchEntriesResult>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified aspectType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} aspect_type
   * @returns {string} Resource name string.
   */
  aspectTypePath(project: string, location: string, aspectType: string) {
    return this.pathTemplates.aspectTypePathTemplate.render({
      project: project,
      location: location,
      aspect_type: aspectType,
    });
  }

  /**
   * Parse the project from AspectType resource.
   *
   * @param {string} aspectTypeName
   *   A fully-qualified path representing AspectType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAspectTypeName(aspectTypeName: string) {
    return this.pathTemplates.aspectTypePathTemplate.match(aspectTypeName)
      .project;
  }

  /**
   * Parse the location from AspectType resource.
   *
   * @param {string} aspectTypeName
   *   A fully-qualified path representing AspectType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAspectTypeName(aspectTypeName: string) {
    return this.pathTemplates.aspectTypePathTemplate.match(aspectTypeName)
      .location;
  }

  /**
   * Parse the aspect_type from AspectType resource.
   *
   * @param {string} aspectTypeName
   *   A fully-qualified path representing AspectType resource.
   * @returns {string} A string representing the aspect_type.
   */
  matchAspectTypeFromAspectTypeName(aspectTypeName: string) {
    return this.pathTemplates.aspectTypePathTemplate.match(aspectTypeName)
      .aspect_type;
  }

  /**
   * Return a fully-qualified asset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  assetPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    asset: string
  ) {
    return this.pathTemplates.assetPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      asset: asset,
    });
  }

  /**
   * Parse the project from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).project;
  }

  /**
   * Parse the location from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).location;
  }

  /**
   * Parse the lake from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).lake;
  }

  /**
   * Parse the zone from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).zone;
  }

  /**
   * Parse the asset from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).asset;
  }

  /**
   * Return a fully-qualified content resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} content
   * @returns {string} Resource name string.
   */
  contentPath(
    project: string,
    location: string,
    lake: string,
    content: string
  ) {
    return this.pathTemplates.contentPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      content: content,
    });
  }

  /**
   * Parse the project from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).project;
  }

  /**
   * Parse the location from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).location;
  }

  /**
   * Parse the lake from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).lake;
  }

  /**
   * Parse the content from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the content.
   */
  matchContentFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).content;
  }

  /**
   * Return a fully-qualified dataAttribute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataTaxonomy
   * @param {string} data_attribute_id
   * @returns {string} Resource name string.
   */
  dataAttributePath(
    project: string,
    location: string,
    dataTaxonomy: string,
    dataAttributeId: string
  ) {
    return this.pathTemplates.dataAttributePathTemplate.render({
      project: project,
      location: location,
      dataTaxonomy: dataTaxonomy,
      data_attribute_id: dataAttributeId,
    });
  }

  /**
   * Parse the project from DataAttribute resource.
   *
   * @param {string} dataAttributeName
   *   A fully-qualified path representing DataAttribute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataAttributeName(dataAttributeName: string) {
    return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
      .project;
  }

  /**
   * Parse the location from DataAttribute resource.
   *
   * @param {string} dataAttributeName
   *   A fully-qualified path representing DataAttribute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataAttributeName(dataAttributeName: string) {
    return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
      .location;
  }

  /**
   * Parse the dataTaxonomy from DataAttribute resource.
   *
   * @param {string} dataAttributeName
   *   A fully-qualified path representing DataAttribute resource.
   * @returns {string} A string representing the dataTaxonomy.
   */
  matchDataTaxonomyFromDataAttributeName(dataAttributeName: string) {
    return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
      .dataTaxonomy;
  }

  /**
   * Parse the data_attribute_id from DataAttribute resource.
   *
   * @param {string} dataAttributeName
   *   A fully-qualified path representing DataAttribute resource.
   * @returns {string} A string representing the data_attribute_id.
   */
  matchDataAttributeIdFromDataAttributeName(dataAttributeName: string) {
    return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName)
      .data_attribute_id;
  }

  /**
   * Return a fully-qualified dataAttributeBinding resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_attribute_binding_id
   * @returns {string} Resource name string.
   */
  dataAttributeBindingPath(
    project: string,
    location: string,
    dataAttributeBindingId: string
  ) {
    return this.pathTemplates.dataAttributeBindingPathTemplate.render({
      project: project,
      location: location,
      data_attribute_binding_id: dataAttributeBindingId,
    });
  }

  /**
   * Parse the project from DataAttributeBinding resource.
   *
   * @param {string} dataAttributeBindingName
   *   A fully-qualified path representing DataAttributeBinding resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataAttributeBindingName(dataAttributeBindingName: string) {
    return this.pathTemplates.dataAttributeBindingPathTemplate.match(
      dataAttributeBindingName
    ).project;
  }

  /**
   * Parse the location from DataAttributeBinding resource.
   *
   * @param {string} dataAttributeBindingName
   *   A fully-qualified path representing DataAttributeBinding resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataAttributeBindingName(dataAttributeBindingName: string) {
    return this.pathTemplates.dataAttributeBindingPathTemplate.match(
      dataAttributeBindingName
    ).location;
  }

  /**
   * Parse the data_attribute_binding_id from DataAttributeBinding resource.
   *
   * @param {string} dataAttributeBindingName
   *   A fully-qualified path representing DataAttributeBinding resource.
   * @returns {string} A string representing the data_attribute_binding_id.
   */
  matchDataAttributeBindingIdFromDataAttributeBindingName(
    dataAttributeBindingName: string
  ) {
    return this.pathTemplates.dataAttributeBindingPathTemplate.match(
      dataAttributeBindingName
    ).data_attribute_binding_id;
  }

  /**
   * Return a fully-qualified dataScan resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataScan
   * @returns {string} Resource name string.
   */
  dataScanPath(project: string, location: string, dataScan: string) {
    return this.pathTemplates.dataScanPathTemplate.render({
      project: project,
      location: location,
      dataScan: dataScan,
    });
  }

  /**
   * Parse the project from DataScan resource.
   *
   * @param {string} dataScanName
   *   A fully-qualified path representing DataScan resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataScanName(dataScanName: string) {
    return this.pathTemplates.dataScanPathTemplate.match(dataScanName).project;
  }

  /**
   * Parse the location from DataScan resource.
   *
   * @param {string} dataScanName
   *   A fully-qualified path representing DataScan resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataScanName(dataScanName: string) {
    return this.pathTemplates.dataScanPathTemplate.match(dataScanName).location;
  }

  /**
   * Parse the dataScan from DataScan resource.
   *
   * @param {string} dataScanName
   *   A fully-qualified path representing DataScan resource.
   * @returns {string} A string representing the dataScan.
   */
  matchDataScanFromDataScanName(dataScanName: string) {
    return this.pathTemplates.dataScanPathTemplate.match(dataScanName).dataScan;
  }

  /**
   * Return a fully-qualified dataScanJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataScan
   * @param {string} job
   * @returns {string} Resource name string.
   */
  dataScanJobPath(
    project: string,
    location: string,
    dataScan: string,
    job: string
  ) {
    return this.pathTemplates.dataScanJobPathTemplate.render({
      project: project,
      location: location,
      dataScan: dataScan,
      job: job,
    });
  }

  /**
   * Parse the project from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
      .project;
  }

  /**
   * Parse the location from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
      .location;
  }

  /**
   * Parse the dataScan from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the dataScan.
   */
  matchDataScanFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
      .dataScan;
  }

  /**
   * Parse the job from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
      .job;
  }

  /**
   * Return a fully-qualified dataTaxonomy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_taxonomy_id
   * @returns {string} Resource name string.
   */
  dataTaxonomyPath(project: string, location: string, dataTaxonomyId: string) {
    return this.pathTemplates.dataTaxonomyPathTemplate.render({
      project: project,
      location: location,
      data_taxonomy_id: dataTaxonomyId,
    });
  }

  /**
   * Parse the project from DataTaxonomy resource.
   *
   * @param {string} dataTaxonomyName
   *   A fully-qualified path representing DataTaxonomy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataTaxonomyName(dataTaxonomyName: string) {
    return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName)
      .project;
  }

  /**
   * Parse the location from DataTaxonomy resource.
   *
   * @param {string} dataTaxonomyName
   *   A fully-qualified path representing DataTaxonomy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataTaxonomyName(dataTaxonomyName: string) {
    return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName)
      .location;
  }

  /**
   * Parse the data_taxonomy_id from DataTaxonomy resource.
   *
   * @param {string} dataTaxonomyName
   *   A fully-qualified path representing DataTaxonomy resource.
   * @returns {string} A string representing the data_taxonomy_id.
   */
  matchDataTaxonomyIdFromDataTaxonomyName(dataTaxonomyName: string) {
    return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName)
      .data_taxonomy_id;
  }

  /**
   * Return a fully-qualified entity resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} entity
   * @returns {string} Resource name string.
   */
  entityPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    entity: string
  ) {
    return this.pathTemplates.entityPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      entity: entity,
    });
  }

  /**
   * Parse the project from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).project;
  }

  /**
   * Parse the location from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).location;
  }

  /**
   * Parse the lake from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).lake;
  }

  /**
   * Parse the zone from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).zone;
  }

  /**
   * Parse the entity from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the entity.
   */
  matchEntityFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).entity;
  }

  /**
   * Return a fully-qualified entry resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @param {string} entry
   * @returns {string} Resource name string.
   */
  entryPath(
    project: string,
    location: string,
    entryGroup: string,
    entry: string
  ) {
    return this.pathTemplates.entryPathTemplate.render({
      project: project,
      location: location,
      entry_group: entryGroup,
      entry: entry,
    });
  }

  /**
   * Parse the project from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).project;
  }

  /**
   * Parse the location from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).location;
  }

  /**
   * Parse the entry_group from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).entry_group;
  }

  /**
   * Parse the entry from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the entry.
   */
  matchEntryFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).entry;
  }

  /**
   * Return a fully-qualified entryGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @returns {string} Resource name string.
   */
  entryGroupPath(project: string, location: string, entryGroup: string) {
    return this.pathTemplates.entryGroupPathTemplate.render({
      project: project,
      location: location,
      entry_group: entryGroup,
    });
  }

  /**
   * Parse the project from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryGroupName(entryGroupName: string) {
    return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName)
      .project;
  }

  /**
   * Parse the location from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryGroupName(entryGroupName: string) {
    return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName)
      .location;
  }

  /**
   * Parse the entry_group from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromEntryGroupName(entryGroupName: string) {
    return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName)
      .entry_group;
  }

  /**
   * Return a fully-qualified entryType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_type
   * @returns {string} Resource name string.
   */
  entryTypePath(project: string, location: string, entryType: string) {
    return this.pathTemplates.entryTypePathTemplate.render({
      project: project,
      location: location,
      entry_type: entryType,
    });
  }

  /**
   * Parse the project from EntryType resource.
   *
   * @param {string} entryTypeName
   *   A fully-qualified path representing EntryType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryTypeName(entryTypeName: string) {
    return this.pathTemplates.entryTypePathTemplate.match(entryTypeName)
      .project;
  }

  /**
   * Parse the location from EntryType resource.
   *
   * @param {string} entryTypeName
   *   A fully-qualified path representing EntryType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryTypeName(entryTypeName: string) {
    return this.pathTemplates.entryTypePathTemplate.match(entryTypeName)
      .location;
  }

  /**
   * Parse the entry_type from EntryType resource.
   *
   * @param {string} entryTypeName
   *   A fully-qualified path representing EntryType resource.
   * @returns {string} A string representing the entry_type.
   */
  matchEntryTypeFromEntryTypeName(entryTypeName: string) {
    return this.pathTemplates.entryTypePathTemplate.match(entryTypeName)
      .entry_type;
  }

  /**
   * Return a fully-qualified environment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} environment
   * @returns {string} Resource name string.
   */
  environmentPath(
    project: string,
    location: string,
    lake: string,
    environment: string
  ) {
    return this.pathTemplates.environmentPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      environment: environment,
    });
  }

  /**
   * Parse the project from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .project;
  }

  /**
   * Parse the location from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .location;
  }

  /**
   * Parse the lake from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .lake;
  }

  /**
   * Parse the environment from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .environment;
  }

  /**
   * Return a fully-qualified job resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} task
   * @param {string} job
   * @returns {string} Resource name string.
   */
  jobPath(
    project: string,
    location: string,
    lake: string,
    task: string,
    job: string
  ) {
    return this.pathTemplates.jobPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      task: task,
      job: job,
    });
  }

  /**
   * Parse the project from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).project;
  }

  /**
   * Parse the location from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).location;
  }

  /**
   * Parse the lake from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).lake;
  }

  /**
   * Parse the task from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).task;
  }

  /**
   * Parse the job from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).job;
  }

  /**
   * Return a fully-qualified lake resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @returns {string} Resource name string.
   */
  lakePath(project: string, location: string, lake: string) {
    return this.pathTemplates.lakePathTemplate.render({
      project: project,
      location: location,
      lake: lake,
    });
  }

  /**
   * Parse the project from Lake resource.
   *
   * @param {string} lakeName
   *   A fully-qualified path representing Lake resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLakeName(lakeName: string) {
    return this.pathTemplates.lakePathTemplate.match(lakeName).project;
  }

  /**
   * Parse the location from Lake resource.
   *
   * @param {string} lakeName
   *   A fully-qualified path representing Lake resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLakeName(lakeName: string) {
    return this.pathTemplates.lakePathTemplate.match(lakeName).location;
  }

  /**
   * Parse the lake from Lake resource.
   *
   * @param {string} lakeName
   *   A fully-qualified path representing Lake resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromLakeName(lakeName: string) {
    return this.pathTemplates.lakePathTemplate.match(lakeName).lake;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified partition resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} entity
   * @param {string} partition
   * @returns {string} Resource name string.
   */
  partitionPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    entity: string,
    partition: string
  ) {
    return this.pathTemplates.partitionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      entity: entity,
      partition: partition,
    });
  }

  /**
   * Parse the project from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName)
      .project;
  }

  /**
   * Parse the location from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName)
      .location;
  }

  /**
   * Parse the lake from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).lake;
  }

  /**
   * Parse the zone from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).zone;
  }

  /**
   * Parse the entity from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the entity.
   */
  matchEntityFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).entity;
  }

  /**
   * Parse the partition from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the partition.
   */
  matchPartitionFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName)
      .partition;
  }

  /**
   * Return a fully-qualified projectLocationLakeAction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} action
   * @returns {string} Resource name string.
   */
  projectLocationLakeActionPath(
    project: string,
    location: string,
    lake: string,
    action: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      action: action,
    });
  }

  /**
   * Parse the project from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationLakeActionName(
    projectLocationLakeActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(
      projectLocationLakeActionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationLakeActionName(
    projectLocationLakeActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(
      projectLocationLakeActionName
    ).location;
  }

  /**
   * Parse the lake from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromProjectLocationLakeActionName(
    projectLocationLakeActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(
      projectLocationLakeActionName
    ).lake;
  }

  /**
   * Parse the action from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the action.
   */
  matchActionFromProjectLocationLakeActionName(
    projectLocationLakeActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(
      projectLocationLakeActionName
    ).action;
  }

  /**
   * Return a fully-qualified projectLocationLakeZoneAction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} action
   * @returns {string} Resource name string.
   */
  projectLocationLakeZoneActionPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    action: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      action: action,
    });
  }

  /**
   * Parse the project from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).location;
  }

  /**
   * Parse the lake from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).lake;
  }

  /**
   * Parse the zone from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).zone;
  }

  /**
   * Parse the action from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the action.
   */
  matchActionFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).action;
  }

  /**
   * Return a fully-qualified projectLocationLakeZoneAssetAction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} asset
   * @param {string} action
   * @returns {string} Resource name string.
   */
  projectLocationLakeZoneAssetActionPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    asset: string,
    action: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.render(
      {
        project: project,
        location: location,
        lake: lake,
        zone: zone,
        asset: asset,
        action: action,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).location;
  }

  /**
   * Parse the lake from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).lake;
  }

  /**
   * Parse the zone from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).zone;
  }

  /**
   * Parse the asset from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).asset;
  }

  /**
   * Parse the action from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the action.
   */
  matchActionFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).action;
  }

  /**
   * Return a fully-qualified session resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} environment
   * @param {string} session
   * @returns {string} Resource name string.
   */
  sessionPath(
    project: string,
    location: string,
    lake: string,
    environment: string,
    session: string
  ) {
    return this.pathTemplates.sessionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      environment: environment,
      session: session,
    });
  }

  /**
   * Parse the project from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).project;
  }

  /**
   * Parse the location from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).location;
  }

  /**
   * Parse the lake from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).lake;
  }

  /**
   * Parse the environment from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName)
      .environment;
  }

  /**
   * Parse the session from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
  }

  /**
   * Return a fully-qualified task resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} task
   * @returns {string} Resource name string.
   */
  taskPath(project: string, location: string, lake: string, task: string) {
    return this.pathTemplates.taskPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      task: task,
    });
  }

  /**
   * Parse the project from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).project;
  }

  /**
   * Parse the location from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).location;
  }

  /**
   * Parse the lake from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).lake;
  }

  /**
   * Parse the task from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).task;
  }

  /**
   * Return a fully-qualified zone resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @returns {string} Resource name string.
   */
  zonePath(project: string, location: string, lake: string, zone: string) {
    return this.pathTemplates.zonePathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
    });
  }

  /**
   * Parse the project from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).project;
  }

  /**
   * Parse the location from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).location;
  }

  /**
   * Parse the lake from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).lake;
  }

  /**
   * Parse the zone from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).zone;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.catalogServiceStub && !this._terminated) {
      return this.catalogServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
