// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/content_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './content_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  ContentService manages Notebook and SQL Scripts for Dataplex.
 * @class
 * @memberof v1
 */
export class ContentServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  contentServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ContentServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ContentServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ContentServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      assetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}'
      ),
      contentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/content/{content}'
      ),
      dataScanPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataScans/{dataScan}'
      ),
      dataScanJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataScans/{dataScan}/jobs/{job}'
      ),
      entityPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}'
      ),
      environmentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}'
      ),
      jobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}/jobs/{job}'
      ),
      lakePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}'
      ),
      partitionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}/partitions/{partition}'
      ),
      projectLocationLakeActionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/actions/{action}'
      ),
      projectLocationLakeZoneActionPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/actions/{action}'
        ),
      projectLocationLakeZoneAssetActionPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}/actions/{action}'
        ),
      sessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}/sessions/{session}'
      ),
      taskPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}'
      ),
      zonePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listContent: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'content'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
          get: '/v1/{resource=projects/*/locations/*/lakes/*}:getIamPolicy',
          additional_bindings: [
            {
              get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/dataScans/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:getIamPolicy',
            },
            {
              get: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:getIamPolicy',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
          post: '/v1/{resource=projects/*/locations/*/lakes/*}:setIamPolicy',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataScans/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:setIamPolicy',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:setIamPolicy',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
          post: '/v1/{resource=projects/*/locations/*/lakes/*}:testIamPermissions',
          body: '*',
          additional_bindings: [
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataScans/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:testIamPermissions',
              body: '*',
            },
            {
              post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:testIamPermissions',
              body: '*',
            },
          ],
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);

    this.descriptors.longrunning = {};

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.dataplex.v1.ContentService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.contentServiceStub) {
      return this.contentServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.dataplex.v1.ContentService.
    this.contentServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.dataplex.v1.ContentService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.dataplex.v1.ContentService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const contentServiceStubMethods = [
      'createContent',
      'updateContent',
      'deleteContent',
      'getContent',
      'getIamPolicy',
      'setIamPolicy',
      'testIamPermissions',
      'listContent',
    ];
    for (const methodName of contentServiceStubMethods) {
      const callPromise = this.contentServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.contentServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'dataplex.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'dataplex.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Create a content.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent lake:
   *   projects/{project_id}/locations/{location_id}/lakes/{lake_id}
   * @param {google.cloud.dataplex.v1.Content} request.content
   *   Required. Content resource.
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the request, but do not perform mutations.
   *   The default is false.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Content]{@link google.cloud.dataplex.v1.Content}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/content_service.create_content.js</caption>
   * region_tag:dataplex_v1_generated_ContentService_CreateContent_async
   */
  createContent(
    request?: protos.google.cloud.dataplex.v1.ICreateContentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.ICreateContentRequest | undefined,
      {} | undefined
    ]
  >;
  createContent(
    request: protos.google.cloud.dataplex.v1.ICreateContentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.ICreateContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createContent(
    request: protos.google.cloud.dataplex.v1.ICreateContentRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.ICreateContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  createContent(
    request?: protos.google.cloud.dataplex.v1.ICreateContentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IContent,
          | protos.google.cloud.dataplex.v1.ICreateContentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.ICreateContentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.ICreateContentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createContent(request, options, callback);
  }
  /**
   * Update a content. Only supports full resource update.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update.
   * @param {google.cloud.dataplex.v1.Content} request.content
   *   Required. Update description.
   *   Only fields specified in `update_mask` are updated.
   * @param {boolean} [request.validateOnly]
   *   Optional. Only validate the request, but do not perform mutations.
   *   The default is false.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Content]{@link google.cloud.dataplex.v1.Content}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/content_service.update_content.js</caption>
   * region_tag:dataplex_v1_generated_ContentService_UpdateContent_async
   */
  updateContent(
    request?: protos.google.cloud.dataplex.v1.IUpdateContentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IUpdateContentRequest | undefined,
      {} | undefined
    ]
  >;
  updateContent(
    request: protos.google.cloud.dataplex.v1.IUpdateContentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IUpdateContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateContent(
    request: protos.google.cloud.dataplex.v1.IUpdateContentRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IUpdateContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateContent(
    request?: protos.google.cloud.dataplex.v1.IUpdateContentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IContent,
          | protos.google.cloud.dataplex.v1.IUpdateContentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IUpdateContentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IUpdateContentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'content.name': request.content!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateContent(request, options, callback);
  }
  /**
   * Delete a content.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the content:
   *   projects/{project_id}/locations/{location_id}/lakes/{lake_id}/content/{content_id}
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/content_service.delete_content.js</caption>
   * region_tag:dataplex_v1_generated_ContentService_DeleteContent_async
   */
  deleteContent(
    request?: protos.google.cloud.dataplex.v1.IDeleteContentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataplex.v1.IDeleteContentRequest | undefined,
      {} | undefined
    ]
  >;
  deleteContent(
    request: protos.google.cloud.dataplex.v1.IDeleteContentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataplex.v1.IDeleteContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteContent(
    request: protos.google.cloud.dataplex.v1.IDeleteContentRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataplex.v1.IDeleteContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteContent(
    request?: protos.google.cloud.dataplex.v1.IDeleteContentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.dataplex.v1.IDeleteContentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataplex.v1.IDeleteContentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.cloud.dataplex.v1.IDeleteContentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteContent(request, options, callback);
  }
  /**
   * Get a content resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the content:
   *   projects/{project_id}/locations/{location_id}/lakes/{lake_id}/content/{content_id}
   * @param {google.cloud.dataplex.v1.GetContentRequest.ContentView} [request.view]
   *   Optional. Specify content view to make a partial request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Content]{@link google.cloud.dataplex.v1.Content}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/content_service.get_content.js</caption>
   * region_tag:dataplex_v1_generated_ContentService_GetContent_async
   */
  getContent(
    request?: protos.google.cloud.dataplex.v1.IGetContentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IGetContentRequest | undefined,
      {} | undefined
    ]
  >;
  getContent(
    request: protos.google.cloud.dataplex.v1.IGetContentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IGetContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getContent(
    request: protos.google.cloud.dataplex.v1.IGetContentRequest,
    callback: Callback<
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IGetContentRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getContent(
    request?: protos.google.cloud.dataplex.v1.IGetContentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.dataplex.v1.IContent,
          protos.google.cloud.dataplex.v1.IGetContentRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IGetContentRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IContent,
      protos.google.cloud.dataplex.v1.IGetContentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getContent(request, options, callback);
  }
  /**
   * Gets the access control policy for a contentitem resource. A `NOT_FOUND`
   * error is returned if the resource does not exist. An empty policy is
   * returned if the resource exists but does not have a policy set on it.
   *
   * Caller must have Google IAM `dataplex.content.getIamPolicy` permission
   * on the resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/content_service.get_iam_policy.js</caption>
   * region_tag:dataplex_v1_generated_ContentService_GetIamPolicy_async
   */
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  /**
   * Sets the access control policy on the specified contentitem resource.
   * Replaces any existing policy.
   *
   * Caller must have Google IAM `dataplex.content.setIamPolicy` permission
   * on the resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
   *   the fields in the mask will be modified. If no mask is provided, the
   *   following default mask is used:
   *
   *   `paths: "bindings, etag"`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/content_service.set_iam_policy.js</caption>
   * region_tag:dataplex_v1_generated_ContentService_SetIamPolicy_async
   */
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  /**
   * Returns the caller's permissions on a resource.
   * If the resource does not exist, an empty set of
   * permissions is returned (a `NOT_FOUND` error is not returned).
   *
   * A caller is not required to have Google IAM permission to make this
   * request.
   *
   * Note: This operation is designed to be used for building permission-aware
   * UIs and command-line tools, not for authorization checking. This operation
   * may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/content_service.test_iam_permissions.js</caption>
   * region_tag:dataplex_v1_generated_ContentService_TestIamPermissions_async
   */
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }

  /**
   * List content.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent lake:
   *   projects/{project_id}/locations/{location_id}/lakes/{lake_id}
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of content to return. The service may return fewer
   *   than this value. If unspecified, at most 10 content will be returned. The
   *   maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListContent` call. Provide
   *   this to retrieve the subsequent page. When paginating, all other parameters
   *   provided to `ListContent` must match the call that provided the page
   *   token.
   * @param {string} [request.filter]
   *   Optional. Filter request. Filters are case-sensitive.
   *   The following formats are supported:
   *
   *   labels.key1 = "value1"
   *   labels:key1
   *   type = "NOTEBOOK"
   *   type = "SQL_SCRIPT"
   *
   *   These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Content]{@link google.cloud.dataplex.v1.Content}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listContentAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listContent(
    request?: protos.google.cloud.dataplex.v1.IListContentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IContent[],
      protos.google.cloud.dataplex.v1.IListContentRequest | null,
      protos.google.cloud.dataplex.v1.IListContentResponse
    ]
  >;
  listContent(
    request: protos.google.cloud.dataplex.v1.IListContentRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListContentRequest,
      protos.google.cloud.dataplex.v1.IListContentResponse | null | undefined,
      protos.google.cloud.dataplex.v1.IContent
    >
  ): void;
  listContent(
    request: protos.google.cloud.dataplex.v1.IListContentRequest,
    callback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListContentRequest,
      protos.google.cloud.dataplex.v1.IListContentResponse | null | undefined,
      protos.google.cloud.dataplex.v1.IContent
    >
  ): void;
  listContent(
    request?: protos.google.cloud.dataplex.v1.IListContentRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.dataplex.v1.IListContentRequest,
          | protos.google.cloud.dataplex.v1.IListContentResponse
          | null
          | undefined,
          protos.google.cloud.dataplex.v1.IContent
        >,
    callback?: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListContentRequest,
      protos.google.cloud.dataplex.v1.IListContentResponse | null | undefined,
      protos.google.cloud.dataplex.v1.IContent
    >
  ): Promise<
    [
      protos.google.cloud.dataplex.v1.IContent[],
      protos.google.cloud.dataplex.v1.IListContentRequest | null,
      protos.google.cloud.dataplex.v1.IListContentResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listContent(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent lake:
   *   projects/{project_id}/locations/{location_id}/lakes/{lake_id}
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of content to return. The service may return fewer
   *   than this value. If unspecified, at most 10 content will be returned. The
   *   maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListContent` call. Provide
   *   this to retrieve the subsequent page. When paginating, all other parameters
   *   provided to `ListContent` must match the call that provided the page
   *   token.
   * @param {string} [request.filter]
   *   Optional. Filter request. Filters are case-sensitive.
   *   The following formats are supported:
   *
   *   labels.key1 = "value1"
   *   labels:key1
   *   type = "NOTEBOOK"
   *   type = "SQL_SCRIPT"
   *
   *   These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Content]{@link google.cloud.dataplex.v1.Content} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listContentAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listContentStream(
    request?: protos.google.cloud.dataplex.v1.IListContentRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listContent'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listContent.createStream(
      this.innerApiCalls.listContent as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listContent`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the parent lake:
   *   projects/{project_id}/locations/{location_id}/lakes/{lake_id}
   * @param {number} [request.pageSize]
   *   Optional. Maximum number of content to return. The service may return fewer
   *   than this value. If unspecified, at most 10 content will be returned. The
   *   maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} [request.pageToken]
   *   Optional. Page token received from a previous `ListContent` call. Provide
   *   this to retrieve the subsequent page. When paginating, all other parameters
   *   provided to `ListContent` must match the call that provided the page
   *   token.
   * @param {string} [request.filter]
   *   Optional. Filter request. Filters are case-sensitive.
   *   The following formats are supported:
   *
   *   labels.key1 = "value1"
   *   labels:key1
   *   type = "NOTEBOOK"
   *   type = "SQL_SCRIPT"
   *
   *   These restrictions can be coinjoined with AND, OR and NOT conjunctions.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Content]{@link google.cloud.dataplex.v1.Content}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/content_service.list_content.js</caption>
   * region_tag:dataplex_v1_generated_ContentService_ListContent_async
   */
  listContentAsync(
    request?: protos.google.cloud.dataplex.v1.IListContentRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.dataplex.v1.IContent> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listContent'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listContent.asyncIterate(
      this.innerApiCalls['listContent'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataplex.v1.IContent>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified asset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  assetPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    asset: string
  ) {
    return this.pathTemplates.assetPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      asset: asset,
    });
  }

  /**
   * Parse the project from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).project;
  }

  /**
   * Parse the location from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).location;
  }

  /**
   * Parse the lake from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).lake;
  }

  /**
   * Parse the zone from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).zone;
  }

  /**
   * Parse the asset from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).asset;
  }

  /**
   * Return a fully-qualified content resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} content
   * @returns {string} Resource name string.
   */
  contentPath(
    project: string,
    location: string,
    lake: string,
    content: string
  ) {
    return this.pathTemplates.contentPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      content: content,
    });
  }

  /**
   * Parse the project from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).project;
  }

  /**
   * Parse the location from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).location;
  }

  /**
   * Parse the lake from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).lake;
  }

  /**
   * Parse the content from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the content.
   */
  matchContentFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).content;
  }

  /**
   * Return a fully-qualified dataScan resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataScan
   * @returns {string} Resource name string.
   */
  dataScanPath(project: string, location: string, dataScan: string) {
    return this.pathTemplates.dataScanPathTemplate.render({
      project: project,
      location: location,
      dataScan: dataScan,
    });
  }

  /**
   * Parse the project from DataScan resource.
   *
   * @param {string} dataScanName
   *   A fully-qualified path representing DataScan resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataScanName(dataScanName: string) {
    return this.pathTemplates.dataScanPathTemplate.match(dataScanName).project;
  }

  /**
   * Parse the location from DataScan resource.
   *
   * @param {string} dataScanName
   *   A fully-qualified path representing DataScan resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataScanName(dataScanName: string) {
    return this.pathTemplates.dataScanPathTemplate.match(dataScanName).location;
  }

  /**
   * Parse the dataScan from DataScan resource.
   *
   * @param {string} dataScanName
   *   A fully-qualified path representing DataScan resource.
   * @returns {string} A string representing the dataScan.
   */
  matchDataScanFromDataScanName(dataScanName: string) {
    return this.pathTemplates.dataScanPathTemplate.match(dataScanName).dataScan;
  }

  /**
   * Return a fully-qualified dataScanJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataScan
   * @param {string} job
   * @returns {string} Resource name string.
   */
  dataScanJobPath(
    project: string,
    location: string,
    dataScan: string,
    job: string
  ) {
    return this.pathTemplates.dataScanJobPathTemplate.render({
      project: project,
      location: location,
      dataScan: dataScan,
      job: job,
    });
  }

  /**
   * Parse the project from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
      .project;
  }

  /**
   * Parse the location from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
      .location;
  }

  /**
   * Parse the dataScan from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the dataScan.
   */
  matchDataScanFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
      .dataScan;
  }

  /**
   * Parse the job from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName)
      .job;
  }

  /**
   * Return a fully-qualified entity resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} entity
   * @returns {string} Resource name string.
   */
  entityPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    entity: string
  ) {
    return this.pathTemplates.entityPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      entity: entity,
    });
  }

  /**
   * Parse the project from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).project;
  }

  /**
   * Parse the location from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).location;
  }

  /**
   * Parse the lake from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).lake;
  }

  /**
   * Parse the zone from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).zone;
  }

  /**
   * Parse the entity from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the entity.
   */
  matchEntityFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).entity;
  }

  /**
   * Return a fully-qualified environment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} environment
   * @returns {string} Resource name string.
   */
  environmentPath(
    project: string,
    location: string,
    lake: string,
    environment: string
  ) {
    return this.pathTemplates.environmentPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      environment: environment,
    });
  }

  /**
   * Parse the project from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .project;
  }

  /**
   * Parse the location from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .location;
  }

  /**
   * Parse the lake from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .lake;
  }

  /**
   * Parse the environment from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName)
      .environment;
  }

  /**
   * Return a fully-qualified job resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} task
   * @param {string} job
   * @returns {string} Resource name string.
   */
  jobPath(
    project: string,
    location: string,
    lake: string,
    task: string,
    job: string
  ) {
    return this.pathTemplates.jobPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      task: task,
      job: job,
    });
  }

  /**
   * Parse the project from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).project;
  }

  /**
   * Parse the location from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).location;
  }

  /**
   * Parse the lake from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).lake;
  }

  /**
   * Parse the task from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).task;
  }

  /**
   * Parse the job from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).job;
  }

  /**
   * Return a fully-qualified lake resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @returns {string} Resource name string.
   */
  lakePath(project: string, location: string, lake: string) {
    return this.pathTemplates.lakePathTemplate.render({
      project: project,
      location: location,
      lake: lake,
    });
  }

  /**
   * Parse the project from Lake resource.
   *
   * @param {string} lakeName
   *   A fully-qualified path representing Lake resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLakeName(lakeName: string) {
    return this.pathTemplates.lakePathTemplate.match(lakeName).project;
  }

  /**
   * Parse the location from Lake resource.
   *
   * @param {string} lakeName
   *   A fully-qualified path representing Lake resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLakeName(lakeName: string) {
    return this.pathTemplates.lakePathTemplate.match(lakeName).location;
  }

  /**
   * Parse the lake from Lake resource.
   *
   * @param {string} lakeName
   *   A fully-qualified path representing Lake resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromLakeName(lakeName: string) {
    return this.pathTemplates.lakePathTemplate.match(lakeName).lake;
  }

  /**
   * Return a fully-qualified partition resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} entity
   * @param {string} partition
   * @returns {string} Resource name string.
   */
  partitionPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    entity: string,
    partition: string
  ) {
    return this.pathTemplates.partitionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      entity: entity,
      partition: partition,
    });
  }

  /**
   * Parse the project from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName)
      .project;
  }

  /**
   * Parse the location from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName)
      .location;
  }

  /**
   * Parse the lake from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).lake;
  }

  /**
   * Parse the zone from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).zone;
  }

  /**
   * Parse the entity from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the entity.
   */
  matchEntityFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).entity;
  }

  /**
   * Parse the partition from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the partition.
   */
  matchPartitionFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName)
      .partition;
  }

  /**
   * Return a fully-qualified projectLocationLakeAction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} action
   * @returns {string} Resource name string.
   */
  projectLocationLakeActionPath(
    project: string,
    location: string,
    lake: string,
    action: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      action: action,
    });
  }

  /**
   * Parse the project from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationLakeActionName(
    projectLocationLakeActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(
      projectLocationLakeActionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationLakeActionName(
    projectLocationLakeActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(
      projectLocationLakeActionName
    ).location;
  }

  /**
   * Parse the lake from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromProjectLocationLakeActionName(
    projectLocationLakeActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(
      projectLocationLakeActionName
    ).lake;
  }

  /**
   * Parse the action from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the action.
   */
  matchActionFromProjectLocationLakeActionName(
    projectLocationLakeActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(
      projectLocationLakeActionName
    ).action;
  }

  /**
   * Return a fully-qualified projectLocationLakeZoneAction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} action
   * @returns {string} Resource name string.
   */
  projectLocationLakeZoneActionPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    action: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      action: action,
    });
  }

  /**
   * Parse the project from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).location;
  }

  /**
   * Parse the lake from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).lake;
  }

  /**
   * Parse the zone from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).zone;
  }

  /**
   * Parse the action from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the action.
   */
  matchActionFromProjectLocationLakeZoneActionName(
    projectLocationLakeZoneActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(
      projectLocationLakeZoneActionName
    ).action;
  }

  /**
   * Return a fully-qualified projectLocationLakeZoneAssetAction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} asset
   * @param {string} action
   * @returns {string} Resource name string.
   */
  projectLocationLakeZoneAssetActionPath(
    project: string,
    location: string,
    lake: string,
    zone: string,
    asset: string,
    action: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.render(
      {
        project: project,
        location: location,
        lake: lake,
        zone: zone,
        asset: asset,
        action: action,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).location;
  }

  /**
   * Parse the lake from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).lake;
  }

  /**
   * Parse the zone from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).zone;
  }

  /**
   * Parse the asset from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).asset;
  }

  /**
   * Parse the action from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the action.
   */
  matchActionFromProjectLocationLakeZoneAssetActionName(
    projectLocationLakeZoneAssetActionName: string
  ) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(
      projectLocationLakeZoneAssetActionName
    ).action;
  }

  /**
   * Return a fully-qualified session resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} environment
   * @param {string} session
   * @returns {string} Resource name string.
   */
  sessionPath(
    project: string,
    location: string,
    lake: string,
    environment: string,
    session: string
  ) {
    return this.pathTemplates.sessionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      environment: environment,
      session: session,
    });
  }

  /**
   * Parse the project from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).project;
  }

  /**
   * Parse the location from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).location;
  }

  /**
   * Parse the lake from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).lake;
  }

  /**
   * Parse the environment from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName)
      .environment;
  }

  /**
   * Parse the session from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
  }

  /**
   * Return a fully-qualified task resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} task
   * @returns {string} Resource name string.
   */
  taskPath(project: string, location: string, lake: string, task: string) {
    return this.pathTemplates.taskPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      task: task,
    });
  }

  /**
   * Parse the project from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).project;
  }

  /**
   * Parse the location from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).location;
  }

  /**
   * Parse the lake from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).lake;
  }

  /**
   * Parse the task from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).task;
  }

  /**
   * Return a fully-qualified zone resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @returns {string} Resource name string.
   */
  zonePath(project: string, location: string, lake: string, zone: string) {
    return this.pathTemplates.zonePathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
    });
  }

  /**
   * Parse the project from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).project;
  }

  /**
   * Parse the location from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).location;
  }

  /**
   * Parse the lake from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).lake;
  }

  /**
   * Parse the zone from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).zone;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.contentServiceStub && !this._terminated) {
      return this.contentServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
