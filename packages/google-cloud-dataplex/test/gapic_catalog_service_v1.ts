// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as catalogserviceModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.CatalogServiceClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'dataplex.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process !== 'undefined' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          catalogserviceModule.v1.CatalogServiceClient.servicePath;
        assert.strictEqual(servicePath, 'dataplex.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          catalogserviceModule.v1.CatalogServiceClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'dataplex.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'dataplex.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'dataplex.example.com');
    });
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new catalogserviceModule.v1.CatalogServiceClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = catalogserviceModule.v1.CatalogServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.catalogServiceStub, undefined);
      await client.initialize();
      assert(client.catalogServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.catalogServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.catalogServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getEntryType', () => {
    it('invokes getEntryType without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.EntryType()
      );
      client.innerApiCalls.getEntryType = stubSimpleCall(expectedResponse);
      const [response] = await client.getEntryType(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntryType without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.EntryType()
      );
      client.innerApiCalls.getEntryType =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEntryType(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntryType | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntryType with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEntryType = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getEntryType(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntryType with closed client', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getEntryType(request), expectedError);
    });
  });

  describe('getAspectType', () => {
    it('invokes getAspectType without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetAspectTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.AspectType()
      );
      client.innerApiCalls.getAspectType = stubSimpleCall(expectedResponse);
      const [response] = await client.getAspectType(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAspectType without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetAspectTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.AspectType()
      );
      client.innerApiCalls.getAspectType =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAspectType(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IAspectType | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAspectType with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetAspectTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAspectType = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAspectType(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAspectType with closed client', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetAspectTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAspectType(request), expectedError);
    });
  });

  describe('getEntryGroup', () => {
    it('invokes getEntryGroup without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.EntryGroup()
      );
      client.innerApiCalls.getEntryGroup = stubSimpleCall(expectedResponse);
      const [response] = await client.getEntryGroup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntryGroup without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.EntryGroup()
      );
      client.innerApiCalls.getEntryGroup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEntryGroup(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntryGroup | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntryGroup with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEntryGroup = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getEntryGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntryGroup with closed client', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getEntryGroup(request), expectedError);
    });
  });

  describe('createEntry', () => {
    it('invokes createEntry without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.createEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.createEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntry without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.createEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntry with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntry with closed client', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createEntry(request), expectedError);
    });
  });

  describe('updateEntry', () => {
    it('invokes updateEntry without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryRequest()
      );
      request.entry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryRequest',
        ['entry', 'name']
      );
      request.entry.name = defaultValue1;
      const expectedHeaderRequestParams = `entry.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.updateEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.updateEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntry without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryRequest()
      );
      request.entry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryRequest',
        ['entry', 'name']
      );
      request.entry.name = defaultValue1;
      const expectedHeaderRequestParams = `entry.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.updateEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntry with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryRequest()
      );
      request.entry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryRequest',
        ['entry', 'name']
      );
      request.entry.name = defaultValue1;
      const expectedHeaderRequestParams = `entry.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntry with closed client', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryRequest()
      );
      request.entry ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryRequest',
        ['entry', 'name']
      );
      request.entry.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateEntry(request), expectedError);
    });
  });

  describe('deleteEntry', () => {
    it('invokes deleteEntry without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.deleteEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntry without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.deleteEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntry with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntry with closed client', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteEntry(request), expectedError);
    });
  });

  describe('getEntry', () => {
    it('invokes getEntry without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.getEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.getEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntry without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.getEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntry with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEntry = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEntry with closed client', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.GetEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.GetEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getEntry(request), expectedError);
    });
  });

  describe('lookupEntry', () => {
    it('invokes lookupEntry without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.LookupEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.LookupEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.lookupEntry = stubSimpleCall(expectedResponse);
      const [response] = await client.lookupEntry(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupEntry without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.LookupEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.LookupEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.Entry()
      );
      client.innerApiCalls.lookupEntry =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.lookupEntry(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntry | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.lookupEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupEntry with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.LookupEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.LookupEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.lookupEntry = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.lookupEntry(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.lookupEntry as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookupEntry as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookupEntry with closed client', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.LookupEntryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.LookupEntryRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.lookupEntry(request), expectedError);
    });
  });

  describe('createEntryType', () => {
    it('invokes createEntryType without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryTypeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createEntryType =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createEntryType(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntryType without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryTypeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createEntryType =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createEntryType(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.dataplex.v1.IEntryType,
              protos.google.cloud.dataplex.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntryType with call error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryTypeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEntryType = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createEntryType(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntryType with LRO error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryTypeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEntryType = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createEntryType(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateEntryTypeProgress without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateEntryTypeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateEntryTypeProgress with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateEntryTypeProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateEntryType', () => {
    it('invokes updateEntryType without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryTypeRequest()
      );
      request.entryType ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryTypeRequest',
        ['entryType', 'name']
      );
      request.entryType.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_type.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateEntryType =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateEntryType(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntryType without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryTypeRequest()
      );
      request.entryType ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryTypeRequest',
        ['entryType', 'name']
      );
      request.entryType.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_type.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateEntryType =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateEntryType(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.dataplex.v1.IEntryType,
              protos.google.cloud.dataplex.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.dataplex.v1.IEntryType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntryType with call error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryTypeRequest()
      );
      request.entryType ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryTypeRequest',
        ['entryType', 'name']
      );
      request.entryType.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_type.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateEntryType = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateEntryType(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntryType with LRO error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryTypeRequest()
      );
      request.entryType ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryTypeRequest',
        ['entryType', 'name']
      );
      request.entryType.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_type.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateEntryType = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateEntryType(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateEntryTypeProgress without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateEntryTypeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateEntryTypeProgress with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateEntryTypeProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteEntryType', () => {
    it('invokes deleteEntryType without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteEntryType =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteEntryType(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntryType without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteEntryType =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteEntryType(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.dataplex.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntryType with call error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteEntryType = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteEntryType(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntryType with LRO error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteEntryType = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteEntryType(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteEntryType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteEntryTypeProgress without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteEntryTypeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteEntryTypeProgress with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteEntryTypeProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createAspectType', () => {
    it('invokes createAspectType without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateAspectTypeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAspectType =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAspectType(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAspectType without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateAspectTypeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAspectType =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAspectType(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.dataplex.v1.IAspectType,
              protos.google.cloud.dataplex.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAspectType with call error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateAspectTypeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAspectType = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAspectType(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAspectType with LRO error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateAspectTypeRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAspectType = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAspectType(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateAspectTypeProgress without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateAspectTypeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAspectTypeProgress with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAspectTypeProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateAspectType', () => {
    it('invokes updateAspectType without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateAspectTypeRequest()
      );
      request.aspectType ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateAspectTypeRequest',
        ['aspectType', 'name']
      );
      request.aspectType.name = defaultValue1;
      const expectedHeaderRequestParams = `aspect_type.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAspectType =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateAspectType(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAspectType without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateAspectTypeRequest()
      );
      request.aspectType ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateAspectTypeRequest',
        ['aspectType', 'name']
      );
      request.aspectType.name = defaultValue1;
      const expectedHeaderRequestParams = `aspect_type.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAspectType =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAspectType(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.dataplex.v1.IAspectType,
              protos.google.cloud.dataplex.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.dataplex.v1.IAspectType,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAspectType with call error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateAspectTypeRequest()
      );
      request.aspectType ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateAspectTypeRequest',
        ['aspectType', 'name']
      );
      request.aspectType.name = defaultValue1;
      const expectedHeaderRequestParams = `aspect_type.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAspectType = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAspectType(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAspectType with LRO error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateAspectTypeRequest()
      );
      request.aspectType ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateAspectTypeRequest',
        ['aspectType', 'name']
      );
      request.aspectType.name = defaultValue1;
      const expectedHeaderRequestParams = `aspect_type.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAspectType = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateAspectType(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateAspectTypeProgress without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateAspectTypeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateAspectTypeProgress with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateAspectTypeProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteAspectType', () => {
    it('invokes deleteAspectType without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteAspectTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAspectType =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteAspectType(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAspectType without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteAspectTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAspectType =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAspectType(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.dataplex.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAspectType with call error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteAspectTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAspectType = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAspectType(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAspectType with LRO error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteAspectTypeRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteAspectTypeRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAspectType = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteAspectType(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAspectType as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAspectType as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteAspectTypeProgress without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteAspectTypeProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteAspectTypeProgress with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteAspectTypeProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createEntryGroup', () => {
    it('invokes createEntryGroup without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createEntryGroup =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createEntryGroup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntryGroup without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createEntryGroup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createEntryGroup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.dataplex.v1.IEntryGroup,
              protos.google.cloud.dataplex.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntryGroup with call error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEntryGroup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createEntryGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createEntryGroup with LRO error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.CreateEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.CreateEntryGroupRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createEntryGroup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createEntryGroup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateEntryGroupProgress without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateEntryGroupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateEntryGroupProgress with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateEntryGroupProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateEntryGroup', () => {
    it('invokes updateEntryGroup without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryGroupRequest()
      );
      request.entryGroup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryGroupRequest',
        ['entryGroup', 'name']
      );
      request.entryGroup.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_group.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateEntryGroup =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateEntryGroup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntryGroup without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryGroupRequest()
      );
      request.entryGroup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryGroupRequest',
        ['entryGroup', 'name']
      );
      request.entryGroup.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_group.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateEntryGroup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateEntryGroup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.dataplex.v1.IEntryGroup,
              protos.google.cloud.dataplex.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.dataplex.v1.IEntryGroup,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntryGroup with call error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryGroupRequest()
      );
      request.entryGroup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryGroupRequest',
        ['entryGroup', 'name']
      );
      request.entryGroup.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_group.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateEntryGroup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateEntryGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateEntryGroup with LRO error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.UpdateEntryGroupRequest()
      );
      request.entryGroup ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.UpdateEntryGroupRequest',
        ['entryGroup', 'name']
      );
      request.entryGroup.name = defaultValue1;
      const expectedHeaderRequestParams = `entry_group.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateEntryGroup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateEntryGroup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateEntryGroupProgress without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateEntryGroupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateEntryGroupProgress with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateEntryGroupProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteEntryGroup', () => {
    it('invokes deleteEntryGroup without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteEntryGroup =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteEntryGroup(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntryGroup without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteEntryGroup =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteEntryGroup(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.dataplex.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntryGroup with call error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteEntryGroup = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteEntryGroup(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteEntryGroup with LRO error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.DeleteEntryGroupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.DeleteEntryGroupRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteEntryGroup = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteEntryGroup(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteEntryGroup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteEntryGroupProgress without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteEntryGroupProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteEntryGroupProgress with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteEntryGroupProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listEntryTypes', () => {
    it('invokes listEntryTypes without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
      ];
      client.innerApiCalls.listEntryTypes = stubSimpleCall(expectedResponse);
      const [response] = await client.listEntryTypes(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntryTypes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntryTypes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntryTypes without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
      ];
      client.innerApiCalls.listEntryTypes =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEntryTypes(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntryType[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntryTypes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntryTypes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntryTypes with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEntryTypes = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listEntryTypes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listEntryTypes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntryTypes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntryTypesStream without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
      ];
      client.descriptors.page.listEntryTypes.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listEntryTypesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.EntryType[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.EntryType) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listEntryTypes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntryTypes, request)
      );
      assert(
        (client.descriptors.page.listEntryTypes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listEntryTypesStream with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntryTypes.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listEntryTypesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.EntryType[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.EntryType) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listEntryTypes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntryTypes, request)
      );
      assert(
        (client.descriptors.page.listEntryTypes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listEntryTypes without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryType()),
      ];
      client.descriptors.page.listEntryTypes.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.dataplex.v1.IEntryType[] = [];
      const iterable = client.listEntryTypesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntryTypes.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntryTypes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listEntryTypes with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntryTypes.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listEntryTypesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.dataplex.v1.IEntryType[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntryTypes.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntryTypes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listAspectTypes', () => {
    it('invokes listAspectTypes without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListAspectTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListAspectTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
      ];
      client.innerApiCalls.listAspectTypes = stubSimpleCall(expectedResponse);
      const [response] = await client.listAspectTypes(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAspectTypes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAspectTypes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAspectTypes without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListAspectTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListAspectTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
      ];
      client.innerApiCalls.listAspectTypes =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAspectTypes(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IAspectType[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAspectTypes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAspectTypes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAspectTypes with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListAspectTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListAspectTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAspectTypes = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAspectTypes(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAspectTypes as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAspectTypes as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAspectTypesStream without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListAspectTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListAspectTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
      ];
      client.descriptors.page.listAspectTypes.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAspectTypesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.AspectType[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.AspectType) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAspectTypes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAspectTypes, request)
      );
      assert(
        (client.descriptors.page.listAspectTypes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listAspectTypesStream with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListAspectTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListAspectTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAspectTypes.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAspectTypesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.AspectType[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.AspectType) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAspectTypes.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAspectTypes, request)
      );
      assert(
        (client.descriptors.page.listAspectTypes.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listAspectTypes without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListAspectTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListAspectTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.AspectType()),
      ];
      client.descriptors.page.listAspectTypes.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.dataplex.v1.IAspectType[] = [];
      const iterable = client.listAspectTypesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAspectTypes.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAspectTypes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listAspectTypes with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListAspectTypesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListAspectTypesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAspectTypes.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAspectTypesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.dataplex.v1.IAspectType[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAspectTypes.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAspectTypes.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listEntryGroups', () => {
    it('invokes listEntryGroups without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
      ];
      client.innerApiCalls.listEntryGroups = stubSimpleCall(expectedResponse);
      const [response] = await client.listEntryGroups(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntryGroups without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
      ];
      client.innerApiCalls.listEntryGroups =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEntryGroups(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntryGroup[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntryGroups with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEntryGroups = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listEntryGroups(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntryGroups as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntryGroupsStream without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
      ];
      client.descriptors.page.listEntryGroups.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listEntryGroupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.EntryGroup[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.EntryGroup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listEntryGroups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntryGroups, request)
      );
      assert(
        (client.descriptors.page.listEntryGroups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listEntryGroupsStream with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntryGroups.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listEntryGroupsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.EntryGroup[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.EntryGroup) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listEntryGroups.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntryGroups, request)
      );
      assert(
        (client.descriptors.page.listEntryGroups.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listEntryGroups without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.EntryGroup()),
      ];
      client.descriptors.page.listEntryGroups.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.dataplex.v1.IEntryGroup[] = [];
      const iterable = client.listEntryGroupsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntryGroups.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntryGroups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listEntryGroups with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntryGroupsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntryGroupsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntryGroups.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listEntryGroupsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.dataplex.v1.IEntryGroup[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listEntryGroups.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntryGroups.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listEntries', () => {
    it('invokes listEntries without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
      ];
      client.innerApiCalls.listEntries = stubSimpleCall(expectedResponse);
      const [response] = await client.listEntries(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntries without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
      ];
      client.innerApiCalls.listEntries =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listEntries(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.dataplex.v1.IEntry[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntries with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listEntries = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listEntries(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listEntriesStream without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
      ];
      client.descriptors.page.listEntries.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.Entry[] = [];
        stream.on('data', (response: protos.google.cloud.dataplex.v1.Entry) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listEntries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntries, request)
      );
      assert(
        (client.descriptors.page.listEntries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listEntriesStream with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntries.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.Entry[] = [];
        stream.on('data', (response: protos.google.cloud.dataplex.v1.Entry) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listEntries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listEntries, request)
      );
      assert(
        (client.descriptors.page.listEntries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listEntries without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
        generateSampleMessage(new protos.google.cloud.dataplex.v1.Entry()),
      ];
      client.descriptors.page.listEntries.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.dataplex.v1.IEntry[] = [];
      const iterable = client.listEntriesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listEntries.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listEntries with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.ListEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.ListEntriesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listEntries.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listEntriesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.dataplex.v1.IEntry[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listEntries.asyncIterate as SinonStub).getCall(
          0
        ).args[1],
        request
      );
      assert(
        (client.descriptors.page.listEntries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('searchEntries', () => {
    it('invokes searchEntries without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.SearchEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.SearchEntriesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
      ];
      client.innerApiCalls.searchEntries = stubSimpleCall(expectedResponse);
      const [response] = await client.searchEntries(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.searchEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchEntries without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.SearchEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.SearchEntriesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
      ];
      client.innerApiCalls.searchEntries =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.searchEntries(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.dataplex.v1.ISearchEntriesResult[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.searchEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchEntries with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.SearchEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.SearchEntriesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.searchEntries = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.searchEntries(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.searchEntries as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchEntries as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchEntriesStream without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.SearchEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.SearchEntriesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
      ];
      client.descriptors.page.searchEntries.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.searchEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.SearchEntriesResult[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.SearchEntriesResult) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.searchEntries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchEntries, request)
      );
      assert(
        (client.descriptors.page.searchEntries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes searchEntriesStream with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.SearchEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.SearchEntriesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.searchEntries.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.searchEntriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.dataplex.v1.SearchEntriesResult[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.dataplex.v1.SearchEntriesResult) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.searchEntries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchEntries, request)
      );
      assert(
        (client.descriptors.page.searchEntries.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with searchEntries without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.SearchEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.SearchEntriesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
        generateSampleMessage(
          new protos.google.cloud.dataplex.v1.SearchEntriesResult()
        ),
      ];
      client.descriptors.page.searchEntries.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.dataplex.v1.ISearchEntriesResult[] =
        [];
      const iterable = client.searchEntriesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchEntries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.searchEntries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with searchEntries with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.dataplex.v1.SearchEntriesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.dataplex.v1.SearchEntriesRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.searchEntries.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.searchEntriesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.dataplex.v1.ISearchEntriesResult[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchEntries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.searchEntries.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('aspectType', () => {
      const fakePath = '/rendered/path/aspectType';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        aspect_type: 'aspectTypeValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.aspectTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.aspectTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('aspectTypePath', () => {
        const result = client.aspectTypePath(
          'projectValue',
          'locationValue',
          'aspectTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.aspectTypePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAspectTypeName', () => {
        const result = client.matchProjectFromAspectTypeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.aspectTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAspectTypeName', () => {
        const result = client.matchLocationFromAspectTypeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.aspectTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAspectTypeFromAspectTypeName', () => {
        const result = client.matchAspectTypeFromAspectTypeName(fakePath);
        assert.strictEqual(result, 'aspectTypeValue');
        assert(
          (client.pathTemplates.aspectTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('asset', () => {
      const fakePath = '/rendered/path/asset';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        asset: 'assetValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.assetPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.assetPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('assetPath', () => {
        const result = client.assetPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'assetValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.assetPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAssetName', () => {
        const result = client.matchProjectFromAssetName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAssetName', () => {
        const result = client.matchLocationFromAssetName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromAssetName', () => {
        const result = client.matchLakeFromAssetName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromAssetName', () => {
        const result = client.matchZoneFromAssetName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromAssetName', () => {
        const result = client.matchAssetFromAssetName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (client.pathTemplates.assetPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('content', () => {
      const fakePath = '/rendered/path/content';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        content: 'contentValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.contentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.contentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('contentPath', () => {
        const result = client.contentPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'contentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.contentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromContentName', () => {
        const result = client.matchProjectFromContentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.contentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromContentName', () => {
        const result = client.matchLocationFromContentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.contentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromContentName', () => {
        const result = client.matchLakeFromContentName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.contentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchContentFromContentName', () => {
        const result = client.matchContentFromContentName(fakePath);
        assert.strictEqual(result, 'contentValue');
        assert(
          (client.pathTemplates.contentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataAttribute', () => {
      const fakePath = '/rendered/path/dataAttribute';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataTaxonomy: 'dataTaxonomyValue',
        data_attribute_id: 'dataAttributeIdValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dataAttributePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataAttributePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataAttributePath', () => {
        const result = client.dataAttributePath(
          'projectValue',
          'locationValue',
          'dataTaxonomyValue',
          'dataAttributeIdValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataAttributePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataAttributeName', () => {
        const result = client.matchProjectFromDataAttributeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dataAttributePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataAttributeName', () => {
        const result = client.matchLocationFromDataAttributeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dataAttributePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataTaxonomyFromDataAttributeName', () => {
        const result = client.matchDataTaxonomyFromDataAttributeName(fakePath);
        assert.strictEqual(result, 'dataTaxonomyValue');
        assert(
          (client.pathTemplates.dataAttributePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataAttributeIdFromDataAttributeName', () => {
        const result =
          client.matchDataAttributeIdFromDataAttributeName(fakePath);
        assert.strictEqual(result, 'dataAttributeIdValue');
        assert(
          (client.pathTemplates.dataAttributePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataAttributeBinding', () => {
      const fakePath = '/rendered/path/dataAttributeBinding';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_attribute_binding_id: 'dataAttributeBindingIdValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dataAttributeBindingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataAttributeBindingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataAttributeBindingPath', () => {
        const result = client.dataAttributeBindingPath(
          'projectValue',
          'locationValue',
          'dataAttributeBindingIdValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.dataAttributeBindingPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataAttributeBindingName', () => {
        const result =
          client.matchProjectFromDataAttributeBindingName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.dataAttributeBindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataAttributeBindingName', () => {
        const result =
          client.matchLocationFromDataAttributeBindingName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.dataAttributeBindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataAttributeBindingIdFromDataAttributeBindingName', () => {
        const result =
          client.matchDataAttributeBindingIdFromDataAttributeBindingName(
            fakePath
          );
        assert.strictEqual(result, 'dataAttributeBindingIdValue');
        assert(
          (
            client.pathTemplates.dataAttributeBindingPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataScan', () => {
      const fakePath = '/rendered/path/dataScan';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataScan: 'dataScanValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dataScanPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataScanPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataScanPath', () => {
        const result = client.dataScanPath(
          'projectValue',
          'locationValue',
          'dataScanValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataScanPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataScanName', () => {
        const result = client.matchProjectFromDataScanName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dataScanPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataScanName', () => {
        const result = client.matchLocationFromDataScanName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dataScanPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataScanFromDataScanName', () => {
        const result = client.matchDataScanFromDataScanName(fakePath);
        assert.strictEqual(result, 'dataScanValue');
        assert(
          (client.pathTemplates.dataScanPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataScanJob', () => {
      const fakePath = '/rendered/path/dataScanJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        dataScan: 'dataScanValue',
        job: 'jobValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dataScanJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataScanJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataScanJobPath', () => {
        const result = client.dataScanJobPath(
          'projectValue',
          'locationValue',
          'dataScanValue',
          'jobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataScanJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataScanJobName', () => {
        const result = client.matchProjectFromDataScanJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dataScanJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataScanJobName', () => {
        const result = client.matchLocationFromDataScanJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dataScanJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataScanFromDataScanJobName', () => {
        const result = client.matchDataScanFromDataScanJobName(fakePath);
        assert.strictEqual(result, 'dataScanValue');
        assert(
          (client.pathTemplates.dataScanJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchJobFromDataScanJobName', () => {
        const result = client.matchJobFromDataScanJobName(fakePath);
        assert.strictEqual(result, 'jobValue');
        assert(
          (client.pathTemplates.dataScanJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataTaxonomy', () => {
      const fakePath = '/rendered/path/dataTaxonomy';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        data_taxonomy_id: 'dataTaxonomyIdValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.dataTaxonomyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataTaxonomyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataTaxonomyPath', () => {
        const result = client.dataTaxonomyPath(
          'projectValue',
          'locationValue',
          'dataTaxonomyIdValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataTaxonomyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromDataTaxonomyName', () => {
        const result = client.matchProjectFromDataTaxonomyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.dataTaxonomyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromDataTaxonomyName', () => {
        const result = client.matchLocationFromDataTaxonomyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.dataTaxonomyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataTaxonomyIdFromDataTaxonomyName', () => {
        const result = client.matchDataTaxonomyIdFromDataTaxonomyName(fakePath);
        assert.strictEqual(result, 'dataTaxonomyIdValue');
        assert(
          (client.pathTemplates.dataTaxonomyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entity', () => {
      const fakePath = '/rendered/path/entity';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        entity: 'entityValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entityPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entityPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entityPath', () => {
        const result = client.entityPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'entityValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entityPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntityName', () => {
        const result = client.matchProjectFromEntityName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntityName', () => {
        const result = client.matchLocationFromEntityName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromEntityName', () => {
        const result = client.matchLakeFromEntityName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromEntityName', () => {
        const result = client.matchZoneFromEntityName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntityFromEntityName', () => {
        const result = client.matchEntityFromEntityName(fakePath);
        assert.strictEqual(result, 'entityValue');
        assert(
          (client.pathTemplates.entityPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entry', () => {
      const fakePath = '/rendered/path/entry';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        entry_group: 'entryGroupValue',
        entry: 'entryValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entryPath', () => {
        const result = client.entryPath(
          'projectValue',
          'locationValue',
          'entryGroupValue',
          'entryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntryName', () => {
        const result = client.matchProjectFromEntryName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntryName', () => {
        const result = client.matchLocationFromEntryName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryGroupFromEntryName', () => {
        const result = client.matchEntryGroupFromEntryName(fakePath);
        assert.strictEqual(result, 'entryGroupValue');
        assert(
          (client.pathTemplates.entryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryFromEntryName', () => {
        const result = client.matchEntryFromEntryName(fakePath);
        assert.strictEqual(result, 'entryValue');
        assert(
          (client.pathTemplates.entryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entryGroup', () => {
      const fakePath = '/rendered/path/entryGroup';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        entry_group: 'entryGroupValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entryGroupPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entryGroupPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entryGroupPath', () => {
        const result = client.entryGroupPath(
          'projectValue',
          'locationValue',
          'entryGroupValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entryGroupPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntryGroupName', () => {
        const result = client.matchProjectFromEntryGroupName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entryGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntryGroupName', () => {
        const result = client.matchLocationFromEntryGroupName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entryGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryGroupFromEntryGroupName', () => {
        const result = client.matchEntryGroupFromEntryGroupName(fakePath);
        assert.strictEqual(result, 'entryGroupValue');
        assert(
          (client.pathTemplates.entryGroupPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('entryType', () => {
      const fakePath = '/rendered/path/entryType';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        entry_type: 'entryTypeValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.entryTypePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.entryTypePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('entryTypePath', () => {
        const result = client.entryTypePath(
          'projectValue',
          'locationValue',
          'entryTypeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.entryTypePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEntryTypeName', () => {
        const result = client.matchProjectFromEntryTypeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.entryTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEntryTypeName', () => {
        const result = client.matchLocationFromEntryTypeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.entryTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntryTypeFromEntryTypeName', () => {
        const result = client.matchEntryTypeFromEntryTypeName(fakePath);
        assert.strictEqual(result, 'entryTypeValue');
        assert(
          (client.pathTemplates.entryTypePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('environment', () => {
      const fakePath = '/rendered/path/environment';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        environment: 'environmentValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.environmentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.environmentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('environmentPath', () => {
        const result = client.environmentPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'environmentValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.environmentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromEnvironmentName', () => {
        const result = client.matchProjectFromEnvironmentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.environmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromEnvironmentName', () => {
        const result = client.matchLocationFromEnvironmentName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.environmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromEnvironmentName', () => {
        const result = client.matchLakeFromEnvironmentName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.environmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEnvironmentFromEnvironmentName', () => {
        const result = client.matchEnvironmentFromEnvironmentName(fakePath);
        assert.strictEqual(result, 'environmentValue');
        assert(
          (client.pathTemplates.environmentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('job', () => {
      const fakePath = '/rendered/path/job';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        task: 'taskValue',
        job: 'jobValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.jobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.jobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('jobPath', () => {
        const result = client.jobPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'taskValue',
          'jobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.jobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromJobName', () => {
        const result = client.matchProjectFromJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromJobName', () => {
        const result = client.matchLocationFromJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromJobName', () => {
        const result = client.matchLakeFromJobName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTaskFromJobName', () => {
        const result = client.matchTaskFromJobName(fakePath);
        assert.strictEqual(result, 'taskValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchJobFromJobName', () => {
        const result = client.matchJobFromJobName(fakePath);
        assert.strictEqual(result, 'jobValue');
        assert(
          (client.pathTemplates.jobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('lake', () => {
      const fakePath = '/rendered/path/lake';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.lakePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.lakePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('lakePath', () => {
        const result = client.lakePath(
          'projectValue',
          'locationValue',
          'lakeValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.lakePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLakeName', () => {
        const result = client.matchProjectFromLakeName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.lakePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLakeName', () => {
        const result = client.matchLocationFromLakeName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.lakePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromLakeName', () => {
        const result = client.matchLakeFromLakeName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.lakePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('partition', () => {
      const fakePath = '/rendered/path/partition';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        entity: 'entityValue',
        partition: 'partitionValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.partitionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.partitionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('partitionPath', () => {
        const result = client.partitionPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'entityValue',
          'partitionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.partitionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromPartitionName', () => {
        const result = client.matchProjectFromPartitionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromPartitionName', () => {
        const result = client.matchLocationFromPartitionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromPartitionName', () => {
        const result = client.matchLakeFromPartitionName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromPartitionName', () => {
        const result = client.matchZoneFromPartitionName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEntityFromPartitionName', () => {
        const result = client.matchEntityFromPartitionName(fakePath);
        assert.strictEqual(result, 'entityValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPartitionFromPartitionName', () => {
        const result = client.matchPartitionFromPartitionName(fakePath);
        assert.strictEqual(result, 'partitionValue');
        assert(
          (client.pathTemplates.partitionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationLakeAction', () => {
      const fakePath = '/rendered/path/projectLocationLakeAction';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        action: 'actionValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationLakeActionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectLocationLakeActionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectLocationLakeActionPath', () => {
        const result = client.projectLocationLakeActionPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'actionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationLakeActionName', () => {
        const result =
          client.matchProjectFromProjectLocationLakeActionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationLakeActionName', () => {
        const result =
          client.matchLocationFromProjectLocationLakeActionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromProjectLocationLakeActionName', () => {
        const result =
          client.matchLakeFromProjectLocationLakeActionName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchActionFromProjectLocationLakeActionName', () => {
        const result =
          client.matchActionFromProjectLocationLakeActionName(fakePath);
        assert.strictEqual(result, 'actionValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationLakeZoneAction', () => {
      const fakePath = '/rendered/path/projectLocationLakeZoneAction';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        action: 'actionValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationLakeZoneActionPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationLakeZoneActionPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationLakeZoneActionPath', () => {
        const result = client.projectLocationLakeZoneActionPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'actionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchProjectFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchLocationFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchLakeFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchZoneFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchActionFromProjectLocationLakeZoneActionName', () => {
        const result =
          client.matchActionFromProjectLocationLakeZoneActionName(fakePath);
        assert.strictEqual(result, 'actionValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectLocationLakeZoneAssetAction', () => {
      const fakePath = '/rendered/path/projectLocationLakeZoneAssetAction';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
        asset: 'assetValue',
        action: 'actionValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('projectLocationLakeZoneAssetActionPath', () => {
        const result = client.projectLocationLakeZoneAssetActionPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue',
          'assetValue',
          'actionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchProjectFromProjectLocationLakeZoneAssetActionName(
            fakePath
          );
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchLocationFromProjectLocationLakeZoneAssetActionName(
            fakePath
          );
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchLakeFromProjectLocationLakeZoneAssetActionName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchZoneFromProjectLocationLakeZoneAssetActionName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAssetFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchAssetFromProjectLocationLakeZoneAssetActionName(fakePath);
        assert.strictEqual(result, 'assetValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchActionFromProjectLocationLakeZoneAssetActionName', () => {
        const result =
          client.matchActionFromProjectLocationLakeZoneAssetActionName(
            fakePath
          );
        assert.strictEqual(result, 'actionValue');
        assert(
          (
            client.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('session', () => {
      const fakePath = '/rendered/path/session';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        environment: 'environmentValue',
        session: 'sessionValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.sessionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.sessionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('sessionPath', () => {
        const result = client.sessionPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'environmentValue',
          'sessionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.sessionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSessionName', () => {
        const result = client.matchProjectFromSessionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.sessionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromSessionName', () => {
        const result = client.matchLocationFromSessionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.sessionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromSessionName', () => {
        const result = client.matchLakeFromSessionName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.sessionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchEnvironmentFromSessionName', () => {
        const result = client.matchEnvironmentFromSessionName(fakePath);
        assert.strictEqual(result, 'environmentValue');
        assert(
          (client.pathTemplates.sessionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSessionFromSessionName', () => {
        const result = client.matchSessionFromSessionName(fakePath);
        assert.strictEqual(result, 'sessionValue');
        assert(
          (client.pathTemplates.sessionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('task', () => {
      const fakePath = '/rendered/path/task';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        task: 'taskValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.taskPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.taskPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('taskPath', () => {
        const result = client.taskPath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'taskValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.taskPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTaskName', () => {
        const result = client.matchProjectFromTaskName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromTaskName', () => {
        const result = client.matchLocationFromTaskName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromTaskName', () => {
        const result = client.matchLakeFromTaskName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTaskFromTaskName', () => {
        const result = client.matchTaskFromTaskName(fakePath);
        assert.strictEqual(result, 'taskValue');
        assert(
          (client.pathTemplates.taskPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('zone', () => {
      const fakePath = '/rendered/path/zone';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        lake: 'lakeValue',
        zone: 'zoneValue',
      };
      const client = new catalogserviceModule.v1.CatalogServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.zonePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.zonePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('zonePath', () => {
        const result = client.zonePath(
          'projectValue',
          'locationValue',
          'lakeValue',
          'zoneValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.zonePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromZoneName', () => {
        const result = client.matchProjectFromZoneName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.zonePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromZoneName', () => {
        const result = client.matchLocationFromZoneName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.zonePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLakeFromZoneName', () => {
        const result = client.matchLakeFromZoneName(fakePath);
        assert.strictEqual(result, 'lakeValue');
        assert(
          (client.pathTemplates.zonePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchZoneFromZoneName', () => {
        const result = client.matchZoneFromZoneName(fakePath);
        assert.strictEqual(result, 'zoneValue');
        assert(
          (client.pathTemplates.zonePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
