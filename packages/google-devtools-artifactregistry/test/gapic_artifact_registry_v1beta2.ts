// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as artifactregistryModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta2.ArtifactRegistryClient', () => {
  it('has servicePath', () => {
    const servicePath =
      artifactregistryModule.v1beta2.ArtifactRegistryClient.servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint =
      artifactregistryModule.v1beta2.ArtifactRegistryClient.apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port = artifactregistryModule.v1beta2.ArtifactRegistryClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
      fallback: true,
    });
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.artifactRegistryStub, undefined);
    await client.initialize();
    assert(client.artifactRegistryStub);
  });

  it('has close method', () => {
    const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.close();
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('getRepository', () => {
    it('invokes getRepository without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetRepositoryRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Repository()
      );
      client.innerApiCalls.getRepository = stubSimpleCall(expectedResponse);
      const [response] = await client.getRepository(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getRepository without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetRepositoryRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Repository()
      );
      client.innerApiCalls.getRepository =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getRepository(
          request,
          (
            err?: Error | null,
            result?: protos.google.devtools.artifactregistry.v1beta2.IRepository | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getRepository with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetRepositoryRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getRepository = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getRepository(request), expectedError);
      assert(
        (client.innerApiCalls.getRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('updateRepository', () => {
    it('invokes updateRepository without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.UpdateRepositoryRequest()
      );
      request.repository = {};
      request.repository.name = '';
      const expectedHeaderRequestParams = 'repository.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Repository()
      );
      client.innerApiCalls.updateRepository = stubSimpleCall(expectedResponse);
      const [response] = await client.updateRepository(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateRepository without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.UpdateRepositoryRequest()
      );
      request.repository = {};
      request.repository.name = '';
      const expectedHeaderRequestParams = 'repository.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Repository()
      );
      client.innerApiCalls.updateRepository =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateRepository(
          request,
          (
            err?: Error | null,
            result?: protos.google.devtools.artifactregistry.v1beta2.IRepository | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateRepository with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.UpdateRepositoryRequest()
      );
      request.repository = {};
      request.repository.name = '';
      const expectedHeaderRequestParams = 'repository.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateRepository = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateRepository(request), expectedError);
      assert(
        (client.innerApiCalls.updateRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getPackage', () => {
    it('invokes getPackage without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetPackageRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Package()
      );
      client.innerApiCalls.getPackage = stubSimpleCall(expectedResponse);
      const [response] = await client.getPackage(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getPackage as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getPackage without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetPackageRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Package()
      );
      client.innerApiCalls.getPackage =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPackage(
          request,
          (
            err?: Error | null,
            result?: protos.google.devtools.artifactregistry.v1beta2.IPackage | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getPackage as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getPackage with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetPackageRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getPackage = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getPackage(request), expectedError);
      assert(
        (client.innerApiCalls.getPackage as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getVersion', () => {
    it('invokes getVersion without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetVersionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Version()
      );
      client.innerApiCalls.getVersion = stubSimpleCall(expectedResponse);
      const [response] = await client.getVersion(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getVersion as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getVersion without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetVersionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Version()
      );
      client.innerApiCalls.getVersion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getVersion(
          request,
          (
            err?: Error | null,
            result?: protos.google.devtools.artifactregistry.v1beta2.IVersion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getVersion as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getVersion with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetVersionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getVersion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getVersion(request), expectedError);
      assert(
        (client.innerApiCalls.getVersion as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getFile', () => {
    it('invokes getFile without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetFileRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.File()
      );
      client.innerApiCalls.getFile = stubSimpleCall(expectedResponse);
      const [response] = await client.getFile(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getFile as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getFile without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetFileRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.File()
      );
      client.innerApiCalls.getFile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getFile(
          request,
          (
            err?: Error | null,
            result?: protos.google.devtools.artifactregistry.v1beta2.IFile | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getFile as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getFile with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetFileRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getFile = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getFile(request), expectedError);
      assert(
        (client.innerApiCalls.getFile as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getTag', () => {
    it('invokes getTag without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetTagRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Tag()
      );
      client.innerApiCalls.getTag = stubSimpleCall(expectedResponse);
      const [response] = await client.getTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getTag without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetTagRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Tag()
      );
      client.innerApiCalls.getTag =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.devtools.artifactregistry.v1beta2.ITag | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getTag with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.GetTagRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getTag = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getTag(request), expectedError);
      assert(
        (client.innerApiCalls.getTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createTag', () => {
    it('invokes createTag without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.CreateTagRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Tag()
      );
      client.innerApiCalls.createTag = stubSimpleCall(expectedResponse);
      const [response] = await client.createTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createTag without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.CreateTagRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Tag()
      );
      client.innerApiCalls.createTag =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.devtools.artifactregistry.v1beta2.ITag | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createTag with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.CreateTagRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createTag = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.createTag(request), expectedError);
      assert(
        (client.innerApiCalls.createTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('updateTag', () => {
    it('invokes updateTag without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.UpdateTagRequest()
      );
      request.tag = {};
      request.tag.name = '';
      const expectedHeaderRequestParams = 'tag.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Tag()
      );
      client.innerApiCalls.updateTag = stubSimpleCall(expectedResponse);
      const [response] = await client.updateTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateTag without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.UpdateTagRequest()
      );
      request.tag = {};
      request.tag.name = '';
      const expectedHeaderRequestParams = 'tag.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.Tag()
      );
      client.innerApiCalls.updateTag =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.devtools.artifactregistry.v1beta2.ITag | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateTag with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.UpdateTagRequest()
      );
      request.tag = {};
      request.tag.name = '';
      const expectedHeaderRequestParams = 'tag.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateTag = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.updateTag(request), expectedError);
      assert(
        (client.innerApiCalls.updateTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('deleteTag', () => {
    it('invokes deleteTag without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteTagRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTag = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteTag without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteTagRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTag =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteTag with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteTagRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTag = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.deleteTag(request), expectedError);
      assert(
        (client.innerApiCalls.deleteTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.setIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes setIamPolicy without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes setIamPolicy with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.setIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.setIamPolicy(request), expectedError);
      assert(
        (client.innerApiCalls.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getIamPolicy without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getIamPolicy with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getIamPolicy(request), expectedError);
      assert(
        (client.innerApiCalls.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.testIamPermissions(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes testIamPermissions without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.ITestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes testIamPermissions with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.testIamPermissions(request), expectedError);
      assert(
        (client.innerApiCalls.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createRepository', () => {
    it('invokes createRepository without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.CreateRepositoryRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createRepository =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createRepository(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createRepository without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.CreateRepositoryRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createRepository =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createRepository(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.devtools.artifactregistry.v1beta2.IRepository,
              protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IRepository,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createRepository with call error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.CreateRepositoryRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createRepository = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createRepository(request), expectedError);
      assert(
        (client.innerApiCalls.createRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createRepository with LRO error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.CreateRepositoryRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createRepository = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createRepository(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.createRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkCreateRepositoryProgress without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateRepositoryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateRepositoryProgress with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateRepositoryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteRepository', () => {
    it('invokes deleteRepository without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteRepositoryRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteRepository =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteRepository(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteRepository without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteRepositoryRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteRepository =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteRepository(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteRepository with call error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteRepositoryRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteRepository = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteRepository(request), expectedError);
      assert(
        (client.innerApiCalls.deleteRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteRepository with LRO error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteRepositoryRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteRepository = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteRepository(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.deleteRepository as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkDeleteRepositoryProgress without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteRepositoryProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteRepositoryProgress with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteRepositoryProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deletePackage', () => {
    it('invokes deletePackage without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeletePackageRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePackage =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deletePackage(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deletePackage as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deletePackage without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeletePackageRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deletePackage =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deletePackage(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deletePackage as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deletePackage with call error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeletePackageRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePackage = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deletePackage(request), expectedError);
      assert(
        (client.innerApiCalls.deletePackage as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deletePackage with LRO error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeletePackageRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePackage = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deletePackage(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.deletePackage as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkDeletePackageProgress without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeletePackageProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeletePackageProgress with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeletePackageProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteVersion', () => {
    it('invokes deleteVersion without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteVersionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteVersion =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteVersion(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteVersion as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteVersion without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteVersionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteVersion =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteVersion(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteVersion as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteVersion with call error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteVersionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteVersion = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteVersion(request), expectedError);
      assert(
        (client.innerApiCalls.deleteVersion as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteVersion with LRO error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.DeleteVersionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteVersion = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteVersion(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.deleteVersion as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkDeleteVersionProgress without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteVersionProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteVersionProgress with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteVersionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listRepositories', () => {
    it('invokes listRepositories without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListRepositoriesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
      ];
      client.innerApiCalls.listRepositories = stubSimpleCall(expectedResponse);
      const [response] = await client.listRepositories(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listRepositories as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listRepositories without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListRepositoriesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
      ];
      client.innerApiCalls.listRepositories =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRepositories(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.devtools.artifactregistry.v1beta2.IRepository[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listRepositories as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listRepositories with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListRepositoriesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listRepositories = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listRepositories(request), expectedError);
      assert(
        (client.innerApiCalls.listRepositories as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listRepositoriesStream without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListRepositoriesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
      ];
      client.descriptors.page.listRepositories.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRepositoriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.Repository[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.devtools.artifactregistry.v1beta2.Repository
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listRepositories.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRepositories, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listRepositories.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listRepositoriesStream with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListRepositoriesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listRepositories.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listRepositoriesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.Repository[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.devtools.artifactregistry.v1beta2.Repository
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listRepositories.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listRepositories, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listRepositories.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listRepositories without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListRepositoriesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Repository()
        ),
      ];
      client.descriptors.page.listRepositories.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.devtools.artifactregistry.v1beta2.IRepository[] =
        [];
      const iterable = client.listRepositoriesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRepositories.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listRepositories.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listRepositories with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListRepositoriesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listRepositories.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listRepositoriesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.IRepository[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRepositories.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listRepositories.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listPackages', () => {
    it('invokes listPackages without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListPackagesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
      ];
      client.innerApiCalls.listPackages = stubSimpleCall(expectedResponse);
      const [response] = await client.listPackages(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listPackages as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listPackages without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListPackagesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
      ];
      client.innerApiCalls.listPackages =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPackages(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.devtools.artifactregistry.v1beta2.IPackage[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listPackages as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listPackages with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListPackagesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listPackages = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPackages(request), expectedError);
      assert(
        (client.innerApiCalls.listPackages as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listPackagesStream without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListPackagesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
      ];
      client.descriptors.page.listPackages.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPackagesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.Package[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.devtools.artifactregistry.v1beta2.Package
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPackages.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPackages, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listPackages.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listPackagesStream with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListPackagesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listPackages.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listPackagesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.Package[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.devtools.artifactregistry.v1beta2.Package
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPackages.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPackages, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listPackages.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listPackages without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListPackagesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Package()
        ),
      ];
      client.descriptors.page.listPackages.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.devtools.artifactregistry.v1beta2.IPackage[] =
        [];
      const iterable = client.listPackagesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPackages.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listPackages.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listPackages with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListPackagesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listPackages.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPackagesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.IPackage[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPackages.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listPackages.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listVersions', () => {
    it('invokes listVersions without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListVersionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
      ];
      client.innerApiCalls.listVersions = stubSimpleCall(expectedResponse);
      const [response] = await client.listVersions(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listVersions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listVersions without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListVersionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
      ];
      client.innerApiCalls.listVersions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listVersions(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.devtools.artifactregistry.v1beta2.IVersion[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listVersions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listVersions with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListVersionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listVersions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listVersions(request), expectedError);
      assert(
        (client.innerApiCalls.listVersions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listVersionsStream without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListVersionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
      ];
      client.descriptors.page.listVersions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.Version[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.devtools.artifactregistry.v1beta2.Version
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listVersions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVersions, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listVersions.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listVersionsStream with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListVersionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listVersions.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.Version[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.devtools.artifactregistry.v1beta2.Version
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listVersions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listVersions, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listVersions.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listVersions without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListVersionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Version()
        ),
      ];
      client.descriptors.page.listVersions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.devtools.artifactregistry.v1beta2.IVersion[] =
        [];
      const iterable = client.listVersionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVersions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listVersions.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listVersions with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListVersionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listVersions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listVersionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.IVersion[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listVersions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listVersions.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listFiles', () => {
    it('invokes listFiles without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListFilesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
      ];
      client.innerApiCalls.listFiles = stubSimpleCall(expectedResponse);
      const [response] = await client.listFiles(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listFiles as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listFiles without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListFilesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
      ];
      client.innerApiCalls.listFiles =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listFiles(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.devtools.artifactregistry.v1beta2.IFile[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listFiles as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listFiles with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListFilesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listFiles = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listFiles(request), expectedError);
      assert(
        (client.innerApiCalls.listFiles as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listFilesStream without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListFilesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
      ];
      client.descriptors.page.listFiles.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listFilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.File[] =
          [];
        stream.on(
          'data',
          (response: protos.google.devtools.artifactregistry.v1beta2.File) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listFiles.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFiles, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listFiles.createStream as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listFilesStream with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListFilesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listFiles.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listFilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.File[] =
          [];
        stream.on(
          'data',
          (response: protos.google.devtools.artifactregistry.v1beta2.File) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listFiles.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFiles, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listFiles.createStream as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listFiles without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListFilesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.File()
        ),
      ];
      client.descriptors.page.listFiles.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.devtools.artifactregistry.v1beta2.IFile[] =
        [];
      const iterable = client.listFilesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listFiles.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listFiles.asyncIterate as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listFiles with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListFilesRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listFiles.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listFilesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.IFile[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listFiles.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listFiles.asyncIterate as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listTags', () => {
    it('invokes listTags without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
      ];
      client.innerApiCalls.listTags = stubSimpleCall(expectedResponse);
      const [response] = await client.listTags(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listTags as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listTags without error using callback', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
      ];
      client.innerApiCalls.listTags =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listTags(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.devtools.artifactregistry.v1beta2.ITag[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listTags as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listTags with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listTags = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.listTags(request), expectedError);
      assert(
        (client.innerApiCalls.listTags as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listTagsStream without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
      ];
      client.descriptors.page.listTags.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listTagsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.Tag[] =
          [];
        stream.on(
          'data',
          (response: protos.google.devtools.artifactregistry.v1beta2.Tag) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listTags.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTags, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listTags.createStream as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listTagsStream with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listTags.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listTagsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.Tag[] =
          [];
        stream.on(
          'data',
          (response: protos.google.devtools.artifactregistry.v1beta2.Tag) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listTags.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTags, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listTags.createStream as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listTags without error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
        generateSampleMessage(
          new protos.google.devtools.artifactregistry.v1beta2.Tag()
        ),
      ];
      client.descriptors.page.listTags.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.devtools.artifactregistry.v1beta2.ITag[] =
        [];
      const iterable = client.listTagsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listTags with error', async () => {
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.devtools.artifactregistry.v1beta2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listTags.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listTagsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.devtools.artifactregistry.v1beta2.ITag[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('Path templates', () => {
    describe('file', () => {
      const fakePath = '/rendered/path/file';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        repository: 'repositoryValue',
        file: 'fileValue',
      };
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.filePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.filePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('filePath', () => {
        const result = client.filePath(
          'projectValue',
          'locationValue',
          'repositoryValue',
          'fileValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.filePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromFileName', () => {
        const result = client.matchProjectFromFileName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.filePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromFileName', () => {
        const result = client.matchLocationFromFileName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.filePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRepositoryFromFileName', () => {
        const result = client.matchRepositoryFromFileName(fakePath);
        assert.strictEqual(result, 'repositoryValue');
        assert(
          (client.pathTemplates.filePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFileFromFileName', () => {
        const result = client.matchFileFromFileName(fakePath);
        assert.strictEqual(result, 'fileValue');
        assert(
          (client.pathTemplates.filePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('repository', () => {
      const fakePath = '/rendered/path/repository';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        repository: 'repositoryValue',
      };
      const client = new artifactregistryModule.v1beta2.ArtifactRegistryClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.repositoryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.repositoryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('repositoryPath', () => {
        const result = client.repositoryPath(
          'projectValue',
          'locationValue',
          'repositoryValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.repositoryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRepositoryName', () => {
        const result = client.matchProjectFromRepositoryName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.repositoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromRepositoryName', () => {
        const result = client.matchLocationFromRepositoryName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.repositoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRepositoryFromRepositoryName', () => {
        const result = client.matchRepositoryFromRepositoryName(fakePath);
        assert.strictEqual(result, 'repositoryValue');
        assert(
          (client.pathTemplates.repositoryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
