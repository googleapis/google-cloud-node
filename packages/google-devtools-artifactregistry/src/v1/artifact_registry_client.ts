// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/artifact_registry_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './artifact_registry_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The Artifact Registry API service.
 *
 *  Artifact Registry is an artifact management system for storing artifacts
 *  from different package management systems.
 *
 *  The resources managed by this API are:
 *
 *  * Repositories, which group packages and their data.
 *  * Packages, which group versions and their tags.
 *  * Versions, which are specific forms of a package.
 *  * Tags, which represent alternative names for versions.
 *  * Files, which contain content and are optionally associated with a Package
 *    or Version.
 * @class
 * @memberof v1
 */
export class ArtifactRegistryClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  artifactRegistryStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ArtifactRegistryClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ArtifactRegistryClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ArtifactRegistryClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'artifactregistry.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      aptArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/aptArtifacts/{apt_artifact}'
      ),
      attachmentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/attachments/{attachment}'
      ),
      dockerImagePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/dockerImages/{docker_image}'
      ),
      filePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/files/{file}'
      ),
      genericArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/genericArtifacts/{generic_artifact}'
      ),
      mavenArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/mavenArtifacts/{maven_artifact}'
      ),
      npmPackagePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/npmPackages/{npm_package}'
      ),
      packagePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/packages/{package}'
      ),
      projectSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/projectSettings'
      ),
      pythonPackagePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/pythonPackages/{python_package}'
      ),
      repositoryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}'
      ),
      rulePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/rules/{rule}'
      ),
      tagPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/packages/{package}/tags/{tag}'
      ),
      versionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/packages/{package}/versions/{version}'
      ),
      vpcscConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/vpcscConfig'
      ),
      yumArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/yumArtifacts/{yum_artifact}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listDockerImages: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'dockerImages'
      ),
      listMavenArtifacts: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'mavenArtifacts'
      ),
      listNpmPackages: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'npmPackages'
      ),
      listPythonPackages: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'pythonPackages'
      ),
      listRepositories: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'repositories'
      ),
      listPackages: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'packages'
      ),
      listVersions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'versions'
      ),
      listFiles: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'files'
      ),
      listTags: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tags'
      ),
      listRules: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'rules'
      ),
      listAttachments: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'attachments'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const importAptArtifactsResponse = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.ImportAptArtifactsResponse'
    ) as gax.protobuf.Type;
    const importAptArtifactsMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.ImportAptArtifactsMetadata'
    ) as gax.protobuf.Type;
    const importYumArtifactsResponse = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.ImportYumArtifactsResponse'
    ) as gax.protobuf.Type;
    const importYumArtifactsMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.ImportYumArtifactsMetadata'
    ) as gax.protobuf.Type;
    const createRepositoryResponse = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.Repository'
    ) as gax.protobuf.Type;
    const createRepositoryMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteRepositoryResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteRepositoryMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deletePackageResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deletePackageMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteVersionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteVersionMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const batchDeleteVersionsResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const batchDeleteVersionsMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.BatchDeleteVersionsMetadata'
    ) as gax.protobuf.Type;
    const deleteFileResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteFileMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createAttachmentResponse = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.Attachment'
    ) as gax.protobuf.Type;
    const createAttachmentMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteAttachmentResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteAttachmentMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      importAptArtifacts: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importAptArtifactsResponse.decode.bind(importAptArtifactsResponse),
        importAptArtifactsMetadata.decode.bind(importAptArtifactsMetadata)
      ),
      importYumArtifacts: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importYumArtifactsResponse.decode.bind(importYumArtifactsResponse),
        importYumArtifactsMetadata.decode.bind(importYumArtifactsMetadata)
      ),
      createRepository: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createRepositoryResponse.decode.bind(createRepositoryResponse),
        createRepositoryMetadata.decode.bind(createRepositoryMetadata)
      ),
      deleteRepository: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteRepositoryResponse.decode.bind(deleteRepositoryResponse),
        deleteRepositoryMetadata.decode.bind(deleteRepositoryMetadata)
      ),
      deletePackage: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deletePackageResponse.decode.bind(deletePackageResponse),
        deletePackageMetadata.decode.bind(deletePackageMetadata)
      ),
      deleteVersion: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteVersionResponse.decode.bind(deleteVersionResponse),
        deleteVersionMetadata.decode.bind(deleteVersionMetadata)
      ),
      batchDeleteVersions: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchDeleteVersionsResponse.decode.bind(batchDeleteVersionsResponse),
        batchDeleteVersionsMetadata.decode.bind(batchDeleteVersionsMetadata)
      ),
      deleteFile: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteFileResponse.decode.bind(deleteFileResponse),
        deleteFileMetadata.decode.bind(deleteFileMetadata)
      ),
      createAttachment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAttachmentResponse.decode.bind(createAttachmentResponse),
        createAttachmentMetadata.decode.bind(createAttachmentMetadata)
      ),
      deleteAttachment: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAttachmentResponse.decode.bind(deleteAttachmentResponse),
        deleteAttachmentMetadata.decode.bind(deleteAttachmentMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.devtools.artifactregistry.v1.ArtifactRegistry',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.artifactRegistryStub) {
      return this.artifactRegistryStub;
    }

    // Put together the "service stub" for
    // google.devtools.artifactregistry.v1.ArtifactRegistry.
    this.artifactRegistryStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.devtools.artifactregistry.v1.ArtifactRegistry'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.devtools.artifactregistry.v1
            .ArtifactRegistry,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const artifactRegistryStubMethods = [
      'listDockerImages',
      'getDockerImage',
      'listMavenArtifacts',
      'getMavenArtifact',
      'listNpmPackages',
      'getNpmPackage',
      'listPythonPackages',
      'getPythonPackage',
      'importAptArtifacts',
      'importYumArtifacts',
      'listRepositories',
      'getRepository',
      'createRepository',
      'updateRepository',
      'deleteRepository',
      'listPackages',
      'getPackage',
      'deletePackage',
      'listVersions',
      'getVersion',
      'deleteVersion',
      'batchDeleteVersions',
      'updateVersion',
      'listFiles',
      'getFile',
      'deleteFile',
      'updateFile',
      'listTags',
      'getTag',
      'createTag',
      'updateTag',
      'deleteTag',
      'createRule',
      'listRules',
      'getRule',
      'updateRule',
      'deleteRule',
      'setIamPolicy',
      'getIamPolicy',
      'testIamPermissions',
      'getProjectSettings',
      'updateProjectSettings',
      'getVpcscConfig',
      'updateVpcscConfig',
      'updatePackage',
      'listAttachments',
      'getAttachment',
      'createAttachment',
      'deleteAttachment',
    ];
    for (const methodName of artifactRegistryStubMethods) {
      const callPromise = this.artifactRegistryStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.artifactRegistryStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'artifactregistry.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'artifactregistry.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a docker image.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the docker images.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.DockerImage|DockerImage}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_docker_image.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetDockerImage_async
   */
  getDockerImage(
    request?: protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IDockerImage,
      (
        | protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getDockerImage(
    request: protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IDockerImage,
      | protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDockerImage(
    request: protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IDockerImage,
      | protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDockerImage(
    request?: protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IDockerImage,
          | protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IDockerImage,
      | protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IDockerImage,
      (
        | protos.google.devtools.artifactregistry.v1.IGetDockerImageRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDockerImage(request, options, callback);
  }
  /**
   * Gets a maven artifact.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the maven artifact.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.MavenArtifact|MavenArtifact}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_maven_artifact.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetMavenArtifact_async
   */
  getMavenArtifact(
    request?: protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IMavenArtifact,
      (
        | protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getMavenArtifact(
    request: protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IMavenArtifact,
      | protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMavenArtifact(
    request: protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IMavenArtifact,
      | protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMavenArtifact(
    request?: protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IMavenArtifact,
          | protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IMavenArtifact,
      | protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IMavenArtifact,
      (
        | protos.google.devtools.artifactregistry.v1.IGetMavenArtifactRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMavenArtifact(request, options, callback);
  }
  /**
   * Gets a npm package.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the npm package.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.NpmPackage|NpmPackage}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_npm_package.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetNpmPackage_async
   */
  getNpmPackage(
    request?: protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.INpmPackage,
      (
        | protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getNpmPackage(
    request: protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.INpmPackage,
      | protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNpmPackage(
    request: protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.INpmPackage,
      | protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getNpmPackage(
    request?: protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.INpmPackage,
          | protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.INpmPackage,
      | protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.INpmPackage,
      (
        | protos.google.devtools.artifactregistry.v1.IGetNpmPackageRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getNpmPackage(request, options, callback);
  }
  /**
   * Gets a python package.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the python package.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.PythonPackage|PythonPackage}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_python_package.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetPythonPackage_async
   */
  getPythonPackage(
    request?: protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPythonPackage,
      (
        | protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getPythonPackage(
    request: protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IPythonPackage,
      | protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPythonPackage(
    request: protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IPythonPackage,
      | protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPythonPackage(
    request?: protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IPythonPackage,
          | protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IPythonPackage,
      | protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPythonPackage,
      (
        | protos.google.devtools.artifactregistry.v1.IGetPythonPackageRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPythonPackage(request, options, callback);
  }
  /**
   * Gets a repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the repository to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Repository|Repository}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_repository.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetRepository_async
   */
  getRepository(
    request?: protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRepository,
      (
        | protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getRepository(
    request: protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRepository,
      | protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRepository(
    request: protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRepository,
      | protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRepository(
    request?: protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IRepository,
          | protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IRepository,
      | protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRepository,
      (
        | protos.google.devtools.artifactregistry.v1.IGetRepositoryRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRepository(request, options, callback);
  }
  /**
   * Updates a repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.Repository} request.repository
   *   The repository that replaces the resource on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Repository|Repository}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.update_repository.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_UpdateRepository_async
   */
  updateRepository(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRepository,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateRepository(
    request: protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRepository,
      | protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRepository(
    request: protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRepository,
      | protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRepository(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IRepository,
          | protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IRepository,
      | protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRepository,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdateRepositoryRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'repository.name': request.repository!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateRepository(request, options, callback);
  }
  /**
   * Gets a package.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the package to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Package|Package}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_package.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetPackage_async
   */
  getPackage(
    request?: protos.google.devtools.artifactregistry.v1.IGetPackageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPackage,
      protos.google.devtools.artifactregistry.v1.IGetPackageRequest | undefined,
      {} | undefined,
    ]
  >;
  getPackage(
    request: protos.google.devtools.artifactregistry.v1.IGetPackageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IPackage,
      | protos.google.devtools.artifactregistry.v1.IGetPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPackage(
    request: protos.google.devtools.artifactregistry.v1.IGetPackageRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IPackage,
      | protos.google.devtools.artifactregistry.v1.IGetPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPackage(
    request?: protos.google.devtools.artifactregistry.v1.IGetPackageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IPackage,
          | protos.google.devtools.artifactregistry.v1.IGetPackageRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IPackage,
      | protos.google.devtools.artifactregistry.v1.IGetPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPackage,
      protos.google.devtools.artifactregistry.v1.IGetPackageRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPackage(request, options, callback);
  }
  /**
   * Gets a version
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the version to retrieve.
   * @param {google.devtools.artifactregistry.v1.VersionView} request.view
   *   The view that should be returned in the response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Version|Version}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_version.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetVersion_async
   */
  getVersion(
    request?: protos.google.devtools.artifactregistry.v1.IGetVersionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVersion,
      protos.google.devtools.artifactregistry.v1.IGetVersionRequest | undefined,
      {} | undefined,
    ]
  >;
  getVersion(
    request: protos.google.devtools.artifactregistry.v1.IGetVersionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IVersion,
      | protos.google.devtools.artifactregistry.v1.IGetVersionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVersion(
    request: protos.google.devtools.artifactregistry.v1.IGetVersionRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IVersion,
      | protos.google.devtools.artifactregistry.v1.IGetVersionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVersion(
    request?: protos.google.devtools.artifactregistry.v1.IGetVersionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IVersion,
          | protos.google.devtools.artifactregistry.v1.IGetVersionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IVersion,
      | protos.google.devtools.artifactregistry.v1.IGetVersionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVersion,
      protos.google.devtools.artifactregistry.v1.IGetVersionRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVersion(request, options, callback);
  }
  /**
   * Updates a version.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.Version} request.version
   *   Required. The Version that replaces the resource on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Version|Version}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.update_version.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_UpdateVersion_async
   */
  updateVersion(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVersion,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateVersion(
    request: protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IVersion,
      | protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateVersion(
    request: protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IVersion,
      | protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateVersion(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IVersion,
          | protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IVersion,
      | protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVersion,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdateVersionRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'version.name': request.version!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateVersion(request, options, callback);
  }
  /**
   * Gets a file.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the file to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.File|File}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_file.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetFile_async
   */
  getFile(
    request?: protos.google.devtools.artifactregistry.v1.IGetFileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IFile,
      protos.google.devtools.artifactregistry.v1.IGetFileRequest | undefined,
      {} | undefined,
    ]
  >;
  getFile(
    request: protos.google.devtools.artifactregistry.v1.IGetFileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IFile,
      | protos.google.devtools.artifactregistry.v1.IGetFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getFile(
    request: protos.google.devtools.artifactregistry.v1.IGetFileRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IFile,
      | protos.google.devtools.artifactregistry.v1.IGetFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getFile(
    request?: protos.google.devtools.artifactregistry.v1.IGetFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IFile,
          | protos.google.devtools.artifactregistry.v1.IGetFileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IFile,
      | protos.google.devtools.artifactregistry.v1.IGetFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IFile,
      protos.google.devtools.artifactregistry.v1.IGetFileRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getFile(request, options, callback);
  }
  /**
   * Updates a file.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.File} request.file
   *   Required. The File that replaces the resource on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The update mask applies to the resource. For the `FieldMask`
   *   definition, see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.File|File}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.update_file.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_UpdateFile_async
   */
  updateFile(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateFileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IFile,
      protos.google.devtools.artifactregistry.v1.IUpdateFileRequest | undefined,
      {} | undefined,
    ]
  >;
  updateFile(
    request: protos.google.devtools.artifactregistry.v1.IUpdateFileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IFile,
      | protos.google.devtools.artifactregistry.v1.IUpdateFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateFile(
    request: protos.google.devtools.artifactregistry.v1.IUpdateFileRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IFile,
      | protos.google.devtools.artifactregistry.v1.IUpdateFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateFile(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IFile,
          | protos.google.devtools.artifactregistry.v1.IUpdateFileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IFile,
      | protos.google.devtools.artifactregistry.v1.IUpdateFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IFile,
      protos.google.devtools.artifactregistry.v1.IUpdateFileRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'file.name': request.file!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateFile(request, options, callback);
  }
  /**
   * Gets a tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the tag to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Tag|Tag}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_tag.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetTag_async
   */
  getTag(
    request?: protos.google.devtools.artifactregistry.v1.IGetTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.ITag,
      protos.google.devtools.artifactregistry.v1.IGetTagRequest | undefined,
      {} | undefined,
    ]
  >;
  getTag(
    request: protos.google.devtools.artifactregistry.v1.IGetTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.ITag,
      | protos.google.devtools.artifactregistry.v1.IGetTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTag(
    request: protos.google.devtools.artifactregistry.v1.IGetTagRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.ITag,
      | protos.google.devtools.artifactregistry.v1.IGetTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTag(
    request?: protos.google.devtools.artifactregistry.v1.IGetTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.ITag,
          | protos.google.devtools.artifactregistry.v1.IGetTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.ITag,
      | protos.google.devtools.artifactregistry.v1.IGetTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.ITag,
      protos.google.devtools.artifactregistry.v1.IGetTagRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTag(request, options, callback);
  }
  /**
   * Creates a tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource where the tag will be created.
   * @param {string} request.tagId
   *   The tag id to use for this repository.
   * @param {google.devtools.artifactregistry.v1.Tag} request.tag
   *   The tag to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Tag|Tag}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.create_tag.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_CreateTag_async
   */
  createTag(
    request?: protos.google.devtools.artifactregistry.v1.ICreateTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.ITag,
      protos.google.devtools.artifactregistry.v1.ICreateTagRequest | undefined,
      {} | undefined,
    ]
  >;
  createTag(
    request: protos.google.devtools.artifactregistry.v1.ICreateTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.ITag,
      | protos.google.devtools.artifactregistry.v1.ICreateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTag(
    request: protos.google.devtools.artifactregistry.v1.ICreateTagRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.ITag,
      | protos.google.devtools.artifactregistry.v1.ICreateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTag(
    request?: protos.google.devtools.artifactregistry.v1.ICreateTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.ITag,
          | protos.google.devtools.artifactregistry.v1.ICreateTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.ITag,
      | protos.google.devtools.artifactregistry.v1.ICreateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.ITag,
      protos.google.devtools.artifactregistry.v1.ICreateTagRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTag(request, options, callback);
  }
  /**
   * Updates a tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.Tag} request.tag
   *   The tag that replaces the resource on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Tag|Tag}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.update_tag.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_UpdateTag_async
   */
  updateTag(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.ITag,
      protos.google.devtools.artifactregistry.v1.IUpdateTagRequest | undefined,
      {} | undefined,
    ]
  >;
  updateTag(
    request: protos.google.devtools.artifactregistry.v1.IUpdateTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.ITag,
      | protos.google.devtools.artifactregistry.v1.IUpdateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTag(
    request: protos.google.devtools.artifactregistry.v1.IUpdateTagRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.ITag,
      | protos.google.devtools.artifactregistry.v1.IUpdateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTag(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.ITag,
          | protos.google.devtools.artifactregistry.v1.IUpdateTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.ITag,
      | protos.google.devtools.artifactregistry.v1.IUpdateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.ITag,
      protos.google.devtools.artifactregistry.v1.IUpdateTagRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tag.name': request.tag!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTag(request, options, callback);
  }
  /**
   * Deletes a tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the tag to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_tag.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteTag_async
   */
  deleteTag(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.devtools.artifactregistry.v1.IDeleteTagRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteTag(
    request: protos.google.devtools.artifactregistry.v1.IDeleteTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.devtools.artifactregistry.v1.IDeleteTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTag(
    request: protos.google.devtools.artifactregistry.v1.IDeleteTagRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.devtools.artifactregistry.v1.IDeleteTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTag(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.devtools.artifactregistry.v1.IDeleteTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.devtools.artifactregistry.v1.IDeleteTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.devtools.artifactregistry.v1.IDeleteTagRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTag(request, options, callback);
  }
  /**
   * Creates a rule.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource where the rule will be created.
   * @param {string} request.ruleId
   *   The rule id to use for this repository.
   * @param {google.devtools.artifactregistry.v1.Rule} request.rule
   *   The rule to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Rule|Rule}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.create_rule.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_CreateRule_async
   */
  createRule(
    request?: protos.google.devtools.artifactregistry.v1.ICreateRuleRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRule,
      protos.google.devtools.artifactregistry.v1.ICreateRuleRequest | undefined,
      {} | undefined,
    ]
  >;
  createRule(
    request: protos.google.devtools.artifactregistry.v1.ICreateRuleRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRule,
      | protos.google.devtools.artifactregistry.v1.ICreateRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createRule(
    request: protos.google.devtools.artifactregistry.v1.ICreateRuleRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRule,
      | protos.google.devtools.artifactregistry.v1.ICreateRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createRule(
    request?: protos.google.devtools.artifactregistry.v1.ICreateRuleRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IRule,
          | protos.google.devtools.artifactregistry.v1.ICreateRuleRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IRule,
      | protos.google.devtools.artifactregistry.v1.ICreateRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRule,
      protos.google.devtools.artifactregistry.v1.ICreateRuleRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRule(request, options, callback);
  }
  /**
   * Gets a rule.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the rule to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Rule|Rule}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_rule.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetRule_async
   */
  getRule(
    request?: protos.google.devtools.artifactregistry.v1.IGetRuleRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRule,
      protos.google.devtools.artifactregistry.v1.IGetRuleRequest | undefined,
      {} | undefined,
    ]
  >;
  getRule(
    request: protos.google.devtools.artifactregistry.v1.IGetRuleRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRule,
      | protos.google.devtools.artifactregistry.v1.IGetRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRule(
    request: protos.google.devtools.artifactregistry.v1.IGetRuleRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRule,
      | protos.google.devtools.artifactregistry.v1.IGetRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRule(
    request?: protos.google.devtools.artifactregistry.v1.IGetRuleRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IRule,
          | protos.google.devtools.artifactregistry.v1.IGetRuleRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IRule,
      | protos.google.devtools.artifactregistry.v1.IGetRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRule,
      protos.google.devtools.artifactregistry.v1.IGetRuleRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRule(request, options, callback);
  }
  /**
   * Updates a rule.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.Rule} request.rule
   *   The rule that replaces the resource on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Rule|Rule}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.update_rule.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_UpdateRule_async
   */
  updateRule(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRule,
      protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest | undefined,
      {} | undefined,
    ]
  >;
  updateRule(
    request: protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRule,
      | protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRule(
    request: protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IRule,
      | protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRule(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IRule,
          | protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IRule,
      | protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRule,
      protos.google.devtools.artifactregistry.v1.IUpdateRuleRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'rule.name': request.rule!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateRule(request, options, callback);
  }
  /**
   * Deletes a rule.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the rule to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_rule.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteRule_async
   */
  deleteRule(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest | undefined,
      {} | undefined,
    ]
  >;
  deleteRule(
    request: protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRule(
    request: protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRule(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      protos.google.devtools.artifactregistry.v1.IDeleteRuleRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRule(request, options, callback);
  }
  /**
   * Updates the IAM policy for a given resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
   *   the fields in the mask will be modified. If no mask is provided, the
   *   following default mask is used:
   *
   *   `paths: "bindings, etag"`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.set_iam_policy.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_SetIamPolicy_async
   */
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined,
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  /**
   * Gets the IAM policy for a given resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_iam_policy.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetIamPolicy_async
   */
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined,
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  /**
   * Tests if the caller has a list of permissions on a resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.iam.v1.TestIamPermissionsResponse|TestIamPermissionsResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.test_iam_permissions.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_TestIamPermissions_async
   */
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined,
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }
  /**
   * Retrieves the Settings for the Project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the projectSettings resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.ProjectSettings|ProjectSettings}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_project_settings.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetProjectSettings_async
   */
  getProjectSettings(
    request?: protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      (
        | protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getProjectSettings(
    request: protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getProjectSettings(
    request: protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getProjectSettings(
    request?: protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IProjectSettings,
          | protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      (
        | protos.google.devtools.artifactregistry.v1.IGetProjectSettingsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getProjectSettings(request, options, callback);
  }
  /**
   * Updates the Settings for the Project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.ProjectSettings} request.projectSettings
   *   The project settings.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Field mask to support partial updates.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.ProjectSettings|ProjectSettings}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.update_project_settings.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_UpdateProjectSettings_async
   */
  updateProjectSettings(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateProjectSettings(
    request: protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateProjectSettings(
    request: protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateProjectSettings(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IProjectSettings,
          | protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IProjectSettings,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdateProjectSettingsRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'project_settings.name': request.projectSettings!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateProjectSettings(request, options, callback);
  }
  /**
   * Retrieves the VPCSC Config for the Project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the VPCSCConfig resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.VPCSCConfig|VPCSCConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_v_p_c_s_c_config.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetVPCSCConfig_async
   */
  getVPCSCConfig(
    request?: protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      (
        | protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getVPCSCConfig(
    request: protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      | protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVPCSCConfig(
    request: protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      | protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVPCSCConfig(
    request?: protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
          | protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      | protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      (
        | protos.google.devtools.artifactregistry.v1.IGetVPCSCConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVpcscConfig(request, options, callback);
  }
  /**
   * Updates the VPCSC Config for the Project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.VPCSCConfig} request.vpcscConfig
   *   The project config.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Field mask to support partial updates.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.VPCSCConfig|VPCSCConfig}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.update_v_p_c_s_c_config.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_UpdateVPCSCConfig_async
   */
  updateVPCSCConfig(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updateVPCSCConfig(
    request: protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      | protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateVPCSCConfig(
    request: protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      | protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateVPCSCConfig(
    request?: protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
          | protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      | protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVPCSCConfig,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdateVPCSCConfigRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'vpcsc_config.name': request.vpcscConfig!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateVpcscConfig(request, options, callback);
  }
  /**
   * Updates a package.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.Package} request.package
   *   The package that replaces the resource on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Package|Package}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.update_package.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_UpdatePackage_async
   */
  updatePackage(
    request?: protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPackage,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  updatePackage(
    request: protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IPackage,
      | protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updatePackage(
    request: protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IPackage,
      | protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updatePackage(
    request?: protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IPackage,
          | protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IPackage,
      | protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPackage,
      (
        | protos.google.devtools.artifactregistry.v1.IUpdatePackageRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'package.name': request.package!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updatePackage(request, options, callback);
  }
  /**
   * Gets an attachment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the attachment to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.devtools.artifactregistry.v1.Attachment|Attachment}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.get_attachment.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_GetAttachment_async
   */
  getAttachment(
    request?: protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IAttachment,
      (
        | protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getAttachment(
    request: protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IAttachment,
      | protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAttachment(
    request: protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1.IAttachment,
      | protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAttachment(
    request?: protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1.IAttachment,
          | protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1.IAttachment,
      | protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IAttachment,
      (
        | protos.google.devtools.artifactregistry.v1.IGetAttachmentRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAttachment(request, options, callback);
  }

  /**
   * Imports Apt artifacts. The returned Operation will complete once the
   * resources are imported. Package, Version, and File resources are created
   * based on the imported artifacts. Imported artifacts that conflict with
   * existing resources are ignored.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.ImportAptArtifactsGcsSource} request.gcsSource
   *   Google Cloud Storage location where input content is located.
   * @param {string} request.parent
   *   The name of the parent resource where the artifacts will be imported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.import_apt_artifacts.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ImportAptArtifacts_async
   */
  importAptArtifacts(
    request?: protos.google.devtools.artifactregistry.v1.IImportAptArtifactsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  importAptArtifacts(
    request: protos.google.devtools.artifactregistry.v1.IImportAptArtifactsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importAptArtifacts(
    request: protos.google.devtools.artifactregistry.v1.IImportAptArtifactsRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importAptArtifacts(
    request?: protos.google.devtools.artifactregistry.v1.IImportAptArtifactsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.artifactregistry.v1.IImportAptArtifactsResponse,
            protos.google.devtools.artifactregistry.v1.IImportAptArtifactsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importAptArtifacts(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `importAptArtifacts()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.import_apt_artifacts.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ImportAptArtifacts_async
   */
  async checkImportAptArtifactsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.artifactregistry.v1.ImportAptArtifactsResponse,
      protos.google.devtools.artifactregistry.v1.ImportAptArtifactsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.importAptArtifacts,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.artifactregistry.v1.ImportAptArtifactsResponse,
      protos.google.devtools.artifactregistry.v1.ImportAptArtifactsMetadata
    >;
  }
  /**
   * Imports Yum (RPM) artifacts. The returned Operation will complete once the
   * resources are imported. Package, Version, and File resources are created
   * based on the imported artifacts. Imported artifacts that conflict with
   * existing resources are ignored.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1.ImportYumArtifactsGcsSource} request.gcsSource
   *   Google Cloud Storage location where input content is located.
   * @param {string} request.parent
   *   The name of the parent resource where the artifacts will be imported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.import_yum_artifacts.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ImportYumArtifacts_async
   */
  importYumArtifacts(
    request?: protos.google.devtools.artifactregistry.v1.IImportYumArtifactsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  importYumArtifacts(
    request: protos.google.devtools.artifactregistry.v1.IImportYumArtifactsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importYumArtifacts(
    request: protos.google.devtools.artifactregistry.v1.IImportYumArtifactsRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importYumArtifacts(
    request?: protos.google.devtools.artifactregistry.v1.IImportYumArtifactsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.artifactregistry.v1.IImportYumArtifactsResponse,
            protos.google.devtools.artifactregistry.v1.IImportYumArtifactsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importYumArtifacts(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `importYumArtifacts()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.import_yum_artifacts.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ImportYumArtifacts_async
   */
  async checkImportYumArtifactsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.artifactregistry.v1.ImportYumArtifactsResponse,
      protos.google.devtools.artifactregistry.v1.ImportYumArtifactsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.importYumArtifacts,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.artifactregistry.v1.ImportYumArtifactsResponse,
      protos.google.devtools.artifactregistry.v1.ImportYumArtifactsMetadata
    >;
  }
  /**
   * Creates a repository. The returned Operation will finish once the
   * repository has been created. Its response will be the created Repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource where the repository will be
   *   created.
   * @param {string} request.repositoryId
   *   Required. The repository id to use for this repository.
   * @param {google.devtools.artifactregistry.v1.Repository} request.repository
   *   Required. The repository to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.create_repository.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_CreateRepository_async
   */
  createRepository(
    request?: protos.google.devtools.artifactregistry.v1.ICreateRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1.IRepository,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createRepository(
    request: protos.google.devtools.artifactregistry.v1.ICreateRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IRepository,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRepository(
    request: protos.google.devtools.artifactregistry.v1.ICreateRepositoryRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IRepository,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRepository(
    request?: protos.google.devtools.artifactregistry.v1.ICreateRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.artifactregistry.v1.IRepository,
            protos.google.devtools.artifactregistry.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IRepository,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1.IRepository,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRepository(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createRepository()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.create_repository.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_CreateRepository_async
   */
  async checkCreateRepositoryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.artifactregistry.v1.Repository,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createRepository,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.artifactregistry.v1.Repository,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a repository and all of its contents. The returned Operation will
   * finish once the repository has been deleted. It will not have any Operation
   * metadata and will return a google.protobuf.Empty response.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the repository to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_repository.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteRepository_async
   */
  deleteRepository(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteRepository(
    request: protos.google.devtools.artifactregistry.v1.IDeleteRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRepository(
    request: protos.google.devtools.artifactregistry.v1.IDeleteRepositoryRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRepository(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.artifactregistry.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRepository(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteRepository()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_repository.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteRepository_async
   */
  async checkDeleteRepositoryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteRepository,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a package and all of its versions and tags. The returned operation
   * will complete once the package has been deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the package to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_package.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeletePackage_async
   */
  deletePackage(
    request?: protos.google.devtools.artifactregistry.v1.IDeletePackageRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deletePackage(
    request: protos.google.devtools.artifactregistry.v1.IDeletePackageRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePackage(
    request: protos.google.devtools.artifactregistry.v1.IDeletePackageRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePackage(
    request?: protos.google.devtools.artifactregistry.v1.IDeletePackageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.artifactregistry.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePackage(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deletePackage()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_package.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeletePackage_async
   */
  async checkDeletePackageProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deletePackage,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a version and all of its content. The returned operation will
   * complete once the version has been deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the version to delete.
   * @param {boolean} request.force
   *   By default, a version that is tagged may not be deleted. If force=true, the
   *   version and any tags pointing to the version are deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_version.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteVersion_async
   */
  deleteVersion(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteVersionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteVersion(
    request: protos.google.devtools.artifactregistry.v1.IDeleteVersionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteVersion(
    request: protos.google.devtools.artifactregistry.v1.IDeleteVersionRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteVersion(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteVersionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.artifactregistry.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteVersion(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteVersion()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_version.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteVersion_async
   */
  async checkDeleteVersionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteVersion,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >;
  }
  /**
   * Deletes multiple versions across a repository. The returned operation will
   * complete once the versions have been deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the repository holding all requested versions.
   * @param {string[]} request.names
   *   Required. The names of the versions to delete.
   *   A maximum of 10000 versions can be deleted in a batch.
   * @param {boolean} request.validateOnly
   *   If true, the request is performed without deleting data, following AIP-163.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.batch_delete_versions.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_BatchDeleteVersions_async
   */
  batchDeleteVersions(
    request?: protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  batchDeleteVersions(
    request: protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteVersions(
    request: protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  batchDeleteVersions(
    request?: protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IBatchDeleteVersionsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.batchDeleteVersions(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `batchDeleteVersions()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.batch_delete_versions.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_BatchDeleteVersions_async
   */
  async checkBatchDeleteVersionsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.BatchDeleteVersionsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.batchDeleteVersions,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.BatchDeleteVersionsMetadata
    >;
  }
  /**
   * Deletes a file and all of its content. It is only allowed on generic
   * repositories. The returned operation will complete once the file has been
   * deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the file to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_file.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteFile_async
   */
  deleteFile(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteFileRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteFile(
    request: protos.google.devtools.artifactregistry.v1.IDeleteFileRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteFile(
    request: protos.google.devtools.artifactregistry.v1.IDeleteFileRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteFile(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.artifactregistry.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteFile(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteFile()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_file.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteFile_async
   */
  async checkDeleteFileProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteFile,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >;
  }
  /**
   * Creates an attachment. The returned Operation will finish once the
   * attachment has been created. Its response will be the created attachment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource where the attachment will be
   *   created.
   * @param {string} request.attachmentId
   *   Required. The attachment id to use for this attachment.
   * @param {google.devtools.artifactregistry.v1.Attachment} request.attachment
   *   Required. The attachment to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.create_attachment.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_CreateAttachment_async
   */
  createAttachment(
    request?: protos.google.devtools.artifactregistry.v1.ICreateAttachmentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1.IAttachment,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createAttachment(
    request: protos.google.devtools.artifactregistry.v1.ICreateAttachmentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IAttachment,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAttachment(
    request: protos.google.devtools.artifactregistry.v1.ICreateAttachmentRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IAttachment,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAttachment(
    request?: protos.google.devtools.artifactregistry.v1.ICreateAttachmentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.artifactregistry.v1.IAttachment,
            protos.google.devtools.artifactregistry.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1.IAttachment,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1.IAttachment,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAttachment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createAttachment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.create_attachment.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_CreateAttachment_async
   */
  async checkCreateAttachmentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.artifactregistry.v1.Attachment,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createAttachment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.artifactregistry.v1.Attachment,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >;
  }
  /**
   * Deletes an attachment. The returned Operation will
   * finish once the attachments has been deleted. It will not have any
   * Operation metadata and will return a `google.protobuf.Empty` response.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the attachment to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_attachment.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteAttachment_async
   */
  deleteAttachment(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteAttachmentRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteAttachment(
    request: protos.google.devtools.artifactregistry.v1.IDeleteAttachmentRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAttachment(
    request: protos.google.devtools.artifactregistry.v1.IDeleteAttachmentRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAttachment(
    request?: protos.google.devtools.artifactregistry.v1.IDeleteAttachmentRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.artifactregistry.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAttachment(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteAttachment()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.delete_attachment.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_DeleteAttachment_async
   */
  async checkDeleteAttachmentProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteAttachment,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1.OperationMetadata
    >;
  }
  /**
   * Lists docker images.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose docker images will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} request.orderBy
   *   The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.DockerImage|DockerImage}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDockerImagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDockerImages(
    request?: protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IDockerImage[],
      protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListDockerImagesResponse,
    ]
  >;
  listDockerImages(
    request: protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListDockerImagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IDockerImage
    >
  ): void;
  listDockerImages(
    request: protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListDockerImagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IDockerImage
    >
  ): void;
  listDockerImages(
    request?: protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
          | protos.google.devtools.artifactregistry.v1.IListDockerImagesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.IDockerImage
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListDockerImagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IDockerImage
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IDockerImage[],
      protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListDockerImagesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDockerImages(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose docker images will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} request.orderBy
   *   The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.DockerImage|DockerImage} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDockerImagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listDockerImagesStream(
    request?: protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDockerImages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDockerImages.createStream(
      this.innerApiCalls.listDockerImages as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDockerImages`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose docker images will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} request.orderBy
   *   The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.DockerImage|DockerImage}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_docker_images.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListDockerImages_async
   */
  listDockerImagesAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListDockerImagesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.IDockerImage> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDockerImages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDockerImages.asyncIterate(
      this.innerApiCalls['listDockerImages'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.IDockerImage>;
  }
  /**
   * Lists maven artifacts.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose maven artifacts will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.MavenArtifact|MavenArtifact}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMavenArtifactsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMavenArtifacts(
    request?: protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IMavenArtifact[],
      protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest | null,
      protos.google.devtools.artifactregistry.v1.IListMavenArtifactsResponse,
    ]
  >;
  listMavenArtifacts(
    request: protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
      | protos.google.devtools.artifactregistry.v1.IListMavenArtifactsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IMavenArtifact
    >
  ): void;
  listMavenArtifacts(
    request: protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
      | protos.google.devtools.artifactregistry.v1.IListMavenArtifactsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IMavenArtifact
    >
  ): void;
  listMavenArtifacts(
    request?: protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
          | protos.google.devtools.artifactregistry.v1.IListMavenArtifactsResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.IMavenArtifact
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
      | protos.google.devtools.artifactregistry.v1.IListMavenArtifactsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IMavenArtifact
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IMavenArtifact[],
      protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest | null,
      protos.google.devtools.artifactregistry.v1.IListMavenArtifactsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMavenArtifacts(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose maven artifacts will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.MavenArtifact|MavenArtifact} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMavenArtifactsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMavenArtifactsStream(
    request?: protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMavenArtifacts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMavenArtifacts.createStream(
      this.innerApiCalls.listMavenArtifacts as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMavenArtifacts`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose maven artifacts will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.MavenArtifact|MavenArtifact}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_maven_artifacts.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListMavenArtifacts_async
   */
  listMavenArtifactsAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListMavenArtifactsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.IMavenArtifact> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMavenArtifacts'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMavenArtifacts.asyncIterate(
      this.innerApiCalls['listMavenArtifacts'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.IMavenArtifact>;
  }
  /**
   * Lists npm packages.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose npm packages will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.NpmPackage|NpmPackage}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listNpmPackagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listNpmPackages(
    request?: protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.INpmPackage[],
      protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListNpmPackagesResponse,
    ]
  >;
  listNpmPackages(
    request: protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListNpmPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.INpmPackage
    >
  ): void;
  listNpmPackages(
    request: protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListNpmPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.INpmPackage
    >
  ): void;
  listNpmPackages(
    request?: protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
          | protos.google.devtools.artifactregistry.v1.IListNpmPackagesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.INpmPackage
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListNpmPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.INpmPackage
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.INpmPackage[],
      protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListNpmPackagesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listNpmPackages(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose npm packages will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.NpmPackage|NpmPackage} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listNpmPackagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listNpmPackagesStream(
    request?: protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNpmPackages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNpmPackages.createStream(
      this.innerApiCalls.listNpmPackages as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listNpmPackages`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose npm packages will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.NpmPackage|NpmPackage}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_npm_packages.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListNpmPackages_async
   */
  listNpmPackagesAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListNpmPackagesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.INpmPackage> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listNpmPackages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listNpmPackages.asyncIterate(
      this.innerApiCalls['listNpmPackages'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.INpmPackage>;
  }
  /**
   * Lists python packages.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose python packages will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.PythonPackage|PythonPackage}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPythonPackagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPythonPackages(
    request?: protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPythonPackage[],
      protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListPythonPackagesResponse,
    ]
  >;
  listPythonPackages(
    request: protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListPythonPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IPythonPackage
    >
  ): void;
  listPythonPackages(
    request: protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListPythonPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IPythonPackage
    >
  ): void;
  listPythonPackages(
    request?: protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
          | protos.google.devtools.artifactregistry.v1.IListPythonPackagesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.IPythonPackage
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListPythonPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IPythonPackage
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPythonPackage[],
      protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListPythonPackagesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPythonPackages(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose python packages will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.PythonPackage|PythonPackage} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPythonPackagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPythonPackagesStream(
    request?: protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPythonPackages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPythonPackages.createStream(
      this.innerApiCalls.listPythonPackages as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPythonPackages`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose python packages will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of artifacts to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.PythonPackage|PythonPackage}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_python_packages.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListPythonPackages_async
   */
  listPythonPackagesAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListPythonPackagesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.IPythonPackage> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPythonPackages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPythonPackages.asyncIterate(
      this.innerApiCalls['listPythonPackages'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.IPythonPackage>;
  }
  /**
   * Lists repositories.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose repositories will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of repositories to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *
   *    Examples of using a filter:
   *
   *   To filter the results of your request to repositories with the name
   *   `my-repo` in project `my-project` in the `us-central` region, append the
   *   following filter expression to your request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/*repo"`
   *     * `name="projects/my-project/locations/us-central1/repositories/*repo*"`
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.Repository|Repository}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRepositories(
    request?: protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRepository[],
      protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListRepositoriesResponse,
    ]
  >;
  listRepositories(
    request: protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
      | protos.google.devtools.artifactregistry.v1.IListRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IRepository
    >
  ): void;
  listRepositories(
    request: protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
      | protos.google.devtools.artifactregistry.v1.IListRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IRepository
    >
  ): void;
  listRepositories(
    request?: protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
          | protos.google.devtools.artifactregistry.v1.IListRepositoriesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.IRepository
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
      | protos.google.devtools.artifactregistry.v1.IListRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IRepository
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRepository[],
      protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListRepositoriesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRepositories(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose repositories will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of repositories to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *
   *    Examples of using a filter:
   *
   *   To filter the results of your request to repositories with the name
   *   `my-repo` in project `my-project` in the `us-central` region, append the
   *   following filter expression to your request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/*repo"`
   *     * `name="projects/my-project/locations/us-central1/repositories/*repo*"`
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.Repository|Repository} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRepositoriesStream(
    request?: protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRepositories.createStream(
      this.innerApiCalls.listRepositories as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRepositories`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose repositories will be
   *   listed.
   * @param {number} request.pageSize
   *   The maximum number of repositories to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *
   *    Examples of using a filter:
   *
   *   To filter the results of your request to repositories with the name
   *   `my-repo` in project `my-project` in the `us-central` region, append the
   *   following filter expression to your request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/*repo"`
   *     * `name="projects/my-project/locations/us-central1/repositories/*repo*"`
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.Repository|Repository}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_repositories.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListRepositories_async
   */
  listRepositoriesAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListRepositoriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.IRepository> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRepositories.asyncIterate(
      this.innerApiCalls['listRepositories'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.IRepository>;
  }
  /**
   * Lists packages.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose packages will be listed.
   * @param {number} request.pageSize
   *   The maximum number of packages to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `annotations`
   *
   *   Examples of using a filter:
   *
   *    To filter the results of your request to packages with the name
   *    `my-package` in project `my-project` in the `us-central` region, in
   *    repository `my-repo`, append the following filter expression to your
   *    request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/*package"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/*pack*"`
   *
   *    To filter the results of your request to packages with the annotation
   *    key-value pair [`external_link`: `external_link_value`], append the
   *    following filter expression to your request":
   *
   *     * `"annotations.external_link:external_link_value"`
   *
   *    To filter the results just for a specific annotation key `external_link`,
   *    append the following filter expression to your request:
   *
   *     * `"annotations.external_link"`
   *
   *    If the annotation key or value contains special characters, you can escape
   *    them by surrounding the value with backticks. For example, to filter the
   *    results of your request to packages with the annotation key-value pair
   *    [`external.link`:`https://example.com/my-package`], append the following
   *    filter expression to your request:
   *
   *     * `` "annotations.`external.link`:`https://example.com/my-package`" ``
   *
   *    You can also filter with annotations with a wildcard to
   *    match any number of characters before or after the value:
   *
   *     * `` "annotations.*_link:`*example.com*`" ``
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.Package|Package}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPackagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPackages(
    request?: protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPackage[],
      protos.google.devtools.artifactregistry.v1.IListPackagesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListPackagesResponse,
    ]
  >;
  listPackages(
    request: protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IPackage
    >
  ): void;
  listPackages(
    request: protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IPackage
    >
  ): void;
  listPackages(
    request?: protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
          | protos.google.devtools.artifactregistry.v1.IListPackagesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.IPackage
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
      | protos.google.devtools.artifactregistry.v1.IListPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IPackage
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IPackage[],
      protos.google.devtools.artifactregistry.v1.IListPackagesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListPackagesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPackages(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose packages will be listed.
   * @param {number} request.pageSize
   *   The maximum number of packages to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `annotations`
   *
   *   Examples of using a filter:
   *
   *    To filter the results of your request to packages with the name
   *    `my-package` in project `my-project` in the `us-central` region, in
   *    repository `my-repo`, append the following filter expression to your
   *    request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/*package"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/*pack*"`
   *
   *    To filter the results of your request to packages with the annotation
   *    key-value pair [`external_link`: `external_link_value`], append the
   *    following filter expression to your request":
   *
   *     * `"annotations.external_link:external_link_value"`
   *
   *    To filter the results just for a specific annotation key `external_link`,
   *    append the following filter expression to your request:
   *
   *     * `"annotations.external_link"`
   *
   *    If the annotation key or value contains special characters, you can escape
   *    them by surrounding the value with backticks. For example, to filter the
   *    results of your request to packages with the annotation key-value pair
   *    [`external.link`:`https://example.com/my-package`], append the following
   *    filter expression to your request:
   *
   *     * `` "annotations.`external.link`:`https://example.com/my-package`" ``
   *
   *    You can also filter with annotations with a wildcard to
   *    match any number of characters before or after the value:
   *
   *     * `` "annotations.*_link:`*example.com*`" ``
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.Package|Package} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPackagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listPackagesStream(
    request?: protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPackages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPackages.createStream(
      this.innerApiCalls.listPackages as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPackages`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose packages will be listed.
   * @param {number} request.pageSize
   *   The maximum number of packages to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `annotations`
   *
   *   Examples of using a filter:
   *
   *    To filter the results of your request to packages with the name
   *    `my-package` in project `my-project` in the `us-central` region, in
   *    repository `my-repo`, append the following filter expression to your
   *    request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/*package"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/*pack*"`
   *
   *    To filter the results of your request to packages with the annotation
   *    key-value pair [`external_link`: `external_link_value`], append the
   *    following filter expression to your request":
   *
   *     * `"annotations.external_link:external_link_value"`
   *
   *    To filter the results just for a specific annotation key `external_link`,
   *    append the following filter expression to your request:
   *
   *     * `"annotations.external_link"`
   *
   *    If the annotation key or value contains special characters, you can escape
   *    them by surrounding the value with backticks. For example, to filter the
   *    results of your request to packages with the annotation key-value pair
   *    [`external.link`:`https://example.com/my-package`], append the following
   *    filter expression to your request:
   *
   *     * `` "annotations.`external.link`:`https://example.com/my-package`" ``
   *
   *    You can also filter with annotations with a wildcard to
   *    match any number of characters before or after the value:
   *
   *     * `` "annotations.*_link:`*example.com*`" ``
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.Package|Package}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_packages.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListPackages_async
   */
  listPackagesAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListPackagesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.IPackage> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPackages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPackages.asyncIterate(
      this.innerApiCalls['listPackages'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.IPackage>;
  }
  /**
   * Lists versions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose versions will be listed.
   * @param {number} request.pageSize
   *   The maximum number of versions to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {google.devtools.artifactregistry.v1.VersionView} request.view
   *   The view that should be returned in the response.
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `annotations`
   *
   *    Examples of using a filter:
   *
   *    To filter the results of your request to versions with the name
   *    `my-version` in project `my-project` in the `us-central` region, in
   *    repository `my-repo`, append the following filter expression to your
   *    request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/my-version"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/*version"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/my*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/*version*"`
   *
   *    To filter the results of your request to versions with the annotation
   *    key-value pair [`external_link`: `external_link_value`], append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link:external_link_value"`
   *
   *    To filter just for a specific annotation key `external_link`, append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link"`
   *
   *    If the annotation key or value contains special characters, you can escape
   *    them by surrounding the value with backticks. For example, to filter the
   *    results of your request to versions with the annotation key-value pair
   *    [`external.link`:`https://example.com/my-version`], append the following
   *    filter expression to your request:
   *
   *     * `` "annotations.`external.link`:`https://example.com/my-version`" ``
   *
   *    You can also filter with annotations with a wildcard to
   *    match any number of characters before or after the value:
   *
   *     * `` "annotations.*_link:`*example.com*`" ``
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.Version|Version}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listVersionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listVersions(
    request?: protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVersion[],
      protos.google.devtools.artifactregistry.v1.IListVersionsRequest | null,
      protos.google.devtools.artifactregistry.v1.IListVersionsResponse,
    ]
  >;
  listVersions(
    request: protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
      | protos.google.devtools.artifactregistry.v1.IListVersionsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IVersion
    >
  ): void;
  listVersions(
    request: protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
      | protos.google.devtools.artifactregistry.v1.IListVersionsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IVersion
    >
  ): void;
  listVersions(
    request?: protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
          | protos.google.devtools.artifactregistry.v1.IListVersionsResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.IVersion
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
      | protos.google.devtools.artifactregistry.v1.IListVersionsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IVersion
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IVersion[],
      protos.google.devtools.artifactregistry.v1.IListVersionsRequest | null,
      protos.google.devtools.artifactregistry.v1.IListVersionsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listVersions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose versions will be listed.
   * @param {number} request.pageSize
   *   The maximum number of versions to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {google.devtools.artifactregistry.v1.VersionView} request.view
   *   The view that should be returned in the response.
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `annotations`
   *
   *    Examples of using a filter:
   *
   *    To filter the results of your request to versions with the name
   *    `my-version` in project `my-project` in the `us-central` region, in
   *    repository `my-repo`, append the following filter expression to your
   *    request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/my-version"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/*version"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/my*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/*version*"`
   *
   *    To filter the results of your request to versions with the annotation
   *    key-value pair [`external_link`: `external_link_value`], append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link:external_link_value"`
   *
   *    To filter just for a specific annotation key `external_link`, append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link"`
   *
   *    If the annotation key or value contains special characters, you can escape
   *    them by surrounding the value with backticks. For example, to filter the
   *    results of your request to versions with the annotation key-value pair
   *    [`external.link`:`https://example.com/my-version`], append the following
   *    filter expression to your request:
   *
   *     * `` "annotations.`external.link`:`https://example.com/my-version`" ``
   *
   *    You can also filter with annotations with a wildcard to
   *    match any number of characters before or after the value:
   *
   *     * `` "annotations.*_link:`*example.com*`" ``
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.Version|Version} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listVersionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listVersionsStream(
    request?: protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVersions.createStream(
      this.innerApiCalls.listVersions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listVersions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose versions will be listed.
   * @param {number} request.pageSize
   *   The maximum number of versions to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {google.devtools.artifactregistry.v1.VersionView} request.view
   *   The view that should be returned in the response.
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `annotations`
   *
   *    Examples of using a filter:
   *
   *    To filter the results of your request to versions with the name
   *    `my-version` in project `my-project` in the `us-central` region, in
   *    repository `my-repo`, append the following filter expression to your
   *    request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/my-version"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/*version"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/my*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/*version*"`
   *
   *    To filter the results of your request to versions with the annotation
   *    key-value pair [`external_link`: `external_link_value`], append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link:external_link_value"`
   *
   *    To filter just for a specific annotation key `external_link`, append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link"`
   *
   *    If the annotation key or value contains special characters, you can escape
   *    them by surrounding the value with backticks. For example, to filter the
   *    results of your request to versions with the annotation key-value pair
   *    [`external.link`:`https://example.com/my-version`], append the following
   *    filter expression to your request:
   *
   *     * `` "annotations.`external.link`:`https://example.com/my-version`" ``
   *
   *    You can also filter with annotations with a wildcard to
   *    match any number of characters before or after the value:
   *
   *     * `` "annotations.*_link:`*example.com*`" ``
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.Version|Version}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_versions.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListVersions_async
   */
  listVersionsAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListVersionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.IVersion> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVersions.asyncIterate(
      this.innerApiCalls['listVersions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.IVersion>;
  }
  /**
   * Lists files.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the repository whose files will be listed. For
   *   example: "projects/p1/locations/us-central1/repositories/repo1
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `owner`
   *     * `annotations`
   *
   *   Examples of using a filter:
   *
   *    To filter the results of your request to files with the name `my_file.txt`
   *    in project `my-project` in the `us-central` region, in repository
   *    `my-repo`, append the following filter expression to your request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-file.txt"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/*file.txt"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/*file*"`
   *
   *    To filter the results of your request to files owned by the version `1.0`
   *    in package `pkg1`, append the following filter expression to your request:
   *
   *     * `owner="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/1.0"`
   *
   *    To filter the results of your request to files with the annotation
   *    key-value pair [`external_link`: `external_link_value`], append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link:external_link_value"`
   *
   *    To filter just for a specific annotation key `external_link`, append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link"`
   *
   *    If the annotation key or value contains special characters, you can escape
   *    them by surrounding the value with backticks. For example, to filter the
   *    results of your request to files with the annotation key-value pair
   *    [`external.link`:`https://example.com/my-file`], append the following
   *    filter expression to your request:
   *
   *     * `` "annotations.`external.link`:`https://example.com/my-file`" ``
   *
   *    You can also filter with annotations with a wildcard to
   *    match any number of characters before or after the value:
   *
   *     * `` "annotations.*_link:`*example.com*`" ``
   * @param {number} request.pageSize
   *   The maximum number of files to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} request.orderBy
   *   The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.File|File}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listFilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listFiles(
    request?: protos.google.devtools.artifactregistry.v1.IListFilesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IFile[],
      protos.google.devtools.artifactregistry.v1.IListFilesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListFilesResponse,
    ]
  >;
  listFiles(
    request: protos.google.devtools.artifactregistry.v1.IListFilesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListFilesRequest,
      | protos.google.devtools.artifactregistry.v1.IListFilesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IFile
    >
  ): void;
  listFiles(
    request: protos.google.devtools.artifactregistry.v1.IListFilesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListFilesRequest,
      | protos.google.devtools.artifactregistry.v1.IListFilesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IFile
    >
  ): void;
  listFiles(
    request?: protos.google.devtools.artifactregistry.v1.IListFilesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListFilesRequest,
          | protos.google.devtools.artifactregistry.v1.IListFilesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.IFile
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListFilesRequest,
      | protos.google.devtools.artifactregistry.v1.IListFilesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IFile
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IFile[],
      protos.google.devtools.artifactregistry.v1.IListFilesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListFilesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listFiles(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the repository whose files will be listed. For
   *   example: "projects/p1/locations/us-central1/repositories/repo1
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `owner`
   *     * `annotations`
   *
   *   Examples of using a filter:
   *
   *    To filter the results of your request to files with the name `my_file.txt`
   *    in project `my-project` in the `us-central` region, in repository
   *    `my-repo`, append the following filter expression to your request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-file.txt"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/*file.txt"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/*file*"`
   *
   *    To filter the results of your request to files owned by the version `1.0`
   *    in package `pkg1`, append the following filter expression to your request:
   *
   *     * `owner="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/1.0"`
   *
   *    To filter the results of your request to files with the annotation
   *    key-value pair [`external_link`: `external_link_value`], append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link:external_link_value"`
   *
   *    To filter just for a specific annotation key `external_link`, append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link"`
   *
   *    If the annotation key or value contains special characters, you can escape
   *    them by surrounding the value with backticks. For example, to filter the
   *    results of your request to files with the annotation key-value pair
   *    [`external.link`:`https://example.com/my-file`], append the following
   *    filter expression to your request:
   *
   *     * `` "annotations.`external.link`:`https://example.com/my-file`" ``
   *
   *    You can also filter with annotations with a wildcard to
   *    match any number of characters before or after the value:
   *
   *     * `` "annotations.*_link:`*example.com*`" ``
   * @param {number} request.pageSize
   *   The maximum number of files to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} request.orderBy
   *   The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.File|File} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listFilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listFilesStream(
    request?: protos.google.devtools.artifactregistry.v1.IListFilesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listFiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFiles.createStream(
      this.innerApiCalls.listFiles as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listFiles`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the repository whose files will be listed. For
   *   example: "projects/p1/locations/us-central1/repositories/repo1
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `owner`
   *     * `annotations`
   *
   *   Examples of using a filter:
   *
   *    To filter the results of your request to files with the name `my_file.txt`
   *    in project `my-project` in the `us-central` region, in repository
   *    `my-repo`, append the following filter expression to your request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-file.txt"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/my-*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/*file.txt"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/files/*file*"`
   *
   *    To filter the results of your request to files owned by the version `1.0`
   *    in package `pkg1`, append the following filter expression to your request:
   *
   *     * `owner="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/1.0"`
   *
   *    To filter the results of your request to files with the annotation
   *    key-value pair [`external_link`: `external_link_value`], append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link:external_link_value"`
   *
   *    To filter just for a specific annotation key `external_link`, append the
   *    following filter expression to your request:
   *
   *     * `"annotations.external_link"`
   *
   *    If the annotation key or value contains special characters, you can escape
   *    them by surrounding the value with backticks. For example, to filter the
   *    results of your request to files with the annotation key-value pair
   *    [`external.link`:`https://example.com/my-file`], append the following
   *    filter expression to your request:
   *
   *     * `` "annotations.`external.link`:`https://example.com/my-file`" ``
   *
   *    You can also filter with annotations with a wildcard to
   *    match any number of characters before or after the value:
   *
   *     * `` "annotations.*_link:`*example.com*`" ``
   * @param {number} request.pageSize
   *   The maximum number of files to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {string} request.orderBy
   *   The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.File|File}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_files.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListFiles_async
   */
  listFilesAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListFilesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.IFile> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listFiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFiles.asyncIterate(
      this.innerApiCalls['listFiles'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.IFile>;
  }
  /**
   * Lists tags.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent package whose tags will be listed.
   *   For example:
   *   `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`.
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `version`
   *
   *    Examples of using a filter:
   *
   *    To filter the results of your request to tags with the name `my-tag` in
   *    package `my-package` in repository `my-repo` in project "`y-project` in
   *    the us-central region, append the following filter expression to your
   *    request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/my-tag"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/my*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/*tag"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/*tag*"`
   *
   *    To filter the results of your request to tags applied to the version
   *    `1.0` in package `my-package`, append the following filter expression to
   *    your request:
   *
   *     * `version="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/1.0"`
   * @param {number} request.pageSize
   *   The maximum number of tags to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.Tag|Tag}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTagsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTags(
    request?: protos.google.devtools.artifactregistry.v1.IListTagsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.ITag[],
      protos.google.devtools.artifactregistry.v1.IListTagsRequest | null,
      protos.google.devtools.artifactregistry.v1.IListTagsResponse,
    ]
  >;
  listTags(
    request: protos.google.devtools.artifactregistry.v1.IListTagsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListTagsRequest,
      | protos.google.devtools.artifactregistry.v1.IListTagsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.ITag
    >
  ): void;
  listTags(
    request: protos.google.devtools.artifactregistry.v1.IListTagsRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListTagsRequest,
      | protos.google.devtools.artifactregistry.v1.IListTagsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.ITag
    >
  ): void;
  listTags(
    request?: protos.google.devtools.artifactregistry.v1.IListTagsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListTagsRequest,
          | protos.google.devtools.artifactregistry.v1.IListTagsResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.ITag
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListTagsRequest,
      | protos.google.devtools.artifactregistry.v1.IListTagsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.ITag
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.ITag[],
      protos.google.devtools.artifactregistry.v1.IListTagsRequest | null,
      protos.google.devtools.artifactregistry.v1.IListTagsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTags(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent package whose tags will be listed.
   *   For example:
   *   `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`.
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `version`
   *
   *    Examples of using a filter:
   *
   *    To filter the results of your request to tags with the name `my-tag` in
   *    package `my-package` in repository `my-repo` in project "`y-project` in
   *    the us-central region, append the following filter expression to your
   *    request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/my-tag"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/my*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/*tag"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/*tag*"`
   *
   *    To filter the results of your request to tags applied to the version
   *    `1.0` in package `my-package`, append the following filter expression to
   *    your request:
   *
   *     * `version="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/1.0"`
   * @param {number} request.pageSize
   *   The maximum number of tags to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.Tag|Tag} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTagsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listTagsStream(
    request?: protos.google.devtools.artifactregistry.v1.IListTagsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTags'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTags.createStream(
      this.innerApiCalls.listTags as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTags`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent package whose tags will be listed.
   *   For example:
   *   `projects/p1/locations/us-central1/repositories/repo1/packages/pkg1`.
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `version`
   *
   *    Examples of using a filter:
   *
   *    To filter the results of your request to tags with the name `my-tag` in
   *    package `my-package` in repository `my-repo` in project "`y-project` in
   *    the us-central region, append the following filter expression to your
   *    request:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/my-tag"`
   *
   *    You can also use wildcards to match any number of characters before or
   *    after the value:
   *
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/my*"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/*tag"`
   *     * `name="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/tags/*tag*"`
   *
   *    To filter the results of your request to tags applied to the version
   *    `1.0` in package `my-package`, append the following filter expression to
   *    your request:
   *
   *     * `version="projects/my-project/locations/us-central1/repositories/my-repo/packages/my-package/versions/1.0"`
   * @param {number} request.pageSize
   *   The maximum number of tags to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.Tag|Tag}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_tags.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListTags_async
   */
  listTagsAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListTagsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.ITag> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTags'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTags.asyncIterate(
      this.innerApiCalls['listTags'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.ITag>;
  }
  /**
   * Lists rules.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent repository whose rules will be listed.
   *   For example:
   *   `projects/p1/locations/us-central1/repositories/repo1`.
   * @param {number} request.pageSize
   *   The maximum number of rules to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.Rule|Rule}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRulesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRules(
    request?: protos.google.devtools.artifactregistry.v1.IListRulesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRule[],
      protos.google.devtools.artifactregistry.v1.IListRulesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListRulesResponse,
    ]
  >;
  listRules(
    request: protos.google.devtools.artifactregistry.v1.IListRulesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListRulesRequest,
      | protos.google.devtools.artifactregistry.v1.IListRulesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IRule
    >
  ): void;
  listRules(
    request: protos.google.devtools.artifactregistry.v1.IListRulesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListRulesRequest,
      | protos.google.devtools.artifactregistry.v1.IListRulesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IRule
    >
  ): void;
  listRules(
    request?: protos.google.devtools.artifactregistry.v1.IListRulesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListRulesRequest,
          | protos.google.devtools.artifactregistry.v1.IListRulesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.IRule
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListRulesRequest,
      | protos.google.devtools.artifactregistry.v1.IListRulesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IRule
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IRule[],
      protos.google.devtools.artifactregistry.v1.IListRulesRequest | null,
      protos.google.devtools.artifactregistry.v1.IListRulesResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRules(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent repository whose rules will be listed.
   *   For example:
   *   `projects/p1/locations/us-central1/repositories/repo1`.
   * @param {number} request.pageSize
   *   The maximum number of rules to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.Rule|Rule} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRulesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listRulesStream(
    request?: protos.google.devtools.artifactregistry.v1.IListRulesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRules'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRules.createStream(
      this.innerApiCalls.listRules as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRules`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent repository whose rules will be listed.
   *   For example:
   *   `projects/p1/locations/us-central1/repositories/repo1`.
   * @param {number} request.pageSize
   *   The maximum number of rules to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.Rule|Rule}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_rules.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListRules_async
   */
  listRulesAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListRulesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.IRule> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRules'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRules.asyncIterate(
      this.innerApiCalls['listRules'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.IRule>;
  }
  /**
   * Lists attachments.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose attachments will be listed.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `target`
   *     * `type`
   *     * `attachment_namespace`
   * @param {number} request.pageSize
   *   The maximum number of attachments to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.devtools.artifactregistry.v1.Attachment|Attachment}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAttachmentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAttachments(
    request?: protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IAttachment[],
      protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest | null,
      protos.google.devtools.artifactregistry.v1.IListAttachmentsResponse,
    ]
  >;
  listAttachments(
    request: protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
      | protos.google.devtools.artifactregistry.v1.IListAttachmentsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IAttachment
    >
  ): void;
  listAttachments(
    request: protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
      | protos.google.devtools.artifactregistry.v1.IListAttachmentsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IAttachment
    >
  ): void;
  listAttachments(
    request?: protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
          | protos.google.devtools.artifactregistry.v1.IListAttachmentsResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1.IAttachment
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
      | protos.google.devtools.artifactregistry.v1.IListAttachmentsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1.IAttachment
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1.IAttachment[],
      protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest | null,
      protos.google.devtools.artifactregistry.v1.IListAttachmentsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAttachments(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose attachments will be listed.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `target`
   *     * `type`
   *     * `attachment_namespace`
   * @param {number} request.pageSize
   *   The maximum number of attachments to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.devtools.artifactregistry.v1.Attachment|Attachment} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAttachmentsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listAttachmentsStream(
    request?: protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAttachments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAttachments.createStream(
      this.innerApiCalls.listAttachments as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAttachments`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose attachments will be listed.
   * @param {string} [request.filter]
   *   Optional. An expression for filtering the results of the request. Filter
   *   rules are case insensitive. The fields eligible for filtering are:
   *
   *     * `target`
   *     * `type`
   *     * `attachment_namespace`
   * @param {number} request.pageSize
   *   The maximum number of attachments to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.devtools.artifactregistry.v1.Attachment|Attachment}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/artifact_registry.list_attachments.js</caption>
   * region_tag:artifactregistry_v1_generated_ArtifactRegistry_ListAttachments_async
   */
  listAttachmentsAsync(
    request?: protos.google.devtools.artifactregistry.v1.IListAttachmentsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1.IAttachment> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAttachments'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAttachments.asyncIterate(
      this.innerApiCalls['listAttachments'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1.IAttachment>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified aptArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} apt_artifact
   * @returns {string} Resource name string.
   */
  aptArtifactPath(
    project: string,
    location: string,
    repository: string,
    aptArtifact: string
  ) {
    return this.pathTemplates.aptArtifactPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      apt_artifact: aptArtifact,
    });
  }

  /**
   * Parse the project from AptArtifact resource.
   *
   * @param {string} aptArtifactName
   *   A fully-qualified path representing AptArtifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAptArtifactName(aptArtifactName: string) {
    return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
      .project;
  }

  /**
   * Parse the location from AptArtifact resource.
   *
   * @param {string} aptArtifactName
   *   A fully-qualified path representing AptArtifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAptArtifactName(aptArtifactName: string) {
    return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
      .location;
  }

  /**
   * Parse the repository from AptArtifact resource.
   *
   * @param {string} aptArtifactName
   *   A fully-qualified path representing AptArtifact resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromAptArtifactName(aptArtifactName: string) {
    return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
      .repository;
  }

  /**
   * Parse the apt_artifact from AptArtifact resource.
   *
   * @param {string} aptArtifactName
   *   A fully-qualified path representing AptArtifact resource.
   * @returns {string} A string representing the apt_artifact.
   */
  matchAptArtifactFromAptArtifactName(aptArtifactName: string) {
    return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
      .apt_artifact;
  }

  /**
   * Return a fully-qualified attachment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} attachment
   * @returns {string} Resource name string.
   */
  attachmentPath(
    project: string,
    location: string,
    repository: string,
    attachment: string
  ) {
    return this.pathTemplates.attachmentPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      attachment: attachment,
    });
  }

  /**
   * Parse the project from Attachment resource.
   *
   * @param {string} attachmentName
   *   A fully-qualified path representing Attachment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAttachmentName(attachmentName: string) {
    return this.pathTemplates.attachmentPathTemplate.match(attachmentName)
      .project;
  }

  /**
   * Parse the location from Attachment resource.
   *
   * @param {string} attachmentName
   *   A fully-qualified path representing Attachment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAttachmentName(attachmentName: string) {
    return this.pathTemplates.attachmentPathTemplate.match(attachmentName)
      .location;
  }

  /**
   * Parse the repository from Attachment resource.
   *
   * @param {string} attachmentName
   *   A fully-qualified path representing Attachment resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromAttachmentName(attachmentName: string) {
    return this.pathTemplates.attachmentPathTemplate.match(attachmentName)
      .repository;
  }

  /**
   * Parse the attachment from Attachment resource.
   *
   * @param {string} attachmentName
   *   A fully-qualified path representing Attachment resource.
   * @returns {string} A string representing the attachment.
   */
  matchAttachmentFromAttachmentName(attachmentName: string) {
    return this.pathTemplates.attachmentPathTemplate.match(attachmentName)
      .attachment;
  }

  /**
   * Return a fully-qualified dockerImage resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} docker_image
   * @returns {string} Resource name string.
   */
  dockerImagePath(
    project: string,
    location: string,
    repository: string,
    dockerImage: string
  ) {
    return this.pathTemplates.dockerImagePathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      docker_image: dockerImage,
    });
  }

  /**
   * Parse the project from DockerImage resource.
   *
   * @param {string} dockerImageName
   *   A fully-qualified path representing DockerImage resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDockerImageName(dockerImageName: string) {
    return this.pathTemplates.dockerImagePathTemplate.match(dockerImageName)
      .project;
  }

  /**
   * Parse the location from DockerImage resource.
   *
   * @param {string} dockerImageName
   *   A fully-qualified path representing DockerImage resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDockerImageName(dockerImageName: string) {
    return this.pathTemplates.dockerImagePathTemplate.match(dockerImageName)
      .location;
  }

  /**
   * Parse the repository from DockerImage resource.
   *
   * @param {string} dockerImageName
   *   A fully-qualified path representing DockerImage resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromDockerImageName(dockerImageName: string) {
    return this.pathTemplates.dockerImagePathTemplate.match(dockerImageName)
      .repository;
  }

  /**
   * Parse the docker_image from DockerImage resource.
   *
   * @param {string} dockerImageName
   *   A fully-qualified path representing DockerImage resource.
   * @returns {string} A string representing the docker_image.
   */
  matchDockerImageFromDockerImageName(dockerImageName: string) {
    return this.pathTemplates.dockerImagePathTemplate.match(dockerImageName)
      .docker_image;
  }

  /**
   * Return a fully-qualified file resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} file
   * @returns {string} Resource name string.
   */
  filePath(
    project: string,
    location: string,
    repository: string,
    file: string
  ) {
    return this.pathTemplates.filePathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      file: file,
    });
  }

  /**
   * Parse the project from File resource.
   *
   * @param {string} fileName
   *   A fully-qualified path representing File resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFileName(fileName: string) {
    return this.pathTemplates.filePathTemplate.match(fileName).project;
  }

  /**
   * Parse the location from File resource.
   *
   * @param {string} fileName
   *   A fully-qualified path representing File resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFileName(fileName: string) {
    return this.pathTemplates.filePathTemplate.match(fileName).location;
  }

  /**
   * Parse the repository from File resource.
   *
   * @param {string} fileName
   *   A fully-qualified path representing File resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromFileName(fileName: string) {
    return this.pathTemplates.filePathTemplate.match(fileName).repository;
  }

  /**
   * Parse the file from File resource.
   *
   * @param {string} fileName
   *   A fully-qualified path representing File resource.
   * @returns {string} A string representing the file.
   */
  matchFileFromFileName(fileName: string) {
    return this.pathTemplates.filePathTemplate.match(fileName).file;
  }

  /**
   * Return a fully-qualified genericArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} generic_artifact
   * @returns {string} Resource name string.
   */
  genericArtifactPath(
    project: string,
    location: string,
    repository: string,
    genericArtifact: string
  ) {
    return this.pathTemplates.genericArtifactPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      generic_artifact: genericArtifact,
    });
  }

  /**
   * Parse the project from GenericArtifact resource.
   *
   * @param {string} genericArtifactName
   *   A fully-qualified path representing GenericArtifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGenericArtifactName(genericArtifactName: string) {
    return this.pathTemplates.genericArtifactPathTemplate.match(
      genericArtifactName
    ).project;
  }

  /**
   * Parse the location from GenericArtifact resource.
   *
   * @param {string} genericArtifactName
   *   A fully-qualified path representing GenericArtifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGenericArtifactName(genericArtifactName: string) {
    return this.pathTemplates.genericArtifactPathTemplate.match(
      genericArtifactName
    ).location;
  }

  /**
   * Parse the repository from GenericArtifact resource.
   *
   * @param {string} genericArtifactName
   *   A fully-qualified path representing GenericArtifact resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromGenericArtifactName(genericArtifactName: string) {
    return this.pathTemplates.genericArtifactPathTemplate.match(
      genericArtifactName
    ).repository;
  }

  /**
   * Parse the generic_artifact from GenericArtifact resource.
   *
   * @param {string} genericArtifactName
   *   A fully-qualified path representing GenericArtifact resource.
   * @returns {string} A string representing the generic_artifact.
   */
  matchGenericArtifactFromGenericArtifactName(genericArtifactName: string) {
    return this.pathTemplates.genericArtifactPathTemplate.match(
      genericArtifactName
    ).generic_artifact;
  }

  /**
   * Return a fully-qualified mavenArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} maven_artifact
   * @returns {string} Resource name string.
   */
  mavenArtifactPath(
    project: string,
    location: string,
    repository: string,
    mavenArtifact: string
  ) {
    return this.pathTemplates.mavenArtifactPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      maven_artifact: mavenArtifact,
    });
  }

  /**
   * Parse the project from MavenArtifact resource.
   *
   * @param {string} mavenArtifactName
   *   A fully-qualified path representing MavenArtifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMavenArtifactName(mavenArtifactName: string) {
    return this.pathTemplates.mavenArtifactPathTemplate.match(mavenArtifactName)
      .project;
  }

  /**
   * Parse the location from MavenArtifact resource.
   *
   * @param {string} mavenArtifactName
   *   A fully-qualified path representing MavenArtifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMavenArtifactName(mavenArtifactName: string) {
    return this.pathTemplates.mavenArtifactPathTemplate.match(mavenArtifactName)
      .location;
  }

  /**
   * Parse the repository from MavenArtifact resource.
   *
   * @param {string} mavenArtifactName
   *   A fully-qualified path representing MavenArtifact resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromMavenArtifactName(mavenArtifactName: string) {
    return this.pathTemplates.mavenArtifactPathTemplate.match(mavenArtifactName)
      .repository;
  }

  /**
   * Parse the maven_artifact from MavenArtifact resource.
   *
   * @param {string} mavenArtifactName
   *   A fully-qualified path representing MavenArtifact resource.
   * @returns {string} A string representing the maven_artifact.
   */
  matchMavenArtifactFromMavenArtifactName(mavenArtifactName: string) {
    return this.pathTemplates.mavenArtifactPathTemplate.match(mavenArtifactName)
      .maven_artifact;
  }

  /**
   * Return a fully-qualified npmPackage resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} npm_package
   * @returns {string} Resource name string.
   */
  npmPackagePath(
    project: string,
    location: string,
    repository: string,
    npmPackage: string
  ) {
    return this.pathTemplates.npmPackagePathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      npm_package: npmPackage,
    });
  }

  /**
   * Parse the project from NpmPackage resource.
   *
   * @param {string} npmPackageName
   *   A fully-qualified path representing NpmPackage resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromNpmPackageName(npmPackageName: string) {
    return this.pathTemplates.npmPackagePathTemplate.match(npmPackageName)
      .project;
  }

  /**
   * Parse the location from NpmPackage resource.
   *
   * @param {string} npmPackageName
   *   A fully-qualified path representing NpmPackage resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromNpmPackageName(npmPackageName: string) {
    return this.pathTemplates.npmPackagePathTemplate.match(npmPackageName)
      .location;
  }

  /**
   * Parse the repository from NpmPackage resource.
   *
   * @param {string} npmPackageName
   *   A fully-qualified path representing NpmPackage resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromNpmPackageName(npmPackageName: string) {
    return this.pathTemplates.npmPackagePathTemplate.match(npmPackageName)
      .repository;
  }

  /**
   * Parse the npm_package from NpmPackage resource.
   *
   * @param {string} npmPackageName
   *   A fully-qualified path representing NpmPackage resource.
   * @returns {string} A string representing the npm_package.
   */
  matchNpmPackageFromNpmPackageName(npmPackageName: string) {
    return this.pathTemplates.npmPackagePathTemplate.match(npmPackageName)
      .npm_package;
  }

  /**
   * Return a fully-qualified package resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} packageParam
   * @returns {string} Resource name string.
   */
  packagePath(
    project: string,
    location: string,
    repository: string,
    packageParam: string
  ) {
    return this.pathTemplates.packagePathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      package: packageParam,
    });
  }

  /**
   * Parse the project from Package resource.
   *
   * @param {string} packageName
   *   A fully-qualified path representing Package resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPackageName(packageName: string) {
    return this.pathTemplates.packagePathTemplate.match(packageName).project;
  }

  /**
   * Parse the location from Package resource.
   *
   * @param {string} packageName
   *   A fully-qualified path representing Package resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPackageName(packageName: string) {
    return this.pathTemplates.packagePathTemplate.match(packageName).location;
  }

  /**
   * Parse the repository from Package resource.
   *
   * @param {string} packageName
   *   A fully-qualified path representing Package resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromPackageName(packageName: string) {
    return this.pathTemplates.packagePathTemplate.match(packageName).repository;
  }

  /**
   * Parse the package from Package resource.
   *
   * @param {string} packageName
   *   A fully-qualified path representing Package resource.
   * @returns {string} A string representing the package.
   */
  matchPackageFromPackageName(packageName: string) {
    return this.pathTemplates.packagePathTemplate.match(packageName).package;
  }

  /**
   * Return a fully-qualified projectSettings resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectSettingsPath(project: string) {
    return this.pathTemplates.projectSettingsPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from ProjectSettings resource.
   *
   * @param {string} projectSettingsName
   *   A fully-qualified path representing ProjectSettings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSettingsName(projectSettingsName: string) {
    return this.pathTemplates.projectSettingsPathTemplate.match(
      projectSettingsName
    ).project;
  }

  /**
   * Return a fully-qualified pythonPackage resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} python_package
   * @returns {string} Resource name string.
   */
  pythonPackagePath(
    project: string,
    location: string,
    repository: string,
    pythonPackage: string
  ) {
    return this.pathTemplates.pythonPackagePathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      python_package: pythonPackage,
    });
  }

  /**
   * Parse the project from PythonPackage resource.
   *
   * @param {string} pythonPackageName
   *   A fully-qualified path representing PythonPackage resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPythonPackageName(pythonPackageName: string) {
    return this.pathTemplates.pythonPackagePathTemplate.match(pythonPackageName)
      .project;
  }

  /**
   * Parse the location from PythonPackage resource.
   *
   * @param {string} pythonPackageName
   *   A fully-qualified path representing PythonPackage resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPythonPackageName(pythonPackageName: string) {
    return this.pathTemplates.pythonPackagePathTemplate.match(pythonPackageName)
      .location;
  }

  /**
   * Parse the repository from PythonPackage resource.
   *
   * @param {string} pythonPackageName
   *   A fully-qualified path representing PythonPackage resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromPythonPackageName(pythonPackageName: string) {
    return this.pathTemplates.pythonPackagePathTemplate.match(pythonPackageName)
      .repository;
  }

  /**
   * Parse the python_package from PythonPackage resource.
   *
   * @param {string} pythonPackageName
   *   A fully-qualified path representing PythonPackage resource.
   * @returns {string} A string representing the python_package.
   */
  matchPythonPackageFromPythonPackageName(pythonPackageName: string) {
    return this.pathTemplates.pythonPackagePathTemplate.match(pythonPackageName)
      .python_package;
  }

  /**
   * Return a fully-qualified repository resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @returns {string} Resource name string.
   */
  repositoryPath(project: string, location: string, repository: string) {
    return this.pathTemplates.repositoryPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
    });
  }

  /**
   * Parse the project from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .project;
  }

  /**
   * Parse the location from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .location;
  }

  /**
   * Parse the repository from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .repository;
  }

  /**
   * Return a fully-qualified rule resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} rule
   * @returns {string} Resource name string.
   */
  rulePath(
    project: string,
    location: string,
    repository: string,
    rule: string
  ) {
    return this.pathTemplates.rulePathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      rule: rule,
    });
  }

  /**
   * Parse the project from Rule resource.
   *
   * @param {string} ruleName
   *   A fully-qualified path representing Rule resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRuleName(ruleName: string) {
    return this.pathTemplates.rulePathTemplate.match(ruleName).project;
  }

  /**
   * Parse the location from Rule resource.
   *
   * @param {string} ruleName
   *   A fully-qualified path representing Rule resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRuleName(ruleName: string) {
    return this.pathTemplates.rulePathTemplate.match(ruleName).location;
  }

  /**
   * Parse the repository from Rule resource.
   *
   * @param {string} ruleName
   *   A fully-qualified path representing Rule resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromRuleName(ruleName: string) {
    return this.pathTemplates.rulePathTemplate.match(ruleName).repository;
  }

  /**
   * Parse the rule from Rule resource.
   *
   * @param {string} ruleName
   *   A fully-qualified path representing Rule resource.
   * @returns {string} A string representing the rule.
   */
  matchRuleFromRuleName(ruleName: string) {
    return this.pathTemplates.rulePathTemplate.match(ruleName).rule;
  }

  /**
   * Return a fully-qualified tag resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} packageParam
   * @param {string} tag
   * @returns {string} Resource name string.
   */
  tagPath(
    project: string,
    location: string,
    repository: string,
    packageParam: string,
    tag: string
  ) {
    return this.pathTemplates.tagPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      package: packageParam,
      tag: tag,
    });
  }

  /**
   * Parse the project from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).project;
  }

  /**
   * Parse the location from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).location;
  }

  /**
   * Parse the repository from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).repository;
  }

  /**
   * Parse the package from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the package.
   */
  matchPackageFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).package;
  }

  /**
   * Parse the tag from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the tag.
   */
  matchTagFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).tag;
  }

  /**
   * Return a fully-qualified version resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} packageParam
   * @param {string} version
   * @returns {string} Resource name string.
   */
  versionPath(
    project: string,
    location: string,
    repository: string,
    packageParam: string,
    version: string
  ) {
    return this.pathTemplates.versionPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      package: packageParam,
      version: version,
    });
  }

  /**
   * Parse the project from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).project;
  }

  /**
   * Parse the location from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).location;
  }

  /**
   * Parse the repository from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).repository;
  }

  /**
   * Parse the package from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the package.
   */
  matchPackageFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).package;
  }

  /**
   * Parse the version from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).version;
  }

  /**
   * Return a fully-qualified vpcscConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  vpcscConfigPath(project: string, location: string) {
    return this.pathTemplates.vpcscConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from VpcscConfig resource.
   *
   * @param {string} vpcscConfigName
   *   A fully-qualified path representing VpcscConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVpcscConfigName(vpcscConfigName: string) {
    return this.pathTemplates.vpcscConfigPathTemplate.match(vpcscConfigName)
      .project;
  }

  /**
   * Parse the location from VpcscConfig resource.
   *
   * @param {string} vpcscConfigName
   *   A fully-qualified path representing VpcscConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVpcscConfigName(vpcscConfigName: string) {
    return this.pathTemplates.vpcscConfigPathTemplate.match(vpcscConfigName)
      .location;
  }

  /**
   * Return a fully-qualified yumArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} yum_artifact
   * @returns {string} Resource name string.
   */
  yumArtifactPath(
    project: string,
    location: string,
    repository: string,
    yumArtifact: string
  ) {
    return this.pathTemplates.yumArtifactPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      yum_artifact: yumArtifact,
    });
  }

  /**
   * Parse the project from YumArtifact resource.
   *
   * @param {string} yumArtifactName
   *   A fully-qualified path representing YumArtifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromYumArtifactName(yumArtifactName: string) {
    return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
      .project;
  }

  /**
   * Parse the location from YumArtifact resource.
   *
   * @param {string} yumArtifactName
   *   A fully-qualified path representing YumArtifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromYumArtifactName(yumArtifactName: string) {
    return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
      .location;
  }

  /**
   * Parse the repository from YumArtifact resource.
   *
   * @param {string} yumArtifactName
   *   A fully-qualified path representing YumArtifact resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromYumArtifactName(yumArtifactName: string) {
    return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
      .repository;
  }

  /**
   * Parse the yum_artifact from YumArtifact resource.
   *
   * @param {string} yumArtifactName
   *   A fully-qualified path representing YumArtifact resource.
   * @returns {string} A string representing the yum_artifact.
   */
  matchYumArtifactFromYumArtifactName(yumArtifactName: string) {
    return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
      .yum_artifact;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.artifactRegistryStub && !this._terminated) {
      return this.artifactRegistryStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
