// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta2/artifact_registry_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './artifact_registry_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The Artifact Registry API service.
 *
 *  Artifact Registry is an artifact management system for storing artifacts
 *  from different package management systems.
 *
 *  The resources managed by this API are:
 *
 *  * Repositories, which group packages and their data.
 *  * Packages, which group versions and their tags.
 *  * Versions, which are specific forms of a package.
 *  * Tags, which represent alternative names for versions.
 *  * Files, which contain content and are optionally associated with a Package
 *    or Version.
 * @class
 * @memberof v1beta2
 */
export class ArtifactRegistryClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  artifactRegistryStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ArtifactRegistryClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ArtifactRegistryClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ArtifactRegistryClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      aptArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/aptArtifacts/{apt_artifact}'
      ),
      filePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/files/{file}'
      ),
      projectSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/projectSettings'
      ),
      repositoryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}'
      ),
      tagPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/packages/{package}/tags/{tag}'
      ),
      versionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/packages/{package}/versions/{version}'
      ),
      yumArtifactPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/repositories/{repository}/yumArtifacts/{yum_artifact}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listRepositories: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'repositories'
      ),
      listPackages: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'packages'
      ),
      listVersions: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'versions'
      ),
      listFiles: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'files'
      ),
      listTags: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tags'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1beta2/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1beta2/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1beta2/{name=projects/*/locations/*/operations/*}',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const importAptArtifactsResponse = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1beta2.ImportAptArtifactsResponse'
    ) as gax.protobuf.Type;
    const importAptArtifactsMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1beta2.ImportAptArtifactsMetadata'
    ) as gax.protobuf.Type;
    const importYumArtifactsResponse = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1beta2.ImportYumArtifactsResponse'
    ) as gax.protobuf.Type;
    const importYumArtifactsMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1beta2.ImportYumArtifactsMetadata'
    ) as gax.protobuf.Type;
    const createRepositoryResponse = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1beta2.Repository'
    ) as gax.protobuf.Type;
    const createRepositoryMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1beta2.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteRepositoryResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteRepositoryMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1beta2.OperationMetadata'
    ) as gax.protobuf.Type;
    const deletePackageResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deletePackageMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1beta2.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteVersionResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteVersionMetadata = protoFilesRoot.lookup(
      '.google.devtools.artifactregistry.v1beta2.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      importAptArtifacts: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importAptArtifactsResponse.decode.bind(importAptArtifactsResponse),
        importAptArtifactsMetadata.decode.bind(importAptArtifactsMetadata)
      ),
      importYumArtifacts: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importYumArtifactsResponse.decode.bind(importYumArtifactsResponse),
        importYumArtifactsMetadata.decode.bind(importYumArtifactsMetadata)
      ),
      createRepository: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createRepositoryResponse.decode.bind(createRepositoryResponse),
        createRepositoryMetadata.decode.bind(createRepositoryMetadata)
      ),
      deleteRepository: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteRepositoryResponse.decode.bind(deleteRepositoryResponse),
        deleteRepositoryMetadata.decode.bind(deleteRepositoryMetadata)
      ),
      deletePackage: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deletePackageResponse.decode.bind(deletePackageResponse),
        deletePackageMetadata.decode.bind(deletePackageMetadata)
      ),
      deleteVersion: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteVersionResponse.decode.bind(deleteVersionResponse),
        deleteVersionMetadata.decode.bind(deleteVersionMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.devtools.artifactregistry.v1beta2.ArtifactRegistry',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.artifactRegistryStub) {
      return this.artifactRegistryStub;
    }

    // Put together the "service stub" for
    // google.devtools.artifactregistry.v1beta2.ArtifactRegistry.
    this.artifactRegistryStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.devtools.artifactregistry.v1beta2.ArtifactRegistry'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.devtools.artifactregistry.v1beta2
            .ArtifactRegistry,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const artifactRegistryStubMethods = [
      'importAptArtifacts',
      'importYumArtifacts',
      'listRepositories',
      'getRepository',
      'createRepository',
      'updateRepository',
      'deleteRepository',
      'listPackages',
      'getPackage',
      'deletePackage',
      'listVersions',
      'getVersion',
      'deleteVersion',
      'listFiles',
      'getFile',
      'listTags',
      'getTag',
      'createTag',
      'updateTag',
      'deleteTag',
      'setIamPolicy',
      'getIamPolicy',
      'testIamPermissions',
      'getProjectSettings',
      'updateProjectSettings',
    ];
    for (const methodName of artifactRegistryStubMethods) {
      const callPromise = this.artifactRegistryStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.artifactRegistryStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'artifactregistry.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'artifactregistry.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the repository to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Repository]{@link google.devtools.artifactregistry.v1beta2.Repository}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.get_repository.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_GetRepository_async
   */
  getRepository(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getRepository(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      | protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRepository(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      | protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getRepository(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.IRepository,
          | protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      | protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetRepositoryRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getRepository(request, options, callback);
  }
  /**
   * Updates a repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1beta2.Repository} request.repository
   *   The repository that replaces the resource on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Repository]{@link google.devtools.artifactregistry.v1beta2.Repository}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.update_repository.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_UpdateRepository_async
   */
  updateRepository(
    request?: protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateRepository(
    request: protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      | protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRepository(
    request: protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      | protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateRepository(
    request?: protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.IRepository,
          | protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      | protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IRepository,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IUpdateRepositoryRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'repository.name': request.repository!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateRepository(request, options, callback);
  }
  /**
   * Gets a package.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the package to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Package]{@link google.devtools.artifactregistry.v1beta2.Package}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.get_package.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_GetPackage_async
   */
  getPackage(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IPackage,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getPackage(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IPackage,
      | protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPackage(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IPackage,
      | protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getPackage(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.IPackage,
          | protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IPackage,
      | protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IPackage,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetPackageRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getPackage(request, options, callback);
  }
  /**
   * Gets a version
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the version to retrieve.
   * @param {google.devtools.artifactregistry.v1beta2.VersionView} request.view
   *   The view that should be returned in the response.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Version]{@link google.devtools.artifactregistry.v1beta2.Version}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.get_version.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_GetVersion_async
   */
  getVersion(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IVersion,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getVersion(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IVersion,
      | protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVersion(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IVersion,
      | protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getVersion(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.IVersion,
          | protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IVersion,
      | protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IVersion,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetVersionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getVersion(request, options, callback);
  }
  /**
   * Gets a file.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the file to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [File]{@link google.devtools.artifactregistry.v1beta2.File}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.get_file.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_GetFile_async
   */
  getFile(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IFile,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getFile(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IFile,
      | protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getFile(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IFile,
      | protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getFile(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.IFile,
          | protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IFile,
      | protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IFile,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetFileRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getFile(request, options, callback);
  }
  /**
   * Gets a tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the tag to retrieve.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Tag]{@link google.devtools.artifactregistry.v1beta2.Tag}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.get_tag.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_GetTag_async
   */
  getTag(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getTag(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      | protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTag(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      | protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTag(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.ITag,
          | protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      | protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetTagRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTag(request, options, callback);
  }
  /**
   * Creates a tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource where the tag will be created.
   * @param {string} request.tagId
   *   The tag id to use for this repository.
   * @param {google.devtools.artifactregistry.v1beta2.Tag} request.tag
   *   The tag to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Tag]{@link google.devtools.artifactregistry.v1beta2.Tag}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.create_tag.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_CreateTag_async
   */
  createTag(
    request?: protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      (
        | protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createTag(
    request: protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      | protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTag(
    request: protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      | protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTag(
    request?: protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.ITag,
          | protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      | protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      (
        | protos.google.devtools.artifactregistry.v1beta2.ICreateTagRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTag(request, options, callback);
  }
  /**
   * Updates a tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1beta2.Tag} request.tag
   *   The tag that replaces the resource on the server.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Tag]{@link google.devtools.artifactregistry.v1beta2.Tag}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.update_tag.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_UpdateTag_async
   */
  updateTag(
    request?: protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateTag(
    request: protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      | protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTag(
    request: protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      | protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTag(
    request?: protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.ITag,
          | protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      | protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.ITag,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IUpdateTagRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tag.name': request.tag!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTag(request, options, callback);
  }
  /**
   * Deletes a tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the tag to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_tag.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeleteTag_async
   */
  deleteTag(
    request?: protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteTag(
    request: protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTag(
    request: protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTag(
    request?: protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IDeleteTagRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTag(request, options, callback);
  }
  /**
   * Updates the IAM policy for a given resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
   *   the fields in the mask will be modified. If no mask is provided, the
   *   following default mask is used:
   *
   *   `paths: "bindings, etag"`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.set_iam_policy.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_SetIamPolicy_async
   */
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  /**
   * Gets the IAM policy for a given resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.get_iam_policy.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_GetIamPolicy_async
   */
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  /**
   * Tests if the caller has a list of permissions on a resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.test_iam_permissions.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_TestIamPermissions_async
   */
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }
  /**
   * Retrieves the Settings for the Project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the projectSettings resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ProjectSettings]{@link google.devtools.artifactregistry.v1beta2.ProjectSettings}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.get_project_settings.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_GetProjectSettings_async
   */
  getProjectSettings(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getProjectSettings(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getProjectSettings(
    request: protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getProjectSettings(
    request?: protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
          | protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IGetProjectSettingsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getProjectSettings(request, options, callback);
  }
  /**
   * Updates the Settings for the Project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1beta2.ProjectSettings} request.projectSettings
   *   The project settings.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Field mask to support partial updates.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ProjectSettings]{@link google.devtools.artifactregistry.v1beta2.ProjectSettings}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.update_project_settings.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_UpdateProjectSettings_async
   */
  updateProjectSettings(
    request?: protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateProjectSettings(
    request: protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateProjectSettings(
    request: protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest,
    callback: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateProjectSettings(
    request?: protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
          | protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      | protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IProjectSettings,
      (
        | protos.google.devtools.artifactregistry.v1beta2.IUpdateProjectSettingsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'project_settings.name': request.projectSettings!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateProjectSettings(request, options, callback);
  }

  /**
   * Imports Apt artifacts. The returned Operation will complete once the
   * resources are imported. Package, Version, and File resources are created
   * based on the imported artifacts. Imported artifacts that conflict with
   * existing resources are ignored.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1beta2.ImportAptArtifactsGcsSource} request.gcsSource
   *   Google Cloud Storage location where input content is located.
   * @param {string} request.parent
   *   The name of the parent resource where the artifacts will be imported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.import_apt_artifacts.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ImportAptArtifacts_async
   */
  importAptArtifacts(
    request?: protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  importAptArtifacts(
    request: protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importAptArtifacts(
    request: protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importAptArtifacts(
    request?: protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsResponse,
            protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportAptArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importAptArtifacts(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `importAptArtifacts()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.import_apt_artifacts.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ImportAptArtifacts_async
   */
  async checkImportAptArtifactsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.artifactregistry.v1beta2.ImportAptArtifactsResponse,
      protos.google.devtools.artifactregistry.v1beta2.ImportAptArtifactsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.importAptArtifacts,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.artifactregistry.v1beta2.ImportAptArtifactsResponse,
      protos.google.devtools.artifactregistry.v1beta2.ImportAptArtifactsMetadata
    >;
  }
  /**
   * Imports Yum (RPM) artifacts. The returned Operation will complete once the
   * resources are imported. Package, Version, and File resources are created
   * based on the imported artifacts. Imported artifacts that conflict with
   * existing resources are ignored.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.devtools.artifactregistry.v1beta2.ImportYumArtifactsGcsSource} request.gcsSource
   *   Google Cloud Storage location where input content is located.
   * @param {string} request.parent
   *   The name of the parent resource where the artifacts will be imported.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.import_yum_artifacts.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ImportYumArtifacts_async
   */
  importYumArtifacts(
    request?: protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  importYumArtifacts(
    request: protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importYumArtifacts(
    request: protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importYumArtifacts(
    request?: protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsResponse,
            protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsResponse,
        protos.google.devtools.artifactregistry.v1beta2.IImportYumArtifactsMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importYumArtifacts(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `importYumArtifacts()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.import_yum_artifacts.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ImportYumArtifacts_async
   */
  async checkImportYumArtifactsProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.artifactregistry.v1beta2.ImportYumArtifactsResponse,
      protos.google.devtools.artifactregistry.v1beta2.ImportYumArtifactsMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.importYumArtifacts,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.artifactregistry.v1beta2.ImportYumArtifactsResponse,
      protos.google.devtools.artifactregistry.v1beta2.ImportYumArtifactsMetadata
    >;
  }
  /**
   * Creates a repository. The returned Operation will finish once the
   * repository has been created. Its response will be the created Repository.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource where the repository will be created.
   * @param {string} request.repositoryId
   *   The repository id to use for this repository.
   * @param {google.devtools.artifactregistry.v1beta2.Repository} request.repository
   *   The repository to be created.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.create_repository.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_CreateRepository_async
   */
  createRepository(
    request?: protos.google.devtools.artifactregistry.v1beta2.ICreateRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IRepository,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createRepository(
    request: protos.google.devtools.artifactregistry.v1beta2.ICreateRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IRepository,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRepository(
    request: protos.google.devtools.artifactregistry.v1beta2.ICreateRepositoryRequest,
    callback: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IRepository,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createRepository(
    request?: protos.google.devtools.artifactregistry.v1beta2.ICreateRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.devtools.artifactregistry.v1beta2.IRepository,
            protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IRepository,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.devtools.artifactregistry.v1beta2.IRepository,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createRepository(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createRepository()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.create_repository.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_CreateRepository_async
   */
  async checkCreateRepositoryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.devtools.artifactregistry.v1beta2.Repository,
      protos.google.devtools.artifactregistry.v1beta2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createRepository,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.devtools.artifactregistry.v1beta2.Repository,
      protos.google.devtools.artifactregistry.v1beta2.OperationMetadata
    >;
  }
  /**
   * Deletes a repository and all of its contents. The returned Operation will
   * finish once the repository has been deleted. It will not have any Operation
   * metadata and will return a google.protobuf.Empty response.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the repository to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_repository.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeleteRepository_async
   */
  deleteRepository(
    request?: protos.google.devtools.artifactregistry.v1beta2.IDeleteRepositoryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteRepository(
    request: protos.google.devtools.artifactregistry.v1beta2.IDeleteRepositoryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRepository(
    request: protos.google.devtools.artifactregistry.v1beta2.IDeleteRepositoryRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteRepository(
    request?: protos.google.devtools.artifactregistry.v1beta2.IDeleteRepositoryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteRepository(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteRepository()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_repository.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeleteRepository_async
   */
  async checkDeleteRepositoryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1beta2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteRepository,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1beta2.OperationMetadata
    >;
  }
  /**
   * Deletes a package and all of its versions and tags. The returned operation
   * will complete once the package has been deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the package to delete.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_package.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeletePackage_async
   */
  deletePackage(
    request?: protos.google.devtools.artifactregistry.v1beta2.IDeletePackageRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deletePackage(
    request: protos.google.devtools.artifactregistry.v1beta2.IDeletePackageRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePackage(
    request: protos.google.devtools.artifactregistry.v1beta2.IDeletePackageRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deletePackage(
    request?: protos.google.devtools.artifactregistry.v1beta2.IDeletePackageRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deletePackage(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deletePackage()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_package.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeletePackage_async
   */
  async checkDeletePackageProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1beta2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deletePackage,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1beta2.OperationMetadata
    >;
  }
  /**
   * Deletes a version and all of its content. The returned operation will
   * complete once the version has been deleted.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the version to delete.
   * @param {boolean} request.force
   *   By default, a version that is tagged may not be deleted. If force=true, the
   *   version and any tags pointing to the version are deleted.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_version.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeleteVersion_async
   */
  deleteVersion(
    request?: protos.google.devtools.artifactregistry.v1beta2.IDeleteVersionRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteVersion(
    request: protos.google.devtools.artifactregistry.v1beta2.IDeleteVersionRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteVersion(
    request: protos.google.devtools.artifactregistry.v1beta2.IDeleteVersionRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteVersion(
    request?: protos.google.devtools.artifactregistry.v1beta2.IDeleteVersionRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.devtools.artifactregistry.v1beta2.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteVersion(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteVersion()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_version.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeleteVersion_async
   */
  async checkDeleteVersionProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1beta2.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteVersion,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.devtools.artifactregistry.v1beta2.OperationMetadata
    >;
  }
  /**
   * Lists repositories.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose repositories will be listed.
   * @param {number} request.pageSize
   *   The maximum number of repositories to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Repository]{@link google.devtools.artifactregistry.v1beta2.Repository}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRepositories(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IRepository[],
      protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesResponse
    ]
  >;
  listRepositories(
    request: protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IRepository
    >
  ): void;
  listRepositories(
    request: protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IRepository
    >
  ): void;
  listRepositories(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
          | protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1beta2.IRepository
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IRepository
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IRepository[],
      protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listRepositories(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose repositories will be listed.
   * @param {number} request.pageSize
   *   The maximum number of repositories to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Repository]{@link google.devtools.artifactregistry.v1beta2.Repository} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listRepositoriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listRepositoriesStream(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRepositories.createStream(
      this.innerApiCalls.listRepositories as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listRepositories`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the parent resource whose repositories will be listed.
   * @param {number} request.pageSize
   *   The maximum number of repositories to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Repository]{@link google.devtools.artifactregistry.v1beta2.Repository}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_repositories.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListRepositories_async
   */
  listRepositoriesAsync(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListRepositoriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.IRepository> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listRepositories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listRepositories.asyncIterate(
      this.innerApiCalls['listRepositories'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.IRepository>;
  }
  /**
   * Lists packages.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose packages will be listed.
   * @param {number} request.pageSize
   *   The maximum number of packages to return.
   *   Maximum page size is 10,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Package]{@link google.devtools.artifactregistry.v1beta2.Package}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listPackagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPackages(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IPackage[],
      protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListPackagesResponse
    ]
  >;
  listPackages(
    request: protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IPackage
    >
  ): void;
  listPackages(
    request: protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IPackage
    >
  ): void;
  listPackages(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
          | protos.google.devtools.artifactregistry.v1beta2.IListPackagesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1beta2.IPackage
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListPackagesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IPackage
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IPackage[],
      protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListPackagesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listPackages(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose packages will be listed.
   * @param {number} request.pageSize
   *   The maximum number of packages to return.
   *   Maximum page size is 10,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Package]{@link google.devtools.artifactregistry.v1beta2.Package} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listPackagesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listPackagesStream(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPackages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPackages.createStream(
      this.innerApiCalls.listPackages as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listPackages`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose packages will be listed.
   * @param {number} request.pageSize
   *   The maximum number of packages to return.
   *   Maximum page size is 10,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Package]{@link google.devtools.artifactregistry.v1beta2.Package}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_packages.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListPackages_async
   */
  listPackagesAsync(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListPackagesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.IPackage> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listPackages'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listPackages.asyncIterate(
      this.innerApiCalls['listPackages'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.IPackage>;
  }
  /**
   * Lists versions.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose versions will be listed.
   * @param {number} request.pageSize
   *   The maximum number of versions to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {google.devtools.artifactregistry.v1beta2.VersionView} request.view
   *   The view that should be returned in the response.
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Version]{@link google.devtools.artifactregistry.v1beta2.Version}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listVersionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVersions(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IVersion[],
      protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListVersionsResponse
    ]
  >;
  listVersions(
    request: protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListVersionsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IVersion
    >
  ): void;
  listVersions(
    request: protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListVersionsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IVersion
    >
  ): void;
  listVersions(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
          | protos.google.devtools.artifactregistry.v1beta2.IListVersionsResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1beta2.IVersion
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListVersionsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IVersion
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IVersion[],
      protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListVersionsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listVersions(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose versions will be listed.
   * @param {number} request.pageSize
   *   The maximum number of versions to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {google.devtools.artifactregistry.v1beta2.VersionView} request.view
   *   The view that should be returned in the response.
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Version]{@link google.devtools.artifactregistry.v1beta2.Version} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listVersionsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listVersionsStream(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVersions.createStream(
      this.innerApiCalls.listVersions as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listVersions`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose versions will be listed.
   * @param {number} request.pageSize
   *   The maximum number of versions to return. Maximum page size is 1,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {google.devtools.artifactregistry.v1beta2.VersionView} request.view
   *   The view that should be returned in the response.
   * @param {string} [request.orderBy]
   *   Optional. The field to order the results by.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Version]{@link google.devtools.artifactregistry.v1beta2.Version}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_versions.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListVersions_async
   */
  listVersionsAsync(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListVersionsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.IVersion> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listVersions.asyncIterate(
      this.innerApiCalls['listVersions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.IVersion>;
  }
  /**
   * Lists files.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the repository whose files will be listed. For example:
   *   "projects/p1/locations/us-central1/repositories/repo1
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `owner`
   *
   *    An example of using a filter:
   *
   *     * `name="projects/p1/locations/us-central1/repositories/repo1/files/a/b/*"` --> Files with an
   *     ID starting with "a/b/".
   *     * `owner="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"` -->
   *     Files owned by the version `1.0` in package `pkg1`.
   * @param {number} request.pageSize
   *   The maximum number of files to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [File]{@link google.devtools.artifactregistry.v1beta2.File}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listFilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listFiles(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IFile[],
      protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListFilesResponse
    ]
  >;
  listFiles(
    request: protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListFilesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IFile
    >
  ): void;
  listFiles(
    request: protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListFilesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IFile
    >
  ): void;
  listFiles(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
          | protos.google.devtools.artifactregistry.v1beta2.IListFilesResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1beta2.IFile
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListFilesResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.IFile
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.IFile[],
      protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListFilesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listFiles(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the repository whose files will be listed. For example:
   *   "projects/p1/locations/us-central1/repositories/repo1
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `owner`
   *
   *    An example of using a filter:
   *
   *     * `name="projects/p1/locations/us-central1/repositories/repo1/files/a/b/*"` --> Files with an
   *     ID starting with "a/b/".
   *     * `owner="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"` -->
   *     Files owned by the version `1.0` in package `pkg1`.
   * @param {number} request.pageSize
   *   The maximum number of files to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [File]{@link google.devtools.artifactregistry.v1beta2.File} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listFilesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listFilesStream(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listFiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFiles.createStream(
      this.innerApiCalls.listFiles as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listFiles`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the repository whose files will be listed. For example:
   *   "projects/p1/locations/us-central1/repositories/repo1
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `name`
   *     * `owner`
   *
   *    An example of using a filter:
   *
   *     * `name="projects/p1/locations/us-central1/repositories/repo1/files/a/b/*"` --> Files with an
   *     ID starting with "a/b/".
   *     * `owner="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"` -->
   *     Files owned by the version `1.0` in package `pkg1`.
   * @param {number} request.pageSize
   *   The maximum number of files to return.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [File]{@link google.devtools.artifactregistry.v1beta2.File}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_files.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListFiles_async
   */
  listFilesAsync(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListFilesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.IFile> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listFiles'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listFiles.asyncIterate(
      this.innerApiCalls['listFiles'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.IFile>;
  }
  /**
   * Lists tags.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose tags will be listed.
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `version`
   *
   *    An example of using a filter:
   *
   *     * `version="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"`
   *     --> Tags that are applied to the version `1.0` in package `pkg1`.
   * @param {number} request.pageSize
   *   The maximum number of tags to return. Maximum page size is 10,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Tag]{@link google.devtools.artifactregistry.v1beta2.Tag}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTagsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTags(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.ITag[],
      protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListTagsResponse
    ]
  >;
  listTags(
    request: protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListTagsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.ITag
    >
  ): void;
  listTags(
    request: protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
    callback: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListTagsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.ITag
    >
  ): void;
  listTags(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
          | protos.google.devtools.artifactregistry.v1beta2.IListTagsResponse
          | null
          | undefined,
          protos.google.devtools.artifactregistry.v1beta2.ITag
        >,
    callback?: PaginationCallback<
      protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
      | protos.google.devtools.artifactregistry.v1beta2.IListTagsResponse
      | null
      | undefined,
      protos.google.devtools.artifactregistry.v1beta2.ITag
    >
  ): Promise<
    [
      protos.google.devtools.artifactregistry.v1beta2.ITag[],
      protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest | null,
      protos.google.devtools.artifactregistry.v1beta2.IListTagsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTags(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose tags will be listed.
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `version`
   *
   *    An example of using a filter:
   *
   *     * `version="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"`
   *     --> Tags that are applied to the version `1.0` in package `pkg1`.
   * @param {number} request.pageSize
   *   The maximum number of tags to return. Maximum page size is 10,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Tag]{@link google.devtools.artifactregistry.v1beta2.Tag} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTagsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTagsStream(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTags'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTags.createStream(
      this.innerApiCalls.listTags as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTags`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   The name of the parent resource whose tags will be listed.
   * @param {string} request.filter
   *   An expression for filtering the results of the request. Filter rules are
   *   case insensitive. The fields eligible for filtering are:
   *
   *     * `version`
   *
   *    An example of using a filter:
   *
   *     * `version="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"`
   *     --> Tags that are applied to the version `1.0` in package `pkg1`.
   * @param {number} request.pageSize
   *   The maximum number of tags to return. Maximum page size is 10,000.
   * @param {string} request.pageToken
   *   The next_page_token value returned from a previous list request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Tag]{@link google.devtools.artifactregistry.v1beta2.Tag}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_tags.js</caption>
   * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListTags_async
   */
  listTagsAsync(
    request?: protos.google.devtools.artifactregistry.v1beta2.IListTagsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.ITag> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTags'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTags.asyncIterate(
      this.innerApiCalls['listTags'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.devtools.artifactregistry.v1beta2.ITag>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified aptArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} apt_artifact
   * @returns {string} Resource name string.
   */
  aptArtifactPath(
    project: string,
    location: string,
    repository: string,
    aptArtifact: string
  ) {
    return this.pathTemplates.aptArtifactPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      apt_artifact: aptArtifact,
    });
  }

  /**
   * Parse the project from AptArtifact resource.
   *
   * @param {string} aptArtifactName
   *   A fully-qualified path representing AptArtifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAptArtifactName(aptArtifactName: string) {
    return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
      .project;
  }

  /**
   * Parse the location from AptArtifact resource.
   *
   * @param {string} aptArtifactName
   *   A fully-qualified path representing AptArtifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAptArtifactName(aptArtifactName: string) {
    return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
      .location;
  }

  /**
   * Parse the repository from AptArtifact resource.
   *
   * @param {string} aptArtifactName
   *   A fully-qualified path representing AptArtifact resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromAptArtifactName(aptArtifactName: string) {
    return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
      .repository;
  }

  /**
   * Parse the apt_artifact from AptArtifact resource.
   *
   * @param {string} aptArtifactName
   *   A fully-qualified path representing AptArtifact resource.
   * @returns {string} A string representing the apt_artifact.
   */
  matchAptArtifactFromAptArtifactName(aptArtifactName: string) {
    return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
      .apt_artifact;
  }

  /**
   * Return a fully-qualified file resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} file
   * @returns {string} Resource name string.
   */
  filePath(
    project: string,
    location: string,
    repository: string,
    file: string
  ) {
    return this.pathTemplates.filePathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      file: file,
    });
  }

  /**
   * Parse the project from File resource.
   *
   * @param {string} fileName
   *   A fully-qualified path representing File resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromFileName(fileName: string) {
    return this.pathTemplates.filePathTemplate.match(fileName).project;
  }

  /**
   * Parse the location from File resource.
   *
   * @param {string} fileName
   *   A fully-qualified path representing File resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFileName(fileName: string) {
    return this.pathTemplates.filePathTemplate.match(fileName).location;
  }

  /**
   * Parse the repository from File resource.
   *
   * @param {string} fileName
   *   A fully-qualified path representing File resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromFileName(fileName: string) {
    return this.pathTemplates.filePathTemplate.match(fileName).repository;
  }

  /**
   * Parse the file from File resource.
   *
   * @param {string} fileName
   *   A fully-qualified path representing File resource.
   * @returns {string} A string representing the file.
   */
  matchFileFromFileName(fileName: string) {
    return this.pathTemplates.filePathTemplate.match(fileName).file;
  }

  /**
   * Return a fully-qualified projectSettings resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectSettingsPath(project: string) {
    return this.pathTemplates.projectSettingsPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from ProjectSettings resource.
   *
   * @param {string} projectSettingsName
   *   A fully-qualified path representing ProjectSettings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSettingsName(projectSettingsName: string) {
    return this.pathTemplates.projectSettingsPathTemplate.match(
      projectSettingsName
    ).project;
  }

  /**
   * Return a fully-qualified repository resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @returns {string} Resource name string.
   */
  repositoryPath(project: string, location: string, repository: string) {
    return this.pathTemplates.repositoryPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
    });
  }

  /**
   * Parse the project from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .project;
  }

  /**
   * Parse the location from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .location;
  }

  /**
   * Parse the repository from Repository resource.
   *
   * @param {string} repositoryName
   *   A fully-qualified path representing Repository resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromRepositoryName(repositoryName: string) {
    return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
      .repository;
  }

  /**
   * Return a fully-qualified tag resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} packageParam
   * @param {string} tag
   * @returns {string} Resource name string.
   */
  tagPath(
    project: string,
    location: string,
    repository: string,
    packageParam: string,
    tag: string
  ) {
    return this.pathTemplates.tagPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      package: packageParam,
      tag: tag,
    });
  }

  /**
   * Parse the project from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).project;
  }

  /**
   * Parse the location from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).location;
  }

  /**
   * Parse the repository from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).repository;
  }

  /**
   * Parse the package from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the package.
   */
  matchPackageFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).package;
  }

  /**
   * Parse the tag from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the tag.
   */
  matchTagFromTagName(tagName: string) {
    return this.pathTemplates.tagPathTemplate.match(tagName).tag;
  }

  /**
   * Return a fully-qualified version resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} packageParam
   * @param {string} version
   * @returns {string} Resource name string.
   */
  versionPath(
    project: string,
    location: string,
    repository: string,
    packageParam: string,
    version: string
  ) {
    return this.pathTemplates.versionPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      package: packageParam,
      version: version,
    });
  }

  /**
   * Parse the project from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).project;
  }

  /**
   * Parse the location from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).location;
  }

  /**
   * Parse the repository from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).repository;
  }

  /**
   * Parse the package from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the package.
   */
  matchPackageFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).package;
  }

  /**
   * Parse the version from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).version;
  }

  /**
   * Return a fully-qualified yumArtifact resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} repository
   * @param {string} yum_artifact
   * @returns {string} Resource name string.
   */
  yumArtifactPath(
    project: string,
    location: string,
    repository: string,
    yumArtifact: string
  ) {
    return this.pathTemplates.yumArtifactPathTemplate.render({
      project: project,
      location: location,
      repository: repository,
      yum_artifact: yumArtifact,
    });
  }

  /**
   * Parse the project from YumArtifact resource.
   *
   * @param {string} yumArtifactName
   *   A fully-qualified path representing YumArtifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromYumArtifactName(yumArtifactName: string) {
    return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
      .project;
  }

  /**
   * Parse the location from YumArtifact resource.
   *
   * @param {string} yumArtifactName
   *   A fully-qualified path representing YumArtifact resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromYumArtifactName(yumArtifactName: string) {
    return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
      .location;
  }

  /**
   * Parse the repository from YumArtifact resource.
   *
   * @param {string} yumArtifactName
   *   A fully-qualified path representing YumArtifact resource.
   * @returns {string} A string representing the repository.
   */
  matchRepositoryFromYumArtifactName(yumArtifactName: string) {
    return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
      .repository;
  }

  /**
   * Parse the yum_artifact from YumArtifact resource.
   *
   * @param {string} yumArtifactName
   *   A fully-qualified path representing YumArtifact resource.
   * @returns {string} A string representing the yum_artifact.
   */
  matchYumArtifactFromYumArtifactName(yumArtifactName: string) {
    return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
      .yum_artifact;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.artifactRegistryStub && !this._terminated) {
      return this.artifactRegistryStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
